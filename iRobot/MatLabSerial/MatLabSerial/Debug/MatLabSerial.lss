
MatLabSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00001f6c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008001ca  008001ca  000020ca  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa2  00000000  00000000  00005318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005dba  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002e8  00000000  00000000  00005de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003608  00000000  00000000  000060d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fb4  00000000  00000000  000096d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f32  00000000  00000000  0000a68d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007ac  00000000  00000000  0000c5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c2d  00000000  00000000  0000cd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000023a5  00000000  00000000  0000d999  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000270  00000000  00000000  0000fd3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	b7 c4       	rjmp	.+2414   	; 0x994 <__vector_9>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c4       	rjmp	.+2476   	; 0x9da <__vector_11>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c0       	rjmp	.+396    	; 0x1ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__c.2006>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.2004>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	ec e6       	ldi	r30, 0x6C	; 108
     1a2:	ff e1       	ldi	r31, 0x1F	; 31
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	aa 3c       	cpi	r26, 0xCA	; 202
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	22 e0       	ldi	r18, 0x02	; 2
     1b6:	aa ec       	ldi	r26, 0xCA	; 202
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a5 32       	cpi	r26, 0x25	; 37
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	f1 d0       	rcall	.+482    	; 0x3a8 <main>
     1c6:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     1cc:	de 9a       	sbi	0x1b, 6	; 27
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	cb d3       	rcall	.+1942   	; 0x968 <wait_ms>
     1d2:	de 98       	cbi	0x1b, 6	; 27
     1d4:	8b b3       	in	r24, 0x1b	; 27
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	8b bb       	out	0x1b, r24	; 27
     1da:	08 95       	ret

000001dc <lcd_command>:
     1dc:	cf 93       	push	r28
     1de:	c8 2f       	mov	r28, r24
     1e0:	dc 98       	cbi	0x1b, 4	; 27
     1e2:	8b b3       	in	r24, 0x1b	; 27
     1e4:	9c 2f       	mov	r25, r28
     1e6:	92 95       	swap	r25
     1e8:	9f 70       	andi	r25, 0x0F	; 15
     1ea:	89 2b       	or	r24, r25
     1ec:	8b bb       	out	0x1b, r24	; 27
     1ee:	82 e0       	ldi	r24, 0x02	; 2
     1f0:	ed df       	rcall	.-38     	; 0x1cc <lcd_toggle_clear>
     1f2:	8b b3       	in	r24, 0x1b	; 27
     1f4:	cf 70       	andi	r28, 0x0F	; 15
     1f6:	c8 2b       	or	r28, r24
     1f8:	cb bb       	out	0x1b, r28	; 27
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	e7 df       	rcall	.-50     	; 0x1cc <lcd_toggle_clear>
     1fe:	dc 9a       	sbi	0x1b, 4	; 27
     200:	cf 91       	pop	r28
     202:	08 95       	ret

00000204 <lcd_clear>:
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	ea df       	rcall	.-44     	; 0x1dc <lcd_command>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	ad c3       	rjmp	.+1882   	; 0x968 <wait_ms>

0000020e <lcd_home_line1>:
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	e5 cf       	rjmp	.-54     	; 0x1dc <lcd_command>

00000212 <lcd_init>:
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	8a bb       	out	0x1a, r24	; 26
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	8b bb       	out	0x1b, r24	; 27
     21a:	de 9a       	sbi	0x1b, 6	; 27
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	a3 d3       	rcall	.+1862   	; 0x968 <wait_ms>
     222:	de 98       	cbi	0x1b, 6	; 27
     224:	85 e0       	ldi	r24, 0x05	; 5
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	9f d3       	rcall	.+1854   	; 0x968 <wait_ms>
     22a:	de 9a       	sbi	0x1b, 6	; 27
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	9b d3       	rcall	.+1846   	; 0x968 <wait_ms>
     232:	de 98       	cbi	0x1b, 6	; 27
     234:	de 9a       	sbi	0x1b, 6	; 27
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	96 d3       	rcall	.+1836   	; 0x968 <wait_ms>
     23c:	de 98       	cbi	0x1b, 6	; 27
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	8b bb       	out	0x1b, r24	; 27
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	c3 df       	rcall	.-122    	; 0x1cc <lcd_toggle_clear>
     246:	8b b3       	in	r24, 0x1b	; 27
     248:	8b bb       	out	0x1b, r24	; 27
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	bf df       	rcall	.-130    	; 0x1cc <lcd_toggle_clear>
     24e:	8b b3       	in	r24, 0x1b	; 27
     250:	8e 60       	ori	r24, 0x0E	; 14
     252:	8b bb       	out	0x1b, r24	; 27
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	ba df       	rcall	.-140    	; 0x1cc <lcd_toggle_clear>
     258:	8b b3       	in	r24, 0x1b	; 27
     25a:	8b bb       	out	0x1b, r24	; 27
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	b6 df       	rcall	.-148    	; 0x1cc <lcd_toggle_clear>
     260:	8b b3       	in	r24, 0x1b	; 27
     262:	86 60       	ori	r24, 0x06	; 6
     264:	8b bb       	out	0x1b, r24	; 27
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	b1 df       	rcall	.-158    	; 0x1cc <lcd_toggle_clear>
     26a:	8b b3       	in	r24, 0x1b	; 27
     26c:	8b bb       	out	0x1b, r24	; 27
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	ad df       	rcall	.-166    	; 0x1cc <lcd_toggle_clear>
     272:	d8 9a       	sbi	0x1b, 0	; 27
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	aa df       	rcall	.-172    	; 0x1cc <lcd_toggle_clear>
     278:	dc 9a       	sbi	0x1b, 4	; 27
     27a:	c9 cf       	rjmp	.-110    	; 0x20e <lcd_home_line1>

0000027c <lcd_home_line2>:
     27c:	80 ec       	ldi	r24, 0xC0	; 192
     27e:	ae cf       	rjmp	.-164    	; 0x1dc <lcd_command>

00000280 <lcd_home_line3>:
     280:	84 e9       	ldi	r24, 0x94	; 148
     282:	ac cf       	rjmp	.-168    	; 0x1dc <lcd_command>

00000284 <lcd_home_line4>:
     284:	84 ed       	ldi	r24, 0xD4	; 212
     286:	aa cf       	rjmp	.-172    	; 0x1dc <lcd_command>

00000288 <lcd_putc>:
     288:	cf 93       	push	r28
     28a:	c8 2f       	mov	r28, r24
     28c:	8b b3       	in	r24, 0x1b	; 27
     28e:	9c 2f       	mov	r25, r28
     290:	92 95       	swap	r25
     292:	9f 70       	andi	r25, 0x0F	; 15
     294:	89 2b       	or	r24, r25
     296:	8b bb       	out	0x1b, r24	; 27
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	98 df       	rcall	.-208    	; 0x1cc <lcd_toggle_clear>
     29c:	8b b3       	in	r24, 0x1b	; 27
     29e:	cf 70       	andi	r28, 0x0F	; 15
     2a0:	c8 2b       	or	r28, r24
     2a2:	cb bb       	out	0x1b, r28	; 27
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	92 df       	rcall	.-220    	; 0x1cc <lcd_toggle_clear>
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	c1 55       	subi	r28, 0x51	; 81
     2c2:	d1 09       	sbc	r29, r1
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	fe 01       	movw	r30, r28
     2d0:	e4 5a       	subi	r30, 0xA4	; 164
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	41 91       	ld	r20, Z+
     2d6:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     2d8:	2e 2f       	mov	r18, r30
     2da:	3f 2f       	mov	r19, r31
     2dc:	61 e5       	ldi	r22, 0x51	; 81
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	ce 01       	movw	r24, r28
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     2e8:	be 01       	movw	r22, r28
     2ea:	6f 5f       	subi	r22, 0xFF	; 255
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	8a ec       	ldi	r24, 0xCA	; 202
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <strcmp>
     2f6:	28 2f       	mov	r18, r24
     2f8:	39 2f       	mov	r19, r25
     2fa:	23 2b       	or	r18, r19
     2fc:	09 f4       	brne	.+2      	; 0x300 <lprintf+0x54>
     2fe:	44 c0       	rjmp	.+136    	; 0x388 <lprintf+0xdc>
		return;
	
	strcpy(lastbuffer, buffer);
     300:	be 01       	movw	r22, r28
     302:	6f 5f       	subi	r22, 0xFF	; 255
     304:	7f 4f       	sbci	r23, 0xFF	; 255
     306:	8a ec       	ldi	r24, 0xCA	; 202
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <strcpy>
	lcd_clear();
     30e:	7a df       	rcall	.-268    	; 0x204 <lcd_clear>
     310:	cc 24       	eor	r12, r12
     312:	c3 94       	inc	r12
     314:	d1 2c       	mov	r13, r1
     316:	cc 0e       	add	r12, r28
     318:	dd 1e       	adc	r13, r29
	char *str = buffer;
	int charnum = 0;
     31a:	00 e0       	ldi	r16, 0x00	; 0
     31c:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     31e:	0f 2e       	mov	r0, r31
     320:	f4 e1       	ldi	r31, 0x14	; 20
     322:	ef 2e       	mov	r14, r31
     324:	f1 2c       	mov	r15, r1
     326:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     328:	27 c0       	rjmp	.+78     	; 0x378 <lprintf+0xcc>
		if (*str == '\n') {
     32a:	8a 30       	cpi	r24, 0x0A	; 10
     32c:	51 f4       	brne	.+20     	; 0x342 <lprintf+0x96>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     32e:	c8 01       	movw	r24, r16
     330:	b7 01       	movw	r22, r14
     332:	0e 94 36 0c 	call	0x186c	; 0x186c <__divmodhi4>
     336:	97 01       	movw	r18, r14
     338:	28 1b       	sub	r18, r24
     33a:	39 0b       	sbc	r19, r25
     33c:	02 0f       	add	r16, r18
     33e:	13 1f       	adc	r17, r19
     340:	03 c0       	rjmp	.+6      	; 0x348 <lprintf+0x9c>
		} else {
			lcd_putc(*str);
     342:	a2 df       	rcall	.-188    	; 0x288 <lcd_putc>
			charnum++;
     344:	0f 5f       	subi	r16, 0xFF	; 255
     346:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     348:	c8 01       	movw	r24, r16
     34a:	b7 01       	movw	r22, r14
     34c:	0e 94 36 0c 	call	0x186c	; 0x186c <__divmodhi4>
     350:	89 2b       	or	r24, r25
     352:	91 f4       	brne	.+36     	; 0x378 <lprintf+0xcc>
			switch (charnum / LCD_WIDTH) {
     354:	c8 01       	movw	r24, r16
     356:	b7 01       	movw	r22, r14
     358:	0e 94 36 0c 	call	0x186c	; 0x186c <__divmodhi4>
     35c:	62 30       	cpi	r22, 0x02	; 2
     35e:	71 05       	cpc	r23, r1
     360:	41 f0       	breq	.+16     	; 0x372 <lprintf+0xc6>
     362:	63 30       	cpi	r22, 0x03	; 3
     364:	71 05       	cpc	r23, r1
     366:	39 f0       	breq	.+14     	; 0x376 <lprintf+0xca>
     368:	61 30       	cpi	r22, 0x01	; 1
     36a:	71 05       	cpc	r23, r1
     36c:	29 f4       	brne	.+10     	; 0x378 <lprintf+0xcc>
			case 1:
				lcd_home_line2();
     36e:	86 df       	rcall	.-244    	; 0x27c <lcd_home_line2>
				break;
     370:	03 c0       	rjmp	.+6      	; 0x378 <lprintf+0xcc>
			case 2:
				lcd_home_line3();
     372:	86 df       	rcall	.-244    	; 0x280 <lcd_home_line3>
				break;
     374:	01 c0       	rjmp	.+2      	; 0x378 <lprintf+0xcc>
			case 3:
				lcd_home_line4();
     376:	86 df       	rcall	.-244    	; 0x284 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     378:	f6 01       	movw	r30, r12
     37a:	81 91       	ld	r24, Z+
     37c:	6f 01       	movw	r12, r30
     37e:	88 23       	and	r24, r24
     380:	19 f0       	breq	.+6      	; 0x388 <lprintf+0xdc>
     382:	00 35       	cpi	r16, 0x50	; 80
     384:	11 05       	cpc	r17, r1
     386:	8c f2       	brlt	.-94     	; 0x32a <lprintf+0x7e>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     388:	cf 5a       	subi	r28, 0xAF	; 175
     38a:	df 4f       	sbci	r29, 0xFF	; 255
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <main>:
	float distance;
	float width;
}object_t;

int main(void)
{
     3a8:	2f 92       	push	r2
     3aa:	3f 92       	push	r3
     3ac:	4f 92       	push	r4
     3ae:	5f 92       	push	r5
     3b0:	6f 92       	push	r6
     3b2:	7f 92       	push	r7
     3b4:	8f 92       	push	r8
     3b6:	9f 92       	push	r9
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	c8 56       	subi	r28, 0x68	; 104
     3d2:	d1 09       	sbc	r29, r1
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
	
	serial_init(); // Initialize the Serial Communications
     3de:	59 d2       	rcall	.+1202   	; 0x892 <serial_init>
	
	ADC_init(); // Initialize the IR sensor
     3e0:	7e d2       	rcall	.+1276   	; 0x8de <ADC_init>
	
	ping_init(); // Initialize the Ping))) sensor
     3e2:	f6 d2       	rcall	.+1516   	; 0x9d0 <ping_init>
	
	lcd_init(); // Initialize the LCD
     3e4:	16 df       	rcall	.-468    	; 0x212 <lcd_init>
	
	init_push_buttons(); // Initialize the buttons
     3e6:	ed d2       	rcall	.+1498   	; 0x9c2 <init_push_buttons>
	
	timer3_init(); // Initialize the servo motor
     3e8:	72 d3       	rcall	.+1764   	; 0xace <timer3_init>
	
	oi_t *sensor_data = oi_alloc();
     3ea:	3c d1       	rcall	.+632    	; 0x664 <oi_alloc>
     3ec:	a8 96       	adiw	r28, 0x28	; 40
     3ee:	9f af       	std	Y+63, r25	; 0x3f
     3f0:	8e af       	std	Y+62, r24	; 0x3e
     3f2:	a8 97       	sbiw	r28, 0x28	; 40
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
     3f4:	22 d2       	rcall	.+1092   	; 0x83a <oi_init>
	float PingDistance = 0;
	unsigned int raw = 0;
	int i = 0;
	char serialInput = 0;
	
	servo_turn(degrees);
     3f6:	80 e5       	ldi	r24, 0x50	; 80
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	4a d3       	rcall	.+1684   	; 0xa90 <servo_turn>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     3fc:	0f 2e       	mov	r0, r31
     3fe:	f0 e5       	ldi	r31, 0x50	; 80
     400:	cf 2e       	mov	r12, r31
     402:	d1 2c       	mov	r13, r1
     404:	f0 2d       	mov	r31, r0
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     406:	0f 2e       	mov	r0, r31
     408:	f0 e1       	ldi	r31, 0x10	; 16
     40a:	2f 2e       	mov	r2, r31
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	3f 2e       	mov	r3, r31
     410:	f0 2d       	mov	r31, r0
     412:	44 24       	eor	r4, r4
     414:	43 94       	inc	r4
     416:	51 2c       	mov	r5, r1
     418:	4c 0e       	add	r4, r28
     41a:	5d 1e       	adc	r5, r29
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     41c:	0f 2e       	mov	r0, r31
     41e:	f3 e0       	ldi	r31, 0x03	; 3
     420:	6f 2e       	mov	r6, r31
     422:	71 2c       	mov	r7, r1
     424:	f0 2d       	mov	r31, r0
     426:	91 2c       	mov	r9, r1
     428:	a1 2c       	mov	r10, r1
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     42a:	b4 2c       	mov	r11, r4
     42c:	a9 96       	adiw	r28, 0x29	; 41
     42e:	5f ae       	std	Y+63, r5	; 0x3f
     430:	a9 97       	sbiw	r28, 0x29	; 41
	
	//USART_SendString(OutputString);
	while(1)
	{
		
		serialInput = USART_Receive();
     432:	3f d2       	rcall	.+1150   	; 0x8b2 <USART_Receive>
     434:	a6 96       	adiw	r28, 0x26	; 38
     436:	8f af       	std	Y+63, r24	; 0x3f
     438:	a6 97       	sbiw	r28, 0x26	; 38
	
		//Big Scan
		if(serialInput == 'S')
     43a:	83 35       	cpi	r24, 0x53	; 83
     43c:	09 f0       	breq	.+2      	; 0x440 <main+0x98>
     43e:	4e c0       	rjmp	.+156    	; 0x4dc <main+0x134>
		{
			lprintf("Big Scan\n");
     440:	86 e0       	ldi	r24, 0x06	; 6
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	9f 93       	push	r25
     446:	8f 93       	push	r24
     448:	31 df       	rcall	.-414    	; 0x2ac <lprintf>
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	a9 96       	adiw	r28, 0x29	; 41
     450:	8f ac       	ldd	r8, Y+63	; 0x3f
     452:	a9 97       	sbiw	r28, 0x29	; 41
     454:	39 c0       	rjmp	.+114    	; 0x4c8 <main+0x120>
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	4a d2       	rcall	.+1172   	; 0x8ee <ADC_read>
     45a:	08 0f       	add	r16, r24
     45c:	19 1f       	adc	r17, r25
					wait_ms(20);
     45e:	84 e1       	ldi	r24, 0x14	; 20
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	82 d2       	rcall	.+1284   	; 0x968 <wait_ms>
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	e8 1a       	sub	r14, r24
     468:	f1 08       	sbc	r15, r1
			lprintf("Big Scan\n");
			while(degrees <= 180) {
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     46a:	a9 f7       	brne	.-22     	; 0x456 <main+0xae>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     46c:	98 01       	movw	r18, r16
     46e:	ab ea       	ldi	r26, 0xAB	; 171
     470:	ba ea       	ldi	r27, 0xAA	; 170
     472:	0e 94 49 0c 	call	0x1892	; 0x1892 <__umulhisi3>
     476:	96 95       	lsr	r25
     478:	87 95       	ror	r24
     47a:	45 d2       	rcall	.+1162   	; 0x906 <calcCm>
     47c:	16 2f       	mov	r17, r22
     47e:	07 2f       	mov	r16, r23
     480:	f8 2e       	mov	r15, r24
     482:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     484:	e6 d2       	rcall	.+1484   	; 0xa52 <ping_read>
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	7f 93       	push	r23
     48c:	6f 93       	push	r22
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	df 92       	push	r13
     498:	cf 92       	push	r12
     49a:	3f 92       	push	r3
     49c:	2f 92       	push	r2
     49e:	5f 92       	push	r5
     4a0:	4f 92       	push	r4
     4a2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
		
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
		
				USART_SendString(OutputString);
     4a6:	8b 2d       	mov	r24, r11
     4a8:	98 2d       	mov	r25, r8
     4aa:	09 d2       	rcall	.+1042   	; 0x8be <USART_SendString>
		
				degrees += 2;
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	c9 0e       	add	r12, r25
     4b0:	d1 1c       	adc	r13, r1
		
				servo_turn(degrees);
     4b2:	c6 01       	movw	r24, r12
     4b4:	ed d2       	rcall	.+1498   	; 0xa90 <servo_turn>
	
		//Big Scan
		if(serialInput == 'S')
		{
			lprintf("Big Scan\n");
			while(degrees <= 180) {
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	95 eb       	ldi	r25, 0xB5	; 181
     4c2:	c9 16       	cp	r12, r25
     4c4:	d1 04       	cpc	r13, r1
     4c6:	24 f4       	brge	.+8      	; 0x4d0 <main+0x128>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     4c8:	73 01       	movw	r14, r6
     4ca:	09 2d       	mov	r16, r9
     4cc:	1a 2d       	mov	r17, r10
     4ce:	c3 cf       	rjmp	.-122    	; 0x456 <main+0xae>
		
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     4d0:	8a e5       	ldi	r24, 0x5A	; 90
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	dd d2       	rcall	.+1466   	; 0xa90 <servo_turn>
				degrees += 2;
		
				servo_turn(degrees);

			}
			degrees = 0;
     4d6:	c1 2c       	mov	r12, r1
     4d8:	d1 2c       	mov	r13, r1
     4da:	70 c0       	rjmp	.+224    	; 0x5bc <main+0x214>
			servo_turn(90);
		}
		
		//Small Scan
		if(serialInput == 's')
     4dc:	a6 96       	adiw	r28, 0x26	; 38
     4de:	2f ad       	ldd	r18, Y+63	; 0x3f
     4e0:	a6 97       	sbiw	r28, 0x26	; 38
     4e2:	23 37       	cpi	r18, 0x73	; 115
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <main+0x140>
     4e6:	56 c0       	rjmp	.+172    	; 0x594 <main+0x1ec>
		{
			lprintf("Small Scan\n");
     4e8:	8d e1       	ldi	r24, 0x1D	; 29
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	9f 93       	push	r25
     4ee:	8f 93       	push	r24
     4f0:	dd de       	rcall	.-582    	; 0x2ac <lprintf>
			degrees = 45;
			servo_turn(degrees);
     4f2:	8d e2       	ldi	r24, 0x2D	; 45
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	cc d2       	rcall	.+1432   	; 0xa90 <servo_turn>
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
		
		//Small Scan
		if(serialInput == 's')
		{
			lprintf("Small Scan\n");
			degrees = 45;
     4fc:	0f 2e       	mov	r0, r31
     4fe:	fd e2       	ldi	r31, 0x2D	; 45
     500:	cf 2e       	mov	r12, r31
     502:	d1 2c       	mov	r13, r1
     504:	f0 2d       	mov	r31, r0
     506:	a9 96       	adiw	r28, 0x29	; 41
     508:	8f ac       	ldd	r8, Y+63	; 0x3f
     50a:	a9 97       	sbiw	r28, 0x29	; 41
     50c:	39 c0       	rjmp	.+114    	; 0x580 <main+0x1d8>
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	ee d1       	rcall	.+988    	; 0x8ee <ADC_read>
     512:	08 0f       	add	r16, r24
     514:	19 1f       	adc	r17, r25
					wait_ms(20);
     516:	84 e1       	ldi	r24, 0x14	; 20
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	26 d2       	rcall	.+1100   	; 0x968 <wait_ms>
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	e8 1a       	sub	r14, r24
     520:	f1 08       	sbc	r15, r1
			servo_turn(degrees);
			while(degrees <= 135) {
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     522:	a9 f7       	brne	.-22     	; 0x50e <main+0x166>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     524:	98 01       	movw	r18, r16
     526:	ab ea       	ldi	r26, 0xAB	; 171
     528:	ba ea       	ldi	r27, 0xAA	; 170
     52a:	0e 94 49 0c 	call	0x1892	; 0x1892 <__umulhisi3>
     52e:	96 95       	lsr	r25
     530:	87 95       	ror	r24
     532:	e9 d1       	rcall	.+978    	; 0x906 <calcCm>
     534:	16 2f       	mov	r17, r22
     536:	07 2f       	mov	r16, r23
     538:	f8 2e       	mov	r15, r24
     53a:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     53c:	8a d2       	rcall	.+1300   	; 0xa52 <ping_read>
				
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	7f 93       	push	r23
     544:	6f 93       	push	r22
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	df 92       	push	r13
     550:	cf 92       	push	r12
     552:	3f 92       	push	r3
     554:	2f 92       	push	r2
     556:	5f 92       	push	r5
     558:	4f 92       	push	r4
     55a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
				
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
				
				USART_SendString(OutputString);
     55e:	8b 2d       	mov	r24, r11
     560:	98 2d       	mov	r25, r8
     562:	ad d1       	rcall	.+858    	; 0x8be <USART_SendString>
				
				degrees += 2;
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	c9 0e       	add	r12, r25
     568:	d1 1c       	adc	r13, r1
				
				servo_turn(degrees);
     56a:	c6 01       	movw	r24, r12
     56c:	91 d2       	rcall	.+1314   	; 0xa90 <servo_turn>
		if(serialInput == 's')
		{
			lprintf("Small Scan\n");
			degrees = 45;
			servo_turn(degrees);
			while(degrees <= 135) {
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	99 e8       	ldi	r25, 0x89	; 137
     57a:	c9 16       	cp	r12, r25
     57c:	d1 04       	cpc	r13, r1
     57e:	21 f0       	breq	.+8      	; 0x588 <main+0x1e0>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     580:	73 01       	movw	r14, r6
     582:	09 2d       	mov	r16, r9
     584:	1a 2d       	mov	r17, r10
     586:	c3 cf       	rjmp	.-122    	; 0x50e <main+0x166>
				
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     588:	8a e5       	ldi	r24, 0x5A	; 90
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	81 d2       	rcall	.+1282   	; 0xa90 <servo_turn>
				degrees += 2;
				
				servo_turn(degrees);

			}
			degrees = 0;
     58e:	c1 2c       	mov	r12, r1
     590:	d1 2c       	mov	r13, r1
     592:	28 c0       	rjmp	.+80     	; 0x5e4 <main+0x23c>
			servo_turn(90);
		}
		
		if(serialInput == 'f')
     594:	a6 96       	adiw	r28, 0x26	; 38
     596:	2f ad       	ldd	r18, Y+63	; 0x3f
     598:	a6 97       	sbiw	r28, 0x26	; 38
     59a:	26 36       	cpi	r18, 0x66	; 102
     59c:	79 f4       	brne	.+30     	; 0x5bc <main+0x214>
		{
			lprintf("Moving Forward\n");
     59e:	89 e2       	ldi	r24, 0x29	; 41
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	82 de       	rcall	.-764    	; 0x2ac <lprintf>
			move_forward(sensor_data, 20);
     5a8:	64 e1       	ldi	r22, 0x14	; 20
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	a8 96       	adiw	r28, 0x28	; 40
     5ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     5b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     5b2:	a8 97       	sbiw	r28, 0x28	; 40
     5b4:	2a d3       	rcall	.+1620   	; 0xc0a <move_forward>
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	28 c0       	rjmp	.+80     	; 0x60c <main+0x264>
		}
		
		if(serialInput == 'r')
     5bc:	a6 96       	adiw	r28, 0x26	; 38
     5be:	8f ad       	ldd	r24, Y+63	; 0x3f
     5c0:	a6 97       	sbiw	r28, 0x26	; 38
     5c2:	82 37       	cpi	r24, 0x72	; 114
     5c4:	79 f4       	brne	.+30     	; 0x5e4 <main+0x23c>
		{
			lprintf("Rotating Right\n");
     5c6:	89 e3       	ldi	r24, 0x39	; 57
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	6e de       	rcall	.-804    	; 0x2ac <lprintf>
			turn_clockwise(sensor_data, 45);
     5d0:	6d e2       	ldi	r22, 0x2D	; 45
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	a8 96       	adiw	r28, 0x28	; 40
     5d6:	8e ad       	ldd	r24, Y+62	; 0x3e
     5d8:	9f ad       	ldd	r25, Y+63	; 0x3f
     5da:	a8 97       	sbiw	r28, 0x28	; 40
     5dc:	c0 d2       	rcall	.+1408   	; 0xb5e <turn_clockwise>
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	27 cf       	rjmp	.-434    	; 0x432 <main+0x8a>
		}
		
		if(serialInput == 'l')
     5e4:	a6 96       	adiw	r28, 0x26	; 38
     5e6:	8f ad       	ldd	r24, Y+63	; 0x3f
     5e8:	a6 97       	sbiw	r28, 0x26	; 38
     5ea:	8c 36       	cpi	r24, 0x6C	; 108
     5ec:	79 f4       	brne	.+30     	; 0x60c <main+0x264>
		{
			lprintf("Rotating Left\n");
     5ee:	89 e4       	ldi	r24, 0x49	; 73
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	9f 93       	push	r25
     5f4:	8f 93       	push	r24
     5f6:	5a de       	rcall	.-844    	; 0x2ac <lprintf>
			turn_counterclockwise(sensor_data, 45);
     5f8:	6d e2       	ldi	r22, 0x2D	; 45
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	a8 96       	adiw	r28, 0x28	; 40
     5fe:	8e ad       	ldd	r24, Y+62	; 0x3e
     600:	9f ad       	ldd	r25, Y+63	; 0x3f
     602:	a8 97       	sbiw	r28, 0x28	; 40
     604:	d7 d2       	rcall	.+1454   	; 0xbb4 <turn_counterclockwise>
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	13 cf       	rjmp	.-474    	; 0x432 <main+0x8a>
		}
		// USART_SendString("Small Scan Complete");
		
		if(serialInput == 'Q')
     60c:	a6 96       	adiw	r28, 0x26	; 38
     60e:	8f ad       	ldd	r24, Y+63	; 0x3f
     610:	a6 97       	sbiw	r28, 0x26	; 38
     612:	81 35       	cpi	r24, 0x51	; 81
     614:	09 f0       	breq	.+2      	; 0x618 <main+0x270>
     616:	0d cf       	rjmp	.-486    	; 0x432 <main+0x8a>
		{
			lprintf("Quitting...\n");
     618:	88 e5       	ldi	r24, 0x58	; 88
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	45 de       	rcall	.-886    	; 0x2ac <lprintf>
			oi_free(sensor_data);
     622:	a8 96       	adiw	r28, 0x28	; 40
     624:	8e ad       	ldd	r24, Y+62	; 0x3e
     626:	9f ad       	ldd	r25, Y+63	; 0x3f
     628:	a8 97       	sbiw	r28, 0x28	; 40
     62a:	22 d0       	rcall	.+68     	; 0x670 <oi_free>
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
			return;
		}
	}
     630:	c8 59       	subi	r28, 0x98	; 152
     632:	df 4f       	sbci	r29, 0xFF	; 255
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	bf 90       	pop	r11
     650:	af 90       	pop	r10
     652:	9f 90       	pop	r9
     654:	8f 90       	pop	r8
     656:	7f 90       	pop	r7
     658:	6f 90       	pop	r6
     65a:	5f 90       	pop	r5
     65c:	4f 90       	pop	r4
     65e:	3f 90       	pop	r3
     660:	2f 90       	pop	r2
     662:	08 95       	ret

00000664 <oi_alloc>:
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
     664:	64 e3       	ldi	r22, 0x34	; 52
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <calloc>

00000670 <oi_free>:
     670:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <free>
     674:	08 95       	ret

00000676 <oi_byte_tx>:
     676:	eb e9       	ldi	r30, 0x9B	; 155
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	90 81       	ld	r25, Z
     67c:	95 ff       	sbrs	r25, 5
     67e:	fd cf       	rjmp	.-6      	; 0x67a <oi_byte_tx+0x4>
     680:	80 93 9c 00 	sts	0x009C, r24
     684:	08 95       	ret

00000686 <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	18 2f       	mov	r17, r24
     690:	09 2f       	mov	r16, r25
     692:	c6 2f       	mov	r28, r22
     694:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
     696:	81 e9       	ldi	r24, 0x91	; 145
     698:	ee df       	rcall	.-36     	; 0x676 <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
     69a:	80 2f       	mov	r24, r16
     69c:	ec df       	rcall	.-40     	; 0x676 <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
     69e:	81 2f       	mov	r24, r17
     6a0:	ea df       	rcall	.-44     	; 0x676 <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
     6a2:	8d 2f       	mov	r24, r29
     6a4:	e8 df       	rcall	.-48     	; 0x676 <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
     6a6:	8c 2f       	mov	r24, r28
     6a8:	e6 df       	rcall	.-52     	; 0x676 <oi_byte_tx>
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	08 95       	ret

000006b4 <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	08 2f       	mov	r16, r24
     6be:	16 2f       	mov	r17, r22
     6c0:	d4 2f       	mov	r29, r20
     6c2:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
     6c4:	8b e8       	ldi	r24, 0x8B	; 139
     6c6:	d7 df       	rcall	.-82     	; 0x676 <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
     6c8:	11 23       	and	r17, r17
     6ca:	41 f0       	breq	.+16     	; 0x6dc <oi_set_leds+0x28>
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	01 11       	cpse	r16, r1
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <oi_set_leds+0x24>
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	cb 01       	movw	r24, r22
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <oi_set_leds+0x2c>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	ca df       	rcall	.-108    	; 0x676 <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
     6e2:	8d 2f       	mov	r24, r29
     6e4:	c8 df       	rcall	.-112    	; 0x676 <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
     6e6:	8c 2f       	mov	r24, r28
     6e8:	c6 df       	rcall	.-116    	; 0x676 <oi_byte_tx>
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     6f4:	eb e9       	ldi	r30, 0x9B	; 155
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	88 23       	and	r24, r24
     6fc:	ec f7       	brge	.-6      	; 0x6f8 <oi_byte_rx+0x4>

	return UDR1;
     6fe:	80 91 9c 00 	lds	r24, 0x009C
}
     702:	08 95       	ret

00000704 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     712:	80 91 9b 00 	lds	r24, 0x009B
     716:	88 23       	and	r24, r24
     718:	44 f4       	brge	.+16     	; 0x72a <oi_update+0x26>
		i = UDR1;
     71a:	ac e9       	ldi	r26, 0x9C	; 156
     71c:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     71e:	eb e9       	ldi	r30, 0x9B	; 155
     720:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     722:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     724:	80 81       	ld	r24, Z
     726:	88 23       	and	r24, r24
     728:	e4 f3       	brlt	.-8      	; 0x722 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     72a:	8e e8       	ldi	r24, 0x8E	; 142
     72c:	a4 df       	rcall	.-184    	; 0x676 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     72e:	86 e0       	ldi	r24, 0x06	; 6
     730:	a2 df       	rcall	.-188    	; 0x676 <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     732:	87 01       	movw	r16, r14
     734:	0c 5c       	subi	r16, 0xCC	; 204
     736:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
     738:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     73a:	dc df       	rcall	.-72     	; 0x6f4 <oi_byte_rx>
     73c:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     73e:	c0 17       	cp	r28, r16
     740:	d1 07       	cpc	r29, r17
     742:	d9 f7       	brne	.-10     	; 0x73a <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     744:	f7 01       	movw	r30, r14
     746:	94 85       	ldd	r25, Z+12	; 0x0c
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	25 85       	ldd	r18, Z+13	; 0x0d
     74c:	82 0f       	add	r24, r18
     74e:	91 1d       	adc	r25, r1
     750:	95 87       	std	Z+13, r25	; 0x0d
     752:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     754:	96 85       	ldd	r25, Z+14	; 0x0e
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	27 85       	ldd	r18, Z+15	; 0x0f
     75a:	82 0f       	add	r24, r18
     75c:	91 1d       	adc	r25, r1
     75e:	97 87       	std	Z+15, r25	; 0x0f
     760:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     762:	91 89       	ldd	r25, Z+17	; 0x11
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	22 89       	ldd	r18, Z+18	; 0x12
     768:	82 0f       	add	r24, r18
     76a:	91 1d       	adc	r25, r1
     76c:	92 8b       	std	Z+18, r25	; 0x12
     76e:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     770:	93 89       	ldd	r25, Z+19	; 0x13
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	24 89       	ldd	r18, Z+20	; 0x14
     776:	82 0f       	add	r24, r18
     778:	91 1d       	adc	r25, r1
     77a:	94 8b       	std	Z+20, r25	; 0x14
     77c:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     77e:	96 89       	ldd	r25, Z+22	; 0x16
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	27 89       	ldd	r18, Z+23	; 0x17
     784:	82 0f       	add	r24, r18
     786:	91 1d       	adc	r25, r1
     788:	97 8b       	std	Z+23, r25	; 0x17
     78a:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     78c:	90 8d       	ldd	r25, Z+24	; 0x18
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	21 8d       	ldd	r18, Z+25	; 0x19
     792:	82 0f       	add	r24, r18
     794:	91 1d       	adc	r25, r1
     796:	91 8f       	std	Z+25, r25	; 0x19
     798:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     79a:	92 8d       	ldd	r25, Z+26	; 0x1a
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	23 8d       	ldd	r18, Z+27	; 0x1b
     7a0:	82 0f       	add	r24, r18
     7a2:	91 1d       	adc	r25, r1
     7a4:	93 8f       	std	Z+27, r25	; 0x1b
     7a6:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     7a8:	94 8d       	ldd	r25, Z+28	; 0x1c
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	25 8d       	ldd	r18, Z+29	; 0x1d
     7ae:	82 0f       	add	r24, r18
     7b0:	91 1d       	adc	r25, r1
     7b2:	95 8f       	std	Z+29, r25	; 0x1d
     7b4:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     7b6:	96 8d       	ldd	r25, Z+30	; 0x1e
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	27 8d       	ldd	r18, Z+31	; 0x1f
     7bc:	82 0f       	add	r24, r18
     7be:	91 1d       	adc	r25, r1
     7c0:	97 8f       	std	Z+31, r25	; 0x1f
     7c2:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     7c4:	90 a1       	ldd	r25, Z+32	; 0x20
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	21 a1       	ldd	r18, Z+33	; 0x21
     7ca:	82 0f       	add	r24, r18
     7cc:	91 1d       	adc	r25, r1
     7ce:	91 a3       	std	Z+33, r25	; 0x21
     7d0:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     7d2:	92 a1       	ldd	r25, Z+34	; 0x22
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	23 a1       	ldd	r18, Z+35	; 0x23
     7d8:	82 0f       	add	r24, r18
     7da:	91 1d       	adc	r25, r1
     7dc:	93 a3       	std	Z+35, r25	; 0x23
     7de:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     7e0:	42 a5       	ldd	r20, Z+42	; 0x2a
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	31 a5       	ldd	r19, Z+41	; 0x29
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	24 0f       	add	r18, r20
     7ea:	35 1f       	adc	r19, r21
     7ec:	36 a3       	std	Z+38, r19	; 0x26
     7ee:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     7f0:	90 a9       	ldd	r25, Z+48	; 0x30
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	84 0f       	add	r24, r20
     7f6:	95 1f       	adc	r25, r21
     7f8:	95 a7       	std	Z+45, r25	; 0x2d
     7fa:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     7fc:	92 a9       	ldd	r25, Z+50	; 0x32
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	23 a9       	ldd	r18, Z+51	; 0x33
     802:	82 0f       	add	r24, r18
     804:	91 1d       	adc	r25, r1
     806:	97 a7       	std	Z+47, r25	; 0x2f
     808:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     80a:	94 a9       	ldd	r25, Z+52	; 0x34
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	25 a9       	ldd	r18, Z+53	; 0x35
     810:	82 0f       	add	r24, r18
     812:	91 1d       	adc	r25, r1
     814:	91 ab       	std	Z+49, r25	; 0x31
     816:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     818:	96 a9       	ldd	r25, Z+54	; 0x36
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	27 a9       	ldd	r18, Z+55	; 0x37
     81e:	82 0f       	add	r24, r18
     820:	91 1d       	adc	r25, r1
     822:	93 ab       	std	Z+51, r25	; 0x33
     824:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     826:	83 e2       	ldi	r24, 0x23	; 35
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	9e d0       	rcall	.+316    	; 0x968 <wait_ms>
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	08 95       	ret

0000083a <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     844:	09 e9       	ldi	r16, 0x99	; 153
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	80 e1       	ldi	r24, 0x10	; 16
     84a:	f8 01       	movw	r30, r16
     84c:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     84e:	88 e1       	ldi	r24, 0x18	; 24
     850:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     854:	86 e0       	ldi	r24, 0x06	; 6
     856:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     85a:	80 e8       	ldi	r24, 0x80	; 128
     85c:	0c df       	rcall	.-488    	; 0x676 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     85e:	81 e8       	ldi	r24, 0x81	; 129
     860:	0a df       	rcall	.-492    	; 0x676 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	08 df       	rcall	.-496    	; 0x676 <oi_byte_tx>
	wait_ms(100);
     866:	84 e6       	ldi	r24, 0x64	; 100
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	7e d0       	rcall	.+252    	; 0x968 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     86c:	81 e2       	ldi	r24, 0x21	; 33
     86e:	f8 01       	movw	r30, r16
     870:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     872:	84 e8       	ldi	r24, 0x84	; 132
     874:	00 df       	rcall	.-512    	; 0x676 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     876:	2f ef       	ldi	r18, 0xFF	; 255
     878:	47 e0       	ldi	r20, 0x07	; 7
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	1a df       	rcall	.-460    	; 0x6b4 <oi_set_leds>
	
	oi_update(self);
     880:	ce 01       	movw	r24, r28
     882:	40 df       	rcall	.-384    	; 0x704 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     884:	ce 01       	movw	r24, r28
     886:	3e df       	rcall	.-388    	; 0x704 <oi_update>
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <serial_init>:

	// WAS 51
	baud = (F_CPU/8/baud)-1;
	
	/* Set baud rate */ 
	UBRR0H = (unsigned char) (baud >> 8); 
     892:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char) baud; 
     896:	81 e2       	ldi	r24, 0x21	; 33
     898:	89 b9       	out	0x09, r24	; 9
	
	/* Enable double speed mode */ 
	UCSR0A = 0b00000010; 
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	8b b9       	out	0x0b, r24	; 11
	
	/* Set frame format: 8 data bits, 2 stop bits */ 
	UCSR0C = 0b00001110; 
     89e:	8e e0       	ldi	r24, 0x0E	; 14
     8a0:	80 93 95 00 	sts	0x0095, r24
	
	/* Enable receiver and transmitter */ 
	UCSR0B = 0b00011000;
     8a4:	88 e1       	ldi	r24, 0x18	; 24
     8a6:	8a b9       	out	0x0a, r24	; 10
     8a8:	08 95       	ret

000008aa <USART_Transmit>:
}


void USART_Transmit( char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & 0b00100000) );
     8aa:	5d 9b       	sbis	0x0b, 5	; 11
     8ac:	fe cf       	rjmp	.-4      	; 0x8aa <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     8ae:	8c b9       	out	0x0c, r24	; 12
     8b0:	08 95       	ret

000008b2 <USART_Receive>:

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	//while ( !(UCSR1A & (1<<RXC1)) )
	if((UCSR0A & 0b10000000))
     8b2:	5f 9b       	sbis	0x0b, 7	; 11
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <USART_Receive+0x8>
	{
			return UDR0;
     8b6:	8c b1       	in	r24, 0x0c	; 12
     8b8:	08 95       	ret
	}
	/* Get and return received data from buffer */
	else
	{
		return 0;
     8ba:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     8bc:	08 95       	ret

000008be <USART_SendString>:


void USART_SendString(char SentString[])
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	c8 2f       	mov	r28, r24
     8c4:	d9 2f       	mov	r29, r25
	char flag = 1;
	int i = 0;
	while(flag)
	{
		if(SentString[i])
     8c6:	89 91       	ld	r24, Y+
     8c8:	88 23       	and	r24, r24
     8ca:	11 f0       	breq	.+4      	; 0x8d0 <USART_SendString+0x12>
		{
			USART_Transmit(SentString[i]);
     8cc:	ee df       	rcall	.-36     	; 0x8aa <USART_Transmit>
     8ce:	fb cf       	rjmp	.-10     	; 0x8c6 <USART_SendString+0x8>
		}
		else
		{
			flag = 0;
			USART_Transmit(10);
     8d0:	8a e0       	ldi	r24, 0x0A	; 10
     8d2:	eb df       	rcall	.-42     	; 0x8aa <USART_Transmit>
			USART_Transmit(13);
     8d4:	8d e0       	ldi	r24, 0x0D	; 13
     8d6:	e9 df       	rcall	.-46     	; 0x8aa <USART_Transmit>
		}
		i++;
	}
	
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <ADC_init>:
			return n+1;
		}
	}
	
	return 0;
}
     8de:	37 9a       	sbi	0x06, 7	; 6
     8e0:	86 b1       	in	r24, 0x06	; 6
     8e2:	87 60       	ori	r24, 0x07	; 7
     8e4:	86 b9       	out	0x06, r24	; 6
     8e6:	87 b1       	in	r24, 0x07	; 7
     8e8:	80 6c       	ori	r24, 0xC0	; 192
     8ea:	87 b9       	out	0x07, r24	; 7
     8ec:	08 95       	ret

000008ee <ADC_read>:
     8ee:	97 b1       	in	r25, 0x07	; 7
     8f0:	8f 71       	andi	r24, 0x1F	; 31
     8f2:	98 2b       	or	r25, r24
     8f4:	97 b9       	out	0x07, r25	; 7
     8f6:	36 9a       	sbi	0x06, 6	; 6
     8f8:	36 99       	sbic	0x06, 6	; 6
     8fa:	fe cf       	rjmp	.-4      	; 0x8f8 <ADC_read+0xa>
     8fc:	24 b1       	in	r18, 0x04	; 4
     8fe:	35 b1       	in	r19, 0x05	; 5
     900:	82 2f       	mov	r24, r18
     902:	93 2f       	mov	r25, r19
     904:	08 95       	ret

00000906 <calcCm>:
     906:	bc 01       	movw	r22, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	30 d3       	rcall	.+1632   	; 0xf6e <__floatunsisf>
     90e:	2a e9       	ldi	r18, 0x9A	; 154
     910:	39 e9       	ldi	r19, 0x99	; 153
     912:	49 e7       	ldi	r20, 0x79	; 121
     914:	50 e4       	ldi	r21, 0x40	; 64
     916:	b9 d3       	rcall	.+1906   	; 0x108a <__mulsf3>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 ea       	ldi	r20, 0xA0	; 160
     91e:	50 e4       	ldi	r21, 0x40	; 64
     920:	2e d2       	rcall	.+1116   	; 0xd7e <__addsf3>
     922:	9b 01       	movw	r18, r22
     924:	ac 01       	movw	r20, r24
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 eb       	ldi	r23, 0xB0	; 176
     92a:	83 e3       	ldi	r24, 0x33	; 51
     92c:	97 e4       	ldi	r25, 0x47	; 71
     92e:	8b c2       	rjmp	.+1302   	; 0xe46 <__divsf3>

00000930 <timer2_start>:
     930:	10 92 20 02 	sts	0x0220, r1
     934:	10 92 1f 02 	sts	0x021F, r1
     938:	81 11       	cpse	r24, r1
     93a:	06 c0       	rjmp	.+12     	; 0x948 <timer2_start+0x18>
     93c:	8b e0       	ldi	r24, 0x0B	; 11
     93e:	85 bd       	out	0x25, r24	; 37
     940:	87 b7       	in	r24, 0x37	; 55
     942:	80 68       	ori	r24, 0x80	; 128
     944:	87 bf       	out	0x37, r24	; 55
     946:	07 c0       	rjmp	.+14     	; 0x956 <timer2_start+0x26>
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	29 f4       	brne	.+10     	; 0x956 <timer2_start+0x26>
     94c:	89 e0       	ldi	r24, 0x09	; 9
     94e:	85 bd       	out	0x25, r24	; 37
     950:	87 b7       	in	r24, 0x37	; 55
     952:	80 68       	ori	r24, 0x80	; 128
     954:	87 bf       	out	0x37, r24	; 55
     956:	78 94       	sei
     958:	08 95       	ret

0000095a <timer2_stop>:
     95a:	87 b7       	in	r24, 0x37	; 55
     95c:	8f 77       	andi	r24, 0x7F	; 127
     95e:	87 bf       	out	0x37, r24	; 55
     960:	85 b5       	in	r24, 0x25	; 37
     962:	8f 77       	andi	r24, 0x7F	; 127
     964:	85 bd       	out	0x25, r24	; 37
     966:	08 95       	ret

00000968 <wait_ms>:
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	ec 01       	movw	r28, r24
     96e:	8a ef       	ldi	r24, 0xFA	; 250
     970:	83 bd       	out	0x23, r24	; 35
     972:	10 92 20 02 	sts	0x0220, r1
     976:	10 92 1f 02 	sts	0x021F, r1
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	d9 df       	rcall	.-78     	; 0x930 <timer2_start>
     97e:	20 91 1f 02 	lds	r18, 0x021F
     982:	30 91 20 02 	lds	r19, 0x0220
     986:	2c 17       	cp	r18, r28
     988:	3d 07       	cpc	r19, r29
     98a:	c8 f3       	brcs	.-14     	; 0x97e <wait_ms+0x16>
     98c:	e6 df       	rcall	.-52     	; 0x95a <timer2_stop>
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <__vector_9>:
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	80 91 1f 02 	lds	r24, 0x021F
     9a6:	90 91 20 02 	lds	r25, 0x0220
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	90 93 20 02 	sts	0x0220, r25
     9b0:	80 93 1f 02 	sts	0x021F, r24
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <init_push_buttons>:
     9c2:	84 b3       	in	r24, 0x14	; 20
     9c4:	80 7c       	andi	r24, 0xC0	; 192
     9c6:	84 bb       	out	0x14, r24	; 20
     9c8:	85 b3       	in	r24, 0x15	; 21
     9ca:	8f 63       	ori	r24, 0x3F	; 63
     9cc:	85 bb       	out	0x15, r24	; 21
     9ce:	08 95       	ret

000009d0 <ping_init>:
     9d0:	1f bc       	out	0x2f, r1	; 47
     9d2:	84 ec       	ldi	r24, 0xC4	; 196
     9d4:	8e bd       	out	0x2e, r24	; 46
     9d6:	17 be       	out	0x37, r1	; 55
     9d8:	08 95       	ret

000009da <__vector_11>:
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	8f 93       	push	r24
     9ea:	9f 93       	push	r25
     9ec:	86 b5       	in	r24, 0x26	; 38
     9ee:	97 b5       	in	r25, 0x27	; 39
     9f0:	90 93 1e 02 	sts	0x021E, r25
     9f4:	80 93 1d 02 	sts	0x021D, r24
     9f8:	20 91 1b 02 	lds	r18, 0x021B
     9fc:	30 91 1c 02 	lds	r19, 0x021C
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	23 2b       	or	r18, r19
     a06:	11 f0       	breq	.+4      	; 0xa0c <__vector_11+0x32>
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	90 93 1c 02 	sts	0x021C, r25
     a10:	80 93 1b 02 	sts	0x021B, r24
     a14:	9f 91       	pop	r25
     a16:	8f 91       	pop	r24
     a18:	3f 91       	pop	r19
     a1a:	2f 91       	pop	r18
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti

00000a26 <send_pulse>:
     a26:	8c 9a       	sbi	0x11, 4	; 17
     a28:	94 9a       	sbi	0x12, 4	; 18
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	9c df       	rcall	.-200    	; 0x968 <wait_ms>
     a30:	94 98       	cbi	0x12, 4	; 18
     a32:	8c 98       	cbi	0x11, 4	; 17
     a34:	08 95       	ret

00000a36 <time2dist>:
     a36:	bc 01       	movw	r22, r24
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	98 d2       	rcall	.+1328   	; 0xf6e <__floatunsisf>
     a3e:	22 ef       	ldi	r18, 0xF2	; 242
     a40:	32 ed       	ldi	r19, 0xD2	; 210
     a42:	4d e8       	ldi	r20, 0x8D	; 141
     a44:	5e e3       	ldi	r21, 0x3E	; 62
     a46:	21 d3       	rcall	.+1602   	; 0x108a <__mulsf3>
     a48:	20 e5       	ldi	r18, 0x50	; 80
     a4a:	3d e8       	ldi	r19, 0x8D	; 141
     a4c:	4f ef       	ldi	r20, 0xFF	; 255
     a4e:	51 e4       	ldi	r21, 0x41	; 65
     a50:	95 c1       	rjmp	.+810    	; 0xd7c <__subsf3>

00000a52 <ping_read>:
     a52:	e9 df       	rcall	.-46     	; 0xa26 <send_pulse>
     a54:	80 e2       	ldi	r24, 0x20	; 32
     a56:	87 bf       	out	0x37, r24	; 55
     a58:	80 91 1b 02 	lds	r24, 0x021B
     a5c:	90 91 1c 02 	lds	r25, 0x021C
     a60:	89 2b       	or	r24, r25
     a62:	d1 f7       	brne	.-12     	; 0xa58 <ping_read+0x6>
     a64:	84 e8       	ldi	r24, 0x84	; 132
     a66:	8e bd       	out	0x2e, r24	; 46
     a68:	20 91 1d 02 	lds	r18, 0x021D
     a6c:	30 91 1e 02 	lds	r19, 0x021E
     a70:	80 91 1b 02 	lds	r24, 0x021B
     a74:	90 91 1c 02 	lds	r25, 0x021C
     a78:	89 2b       	or	r24, r25
     a7a:	d1 f3       	breq	.-12     	; 0xa70 <ping_read+0x1e>
     a7c:	84 ec       	ldi	r24, 0xC4	; 196
     a7e:	8e bd       	out	0x2e, r24	; 46
     a80:	80 91 1d 02 	lds	r24, 0x021D
     a84:	90 91 1e 02 	lds	r25, 0x021E
     a88:	17 be       	out	0x37, r1	; 55
     a8a:	82 1b       	sub	r24, r18
     a8c:	93 0b       	sbc	r25, r19
     a8e:	d3 cf       	rjmp	.-90     	; 0xa36 <time2dist>

00000a90 <servo_turn>:
     a90:	bc 01       	movw	r22, r24
     a92:	88 27       	eor	r24, r24
     a94:	77 fd       	sbrc	r23, 7
     a96:	80 95       	com	r24
     a98:	98 2f       	mov	r25, r24
     a9a:	6b d2       	rcall	.+1238   	; 0xf72 <__floatsisf>
     a9c:	2b e3       	ldi	r18, 0x3B	; 59
     a9e:	3a ea       	ldi	r19, 0xAA	; 170
     aa0:	4a e1       	ldi	r20, 0x1A	; 26
     aa2:	5c e3       	ldi	r21, 0x3C	; 60
     aa4:	f2 d2       	rcall	.+1508   	; 0x108a <__mulsf3>
     aa6:	28 e4       	ldi	r18, 0x48	; 72
     aa8:	31 ee       	ldi	r19, 0xE1	; 225
     aaa:	4a ef       	ldi	r20, 0xFA	; 250
     aac:	5e e3       	ldi	r21, 0x3E	; 62
     aae:	67 d1       	rcall	.+718    	; 0xd7e <__addsf3>
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	4a e7       	ldi	r20, 0x7A	; 122
     ab6:	53 e4       	ldi	r21, 0x43	; 67
     ab8:	e8 d2       	rcall	.+1488   	; 0x108a <__mulsf3>
     aba:	2d d2       	rcall	.+1114   	; 0xf16 <__fixunssfsi>
     abc:	61 50       	subi	r22, 0x01	; 1
     abe:	71 09       	sbc	r23, r1
     ac0:	70 93 85 00 	sts	0x0085, r23
     ac4:	60 93 84 00 	sts	0x0084, r22
     ac8:	84 e1       	ldi	r24, 0x14	; 20
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	4d cf       	rjmp	.-358    	; 0x968 <wait_ms>

00000ace <timer3_init>:
     ace:	83 ec       	ldi	r24, 0xC3	; 195
     ad0:	99 e0       	ldi	r25, 0x09	; 9
     ad2:	90 93 87 00 	sts	0x0087, r25
     ad6:	80 93 86 00 	sts	0x0086, r24
     ada:	80 e5       	ldi	r24, 0x50	; 80
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	90 93 85 00 	sts	0x0085, r25
     ae2:	80 93 84 00 	sts	0x0084, r24
     ae6:	83 e2       	ldi	r24, 0x23	; 35
     ae8:	80 93 8b 00 	sts	0x008B, r24
     aec:	8b e1       	ldi	r24, 0x1B	; 27
     aee:	80 93 8a 00 	sts	0x008A, r24
     af2:	14 9a       	sbi	0x02, 4	; 2
     af4:	08 95       	ret

00000af6 <move_backward>:

}


void move_backward(oi_t *sensor, int centimeters)
{
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	8c 01       	movw	r16, r24
     b04:	d6 2f       	mov	r29, r22
     b06:	c7 2f       	mov	r28, r23
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
     b08:	68 e3       	ldi	r22, 0x38	; 56
     b0a:	7f ef       	ldi	r23, 0xFF	; 255
     b0c:	88 e3       	ldi	r24, 0x38	; 56
     b0e:	9f ef       	ldi	r25, 0xFF	; 255
     b10:	ba dd       	rcall	.-1164   	; 0x686 <oi_set_wheels>
	while (sum < centimeters*10) {
     b12:	ed 2e       	mov	r14, r29
     b14:	fc 2e       	mov	r15, r28
     b16:	ee 0c       	add	r14, r14
     b18:	ff 1c       	adc	r15, r15
     b1a:	c7 01       	movw	r24, r14
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	e8 0e       	add	r14, r24
     b26:	f9 1e       	adc	r15, r25
     b28:	1e 14       	cp	r1, r14
     b2a:	1f 04       	cpc	r1, r15
     b2c:	64 f4       	brge	.+24     	; 0xb46 <move_backward+0x50>
}


void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     b2e:	c0 e0       	ldi	r28, 0x00	; 0
     b30:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
		oi_update(sensor);
     b32:	c8 01       	movw	r24, r16
     b34:	e7 dd       	rcall	.-1074   	; 0x704 <oi_update>
		sum -= sensor->distance;
     b36:	f8 01       	movw	r30, r16
     b38:	84 85       	ldd	r24, Z+12	; 0x0c
     b3a:	95 85       	ldd	r25, Z+13	; 0x0d
     b3c:	c8 1b       	sub	r28, r24
     b3e:	d9 0b       	sbc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
     b40:	ce 15       	cp	r28, r14
     b42:	df 05       	cpc	r29, r15
     b44:	b4 f3       	brlt	.-20     	; 0xb32 <move_backward+0x3c>
		oi_update(sensor);
		sum -= sensor->distance;
	}

	oi_set_wheels(0, 0); // stop
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	9b dd       	rcall	.-1226   	; 0x686 <oi_set_wheels>
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	08 95       	ret

00000b5e <turn_clockwise>:

void turn_clockwise(oi_t *sensor, int degrees)
{
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	8c 01       	movw	r16, r24
     b6c:	7b 01       	movw	r14, r22
	int sum = 0;

	oi_set_wheels(-200, 200);
     b6e:	68 ec       	ldi	r22, 0xC8	; 200
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	88 e3       	ldi	r24, 0x38	; 56
     b74:	9f ef       	ldi	r25, 0xFF	; 255
     b76:	87 dd       	rcall	.-1266   	; 0x686 <oi_set_wheels>
	while (sum < degrees-12) {
     b78:	8c e0       	ldi	r24, 0x0C	; 12
     b7a:	e8 1a       	sub	r14, r24
     b7c:	f1 08       	sbc	r15, r1
     b7e:	1e 14       	cp	r1, r14
     b80:	1f 04       	cpc	r1, r15
     b82:	64 f4       	brge	.+24     	; 0xb9c <turn_clockwise+0x3e>
	oi_set_wheels(0, 0); // stop
}

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     b84:	c0 e0       	ldi	r28, 0x00	; 0
     b86:	d0 e0       	ldi	r29, 0x00	; 0

	oi_set_wheels(-200, 200);
	while (sum < degrees-12) {
		oi_update(sensor);
     b88:	c8 01       	movw	r24, r16
     b8a:	bc dd       	rcall	.-1160   	; 0x704 <oi_update>
		sum -= sensor->angle;
     b8c:	f8 01       	movw	r30, r16
     b8e:	86 85       	ldd	r24, Z+14	; 0x0e
     b90:	97 85       	ldd	r25, Z+15	; 0x0f
     b92:	c8 1b       	sub	r28, r24
     b94:	d9 0b       	sbc	r29, r25
void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;

	oi_set_wheels(-200, 200);
	while (sum < degrees-12) {
     b96:	ce 15       	cp	r28, r14
     b98:	df 05       	cpc	r29, r15
     b9a:	b4 f3       	brlt	.-20     	; 0xb88 <turn_clockwise+0x2a>
		oi_update(sensor);
		sum -= sensor->angle;

	}
	oi_set_wheels(0, 0); // stop
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	70 dd       	rcall	.-1312   	; 0x686 <oi_set_wheels>
}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	08 95       	ret

00000bb4 <turn_counterclockwise>:

void turn_counterclockwise(oi_t *sensor, int degrees)
{
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	8c 01       	movw	r16, r24
     bc2:	7b 01       	movw	r14, r22
	int sum = 0;

	oi_set_wheels(200, -200);
     bc4:	68 e3       	ldi	r22, 0x38	; 56
     bc6:	7f ef       	ldi	r23, 0xFF	; 255
     bc8:	88 ec       	ldi	r24, 0xC8	; 200
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	5c dd       	rcall	.-1352   	; 0x686 <oi_set_wheels>
	while (sum < degrees-12) {
     bce:	8c e0       	ldi	r24, 0x0C	; 12
     bd0:	e8 1a       	sub	r14, r24
     bd2:	f1 08       	sbc	r15, r1
     bd4:	1e 14       	cp	r1, r14
     bd6:	1f 04       	cpc	r1, r15
     bd8:	64 f4       	brge	.+24     	; 0xbf2 <turn_counterclockwise+0x3e>
	oi_set_wheels(0, 0); // stop
}

void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     bda:	c0 e0       	ldi	r28, 0x00	; 0
     bdc:	d0 e0       	ldi	r29, 0x00	; 0

	oi_set_wheels(200, -200);
	while (sum < degrees-12) {
		oi_update(sensor);
     bde:	c8 01       	movw	r24, r16
     be0:	91 dd       	rcall	.-1246   	; 0x704 <oi_update>
		sum += sensor->angle; //maybe
     be2:	f8 01       	movw	r30, r16
     be4:	86 85       	ldd	r24, Z+14	; 0x0e
     be6:	97 85       	ldd	r25, Z+15	; 0x0f
     be8:	c8 0f       	add	r28, r24
     bea:	d9 1f       	adc	r29, r25
void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;

	oi_set_wheels(200, -200);
	while (sum < degrees-12) {
     bec:	ce 15       	cp	r28, r14
     bee:	df 05       	cpc	r29, r15
     bf0:	b4 f3       	brlt	.-20     	; 0xbde <turn_counterclockwise+0x2a>
		oi_update(sensor);
		sum += sensor->angle; //maybe

	}
	oi_set_wheels(0, 0); // stop
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	45 dd       	rcall	.-1398   	; 0x686 <oi_set_wheels>
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	08 95       	ret

00000c0a <move_forward>:
}

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	64 97       	sbiw	r28, 0x14	; 20
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	8c 01       	movw	r16, r24
     c28:	e6 2e       	mov	r14, r22
     c2a:	f7 2e       	mov	r15, r23
	int sum = 0;
	int dist = 0;
	int new_dist = 0;
	char outputString[20];
	oi_set_wheels(150, 150); // move forward
     c2c:	66 e9       	ldi	r22, 0x96	; 150
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	86 e9       	ldi	r24, 0x96	; 150
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	28 dd       	rcall	.-1456   	; 0x686 <oi_set_wheels>

	while (sum < centimeters*10)
     c36:	8e 2d       	mov	r24, r14
     c38:	9f 2d       	mov	r25, r15
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	9c 01       	movw	r18, r24
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	82 0f       	add	r24, r18
     c4a:	93 1f       	adc	r25, r19
     c4c:	18 16       	cp	r1, r24
     c4e:	19 06       	cpc	r1, r25
     c50:	0c f0       	brlt	.+2      	; 0xc54 <move_forward+0x4a>
     c52:	6b c0       	rjmp	.+214    	; 0xd2a <move_forward+0x120>
	{
		oi_update(sensor);
     c54:	c8 01       	movw	r24, r16
     c56:	56 dd       	rcall	.-1364   	; 0x704 <oi_update>
		sum += sensor->distance;

		if(sensor->bumper_left)
     c58:	f8 01       	movw	r30, r16
     c5a:	40 81       	ld	r20, Z
     c5c:	41 ff       	sbrs	r20, 1
     c5e:	12 c0       	rjmp	.+36     	; 0xc84 <move_forward+0x7a>
		{
			oi_set_wheels(0, 0); // stop
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e dd       	rcall	.-1508   	; 0x686 <oi_set_wheels>

			move_backward(sensor,10);
     c6a:	6a e0       	ldi	r22, 0x0A	; 10
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	c8 01       	movw	r24, r16
     c70:	42 df       	rcall	.-380    	; 0xaf6 <move_backward>
			turn_clockwise(sensor,45);
     c72:	6d e2       	ldi	r22, 0x2D	; 45
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	c8 01       	movw	r24, r16
     c78:	72 df       	rcall	.-284    	; 0xb5e <turn_clockwise>

			USART_SendString("Left Bumper Triggered"); //
     c7a:	85 e6       	ldi	r24, 0x65	; 101
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	1f de       	rcall	.-962    	; 0x8be <USART_SendString>
			return 1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	6f c0       	rjmp	.+222    	; 0xd62 <move_forward+0x158>
		}
		else if(sensor->bumper_right)
     c84:	40 ff       	sbrs	r20, 0
     c86:	12 c0       	rjmp	.+36     	; 0xcac <move_forward+0xa2>
		{
			oi_set_wheels(0, 0); // stop
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fa dc       	rcall	.-1548   	; 0x686 <oi_set_wheels>

			move_backward(sensor,10);
     c92:	6a e0       	ldi	r22, 0x0A	; 10
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	c8 01       	movw	r24, r16
     c98:	2e df       	rcall	.-420    	; 0xaf6 <move_backward>
			turn_counterclockwise(sensor,45);
     c9a:	6d e2       	ldi	r22, 0x2D	; 45
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	c8 01       	movw	r24, r16
     ca0:	89 df       	rcall	.-238    	; 0xbb4 <turn_counterclockwise>

			USART_SendString("Right Bumper Triggered");
     ca2:	8b e7       	ldi	r24, 0x7B	; 123
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0b de       	rcall	.-1002   	; 0x8be <USART_SendString>
			return 2;
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	5b c0       	rjmp	.+182    	; 0xd62 <move_forward+0x158>
		}
		if((sensor->cliff_frontleft_signal > 550) || (sensor->cliff_frontright_signal > 450))
     cac:	f8 01       	movw	r30, r16
     cae:	86 8d       	ldd	r24, Z+30	; 0x1e
     cb0:	97 8d       	ldd	r25, Z+31	; 0x1f
     cb2:	87 32       	cpi	r24, 0x27	; 39
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	9f 07       	cpc	r25, r31
     cb8:	38 f4       	brcc	.+14     	; 0xcc8 <move_forward+0xbe>
     cba:	f8 01       	movw	r30, r16
     cbc:	20 a1       	ldd	r18, Z+32	; 0x20
     cbe:	31 a1       	ldd	r19, Z+33	; 0x21
     cc0:	23 3c       	cpi	r18, 0xC3	; 195
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	3f 07       	cpc	r19, r31
     cc6:	88 f0       	brcs	.+34     	; 0xcea <move_forward+0xe0>
		{
			lprintf("Line Detected");
     cc8:	82 e9       	ldi	r24, 0x92	; 146
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	ed da       	rcall	.-2598   	; 0x2ac <lprintf>
			oi_set_wheels(0,0);
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	d5 dc       	rcall	.-1622   	; 0x686 <oi_set_wheels>
			USART_SendString("Line Detected");
     cdc:	82 e9       	ldi	r24, 0x92	; 146
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	ee dd       	rcall	.-1060   	; 0x8be <USART_SendString>
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
			return 3;
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	3c c0       	rjmp	.+120    	; 0xd62 <move_forward+0x158>
		}
		else if((sensor->wheeldrop_caster == 1) || (sensor->wheeldrop_left == 1) || (sensor->wheeldrop_right == 1) || (sensor->cliff_frontleft_signal < 10) || (sensor->cliff_frontright_signal < 10)|| (sensor->cliff_left_signal < 10) || (sensor->cliff_right_signal < 10))
     cea:	4c 71       	andi	r20, 0x1C	; 28
     cec:	71 f4       	brne	.+28     	; 0xd0a <move_forward+0x100>
     cee:	0a 97       	sbiw	r24, 0x0a	; 10
     cf0:	60 f0       	brcs	.+24     	; 0xd0a <move_forward+0x100>
     cf2:	2a 30       	cpi	r18, 0x0A	; 10
     cf4:	31 05       	cpc	r19, r1
     cf6:	48 f0       	brcs	.+18     	; 0xd0a <move_forward+0x100>
     cf8:	f8 01       	movw	r30, r16
     cfa:	84 8d       	ldd	r24, Z+28	; 0x1c
     cfc:	95 8d       	ldd	r25, Z+29	; 0x1d
     cfe:	0a 97       	sbiw	r24, 0x0a	; 10
     d00:	20 f0       	brcs	.+8      	; 0xd0a <move_forward+0x100>
     d02:	82 a1       	ldd	r24, Z+34	; 0x22
     d04:	93 a1       	ldd	r25, Z+35	; 0x23
     d06:	0a 97       	sbiw	r24, 0x0a	; 10
     d08:	58 f5       	brcc	.+86     	; 0xd60 <move_forward+0x156>
		{
			lprintf("Cliff Edge Detected");
     d0a:	80 ea       	ldi	r24, 0xA0	; 160
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	cc da       	rcall	.-2664   	; 0x2ac <lprintf>
			move_backward(sensor,10);
     d14:	6a e0       	ldi	r22, 0x0A	; 10
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	c8 01       	movw	r24, r16
     d1a:	ed de       	rcall	.-550    	; 0xaf6 <move_backward>

			USART_SendString("Cliff Edge Detected");
     d1c:	80 ea       	ldi	r24, 0xA0	; 160
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	ce dd       	rcall	.-1124   	; 0x8be <USART_SendString>
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
			return 4;
     d26:	84 e0       	ldi	r24, 0x04	; 4
     d28:	1c c0       	rjmp	.+56     	; 0xd62 <move_forward+0x158>
		}
		return 0;
	}

	oi_set_wheels(0, 0); // stop
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a9 dc       	rcall	.-1710   	; 0x686 <oi_set_wheels>
	
	sprintf(outputString, "Moved %f centimeters", sum);
     d34:	1f 92       	push	r1
     d36:	1f 92       	push	r1
     d38:	84 eb       	ldi	r24, 0xB4	; 180
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	8e 01       	movw	r16, r28
     d42:	0f 5f       	subi	r16, 0xFF	; 255
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	1f 93       	push	r17
     d48:	0f 93       	push	r16
     d4a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <sprintf>
	
	USART_SendString(outputString);
     d4e:	c8 01       	movw	r24, r16
     d50:	b6 dd       	rcall	.-1172   	; 0x8be <USART_SendString>

}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <move_forward+0x158>
			move_backward(sensor,10);

			USART_SendString("Cliff Edge Detected");
			return 4;
		}
		return 0;
     d60:	80 e0       	ldi	r24, 0x00	; 0
	
	sprintf(outputString, "Moved %f centimeters", sum);
	
	USART_SendString(outputString);

}
     d62:	64 96       	adiw	r28, 0x14	; 20
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	08 95       	ret

00000d7c <__subsf3>:
     d7c:	50 58       	subi	r21, 0x80	; 128

00000d7e <__addsf3>:
     d7e:	bb 27       	eor	r27, r27
     d80:	aa 27       	eor	r26, r26
     d82:	0e d0       	rcall	.+28     	; 0xda0 <__addsf3x>
     d84:	48 c1       	rjmp	.+656    	; 0x1016 <__fp_round>
     d86:	39 d1       	rcall	.+626    	; 0xffa <__fp_pscA>
     d88:	30 f0       	brcs	.+12     	; 0xd96 <__addsf3+0x18>
     d8a:	3e d1       	rcall	.+636    	; 0x1008 <__fp_pscB>
     d8c:	20 f0       	brcs	.+8      	; 0xd96 <__addsf3+0x18>
     d8e:	31 f4       	brne	.+12     	; 0xd9c <__addsf3+0x1e>
     d90:	9f 3f       	cpi	r25, 0xFF	; 255
     d92:	11 f4       	brne	.+4      	; 0xd98 <__addsf3+0x1a>
     d94:	1e f4       	brtc	.+6      	; 0xd9c <__addsf3+0x1e>
     d96:	2e c1       	rjmp	.+604    	; 0xff4 <__fp_nan>
     d98:	0e f4       	brtc	.+2      	; 0xd9c <__addsf3+0x1e>
     d9a:	e0 95       	com	r30
     d9c:	e7 fb       	bst	r30, 7
     d9e:	24 c1       	rjmp	.+584    	; 0xfe8 <__fp_inf>

00000da0 <__addsf3x>:
     da0:	e9 2f       	mov	r30, r25
     da2:	4a d1       	rcall	.+660    	; 0x1038 <__fp_split3>
     da4:	80 f3       	brcs	.-32     	; 0xd86 <__addsf3+0x8>
     da6:	ba 17       	cp	r27, r26
     da8:	62 07       	cpc	r22, r18
     daa:	73 07       	cpc	r23, r19
     dac:	84 07       	cpc	r24, r20
     dae:	95 07       	cpc	r25, r21
     db0:	18 f0       	brcs	.+6      	; 0xdb8 <__addsf3x+0x18>
     db2:	71 f4       	brne	.+28     	; 0xdd0 <__addsf3x+0x30>
     db4:	9e f5       	brtc	.+102    	; 0xe1c <__addsf3x+0x7c>
     db6:	62 c1       	rjmp	.+708    	; 0x107c <__fp_zero>
     db8:	0e f4       	brtc	.+2      	; 0xdbc <__addsf3x+0x1c>
     dba:	e0 95       	com	r30
     dbc:	0b 2e       	mov	r0, r27
     dbe:	ba 2f       	mov	r27, r26
     dc0:	a0 2d       	mov	r26, r0
     dc2:	0b 01       	movw	r0, r22
     dc4:	b9 01       	movw	r22, r18
     dc6:	90 01       	movw	r18, r0
     dc8:	0c 01       	movw	r0, r24
     dca:	ca 01       	movw	r24, r20
     dcc:	a0 01       	movw	r20, r0
     dce:	11 24       	eor	r1, r1
     dd0:	ff 27       	eor	r31, r31
     dd2:	59 1b       	sub	r21, r25
     dd4:	99 f0       	breq	.+38     	; 0xdfc <__addsf3x+0x5c>
     dd6:	59 3f       	cpi	r21, 0xF9	; 249
     dd8:	50 f4       	brcc	.+20     	; 0xdee <__addsf3x+0x4e>
     dda:	50 3e       	cpi	r21, 0xE0	; 224
     ddc:	68 f1       	brcs	.+90     	; 0xe38 <__addsf3x+0x98>
     dde:	1a 16       	cp	r1, r26
     de0:	f0 40       	sbci	r31, 0x00	; 0
     de2:	a2 2f       	mov	r26, r18
     de4:	23 2f       	mov	r18, r19
     de6:	34 2f       	mov	r19, r20
     de8:	44 27       	eor	r20, r20
     dea:	58 5f       	subi	r21, 0xF8	; 248
     dec:	f3 cf       	rjmp	.-26     	; 0xdd4 <__addsf3x+0x34>
     dee:	46 95       	lsr	r20
     df0:	37 95       	ror	r19
     df2:	27 95       	ror	r18
     df4:	a7 95       	ror	r26
     df6:	f0 40       	sbci	r31, 0x00	; 0
     df8:	53 95       	inc	r21
     dfa:	c9 f7       	brne	.-14     	; 0xdee <__addsf3x+0x4e>
     dfc:	7e f4       	brtc	.+30     	; 0xe1c <__addsf3x+0x7c>
     dfe:	1f 16       	cp	r1, r31
     e00:	ba 0b       	sbc	r27, r26
     e02:	62 0b       	sbc	r22, r18
     e04:	73 0b       	sbc	r23, r19
     e06:	84 0b       	sbc	r24, r20
     e08:	ba f0       	brmi	.+46     	; 0xe38 <__addsf3x+0x98>
     e0a:	91 50       	subi	r25, 0x01	; 1
     e0c:	a1 f0       	breq	.+40     	; 0xe36 <__addsf3x+0x96>
     e0e:	ff 0f       	add	r31, r31
     e10:	bb 1f       	adc	r27, r27
     e12:	66 1f       	adc	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	88 1f       	adc	r24, r24
     e18:	c2 f7       	brpl	.-16     	; 0xe0a <__addsf3x+0x6a>
     e1a:	0e c0       	rjmp	.+28     	; 0xe38 <__addsf3x+0x98>
     e1c:	ba 0f       	add	r27, r26
     e1e:	62 1f       	adc	r22, r18
     e20:	73 1f       	adc	r23, r19
     e22:	84 1f       	adc	r24, r20
     e24:	48 f4       	brcc	.+18     	; 0xe38 <__addsf3x+0x98>
     e26:	87 95       	ror	r24
     e28:	77 95       	ror	r23
     e2a:	67 95       	ror	r22
     e2c:	b7 95       	ror	r27
     e2e:	f7 95       	ror	r31
     e30:	9e 3f       	cpi	r25, 0xFE	; 254
     e32:	08 f0       	brcs	.+2      	; 0xe36 <__addsf3x+0x96>
     e34:	b3 cf       	rjmp	.-154    	; 0xd9c <__addsf3+0x1e>
     e36:	93 95       	inc	r25
     e38:	88 0f       	add	r24, r24
     e3a:	08 f0       	brcs	.+2      	; 0xe3e <__addsf3x+0x9e>
     e3c:	99 27       	eor	r25, r25
     e3e:	ee 0f       	add	r30, r30
     e40:	97 95       	ror	r25
     e42:	87 95       	ror	r24
     e44:	08 95       	ret

00000e46 <__divsf3>:
     e46:	0c d0       	rcall	.+24     	; 0xe60 <__divsf3x>
     e48:	e6 c0       	rjmp	.+460    	; 0x1016 <__fp_round>
     e4a:	de d0       	rcall	.+444    	; 0x1008 <__fp_pscB>
     e4c:	40 f0       	brcs	.+16     	; 0xe5e <__divsf3+0x18>
     e4e:	d5 d0       	rcall	.+426    	; 0xffa <__fp_pscA>
     e50:	30 f0       	brcs	.+12     	; 0xe5e <__divsf3+0x18>
     e52:	21 f4       	brne	.+8      	; 0xe5c <__divsf3+0x16>
     e54:	5f 3f       	cpi	r21, 0xFF	; 255
     e56:	19 f0       	breq	.+6      	; 0xe5e <__divsf3+0x18>
     e58:	c7 c0       	rjmp	.+398    	; 0xfe8 <__fp_inf>
     e5a:	51 11       	cpse	r21, r1
     e5c:	10 c1       	rjmp	.+544    	; 0x107e <__fp_szero>
     e5e:	ca c0       	rjmp	.+404    	; 0xff4 <__fp_nan>

00000e60 <__divsf3x>:
     e60:	eb d0       	rcall	.+470    	; 0x1038 <__fp_split3>
     e62:	98 f3       	brcs	.-26     	; 0xe4a <__divsf3+0x4>

00000e64 <__divsf3_pse>:
     e64:	99 23       	and	r25, r25
     e66:	c9 f3       	breq	.-14     	; 0xe5a <__divsf3+0x14>
     e68:	55 23       	and	r21, r21
     e6a:	b1 f3       	breq	.-20     	; 0xe58 <__divsf3+0x12>
     e6c:	95 1b       	sub	r25, r21
     e6e:	55 0b       	sbc	r21, r21
     e70:	bb 27       	eor	r27, r27
     e72:	aa 27       	eor	r26, r26
     e74:	62 17       	cp	r22, r18
     e76:	73 07       	cpc	r23, r19
     e78:	84 07       	cpc	r24, r20
     e7a:	38 f0       	brcs	.+14     	; 0xe8a <__divsf3_pse+0x26>
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	44 1f       	adc	r20, r20
     e86:	aa 1f       	adc	r26, r26
     e88:	a9 f3       	breq	.-22     	; 0xe74 <__divsf3_pse+0x10>
     e8a:	33 d0       	rcall	.+102    	; 0xef2 <__divsf3_pse+0x8e>
     e8c:	0e 2e       	mov	r0, r30
     e8e:	3a f0       	brmi	.+14     	; 0xe9e <__divsf3_pse+0x3a>
     e90:	e0 e8       	ldi	r30, 0x80	; 128
     e92:	30 d0       	rcall	.+96     	; 0xef4 <__divsf3_pse+0x90>
     e94:	91 50       	subi	r25, 0x01	; 1
     e96:	50 40       	sbci	r21, 0x00	; 0
     e98:	e6 95       	lsr	r30
     e9a:	00 1c       	adc	r0, r0
     e9c:	ca f7       	brpl	.-14     	; 0xe90 <__divsf3_pse+0x2c>
     e9e:	29 d0       	rcall	.+82     	; 0xef2 <__divsf3_pse+0x8e>
     ea0:	fe 2f       	mov	r31, r30
     ea2:	27 d0       	rcall	.+78     	; 0xef2 <__divsf3_pse+0x8e>
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	bb 1f       	adc	r27, r27
     eac:	26 17       	cp	r18, r22
     eae:	37 07       	cpc	r19, r23
     eb0:	48 07       	cpc	r20, r24
     eb2:	ab 07       	cpc	r26, r27
     eb4:	b0 e8       	ldi	r27, 0x80	; 128
     eb6:	09 f0       	breq	.+2      	; 0xeba <__divsf3_pse+0x56>
     eb8:	bb 0b       	sbc	r27, r27
     eba:	80 2d       	mov	r24, r0
     ebc:	bf 01       	movw	r22, r30
     ebe:	ff 27       	eor	r31, r31
     ec0:	93 58       	subi	r25, 0x83	; 131
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	2a f0       	brmi	.+10     	; 0xed0 <__divsf3_pse+0x6c>
     ec6:	9e 3f       	cpi	r25, 0xFE	; 254
     ec8:	51 05       	cpc	r21, r1
     eca:	68 f0       	brcs	.+26     	; 0xee6 <__divsf3_pse+0x82>
     ecc:	8d c0       	rjmp	.+282    	; 0xfe8 <__fp_inf>
     ece:	d7 c0       	rjmp	.+430    	; 0x107e <__fp_szero>
     ed0:	5f 3f       	cpi	r21, 0xFF	; 255
     ed2:	ec f3       	brlt	.-6      	; 0xece <__divsf3_pse+0x6a>
     ed4:	98 3e       	cpi	r25, 0xE8	; 232
     ed6:	dc f3       	brlt	.-10     	; 0xece <__divsf3_pse+0x6a>
     ed8:	86 95       	lsr	r24
     eda:	77 95       	ror	r23
     edc:	67 95       	ror	r22
     ede:	b7 95       	ror	r27
     ee0:	f7 95       	ror	r31
     ee2:	9f 5f       	subi	r25, 0xFF	; 255
     ee4:	c9 f7       	brne	.-14     	; 0xed8 <__divsf3_pse+0x74>
     ee6:	88 0f       	add	r24, r24
     ee8:	91 1d       	adc	r25, r1
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	97 f9       	bld	r25, 7
     ef0:	08 95       	ret
     ef2:	e1 e0       	ldi	r30, 0x01	; 1
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	bb 1f       	adc	r27, r27
     efc:	62 17       	cp	r22, r18
     efe:	73 07       	cpc	r23, r19
     f00:	84 07       	cpc	r24, r20
     f02:	ba 07       	cpc	r27, r26
     f04:	20 f0       	brcs	.+8      	; 0xf0e <__divsf3_pse+0xaa>
     f06:	62 1b       	sub	r22, r18
     f08:	73 0b       	sbc	r23, r19
     f0a:	84 0b       	sbc	r24, r20
     f0c:	ba 0b       	sbc	r27, r26
     f0e:	ee 1f       	adc	r30, r30
     f10:	88 f7       	brcc	.-30     	; 0xef4 <__divsf3_pse+0x90>
     f12:	e0 95       	com	r30
     f14:	08 95       	ret

00000f16 <__fixunssfsi>:
     f16:	98 d0       	rcall	.+304    	; 0x1048 <__fp_splitA>
     f18:	88 f0       	brcs	.+34     	; 0xf3c <__fixunssfsi+0x26>
     f1a:	9f 57       	subi	r25, 0x7F	; 127
     f1c:	90 f0       	brcs	.+36     	; 0xf42 <__fixunssfsi+0x2c>
     f1e:	b9 2f       	mov	r27, r25
     f20:	99 27       	eor	r25, r25
     f22:	b7 51       	subi	r27, 0x17	; 23
     f24:	a0 f0       	brcs	.+40     	; 0xf4e <__fixunssfsi+0x38>
     f26:	d1 f0       	breq	.+52     	; 0xf5c <__fixunssfsi+0x46>
     f28:	66 0f       	add	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	88 1f       	adc	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	1a f0       	brmi	.+6      	; 0xf38 <__fixunssfsi+0x22>
     f32:	ba 95       	dec	r27
     f34:	c9 f7       	brne	.-14     	; 0xf28 <__fixunssfsi+0x12>
     f36:	12 c0       	rjmp	.+36     	; 0xf5c <__fixunssfsi+0x46>
     f38:	b1 30       	cpi	r27, 0x01	; 1
     f3a:	81 f0       	breq	.+32     	; 0xf5c <__fixunssfsi+0x46>
     f3c:	9f d0       	rcall	.+318    	; 0x107c <__fp_zero>
     f3e:	b1 e0       	ldi	r27, 0x01	; 1
     f40:	08 95       	ret
     f42:	9c c0       	rjmp	.+312    	; 0x107c <__fp_zero>
     f44:	67 2f       	mov	r22, r23
     f46:	78 2f       	mov	r23, r24
     f48:	88 27       	eor	r24, r24
     f4a:	b8 5f       	subi	r27, 0xF8	; 248
     f4c:	39 f0       	breq	.+14     	; 0xf5c <__fixunssfsi+0x46>
     f4e:	b9 3f       	cpi	r27, 0xF9	; 249
     f50:	cc f3       	brlt	.-14     	; 0xf44 <__fixunssfsi+0x2e>
     f52:	86 95       	lsr	r24
     f54:	77 95       	ror	r23
     f56:	67 95       	ror	r22
     f58:	b3 95       	inc	r27
     f5a:	d9 f7       	brne	.-10     	; 0xf52 <__fixunssfsi+0x3c>
     f5c:	3e f4       	brtc	.+14     	; 0xf6c <__fixunssfsi+0x56>
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	61 95       	neg	r22
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <__floatunsisf>:
     f6e:	e8 94       	clt
     f70:	09 c0       	rjmp	.+18     	; 0xf84 <__floatsisf+0x12>

00000f72 <__floatsisf>:
     f72:	97 fb       	bst	r25, 7
     f74:	3e f4       	brtc	.+14     	; 0xf84 <__floatsisf+0x12>
     f76:	90 95       	com	r25
     f78:	80 95       	com	r24
     f7a:	70 95       	com	r23
     f7c:	61 95       	neg	r22
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	99 23       	and	r25, r25
     f86:	a9 f0       	breq	.+42     	; 0xfb2 <__floatsisf+0x40>
     f88:	f9 2f       	mov	r31, r25
     f8a:	96 e9       	ldi	r25, 0x96	; 150
     f8c:	bb 27       	eor	r27, r27
     f8e:	93 95       	inc	r25
     f90:	f6 95       	lsr	r31
     f92:	87 95       	ror	r24
     f94:	77 95       	ror	r23
     f96:	67 95       	ror	r22
     f98:	b7 95       	ror	r27
     f9a:	f1 11       	cpse	r31, r1
     f9c:	f8 cf       	rjmp	.-16     	; 0xf8e <__floatsisf+0x1c>
     f9e:	fa f4       	brpl	.+62     	; 0xfde <__floatsisf+0x6c>
     fa0:	bb 0f       	add	r27, r27
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <__floatsisf+0x36>
     fa4:	60 ff       	sbrs	r22, 0
     fa6:	1b c0       	rjmp	.+54     	; 0xfde <__floatsisf+0x6c>
     fa8:	6f 5f       	subi	r22, 0xFF	; 255
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	16 c0       	rjmp	.+44     	; 0xfde <__floatsisf+0x6c>
     fb2:	88 23       	and	r24, r24
     fb4:	11 f0       	breq	.+4      	; 0xfba <__floatsisf+0x48>
     fb6:	96 e9       	ldi	r25, 0x96	; 150
     fb8:	11 c0       	rjmp	.+34     	; 0xfdc <__floatsisf+0x6a>
     fba:	77 23       	and	r23, r23
     fbc:	21 f0       	breq	.+8      	; 0xfc6 <__floatsisf+0x54>
     fbe:	9e e8       	ldi	r25, 0x8E	; 142
     fc0:	87 2f       	mov	r24, r23
     fc2:	76 2f       	mov	r23, r22
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <__floatsisf+0x5e>
     fc6:	66 23       	and	r22, r22
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <__floatsisf+0x74>
     fca:	96 e8       	ldi	r25, 0x86	; 134
     fcc:	86 2f       	mov	r24, r22
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	2a f0       	brmi	.+10     	; 0xfde <__floatsisf+0x6c>
     fd4:	9a 95       	dec	r25
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	da f7       	brpl	.-10     	; 0xfd4 <__floatsisf+0x62>
     fde:	88 0f       	add	r24, r24
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	97 f9       	bld	r25, 7
     fe6:	08 95       	ret

00000fe8 <__fp_inf>:
     fe8:	97 f9       	bld	r25, 7
     fea:	9f 67       	ori	r25, 0x7F	; 127
     fec:	80 e8       	ldi	r24, 0x80	; 128
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	08 95       	ret

00000ff4 <__fp_nan>:
     ff4:	9f ef       	ldi	r25, 0xFF	; 255
     ff6:	80 ec       	ldi	r24, 0xC0	; 192
     ff8:	08 95       	ret

00000ffa <__fp_pscA>:
     ffa:	00 24       	eor	r0, r0
     ffc:	0a 94       	dec	r0
     ffe:	16 16       	cp	r1, r22
    1000:	17 06       	cpc	r1, r23
    1002:	18 06       	cpc	r1, r24
    1004:	09 06       	cpc	r0, r25
    1006:	08 95       	ret

00001008 <__fp_pscB>:
    1008:	00 24       	eor	r0, r0
    100a:	0a 94       	dec	r0
    100c:	12 16       	cp	r1, r18
    100e:	13 06       	cpc	r1, r19
    1010:	14 06       	cpc	r1, r20
    1012:	05 06       	cpc	r0, r21
    1014:	08 95       	ret

00001016 <__fp_round>:
    1016:	09 2e       	mov	r0, r25
    1018:	03 94       	inc	r0
    101a:	00 0c       	add	r0, r0
    101c:	11 f4       	brne	.+4      	; 0x1022 <__fp_round+0xc>
    101e:	88 23       	and	r24, r24
    1020:	52 f0       	brmi	.+20     	; 0x1036 <__fp_round+0x20>
    1022:	bb 0f       	add	r27, r27
    1024:	40 f4       	brcc	.+16     	; 0x1036 <__fp_round+0x20>
    1026:	bf 2b       	or	r27, r31
    1028:	11 f4       	brne	.+4      	; 0x102e <__fp_round+0x18>
    102a:	60 ff       	sbrs	r22, 0
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <__fp_round+0x20>
    102e:	6f 5f       	subi	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	08 95       	ret

00001038 <__fp_split3>:
    1038:	57 fd       	sbrc	r21, 7
    103a:	90 58       	subi	r25, 0x80	; 128
    103c:	44 0f       	add	r20, r20
    103e:	55 1f       	adc	r21, r21
    1040:	59 f0       	breq	.+22     	; 0x1058 <__fp_splitA+0x10>
    1042:	5f 3f       	cpi	r21, 0xFF	; 255
    1044:	71 f0       	breq	.+28     	; 0x1062 <__fp_splitA+0x1a>
    1046:	47 95       	ror	r20

00001048 <__fp_splitA>:
    1048:	88 0f       	add	r24, r24
    104a:	97 fb       	bst	r25, 7
    104c:	99 1f       	adc	r25, r25
    104e:	61 f0       	breq	.+24     	; 0x1068 <__fp_splitA+0x20>
    1050:	9f 3f       	cpi	r25, 0xFF	; 255
    1052:	79 f0       	breq	.+30     	; 0x1072 <__fp_splitA+0x2a>
    1054:	87 95       	ror	r24
    1056:	08 95       	ret
    1058:	12 16       	cp	r1, r18
    105a:	13 06       	cpc	r1, r19
    105c:	14 06       	cpc	r1, r20
    105e:	55 1f       	adc	r21, r21
    1060:	f2 cf       	rjmp	.-28     	; 0x1046 <__fp_split3+0xe>
    1062:	46 95       	lsr	r20
    1064:	f1 df       	rcall	.-30     	; 0x1048 <__fp_splitA>
    1066:	08 c0       	rjmp	.+16     	; 0x1078 <__fp_splitA+0x30>
    1068:	16 16       	cp	r1, r22
    106a:	17 06       	cpc	r1, r23
    106c:	18 06       	cpc	r1, r24
    106e:	99 1f       	adc	r25, r25
    1070:	f1 cf       	rjmp	.-30     	; 0x1054 <__fp_splitA+0xc>
    1072:	86 95       	lsr	r24
    1074:	71 05       	cpc	r23, r1
    1076:	61 05       	cpc	r22, r1
    1078:	08 94       	sec
    107a:	08 95       	ret

0000107c <__fp_zero>:
    107c:	e8 94       	clt

0000107e <__fp_szero>:
    107e:	bb 27       	eor	r27, r27
    1080:	66 27       	eor	r22, r22
    1082:	77 27       	eor	r23, r23
    1084:	cb 01       	movw	r24, r22
    1086:	97 f9       	bld	r25, 7
    1088:	08 95       	ret

0000108a <__mulsf3>:
    108a:	0b d0       	rcall	.+22     	; 0x10a2 <__mulsf3x>
    108c:	c4 cf       	rjmp	.-120    	; 0x1016 <__fp_round>
    108e:	b5 df       	rcall	.-150    	; 0xffa <__fp_pscA>
    1090:	28 f0       	brcs	.+10     	; 0x109c <__mulsf3+0x12>
    1092:	ba df       	rcall	.-140    	; 0x1008 <__fp_pscB>
    1094:	18 f0       	brcs	.+6      	; 0x109c <__mulsf3+0x12>
    1096:	95 23       	and	r25, r21
    1098:	09 f0       	breq	.+2      	; 0x109c <__mulsf3+0x12>
    109a:	a6 cf       	rjmp	.-180    	; 0xfe8 <__fp_inf>
    109c:	ab cf       	rjmp	.-170    	; 0xff4 <__fp_nan>
    109e:	11 24       	eor	r1, r1
    10a0:	ee cf       	rjmp	.-36     	; 0x107e <__fp_szero>

000010a2 <__mulsf3x>:
    10a2:	ca df       	rcall	.-108    	; 0x1038 <__fp_split3>
    10a4:	a0 f3       	brcs	.-24     	; 0x108e <__mulsf3+0x4>

000010a6 <__mulsf3_pse>:
    10a6:	95 9f       	mul	r25, r21
    10a8:	d1 f3       	breq	.-12     	; 0x109e <__mulsf3+0x14>
    10aa:	95 0f       	add	r25, r21
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	55 1f       	adc	r21, r21
    10b0:	62 9f       	mul	r22, r18
    10b2:	f0 01       	movw	r30, r0
    10b4:	72 9f       	mul	r23, r18
    10b6:	bb 27       	eor	r27, r27
    10b8:	f0 0d       	add	r31, r0
    10ba:	b1 1d       	adc	r27, r1
    10bc:	63 9f       	mul	r22, r19
    10be:	aa 27       	eor	r26, r26
    10c0:	f0 0d       	add	r31, r0
    10c2:	b1 1d       	adc	r27, r1
    10c4:	aa 1f       	adc	r26, r26
    10c6:	64 9f       	mul	r22, r20
    10c8:	66 27       	eor	r22, r22
    10ca:	b0 0d       	add	r27, r0
    10cc:	a1 1d       	adc	r26, r1
    10ce:	66 1f       	adc	r22, r22
    10d0:	82 9f       	mul	r24, r18
    10d2:	22 27       	eor	r18, r18
    10d4:	b0 0d       	add	r27, r0
    10d6:	a1 1d       	adc	r26, r1
    10d8:	62 1f       	adc	r22, r18
    10da:	73 9f       	mul	r23, r19
    10dc:	b0 0d       	add	r27, r0
    10de:	a1 1d       	adc	r26, r1
    10e0:	62 1f       	adc	r22, r18
    10e2:	83 9f       	mul	r24, r19
    10e4:	a0 0d       	add	r26, r0
    10e6:	61 1d       	adc	r22, r1
    10e8:	22 1f       	adc	r18, r18
    10ea:	74 9f       	mul	r23, r20
    10ec:	33 27       	eor	r19, r19
    10ee:	a0 0d       	add	r26, r0
    10f0:	61 1d       	adc	r22, r1
    10f2:	23 1f       	adc	r18, r19
    10f4:	84 9f       	mul	r24, r20
    10f6:	60 0d       	add	r22, r0
    10f8:	21 1d       	adc	r18, r1
    10fa:	82 2f       	mov	r24, r18
    10fc:	76 2f       	mov	r23, r22
    10fe:	6a 2f       	mov	r22, r26
    1100:	11 24       	eor	r1, r1
    1102:	9f 57       	subi	r25, 0x7F	; 127
    1104:	50 40       	sbci	r21, 0x00	; 0
    1106:	8a f0       	brmi	.+34     	; 0x112a <__stack+0x2b>
    1108:	e1 f0       	breq	.+56     	; 0x1142 <__stack+0x43>
    110a:	88 23       	and	r24, r24
    110c:	4a f0       	brmi	.+18     	; 0x1120 <__stack+0x21>
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	bb 1f       	adc	r27, r27
    1114:	66 1f       	adc	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	88 1f       	adc	r24, r24
    111a:	91 50       	subi	r25, 0x01	; 1
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	a9 f7       	brne	.-22     	; 0x110a <__stack+0xb>
    1120:	9e 3f       	cpi	r25, 0xFE	; 254
    1122:	51 05       	cpc	r21, r1
    1124:	70 f0       	brcs	.+28     	; 0x1142 <__stack+0x43>
    1126:	60 cf       	rjmp	.-320    	; 0xfe8 <__fp_inf>
    1128:	aa cf       	rjmp	.-172    	; 0x107e <__fp_szero>
    112a:	5f 3f       	cpi	r21, 0xFF	; 255
    112c:	ec f3       	brlt	.-6      	; 0x1128 <__stack+0x29>
    112e:	98 3e       	cpi	r25, 0xE8	; 232
    1130:	dc f3       	brlt	.-10     	; 0x1128 <__stack+0x29>
    1132:	86 95       	lsr	r24
    1134:	77 95       	ror	r23
    1136:	67 95       	ror	r22
    1138:	b7 95       	ror	r27
    113a:	f7 95       	ror	r31
    113c:	e7 95       	ror	r30
    113e:	9f 5f       	subi	r25, 0xFF	; 255
    1140:	c1 f7       	brne	.-16     	; 0x1132 <__stack+0x33>
    1142:	fe 2b       	or	r31, r30
    1144:	88 0f       	add	r24, r24
    1146:	91 1d       	adc	r25, r1
    1148:	96 95       	lsr	r25
    114a:	87 95       	ror	r24
    114c:	97 f9       	bld	r25, 7
    114e:	08 95       	ret

00001150 <vfprintf>:
    1150:	2f 92       	push	r2
    1152:	3f 92       	push	r3
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	62 97       	sbiw	r28, 0x12	; 18
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	7c 01       	movw	r14, r24
    1186:	1b 01       	movw	r2, r22
    1188:	6a 01       	movw	r12, r20
    118a:	fc 01       	movw	r30, r24
    118c:	17 82       	std	Z+7, r1	; 0x07
    118e:	16 82       	std	Z+6, r1	; 0x06
    1190:	83 81       	ldd	r24, Z+3	; 0x03
    1192:	81 fd       	sbrc	r24, 1
    1194:	03 c0       	rjmp	.+6      	; 0x119c <vfprintf+0x4c>
    1196:	4e c3       	rjmp	.+1692   	; 0x1834 <vfprintf+0x6e4>
    1198:	65 01       	movw	r12, r10
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <vfprintf+0x56>
    119c:	88 24       	eor	r8, r8
    119e:	83 94       	inc	r8
    11a0:	91 2c       	mov	r9, r1
    11a2:	8c 0e       	add	r8, r28
    11a4:	9d 1e       	adc	r9, r29
    11a6:	f7 01       	movw	r30, r14
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	f1 01       	movw	r30, r2
    11ac:	93 fd       	sbrc	r25, 3
    11ae:	85 91       	lpm	r24, Z+
    11b0:	93 ff       	sbrs	r25, 3
    11b2:	81 91       	ld	r24, Z+
    11b4:	1f 01       	movw	r2, r30
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <vfprintf+0x6c>
    11ba:	38 c3       	rjmp	.+1648   	; 0x182c <vfprintf+0x6dc>
    11bc:	85 32       	cpi	r24, 0x25	; 37
    11be:	39 f4       	brne	.+14     	; 0x11ce <vfprintf+0x7e>
    11c0:	93 fd       	sbrc	r25, 3
    11c2:	85 91       	lpm	r24, Z+
    11c4:	93 ff       	sbrs	r25, 3
    11c6:	81 91       	ld	r24, Z+
    11c8:	1f 01       	movw	r2, r30
    11ca:	85 32       	cpi	r24, 0x25	; 37
    11cc:	29 f4       	brne	.+10     	; 0x11d8 <vfprintf+0x88>
    11ce:	b7 01       	movw	r22, r14
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	da d5       	rcall	.+2996   	; 0x1d88 <fputc>
    11d4:	56 01       	movw	r10, r12
    11d6:	e0 cf       	rjmp	.-64     	; 0x1198 <vfprintf+0x48>
    11d8:	71 2c       	mov	r7, r1
    11da:	61 2c       	mov	r6, r1
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	20 32       	cpi	r18, 0x20	; 32
    11e0:	a8 f4       	brcc	.+42     	; 0x120c <vfprintf+0xbc>
    11e2:	8b 32       	cpi	r24, 0x2B	; 43
    11e4:	61 f0       	breq	.+24     	; 0x11fe <vfprintf+0xae>
    11e6:	28 f4       	brcc	.+10     	; 0x11f2 <vfprintf+0xa2>
    11e8:	80 32       	cpi	r24, 0x20	; 32
    11ea:	51 f0       	breq	.+20     	; 0x1200 <vfprintf+0xb0>
    11ec:	83 32       	cpi	r24, 0x23	; 35
    11ee:	71 f4       	brne	.+28     	; 0x120c <vfprintf+0xbc>
    11f0:	0b c0       	rjmp	.+22     	; 0x1208 <vfprintf+0xb8>
    11f2:	8d 32       	cpi	r24, 0x2D	; 45
    11f4:	39 f0       	breq	.+14     	; 0x1204 <vfprintf+0xb4>
    11f6:	80 33       	cpi	r24, 0x30	; 48
    11f8:	49 f4       	brne	.+18     	; 0x120c <vfprintf+0xbc>
    11fa:	21 60       	ori	r18, 0x01	; 1
    11fc:	28 c0       	rjmp	.+80     	; 0x124e <vfprintf+0xfe>
    11fe:	22 60       	ori	r18, 0x02	; 2
    1200:	24 60       	ori	r18, 0x04	; 4
    1202:	25 c0       	rjmp	.+74     	; 0x124e <vfprintf+0xfe>
    1204:	28 60       	ori	r18, 0x08	; 8
    1206:	23 c0       	rjmp	.+70     	; 0x124e <vfprintf+0xfe>
    1208:	20 61       	ori	r18, 0x10	; 16
    120a:	21 c0       	rjmp	.+66     	; 0x124e <vfprintf+0xfe>
    120c:	27 fd       	sbrc	r18, 7
    120e:	27 c0       	rjmp	.+78     	; 0x125e <vfprintf+0x10e>
    1210:	38 2f       	mov	r19, r24
    1212:	30 53       	subi	r19, 0x30	; 48
    1214:	3a 30       	cpi	r19, 0x0A	; 10
    1216:	78 f4       	brcc	.+30     	; 0x1236 <vfprintf+0xe6>
    1218:	26 ff       	sbrs	r18, 6
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <vfprintf+0xd8>
    121c:	fa e0       	ldi	r31, 0x0A	; 10
    121e:	7f 9e       	mul	r7, r31
    1220:	30 0d       	add	r19, r0
    1222:	11 24       	eor	r1, r1
    1224:	73 2e       	mov	r7, r19
    1226:	13 c0       	rjmp	.+38     	; 0x124e <vfprintf+0xfe>
    1228:	4a e0       	ldi	r20, 0x0A	; 10
    122a:	64 9e       	mul	r6, r20
    122c:	30 0d       	add	r19, r0
    122e:	11 24       	eor	r1, r1
    1230:	63 2e       	mov	r6, r19
    1232:	20 62       	ori	r18, 0x20	; 32
    1234:	0c c0       	rjmp	.+24     	; 0x124e <vfprintf+0xfe>
    1236:	8e 32       	cpi	r24, 0x2E	; 46
    1238:	21 f4       	brne	.+8      	; 0x1242 <vfprintf+0xf2>
    123a:	26 fd       	sbrc	r18, 6
    123c:	f7 c2       	rjmp	.+1518   	; 0x182c <vfprintf+0x6dc>
    123e:	20 64       	ori	r18, 0x40	; 64
    1240:	06 c0       	rjmp	.+12     	; 0x124e <vfprintf+0xfe>
    1242:	8c 36       	cpi	r24, 0x6C	; 108
    1244:	11 f4       	brne	.+4      	; 0x124a <vfprintf+0xfa>
    1246:	20 68       	ori	r18, 0x80	; 128
    1248:	02 c0       	rjmp	.+4      	; 0x124e <vfprintf+0xfe>
    124a:	88 36       	cpi	r24, 0x68	; 104
    124c:	41 f4       	brne	.+16     	; 0x125e <vfprintf+0x10e>
    124e:	f1 01       	movw	r30, r2
    1250:	93 fd       	sbrc	r25, 3
    1252:	85 91       	lpm	r24, Z+
    1254:	93 ff       	sbrs	r25, 3
    1256:	81 91       	ld	r24, Z+
    1258:	1f 01       	movw	r2, r30
    125a:	81 11       	cpse	r24, r1
    125c:	c0 cf       	rjmp	.-128    	; 0x11de <vfprintf+0x8e>
    125e:	98 2f       	mov	r25, r24
    1260:	95 54       	subi	r25, 0x45	; 69
    1262:	93 30       	cpi	r25, 0x03	; 3
    1264:	18 f4       	brcc	.+6      	; 0x126c <vfprintf+0x11c>
    1266:	20 61       	ori	r18, 0x10	; 16
    1268:	80 5e       	subi	r24, 0xE0	; 224
    126a:	06 c0       	rjmp	.+12     	; 0x1278 <vfprintf+0x128>
    126c:	98 2f       	mov	r25, r24
    126e:	95 56       	subi	r25, 0x65	; 101
    1270:	93 30       	cpi	r25, 0x03	; 3
    1272:	08 f0       	brcs	.+2      	; 0x1276 <vfprintf+0x126>
    1274:	94 c1       	rjmp	.+808    	; 0x159e <vfprintf+0x44e>
    1276:	2f 7e       	andi	r18, 0xEF	; 239
    1278:	26 fd       	sbrc	r18, 6
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <vfprintf+0x130>
    127c:	16 e0       	ldi	r17, 0x06	; 6
    127e:	71 2e       	mov	r7, r17
    1280:	bf e3       	ldi	r27, 0x3F	; 63
    1282:	5b 2e       	mov	r5, r27
    1284:	52 22       	and	r5, r18
    1286:	85 36       	cpi	r24, 0x65	; 101
    1288:	19 f4       	brne	.+6      	; 0x1290 <vfprintf+0x140>
    128a:	f0 e4       	ldi	r31, 0x40	; 64
    128c:	5f 2a       	or	r5, r31
    128e:	07 c0       	rjmp	.+14     	; 0x129e <vfprintf+0x14e>
    1290:	86 36       	cpi	r24, 0x66	; 102
    1292:	19 f4       	brne	.+6      	; 0x129a <vfprintf+0x14a>
    1294:	40 e8       	ldi	r20, 0x80	; 128
    1296:	54 2a       	or	r5, r20
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0x14e>
    129a:	71 10       	cpse	r7, r1
    129c:	7a 94       	dec	r7
    129e:	57 fe       	sbrs	r5, 7
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <vfprintf+0x160>
    12a2:	5b e3       	ldi	r21, 0x3B	; 59
    12a4:	57 15       	cp	r21, r7
    12a6:	48 f0       	brcs	.+18     	; 0x12ba <vfprintf+0x16a>
    12a8:	47 2c       	mov	r4, r7
    12aa:	43 94       	inc	r4
    12ac:	27 e0       	ldi	r18, 0x07	; 7
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <vfprintf+0x17a>
    12b0:	87 e0       	ldi	r24, 0x07	; 7
    12b2:	87 15       	cp	r24, r7
    12b4:	30 f0       	brcs	.+12     	; 0x12c2 <vfprintf+0x172>
    12b6:	27 2d       	mov	r18, r7
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <vfprintf+0x178>
    12ba:	27 e0       	ldi	r18, 0x07	; 7
    12bc:	ac e3       	ldi	r26, 0x3C	; 60
    12be:	4a 2e       	mov	r4, r26
    12c0:	04 c0       	rjmp	.+8      	; 0x12ca <vfprintf+0x17a>
    12c2:	27 e0       	ldi	r18, 0x07	; 7
    12c4:	f7 e0       	ldi	r31, 0x07	; 7
    12c6:	7f 2e       	mov	r7, r31
    12c8:	41 2c       	mov	r4, r1
    12ca:	56 01       	movw	r10, r12
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	a9 0e       	add	r10, r25
    12d0:	b1 1c       	adc	r11, r1
    12d2:	f6 01       	movw	r30, r12
    12d4:	60 81       	ld	r22, Z
    12d6:	71 81       	ldd	r23, Z+1	; 0x01
    12d8:	82 81       	ldd	r24, Z+2	; 0x02
    12da:	93 81       	ldd	r25, Z+3	; 0x03
    12dc:	04 2d       	mov	r16, r4
    12de:	a4 01       	movw	r20, r8
    12e0:	4e d4       	rcall	.+2204   	; 0x1b7e <__ftoa_engine>
    12e2:	8c 01       	movw	r16, r24
    12e4:	49 81       	ldd	r20, Y+1	; 0x01
    12e6:	4c 87       	std	Y+12, r20	; 0x0c
    12e8:	40 ff       	sbrs	r20, 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <vfprintf+0x1a0>
    12ec:	43 ff       	sbrs	r20, 3
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <vfprintf+0x1ae>
    12f0:	51 fc       	sbrc	r5, 1
    12f2:	08 c0       	rjmp	.+16     	; 0x1304 <vfprintf+0x1b4>
    12f4:	52 fe       	sbrs	r5, 2
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <vfprintf+0x1ba>
    12f8:	e0 e2       	ldi	r30, 0x20	; 32
    12fa:	de 2e       	mov	r13, r30
    12fc:	07 c0       	rjmp	.+14     	; 0x130c <vfprintf+0x1bc>
    12fe:	7d e2       	ldi	r23, 0x2D	; 45
    1300:	d7 2e       	mov	r13, r23
    1302:	04 c0       	rjmp	.+8      	; 0x130c <vfprintf+0x1bc>
    1304:	6b e2       	ldi	r22, 0x2B	; 43
    1306:	d6 2e       	mov	r13, r22
    1308:	01 c0       	rjmp	.+2      	; 0x130c <vfprintf+0x1bc>
    130a:	d1 2c       	mov	r13, r1
    130c:	8c 85       	ldd	r24, Y+12	; 0x0c
    130e:	8c 70       	andi	r24, 0x0C	; 12
    1310:	89 f1       	breq	.+98     	; 0x1374 <vfprintf+0x224>
    1312:	dd 20       	and	r13, r13
    1314:	11 f0       	breq	.+4      	; 0x131a <vfprintf+0x1ca>
    1316:	84 e0       	ldi	r24, 0x04	; 4
    1318:	01 c0       	rjmp	.+2      	; 0x131c <vfprintf+0x1cc>
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	86 15       	cp	r24, r6
    131e:	10 f0       	brcs	.+4      	; 0x1324 <vfprintf+0x1d4>
    1320:	61 2c       	mov	r6, r1
    1322:	0a c0       	rjmp	.+20     	; 0x1338 <vfprintf+0x1e8>
    1324:	68 1a       	sub	r6, r24
    1326:	53 fc       	sbrc	r5, 3
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <vfprintf+0x1e8>
    132a:	b7 01       	movw	r22, r14
    132c:	80 e2       	ldi	r24, 0x20	; 32
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	2b d5       	rcall	.+2646   	; 0x1d88 <fputc>
    1332:	6a 94       	dec	r6
    1334:	d1 f7       	brne	.-12     	; 0x132a <vfprintf+0x1da>
    1336:	f4 cf       	rjmp	.-24     	; 0x1320 <vfprintf+0x1d0>
    1338:	dd 20       	and	r13, r13
    133a:	21 f0       	breq	.+8      	; 0x1344 <vfprintf+0x1f4>
    133c:	b7 01       	movw	r22, r14
    133e:	8d 2d       	mov	r24, r13
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	22 d5       	rcall	.+2628   	; 0x1d88 <fputc>
    1344:	5c 85       	ldd	r21, Y+12	; 0x0c
    1346:	53 fd       	sbrc	r21, 3
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <vfprintf+0x200>
    134a:	00 e9       	ldi	r16, 0x90	; 144
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	0b c0       	rjmp	.+22     	; 0x1366 <vfprintf+0x216>
    1350:	0c e8       	ldi	r16, 0x8C	; 140
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <vfprintf+0x216>
    1356:	51 10       	cpse	r5, r1
    1358:	80 52       	subi	r24, 0x20	; 32
    135a:	b7 01       	movw	r22, r14
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	14 d5       	rcall	.+2600   	; 0x1d88 <fputc>
    1360:	0f 5f       	subi	r16, 0xFF	; 255
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	02 c0       	rjmp	.+4      	; 0x136a <vfprintf+0x21a>
    1366:	80 e1       	ldi	r24, 0x10	; 16
    1368:	58 22       	and	r5, r24
    136a:	f8 01       	movw	r30, r16
    136c:	84 91       	lpm	r24, Z
    136e:	81 11       	cpse	r24, r1
    1370:	f2 cf       	rjmp	.-28     	; 0x1356 <vfprintf+0x206>
    1372:	59 c2       	rjmp	.+1202   	; 0x1826 <vfprintf+0x6d6>
    1374:	57 fe       	sbrs	r5, 7
    1376:	0e c0       	rjmp	.+28     	; 0x1394 <vfprintf+0x244>
    1378:	40 0e       	add	r4, r16
    137a:	4c 85       	ldd	r20, Y+12	; 0x0c
    137c:	44 ff       	sbrs	r20, 4
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <vfprintf+0x238>
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	81 33       	cpi	r24, 0x31	; 49
    1384:	09 f4       	brne	.+2      	; 0x1388 <vfprintf+0x238>
    1386:	4a 94       	dec	r4
    1388:	14 14       	cp	r1, r4
    138a:	4c f5       	brge	.+82     	; 0x13de <vfprintf+0x28e>
    138c:	58 e0       	ldi	r21, 0x08	; 8
    138e:	54 15       	cp	r21, r4
    1390:	48 f1       	brcs	.+82     	; 0x13e4 <vfprintf+0x294>
    1392:	2c c0       	rjmp	.+88     	; 0x13ec <vfprintf+0x29c>
    1394:	56 fc       	sbrc	r5, 6
    1396:	2a c0       	rjmp	.+84     	; 0x13ec <vfprintf+0x29c>
    1398:	87 2d       	mov	r24, r7
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	80 17       	cp	r24, r16
    139e:	91 07       	cpc	r25, r17
    13a0:	44 f0       	brlt	.+16     	; 0x13b2 <vfprintf+0x262>
    13a2:	0c 3f       	cpi	r16, 0xFC	; 252
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	18 07       	cpc	r17, r24
    13a8:	24 f0       	brlt	.+8      	; 0x13b2 <vfprintf+0x262>
    13aa:	90 e8       	ldi	r25, 0x80	; 128
    13ac:	59 2a       	or	r5, r25
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <vfprintf+0x262>
    13b0:	7a 94       	dec	r7
    13b2:	77 20       	and	r7, r7
    13b4:	49 f0       	breq	.+18     	; 0x13c8 <vfprintf+0x278>
    13b6:	e2 e0       	ldi	r30, 0x02	; 2
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	ec 0f       	add	r30, r28
    13bc:	fd 1f       	adc	r31, r29
    13be:	e7 0d       	add	r30, r7
    13c0:	f1 1d       	adc	r31, r1
    13c2:	80 81       	ld	r24, Z
    13c4:	80 33       	cpi	r24, 0x30	; 48
    13c6:	a1 f3       	breq	.-24     	; 0x13b0 <vfprintf+0x260>
    13c8:	57 fe       	sbrs	r5, 7
    13ca:	10 c0       	rjmp	.+32     	; 0x13ec <vfprintf+0x29c>
    13cc:	47 2c       	mov	r4, r7
    13ce:	43 94       	inc	r4
    13d0:	87 2d       	mov	r24, r7
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	08 17       	cp	r16, r24
    13d6:	19 07       	cpc	r17, r25
    13d8:	44 f4       	brge	.+16     	; 0x13ea <vfprintf+0x29a>
    13da:	70 1a       	sub	r7, r16
    13dc:	07 c0       	rjmp	.+14     	; 0x13ec <vfprintf+0x29c>
    13de:	44 24       	eor	r4, r4
    13e0:	43 94       	inc	r4
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <vfprintf+0x29c>
    13e4:	58 e0       	ldi	r21, 0x08	; 8
    13e6:	45 2e       	mov	r4, r21
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <vfprintf+0x29c>
    13ea:	71 2c       	mov	r7, r1
    13ec:	57 fe       	sbrs	r5, 7
    13ee:	07 c0       	rjmp	.+14     	; 0x13fe <vfprintf+0x2ae>
    13f0:	10 16       	cp	r1, r16
    13f2:	11 06       	cpc	r1, r17
    13f4:	3c f4       	brge	.+14     	; 0x1404 <vfprintf+0x2b4>
    13f6:	98 01       	movw	r18, r16
    13f8:	2f 5f       	subi	r18, 0xFF	; 255
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	05 c0       	rjmp	.+10     	; 0x1408 <vfprintf+0x2b8>
    13fe:	25 e0       	ldi	r18, 0x05	; 5
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <vfprintf+0x2b8>
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	dd 20       	and	r13, r13
    140a:	11 f0       	breq	.+4      	; 0x1410 <vfprintf+0x2c0>
    140c:	2f 5f       	subi	r18, 0xFF	; 255
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	77 20       	and	r7, r7
    1412:	31 f0       	breq	.+12     	; 0x1420 <vfprintf+0x2d0>
    1414:	47 2d       	mov	r20, r7
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	4f 5f       	subi	r20, 0xFF	; 255
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	24 0f       	add	r18, r20
    141e:	35 1f       	adc	r19, r21
    1420:	46 2d       	mov	r20, r6
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	24 17       	cp	r18, r20
    1426:	35 07       	cpc	r19, r21
    1428:	14 f4       	brge	.+4      	; 0x142e <vfprintf+0x2de>
    142a:	62 1a       	sub	r6, r18
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <vfprintf+0x2e0>
    142e:	61 2c       	mov	r6, r1
    1430:	85 2d       	mov	r24, r5
    1432:	89 70       	andi	r24, 0x09	; 9
    1434:	41 f4       	brne	.+16     	; 0x1446 <vfprintf+0x2f6>
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <vfprintf+0x2f2>
    1438:	b7 01       	movw	r22, r14
    143a:	80 e2       	ldi	r24, 0x20	; 32
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a4 d4       	rcall	.+2376   	; 0x1d88 <fputc>
    1440:	6a 94       	dec	r6
    1442:	61 10       	cpse	r6, r1
    1444:	f9 cf       	rjmp	.-14     	; 0x1438 <vfprintf+0x2e8>
    1446:	dd 20       	and	r13, r13
    1448:	21 f0       	breq	.+8      	; 0x1452 <vfprintf+0x302>
    144a:	b7 01       	movw	r22, r14
    144c:	8d 2d       	mov	r24, r13
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9b d4       	rcall	.+2358   	; 0x1d88 <fputc>
    1452:	53 fc       	sbrc	r5, 3
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <vfprintf+0x316>
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <vfprintf+0x312>
    1458:	b7 01       	movw	r22, r14
    145a:	80 e3       	ldi	r24, 0x30	; 48
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	94 d4       	rcall	.+2344   	; 0x1d88 <fputc>
    1460:	6a 94       	dec	r6
    1462:	61 10       	cpse	r6, r1
    1464:	f9 cf       	rjmp	.-14     	; 0x1458 <vfprintf+0x308>
    1466:	57 fe       	sbrs	r5, 7
    1468:	54 c0       	rjmp	.+168    	; 0x1512 <vfprintf+0x3c2>
    146a:	68 01       	movw	r12, r16
    146c:	17 ff       	sbrs	r17, 7
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <vfprintf+0x324>
    1470:	c1 2c       	mov	r12, r1
    1472:	d1 2c       	mov	r13, r1
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	a8 01       	movw	r20, r16
    147a:	44 19       	sub	r20, r4
    147c:	51 09       	sbc	r21, r1
    147e:	5e 87       	std	Y+14, r21	; 0x0e
    1480:	4d 87       	std	Y+13, r20	; 0x0d
    1482:	28 01       	movw	r4, r16
    1484:	4c 18       	sub	r4, r12
    1486:	5d 08       	sbc	r5, r13
    1488:	48 0c       	add	r4, r8
    148a:	59 1c       	adc	r5, r9
    148c:	87 2d       	mov	r24, r7
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	44 27       	eor	r20, r20
    1492:	55 27       	eor	r21, r21
    1494:	48 1b       	sub	r20, r24
    1496:	59 0b       	sbc	r21, r25
    1498:	58 8b       	std	Y+16, r21	; 0x10
    149a:	4f 87       	std	Y+15, r20	; 0x0f
    149c:	5f ef       	ldi	r21, 0xFF	; 255
    149e:	c5 16       	cp	r12, r21
    14a0:	d5 06       	cpc	r13, r21
    14a2:	41 f4       	brne	.+16     	; 0x14b4 <vfprintf+0x364>
    14a4:	b7 01       	movw	r22, r14
    14a6:	8e e2       	ldi	r24, 0x2E	; 46
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	2a 8b       	std	Y+18, r18	; 0x12
    14ac:	39 8b       	std	Y+17, r19	; 0x11
    14ae:	6c d4       	rcall	.+2264   	; 0x1d88 <fputc>
    14b0:	39 89       	ldd	r19, Y+17	; 0x11
    14b2:	2a 89       	ldd	r18, Y+18	; 0x12
    14b4:	0c 15       	cp	r16, r12
    14b6:	1d 05       	cpc	r17, r13
    14b8:	54 f0       	brlt	.+20     	; 0x14ce <vfprintf+0x37e>
    14ba:	4d 85       	ldd	r20, Y+13	; 0x0d
    14bc:	5e 85       	ldd	r21, Y+14	; 0x0e
    14be:	4c 15       	cp	r20, r12
    14c0:	5d 05       	cpc	r21, r13
    14c2:	2c f4       	brge	.+10     	; 0x14ce <vfprintf+0x37e>
    14c4:	f2 01       	movw	r30, r4
    14c6:	e2 0f       	add	r30, r18
    14c8:	f3 1f       	adc	r31, r19
    14ca:	81 81       	ldd	r24, Z+1	; 0x01
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <vfprintf+0x380>
    14ce:	80 e3       	ldi	r24, 0x30	; 48
    14d0:	51 e0       	ldi	r21, 0x01	; 1
    14d2:	c5 1a       	sub	r12, r21
    14d4:	d1 08       	sbc	r13, r1
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	4f 85       	ldd	r20, Y+15	; 0x0f
    14dc:	58 89       	ldd	r21, Y+16	; 0x10
    14de:	c4 16       	cp	r12, r20
    14e0:	d5 06       	cpc	r13, r21
    14e2:	44 f0       	brlt	.+16     	; 0x14f4 <vfprintf+0x3a4>
    14e4:	b7 01       	movw	r22, r14
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	2a 8b       	std	Y+18, r18	; 0x12
    14ea:	39 8b       	std	Y+17, r19	; 0x11
    14ec:	4d d4       	rcall	.+2202   	; 0x1d88 <fputc>
    14ee:	2a 89       	ldd	r18, Y+18	; 0x12
    14f0:	39 89       	ldd	r19, Y+17	; 0x11
    14f2:	d4 cf       	rjmp	.-88     	; 0x149c <vfprintf+0x34c>
    14f4:	c0 16       	cp	r12, r16
    14f6:	d1 06       	cpc	r13, r17
    14f8:	49 f4       	brne	.+18     	; 0x150c <vfprintf+0x3bc>
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	96 33       	cpi	r25, 0x36	; 54
    14fe:	28 f4       	brcc	.+10     	; 0x150a <vfprintf+0x3ba>
    1500:	95 33       	cpi	r25, 0x35	; 53
    1502:	21 f4       	brne	.+8      	; 0x150c <vfprintf+0x3bc>
    1504:	5c 85       	ldd	r21, Y+12	; 0x0c
    1506:	54 fd       	sbrc	r21, 4
    1508:	01 c0       	rjmp	.+2      	; 0x150c <vfprintf+0x3bc>
    150a:	81 e3       	ldi	r24, 0x31	; 49
    150c:	b7 01       	movw	r22, r14
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	44 c0       	rjmp	.+136    	; 0x159a <vfprintf+0x44a>
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	81 33       	cpi	r24, 0x31	; 49
    1516:	19 f0       	breq	.+6      	; 0x151e <vfprintf+0x3ce>
    1518:	4c 85       	ldd	r20, Y+12	; 0x0c
    151a:	4f 7e       	andi	r20, 0xEF	; 239
    151c:	4c 87       	std	Y+12, r20	; 0x0c
    151e:	b7 01       	movw	r22, r14
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	32 d4       	rcall	.+2148   	; 0x1d88 <fputc>
    1524:	71 10       	cpse	r7, r1
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <vfprintf+0x3e2>
    1528:	54 fe       	sbrs	r5, 4
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <vfprintf+0x404>
    152c:	85 e4       	ldi	r24, 0x45	; 69
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	13 c0       	rjmp	.+38     	; 0x1558 <vfprintf+0x408>
    1532:	b7 01       	movw	r22, r14
    1534:	8e e2       	ldi	r24, 0x2E	; 46
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	27 d4       	rcall	.+2126   	; 0x1d88 <fputc>
    153a:	42 e0       	ldi	r20, 0x02	; 2
    153c:	d4 2e       	mov	r13, r20
    153e:	f4 01       	movw	r30, r8
    1540:	ed 0d       	add	r30, r13
    1542:	f1 1d       	adc	r31, r1
    1544:	d3 94       	inc	r13
    1546:	b7 01       	movw	r22, r14
    1548:	80 81       	ld	r24, Z
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	1d d4       	rcall	.+2106   	; 0x1d88 <fputc>
    154e:	7a 94       	dec	r7
    1550:	b1 f7       	brne	.-20     	; 0x153e <vfprintf+0x3ee>
    1552:	ea cf       	rjmp	.-44     	; 0x1528 <vfprintf+0x3d8>
    1554:	85 e6       	ldi	r24, 0x65	; 101
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	b7 01       	movw	r22, r14
    155a:	16 d4       	rcall	.+2092   	; 0x1d88 <fputc>
    155c:	17 fd       	sbrc	r17, 7
    155e:	06 c0       	rjmp	.+12     	; 0x156c <vfprintf+0x41c>
    1560:	01 15       	cp	r16, r1
    1562:	11 05       	cpc	r17, r1
    1564:	41 f4       	brne	.+16     	; 0x1576 <vfprintf+0x426>
    1566:	5c 85       	ldd	r21, Y+12	; 0x0c
    1568:	54 ff       	sbrs	r21, 4
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <vfprintf+0x426>
    156c:	11 95       	neg	r17
    156e:	01 95       	neg	r16
    1570:	11 09       	sbc	r17, r1
    1572:	8d e2       	ldi	r24, 0x2D	; 45
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <vfprintf+0x428>
    1576:	8b e2       	ldi	r24, 0x2B	; 43
    1578:	b7 01       	movw	r22, r14
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	05 d4       	rcall	.+2058   	; 0x1d88 <fputc>
    157e:	80 e3       	ldi	r24, 0x30	; 48
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <vfprintf+0x438>
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	0a 50       	subi	r16, 0x0A	; 10
    1586:	11 09       	sbc	r17, r1
    1588:	0a 30       	cpi	r16, 0x0A	; 10
    158a:	11 05       	cpc	r17, r1
    158c:	d4 f7       	brge	.-12     	; 0x1582 <vfprintf+0x432>
    158e:	b7 01       	movw	r22, r14
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	fa d3       	rcall	.+2036   	; 0x1d88 <fputc>
    1594:	b7 01       	movw	r22, r14
    1596:	c8 01       	movw	r24, r16
    1598:	c0 96       	adiw	r24, 0x30	; 48
    159a:	f6 d3       	rcall	.+2028   	; 0x1d88 <fputc>
    159c:	44 c1       	rjmp	.+648    	; 0x1826 <vfprintf+0x6d6>
    159e:	83 36       	cpi	r24, 0x63	; 99
    15a0:	31 f0       	breq	.+12     	; 0x15ae <vfprintf+0x45e>
    15a2:	83 37       	cpi	r24, 0x73	; 115
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <vfprintf+0x476>
    15a6:	83 35       	cpi	r24, 0x53	; 83
    15a8:	09 f0       	breq	.+2      	; 0x15ac <vfprintf+0x45c>
    15aa:	5a c0       	rjmp	.+180    	; 0x1660 <vfprintf+0x510>
    15ac:	23 c0       	rjmp	.+70     	; 0x15f4 <vfprintf+0x4a4>
    15ae:	56 01       	movw	r10, r12
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	a8 0e       	add	r10, r24
    15b4:	b1 1c       	adc	r11, r1
    15b6:	f6 01       	movw	r30, r12
    15b8:	80 81       	ld	r24, Z
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	cc 24       	eor	r12, r12
    15be:	c3 94       	inc	r12
    15c0:	d1 2c       	mov	r13, r1
    15c2:	84 01       	movw	r16, r8
    15c4:	13 c0       	rjmp	.+38     	; 0x15ec <vfprintf+0x49c>
    15c6:	56 01       	movw	r10, r12
    15c8:	f2 e0       	ldi	r31, 0x02	; 2
    15ca:	af 0e       	add	r10, r31
    15cc:	b1 1c       	adc	r11, r1
    15ce:	f6 01       	movw	r30, r12
    15d0:	00 81       	ld	r16, Z
    15d2:	11 81       	ldd	r17, Z+1	; 0x01
    15d4:	26 ff       	sbrs	r18, 6
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <vfprintf+0x48e>
    15d8:	67 2d       	mov	r22, r7
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <vfprintf+0x492>
    15de:	6f ef       	ldi	r22, 0xFF	; 255
    15e0:	7f ef       	ldi	r23, 0xFF	; 255
    15e2:	c8 01       	movw	r24, r16
    15e4:	2a 8b       	std	Y+18, r18	; 0x12
    15e6:	c5 d3       	rcall	.+1930   	; 0x1d72 <strnlen>
    15e8:	6c 01       	movw	r12, r24
    15ea:	2a 89       	ldd	r18, Y+18	; 0x12
    15ec:	9f e7       	ldi	r25, 0x7F	; 127
    15ee:	59 2e       	mov	r5, r25
    15f0:	52 22       	and	r5, r18
    15f2:	16 c0       	rjmp	.+44     	; 0x1620 <vfprintf+0x4d0>
    15f4:	56 01       	movw	r10, r12
    15f6:	f2 e0       	ldi	r31, 0x02	; 2
    15f8:	af 0e       	add	r10, r31
    15fa:	b1 1c       	adc	r11, r1
    15fc:	f6 01       	movw	r30, r12
    15fe:	00 81       	ld	r16, Z
    1600:	11 81       	ldd	r17, Z+1	; 0x01
    1602:	26 ff       	sbrs	r18, 6
    1604:	03 c0       	rjmp	.+6      	; 0x160c <vfprintf+0x4bc>
    1606:	67 2d       	mov	r22, r7
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <vfprintf+0x4c0>
    160c:	6f ef       	ldi	r22, 0xFF	; 255
    160e:	7f ef       	ldi	r23, 0xFF	; 255
    1610:	c8 01       	movw	r24, r16
    1612:	2a 8b       	std	Y+18, r18	; 0x12
    1614:	8c d3       	rcall	.+1816   	; 0x1d2e <strnlen_P>
    1616:	6c 01       	movw	r12, r24
    1618:	2a 89       	ldd	r18, Y+18	; 0x12
    161a:	80 e8       	ldi	r24, 0x80	; 128
    161c:	58 2e       	mov	r5, r24
    161e:	52 2a       	or	r5, r18
    1620:	53 fc       	sbrc	r5, 3
    1622:	1a c0       	rjmp	.+52     	; 0x1658 <vfprintf+0x508>
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <vfprintf+0x4e0>
    1626:	b7 01       	movw	r22, r14
    1628:	80 e2       	ldi	r24, 0x20	; 32
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	ad d3       	rcall	.+1882   	; 0x1d88 <fputc>
    162e:	6a 94       	dec	r6
    1630:	86 2d       	mov	r24, r6
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	c8 16       	cp	r12, r24
    1636:	d9 06       	cpc	r13, r25
    1638:	b0 f3       	brcs	.-20     	; 0x1626 <vfprintf+0x4d6>
    163a:	0e c0       	rjmp	.+28     	; 0x1658 <vfprintf+0x508>
    163c:	f8 01       	movw	r30, r16
    163e:	57 fc       	sbrc	r5, 7
    1640:	85 91       	lpm	r24, Z+
    1642:	57 fe       	sbrs	r5, 7
    1644:	81 91       	ld	r24, Z+
    1646:	8f 01       	movw	r16, r30
    1648:	b7 01       	movw	r22, r14
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9d d3       	rcall	.+1850   	; 0x1d88 <fputc>
    164e:	61 10       	cpse	r6, r1
    1650:	6a 94       	dec	r6
    1652:	f1 e0       	ldi	r31, 0x01	; 1
    1654:	cf 1a       	sub	r12, r31
    1656:	d1 08       	sbc	r13, r1
    1658:	c1 14       	cp	r12, r1
    165a:	d1 04       	cpc	r13, r1
    165c:	79 f7       	brne	.-34     	; 0x163c <vfprintf+0x4ec>
    165e:	e3 c0       	rjmp	.+454    	; 0x1826 <vfprintf+0x6d6>
    1660:	84 36       	cpi	r24, 0x64	; 100
    1662:	11 f0       	breq	.+4      	; 0x1668 <vfprintf+0x518>
    1664:	89 36       	cpi	r24, 0x69	; 105
    1666:	49 f5       	brne	.+82     	; 0x16ba <vfprintf+0x56a>
    1668:	56 01       	movw	r10, r12
    166a:	27 ff       	sbrs	r18, 7
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <vfprintf+0x530>
    166e:	44 e0       	ldi	r20, 0x04	; 4
    1670:	a4 0e       	add	r10, r20
    1672:	b1 1c       	adc	r11, r1
    1674:	f6 01       	movw	r30, r12
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	0a c0       	rjmp	.+20     	; 0x1694 <vfprintf+0x544>
    1680:	f2 e0       	ldi	r31, 0x02	; 2
    1682:	af 0e       	add	r10, r31
    1684:	b1 1c       	adc	r11, r1
    1686:	f6 01       	movw	r30, r12
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	12 2f       	mov	r17, r18
    1696:	1f 76       	andi	r17, 0x6F	; 111
    1698:	97 ff       	sbrs	r25, 7
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <vfprintf+0x55c>
    169c:	90 95       	com	r25
    169e:	80 95       	com	r24
    16a0:	70 95       	com	r23
    16a2:	61 95       	neg	r22
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	8f 4f       	sbci	r24, 0xFF	; 255
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	10 68       	ori	r17, 0x80	; 128
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	a4 01       	movw	r20, r8
    16b2:	fc d3       	rcall	.+2040   	; 0x1eac <__ultoa_invert>
    16b4:	d8 2e       	mov	r13, r24
    16b6:	d8 18       	sub	r13, r8
    16b8:	3f c0       	rjmp	.+126    	; 0x1738 <vfprintf+0x5e8>
    16ba:	12 2f       	mov	r17, r18
    16bc:	85 37       	cpi	r24, 0x75	; 117
    16be:	21 f4       	brne	.+8      	; 0x16c8 <vfprintf+0x578>
    16c0:	1f 7e       	andi	r17, 0xEF	; 239
    16c2:	2a e0       	ldi	r18, 0x0A	; 10
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	1f c0       	rjmp	.+62     	; 0x1706 <vfprintf+0x5b6>
    16c8:	19 7f       	andi	r17, 0xF9	; 249
    16ca:	8f 36       	cpi	r24, 0x6F	; 111
    16cc:	a1 f0       	breq	.+40     	; 0x16f6 <vfprintf+0x5a6>
    16ce:	20 f4       	brcc	.+8      	; 0x16d8 <vfprintf+0x588>
    16d0:	88 35       	cpi	r24, 0x58	; 88
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <vfprintf+0x586>
    16d4:	ab c0       	rjmp	.+342    	; 0x182c <vfprintf+0x6dc>
    16d6:	0b c0       	rjmp	.+22     	; 0x16ee <vfprintf+0x59e>
    16d8:	80 37       	cpi	r24, 0x70	; 112
    16da:	21 f0       	breq	.+8      	; 0x16e4 <vfprintf+0x594>
    16dc:	88 37       	cpi	r24, 0x78	; 120
    16de:	09 f0       	breq	.+2      	; 0x16e2 <vfprintf+0x592>
    16e0:	a5 c0       	rjmp	.+330    	; 0x182c <vfprintf+0x6dc>
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <vfprintf+0x596>
    16e4:	10 61       	ori	r17, 0x10	; 16
    16e6:	14 ff       	sbrs	r17, 4
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <vfprintf+0x5ac>
    16ea:	14 60       	ori	r17, 0x04	; 4
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <vfprintf+0x5ac>
    16ee:	24 ff       	sbrs	r18, 4
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <vfprintf+0x5b2>
    16f2:	16 60       	ori	r17, 0x06	; 6
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x5b2>
    16f6:	28 e0       	ldi	r18, 0x08	; 8
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <vfprintf+0x5b6>
    16fc:	20 e1       	ldi	r18, 0x10	; 16
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <vfprintf+0x5b6>
    1702:	20 e1       	ldi	r18, 0x10	; 16
    1704:	32 e0       	ldi	r19, 0x02	; 2
    1706:	56 01       	movw	r10, r12
    1708:	17 ff       	sbrs	r17, 7
    170a:	09 c0       	rjmp	.+18     	; 0x171e <vfprintf+0x5ce>
    170c:	f4 e0       	ldi	r31, 0x04	; 4
    170e:	af 0e       	add	r10, r31
    1710:	b1 1c       	adc	r11, r1
    1712:	f6 01       	movw	r30, r12
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	08 c0       	rjmp	.+16     	; 0x172e <vfprintf+0x5de>
    171e:	f2 e0       	ldi	r31, 0x02	; 2
    1720:	af 0e       	add	r10, r31
    1722:	b1 1c       	adc	r11, r1
    1724:	f6 01       	movw	r30, r12
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a4 01       	movw	r20, r8
    1730:	bd d3       	rcall	.+1914   	; 0x1eac <__ultoa_invert>
    1732:	d8 2e       	mov	r13, r24
    1734:	d8 18       	sub	r13, r8
    1736:	1f 77       	andi	r17, 0x7F	; 127
    1738:	16 ff       	sbrs	r17, 6
    173a:	0b c0       	rjmp	.+22     	; 0x1752 <vfprintf+0x602>
    173c:	21 2f       	mov	r18, r17
    173e:	2e 7f       	andi	r18, 0xFE	; 254
    1740:	d7 14       	cp	r13, r7
    1742:	50 f4       	brcc	.+20     	; 0x1758 <vfprintf+0x608>
    1744:	14 ff       	sbrs	r17, 4
    1746:	0a c0       	rjmp	.+20     	; 0x175c <vfprintf+0x60c>
    1748:	12 fd       	sbrc	r17, 2
    174a:	08 c0       	rjmp	.+16     	; 0x175c <vfprintf+0x60c>
    174c:	21 2f       	mov	r18, r17
    174e:	2e 7e       	andi	r18, 0xEE	; 238
    1750:	05 c0       	rjmp	.+10     	; 0x175c <vfprintf+0x60c>
    1752:	0d 2d       	mov	r16, r13
    1754:	21 2f       	mov	r18, r17
    1756:	03 c0       	rjmp	.+6      	; 0x175e <vfprintf+0x60e>
    1758:	0d 2d       	mov	r16, r13
    175a:	01 c0       	rjmp	.+2      	; 0x175e <vfprintf+0x60e>
    175c:	07 2d       	mov	r16, r7
    175e:	24 ff       	sbrs	r18, 4
    1760:	0c c0       	rjmp	.+24     	; 0x177a <vfprintf+0x62a>
    1762:	fe 01       	movw	r30, r28
    1764:	ed 0d       	add	r30, r13
    1766:	f1 1d       	adc	r31, r1
    1768:	80 81       	ld	r24, Z
    176a:	80 33       	cpi	r24, 0x30	; 48
    176c:	11 f4       	brne	.+4      	; 0x1772 <vfprintf+0x622>
    176e:	29 7e       	andi	r18, 0xE9	; 233
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <vfprintf+0x632>
    1772:	22 ff       	sbrs	r18, 2
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <vfprintf+0x630>
    1776:	0e 5f       	subi	r16, 0xFE	; 254
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <vfprintf+0x632>
    177a:	82 2f       	mov	r24, r18
    177c:	86 78       	andi	r24, 0x86	; 134
    177e:	09 f0       	breq	.+2      	; 0x1782 <vfprintf+0x632>
    1780:	0f 5f       	subi	r16, 0xFF	; 255
    1782:	23 fd       	sbrc	r18, 3
    1784:	13 c0       	rjmp	.+38     	; 0x17ac <vfprintf+0x65c>
    1786:	20 ff       	sbrs	r18, 0
    1788:	0e c0       	rjmp	.+28     	; 0x17a6 <vfprintf+0x656>
    178a:	7d 2c       	mov	r7, r13
    178c:	06 15       	cp	r16, r6
    178e:	58 f4       	brcc	.+22     	; 0x17a6 <vfprintf+0x656>
    1790:	76 0c       	add	r7, r6
    1792:	70 1a       	sub	r7, r16
    1794:	06 2d       	mov	r16, r6
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <vfprintf+0x656>
    1798:	b7 01       	movw	r22, r14
    179a:	80 e2       	ldi	r24, 0x20	; 32
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	2a 8b       	std	Y+18, r18	; 0x12
    17a0:	f3 d2       	rcall	.+1510   	; 0x1d88 <fputc>
    17a2:	0f 5f       	subi	r16, 0xFF	; 255
    17a4:	2a 89       	ldd	r18, Y+18	; 0x12
    17a6:	06 15       	cp	r16, r6
    17a8:	b8 f3       	brcs	.-18     	; 0x1798 <vfprintf+0x648>
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <vfprintf+0x664>
    17ac:	06 15       	cp	r16, r6
    17ae:	10 f4       	brcc	.+4      	; 0x17b4 <vfprintf+0x664>
    17b0:	60 1a       	sub	r6, r16
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <vfprintf+0x666>
    17b4:	61 2c       	mov	r6, r1
    17b6:	24 ff       	sbrs	r18, 4
    17b8:	11 c0       	rjmp	.+34     	; 0x17dc <vfprintf+0x68c>
    17ba:	b7 01       	movw	r22, r14
    17bc:	80 e3       	ldi	r24, 0x30	; 48
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	2a 8b       	std	Y+18, r18	; 0x12
    17c2:	e2 d2       	rcall	.+1476   	; 0x1d88 <fputc>
    17c4:	2a 89       	ldd	r18, Y+18	; 0x12
    17c6:	22 ff       	sbrs	r18, 2
    17c8:	1c c0       	rjmp	.+56     	; 0x1802 <vfprintf+0x6b2>
    17ca:	21 ff       	sbrs	r18, 1
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <vfprintf+0x684>
    17ce:	88 e5       	ldi	r24, 0x58	; 88
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <vfprintf+0x688>
    17d4:	88 e7       	ldi	r24, 0x78	; 120
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	b7 01       	movw	r22, r14
    17da:	0c c0       	rjmp	.+24     	; 0x17f4 <vfprintf+0x6a4>
    17dc:	82 2f       	mov	r24, r18
    17de:	86 78       	andi	r24, 0x86	; 134
    17e0:	81 f0       	breq	.+32     	; 0x1802 <vfprintf+0x6b2>
    17e2:	21 fd       	sbrc	r18, 1
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <vfprintf+0x69a>
    17e6:	80 e2       	ldi	r24, 0x20	; 32
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <vfprintf+0x69c>
    17ea:	8b e2       	ldi	r24, 0x2B	; 43
    17ec:	27 fd       	sbrc	r18, 7
    17ee:	8d e2       	ldi	r24, 0x2D	; 45
    17f0:	b7 01       	movw	r22, r14
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	c9 d2       	rcall	.+1426   	; 0x1d88 <fputc>
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <vfprintf+0x6b2>
    17f8:	b7 01       	movw	r22, r14
    17fa:	80 e3       	ldi	r24, 0x30	; 48
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	c4 d2       	rcall	.+1416   	; 0x1d88 <fputc>
    1800:	7a 94       	dec	r7
    1802:	d7 14       	cp	r13, r7
    1804:	c8 f3       	brcs	.-14     	; 0x17f8 <vfprintf+0x6a8>
    1806:	da 94       	dec	r13
    1808:	f4 01       	movw	r30, r8
    180a:	ed 0d       	add	r30, r13
    180c:	f1 1d       	adc	r31, r1
    180e:	b7 01       	movw	r22, r14
    1810:	80 81       	ld	r24, Z
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	b9 d2       	rcall	.+1394   	; 0x1d88 <fputc>
    1816:	d1 10       	cpse	r13, r1
    1818:	f6 cf       	rjmp	.-20     	; 0x1806 <vfprintf+0x6b6>
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x6d6>
    181c:	b7 01       	movw	r22, r14
    181e:	80 e2       	ldi	r24, 0x20	; 32
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	b2 d2       	rcall	.+1380   	; 0x1d88 <fputc>
    1824:	6a 94       	dec	r6
    1826:	61 10       	cpse	r6, r1
    1828:	f9 cf       	rjmp	.-14     	; 0x181c <vfprintf+0x6cc>
    182a:	b6 cc       	rjmp	.-1684   	; 0x1198 <vfprintf+0x48>
    182c:	f7 01       	movw	r30, r14
    182e:	26 81       	ldd	r18, Z+6	; 0x06
    1830:	37 81       	ldd	r19, Z+7	; 0x07
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <vfprintf+0x6e8>
    1834:	2f ef       	ldi	r18, 0xFF	; 255
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	c9 01       	movw	r24, r18
    183a:	62 96       	adiw	r28, 0x12	; 18
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	7f 90       	pop	r7
    1860:	6f 90       	pop	r6
    1862:	5f 90       	pop	r5
    1864:	4f 90       	pop	r4
    1866:	3f 90       	pop	r3
    1868:	2f 90       	pop	r2
    186a:	08 95       	ret

0000186c <__divmodhi4>:
    186c:	97 fb       	bst	r25, 7
    186e:	07 2e       	mov	r0, r23
    1870:	16 f4       	brtc	.+4      	; 0x1876 <__divmodhi4+0xa>
    1872:	00 94       	com	r0
    1874:	06 d0       	rcall	.+12     	; 0x1882 <__divmodhi4_neg1>
    1876:	77 fd       	sbrc	r23, 7
    1878:	08 d0       	rcall	.+16     	; 0x188a <__divmodhi4_neg2>
    187a:	17 d0       	rcall	.+46     	; 0x18aa <__udivmodhi4>
    187c:	07 fc       	sbrc	r0, 7
    187e:	05 d0       	rcall	.+10     	; 0x188a <__divmodhi4_neg2>
    1880:	3e f4       	brtc	.+14     	; 0x1890 <__divmodhi4_exit>

00001882 <__divmodhi4_neg1>:
    1882:	90 95       	com	r25
    1884:	81 95       	neg	r24
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	08 95       	ret

0000188a <__divmodhi4_neg2>:
    188a:	70 95       	com	r23
    188c:	61 95       	neg	r22
    188e:	7f 4f       	sbci	r23, 0xFF	; 255

00001890 <__divmodhi4_exit>:
    1890:	08 95       	ret

00001892 <__umulhisi3>:
    1892:	a2 9f       	mul	r26, r18
    1894:	b0 01       	movw	r22, r0
    1896:	b3 9f       	mul	r27, r19
    1898:	c0 01       	movw	r24, r0
    189a:	a3 9f       	mul	r26, r19
    189c:	01 d0       	rcall	.+2      	; 0x18a0 <__umulhisi3+0xe>
    189e:	b2 9f       	mul	r27, r18
    18a0:	70 0d       	add	r23, r0
    18a2:	81 1d       	adc	r24, r1
    18a4:	11 24       	eor	r1, r1
    18a6:	91 1d       	adc	r25, r1
    18a8:	08 95       	ret

000018aa <__udivmodhi4>:
    18aa:	aa 1b       	sub	r26, r26
    18ac:	bb 1b       	sub	r27, r27
    18ae:	51 e1       	ldi	r21, 0x11	; 17
    18b0:	07 c0       	rjmp	.+14     	; 0x18c0 <__udivmodhi4_ep>

000018b2 <__udivmodhi4_loop>:
    18b2:	aa 1f       	adc	r26, r26
    18b4:	bb 1f       	adc	r27, r27
    18b6:	a6 17       	cp	r26, r22
    18b8:	b7 07       	cpc	r27, r23
    18ba:	10 f0       	brcs	.+4      	; 0x18c0 <__udivmodhi4_ep>
    18bc:	a6 1b       	sub	r26, r22
    18be:	b7 0b       	sbc	r27, r23

000018c0 <__udivmodhi4_ep>:
    18c0:	88 1f       	adc	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	5a 95       	dec	r21
    18c6:	a9 f7       	brne	.-22     	; 0x18b2 <__udivmodhi4_loop>
    18c8:	80 95       	com	r24
    18ca:	90 95       	com	r25
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	08 95       	ret

000018d2 <calloc>:
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	68 9f       	mul	r22, r24
    18dc:	80 01       	movw	r16, r0
    18de:	69 9f       	mul	r22, r25
    18e0:	10 0d       	add	r17, r0
    18e2:	78 9f       	mul	r23, r24
    18e4:	10 0d       	add	r17, r0
    18e6:	11 24       	eor	r1, r1
    18e8:	c8 01       	movw	r24, r16
    18ea:	0f d0       	rcall	.+30     	; 0x190a <malloc>
    18ec:	c8 2f       	mov	r28, r24
    18ee:	d9 2f       	mov	r29, r25
    18f0:	20 97       	sbiw	r28, 0x00	; 0
    18f2:	29 f0       	breq	.+10     	; 0x18fe <calloc+0x2c>
    18f4:	a8 01       	movw	r20, r16
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	8c 2f       	mov	r24, r28
    18fc:	23 d2       	rcall	.+1094   	; 0x1d44 <memset>
    18fe:	ce 01       	movw	r24, r28
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <malloc>:
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	91 05       	cpc	r25, r1
    1916:	10 f4       	brcc	.+4      	; 0x191c <malloc+0x12>
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	e0 91 23 02 	lds	r30, 0x0223
    1920:	f0 91 24 02 	lds	r31, 0x0224
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	c0 e0       	ldi	r28, 0x00	; 0
    192a:	d0 e0       	ldi	r29, 0x00	; 0
    192c:	23 c0       	rjmp	.+70     	; 0x1974 <malloc+0x6a>
    192e:	40 81       	ld	r20, Z
    1930:	51 81       	ldd	r21, Z+1	; 0x01
    1932:	48 17       	cp	r20, r24
    1934:	59 07       	cpc	r21, r25
    1936:	a8 f0       	brcs	.+42     	; 0x1962 <malloc+0x58>
    1938:	48 17       	cp	r20, r24
    193a:	59 07       	cpc	r21, r25
    193c:	61 f4       	brne	.+24     	; 0x1956 <malloc+0x4c>
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	20 97       	sbiw	r28, 0x00	; 0
    1944:	19 f0       	breq	.+6      	; 0x194c <malloc+0x42>
    1946:	9b 83       	std	Y+3, r25	; 0x03
    1948:	8a 83       	std	Y+2, r24	; 0x02
    194a:	2e c0       	rjmp	.+92     	; 0x19a8 <malloc+0x9e>
    194c:	90 93 24 02 	sts	0x0224, r25
    1950:	80 93 23 02 	sts	0x0223, r24
    1954:	29 c0       	rjmp	.+82     	; 0x19a8 <malloc+0x9e>
    1956:	21 15       	cp	r18, r1
    1958:	31 05       	cpc	r19, r1
    195a:	29 f0       	breq	.+10     	; 0x1966 <malloc+0x5c>
    195c:	42 17       	cp	r20, r18
    195e:	53 07       	cpc	r21, r19
    1960:	10 f0       	brcs	.+4      	; 0x1966 <malloc+0x5c>
    1962:	a9 01       	movw	r20, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <malloc+0x60>
    1966:	be 01       	movw	r22, r28
    1968:	df 01       	movw	r26, r30
    196a:	02 81       	ldd	r16, Z+2	; 0x02
    196c:	13 81       	ldd	r17, Z+3	; 0x03
    196e:	ef 01       	movw	r28, r30
    1970:	9a 01       	movw	r18, r20
    1972:	f8 01       	movw	r30, r16
    1974:	30 97       	sbiw	r30, 0x00	; 0
    1976:	d9 f6       	brne	.-74     	; 0x192e <malloc+0x24>
    1978:	21 15       	cp	r18, r1
    197a:	31 05       	cpc	r19, r1
    197c:	09 f1       	breq	.+66     	; 0x19c0 <malloc+0xb6>
    197e:	28 1b       	sub	r18, r24
    1980:	39 0b       	sbc	r19, r25
    1982:	24 30       	cpi	r18, 0x04	; 4
    1984:	31 05       	cpc	r19, r1
    1986:	90 f4       	brcc	.+36     	; 0x19ac <malloc+0xa2>
    1988:	12 96       	adiw	r26, 0x02	; 2
    198a:	8d 91       	ld	r24, X+
    198c:	9c 91       	ld	r25, X
    198e:	13 97       	sbiw	r26, 0x03	; 3
    1990:	61 15       	cp	r22, r1
    1992:	71 05       	cpc	r23, r1
    1994:	21 f0       	breq	.+8      	; 0x199e <malloc+0x94>
    1996:	fb 01       	movw	r30, r22
    1998:	93 83       	std	Z+3, r25	; 0x03
    199a:	82 83       	std	Z+2, r24	; 0x02
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <malloc+0x9c>
    199e:	90 93 24 02 	sts	0x0224, r25
    19a2:	80 93 23 02 	sts	0x0223, r24
    19a6:	fd 01       	movw	r30, r26
    19a8:	32 96       	adiw	r30, 0x02	; 2
    19aa:	44 c0       	rjmp	.+136    	; 0x1a34 <malloc+0x12a>
    19ac:	fd 01       	movw	r30, r26
    19ae:	e2 0f       	add	r30, r18
    19b0:	f3 1f       	adc	r31, r19
    19b2:	81 93       	st	Z+, r24
    19b4:	91 93       	st	Z+, r25
    19b6:	22 50       	subi	r18, 0x02	; 2
    19b8:	31 09       	sbc	r19, r1
    19ba:	2d 93       	st	X+, r18
    19bc:	3c 93       	st	X, r19
    19be:	3a c0       	rjmp	.+116    	; 0x1a34 <malloc+0x12a>
    19c0:	20 91 21 02 	lds	r18, 0x0221
    19c4:	30 91 22 02 	lds	r19, 0x0222
    19c8:	23 2b       	or	r18, r19
    19ca:	41 f4       	brne	.+16     	; 0x19dc <malloc+0xd2>
    19cc:	20 91 02 01 	lds	r18, 0x0102
    19d0:	30 91 03 01 	lds	r19, 0x0103
    19d4:	30 93 22 02 	sts	0x0222, r19
    19d8:	20 93 21 02 	sts	0x0221, r18
    19dc:	20 91 00 01 	lds	r18, 0x0100
    19e0:	30 91 01 01 	lds	r19, 0x0101
    19e4:	21 15       	cp	r18, r1
    19e6:	31 05       	cpc	r19, r1
    19e8:	41 f4       	brne	.+16     	; 0x19fa <malloc+0xf0>
    19ea:	2d b7       	in	r18, 0x3d	; 61
    19ec:	3e b7       	in	r19, 0x3e	; 62
    19ee:	40 91 04 01 	lds	r20, 0x0104
    19f2:	50 91 05 01 	lds	r21, 0x0105
    19f6:	24 1b       	sub	r18, r20
    19f8:	35 0b       	sbc	r19, r21
    19fa:	e0 91 21 02 	lds	r30, 0x0221
    19fe:	f0 91 22 02 	lds	r31, 0x0222
    1a02:	e2 17       	cp	r30, r18
    1a04:	f3 07       	cpc	r31, r19
    1a06:	a0 f4       	brcc	.+40     	; 0x1a30 <malloc+0x126>
    1a08:	2e 1b       	sub	r18, r30
    1a0a:	3f 0b       	sbc	r19, r31
    1a0c:	28 17       	cp	r18, r24
    1a0e:	39 07       	cpc	r19, r25
    1a10:	78 f0       	brcs	.+30     	; 0x1a30 <malloc+0x126>
    1a12:	ac 01       	movw	r20, r24
    1a14:	4e 5f       	subi	r20, 0xFE	; 254
    1a16:	5f 4f       	sbci	r21, 0xFF	; 255
    1a18:	24 17       	cp	r18, r20
    1a1a:	35 07       	cpc	r19, r21
    1a1c:	48 f0       	brcs	.+18     	; 0x1a30 <malloc+0x126>
    1a1e:	4e 0f       	add	r20, r30
    1a20:	5f 1f       	adc	r21, r31
    1a22:	50 93 22 02 	sts	0x0222, r21
    1a26:	40 93 21 02 	sts	0x0221, r20
    1a2a:	81 93       	st	Z+, r24
    1a2c:	91 93       	st	Z+, r25
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <malloc+0x12a>
    1a30:	e0 e0       	ldi	r30, 0x00	; 0
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	cf 01       	movw	r24, r30
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <free>:
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <free+0x12>
    1a50:	8f c0       	rjmp	.+286    	; 0x1b70 <free+0x130>
    1a52:	dc 01       	movw	r26, r24
    1a54:	12 97       	sbiw	r26, 0x02	; 2
    1a56:	13 96       	adiw	r26, 0x03	; 3
    1a58:	1c 92       	st	X, r1
    1a5a:	1e 92       	st	-X, r1
    1a5c:	12 97       	sbiw	r26, 0x02	; 2
    1a5e:	e0 90 23 02 	lds	r14, 0x0223
    1a62:	f0 90 24 02 	lds	r15, 0x0224
    1a66:	e1 14       	cp	r14, r1
    1a68:	f1 04       	cpc	r15, r1
    1a6a:	89 f4       	brne	.+34     	; 0x1a8e <free+0x4e>
    1a6c:	2d 91       	ld	r18, X+
    1a6e:	3c 91       	ld	r19, X
    1a70:	11 97       	sbiw	r26, 0x01	; 1
    1a72:	28 0f       	add	r18, r24
    1a74:	39 1f       	adc	r19, r25
    1a76:	80 91 21 02 	lds	r24, 0x0221
    1a7a:	90 91 22 02 	lds	r25, 0x0222
    1a7e:	82 17       	cp	r24, r18
    1a80:	93 07       	cpc	r25, r19
    1a82:	89 f5       	brne	.+98     	; 0x1ae6 <free+0xa6>
    1a84:	b0 93 22 02 	sts	0x0222, r27
    1a88:	a0 93 21 02 	sts	0x0221, r26
    1a8c:	71 c0       	rjmp	.+226    	; 0x1b70 <free+0x130>
    1a8e:	e7 01       	movw	r28, r14
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <free+0x58>
    1a96:	ea 01       	movw	r28, r20
    1a98:	ca 17       	cp	r28, r26
    1a9a:	db 07       	cpc	r29, r27
    1a9c:	38 f4       	brcc	.+14     	; 0x1aac <free+0x6c>
    1a9e:	4a 81       	ldd	r20, Y+2	; 0x02
    1aa0:	5b 81       	ldd	r21, Y+3	; 0x03
    1aa2:	9e 01       	movw	r18, r28
    1aa4:	41 15       	cp	r20, r1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	b1 f7       	brne	.-20     	; 0x1a96 <free+0x56>
    1aaa:	22 c0       	rjmp	.+68     	; 0x1af0 <free+0xb0>
    1aac:	bc 01       	movw	r22, r24
    1aae:	62 50       	subi	r22, 0x02	; 2
    1ab0:	71 09       	sbc	r23, r1
    1ab2:	fb 01       	movw	r30, r22
    1ab4:	d3 83       	std	Z+3, r29	; 0x03
    1ab6:	c2 83       	std	Z+2, r28	; 0x02
    1ab8:	00 81       	ld	r16, Z
    1aba:	11 81       	ldd	r17, Z+1	; 0x01
    1abc:	ac 01       	movw	r20, r24
    1abe:	40 0f       	add	r20, r16
    1ac0:	51 1f       	adc	r21, r17
    1ac2:	4c 17       	cp	r20, r28
    1ac4:	5d 07       	cpc	r21, r29
    1ac6:	61 f4       	brne	.+24     	; 0x1ae0 <free+0xa0>
    1ac8:	48 81       	ld	r20, Y
    1aca:	59 81       	ldd	r21, Y+1	; 0x01
    1acc:	40 0f       	add	r20, r16
    1ace:	51 1f       	adc	r21, r17
    1ad0:	4e 5f       	subi	r20, 0xFE	; 254
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad4:	51 83       	std	Z+1, r21	; 0x01
    1ad6:	40 83       	st	Z, r20
    1ad8:	4a 81       	ldd	r20, Y+2	; 0x02
    1ada:	5b 81       	ldd	r21, Y+3	; 0x03
    1adc:	53 83       	std	Z+3, r21	; 0x03
    1ade:	42 83       	std	Z+2, r20	; 0x02
    1ae0:	21 15       	cp	r18, r1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <free+0xb0>
    1ae6:	b0 93 24 02 	sts	0x0224, r27
    1aea:	a0 93 23 02 	sts	0x0223, r26
    1aee:	40 c0       	rjmp	.+128    	; 0x1b70 <free+0x130>
    1af0:	f9 01       	movw	r30, r18
    1af2:	b3 83       	std	Z+3, r27	; 0x03
    1af4:	a2 83       	std	Z+2, r26	; 0x02
    1af6:	e9 01       	movw	r28, r18
    1af8:	69 91       	ld	r22, Y+
    1afa:	79 91       	ld	r23, Y+
    1afc:	c6 0f       	add	r28, r22
    1afe:	d7 1f       	adc	r29, r23
    1b00:	ac 17       	cp	r26, r28
    1b02:	bd 07       	cpc	r27, r29
    1b04:	79 f4       	brne	.+30     	; 0x1b24 <free+0xe4>
    1b06:	dc 01       	movw	r26, r24
    1b08:	5e 91       	ld	r21, -X
    1b0a:	4e 91       	ld	r20, -X
    1b0c:	46 0f       	add	r20, r22
    1b0e:	57 1f       	adc	r21, r23
    1b10:	4e 5f       	subi	r20, 0xFE	; 254
    1b12:	5f 4f       	sbci	r21, 0xFF	; 255
    1b14:	51 83       	std	Z+1, r21	; 0x01
    1b16:	40 83       	st	Z, r20
    1b18:	12 96       	adiw	r26, 0x02	; 2
    1b1a:	8d 91       	ld	r24, X+
    1b1c:	9c 91       	ld	r25, X
    1b1e:	13 97       	sbiw	r26, 0x03	; 3
    1b20:	93 83       	std	Z+3, r25	; 0x03
    1b22:	82 83       	std	Z+2, r24	; 0x02
    1b24:	a0 e0       	ldi	r26, 0x00	; 0
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <free+0xee>
    1b2a:	d7 01       	movw	r26, r14
    1b2c:	7c 01       	movw	r14, r24
    1b2e:	f7 01       	movw	r30, r14
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	c9 f7       	brne	.-14     	; 0x1b2a <free+0xea>
    1b38:	c7 01       	movw	r24, r14
    1b3a:	02 96       	adiw	r24, 0x02	; 2
    1b3c:	20 81       	ld	r18, Z
    1b3e:	31 81       	ldd	r19, Z+1	; 0x01
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	20 91 21 02 	lds	r18, 0x0221
    1b48:	30 91 22 02 	lds	r19, 0x0222
    1b4c:	28 17       	cp	r18, r24
    1b4e:	39 07       	cpc	r19, r25
    1b50:	79 f4       	brne	.+30     	; 0x1b70 <free+0x130>
    1b52:	10 97       	sbiw	r26, 0x00	; 0
    1b54:	29 f4       	brne	.+10     	; 0x1b60 <free+0x120>
    1b56:	10 92 24 02 	sts	0x0224, r1
    1b5a:	10 92 23 02 	sts	0x0223, r1
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <free+0x128>
    1b60:	13 96       	adiw	r26, 0x03	; 3
    1b62:	1c 92       	st	X, r1
    1b64:	1e 92       	st	-X, r1
    1b66:	12 97       	sbiw	r26, 0x02	; 2
    1b68:	f0 92 22 02 	sts	0x0222, r15
    1b6c:	e0 92 21 02 	sts	0x0221, r14
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	08 95       	ret

00001b7e <__ftoa_engine>:
    1b7e:	28 30       	cpi	r18, 0x08	; 8
    1b80:	08 f0       	brcs	.+2      	; 0x1b84 <__ftoa_engine+0x6>
    1b82:	27 e0       	ldi	r18, 0x07	; 7
    1b84:	33 27       	eor	r19, r19
    1b86:	da 01       	movw	r26, r20
    1b88:	99 0f       	add	r25, r25
    1b8a:	31 1d       	adc	r19, r1
    1b8c:	87 fd       	sbrc	r24, 7
    1b8e:	91 60       	ori	r25, 0x01	; 1
    1b90:	00 96       	adiw	r24, 0x00	; 0
    1b92:	61 05       	cpc	r22, r1
    1b94:	71 05       	cpc	r23, r1
    1b96:	39 f4       	brne	.+14     	; 0x1ba6 <__ftoa_engine+0x28>
    1b98:	32 60       	ori	r19, 0x02	; 2
    1b9a:	2e 5f       	subi	r18, 0xFE	; 254
    1b9c:	3d 93       	st	X+, r19
    1b9e:	30 e3       	ldi	r19, 0x30	; 48
    1ba0:	2a 95       	dec	r18
    1ba2:	e1 f7       	brne	.-8      	; 0x1b9c <__ftoa_engine+0x1e>
    1ba4:	08 95       	ret
    1ba6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba8:	30 f0       	brcs	.+12     	; 0x1bb6 <__ftoa_engine+0x38>
    1baa:	80 38       	cpi	r24, 0x80	; 128
    1bac:	71 05       	cpc	r23, r1
    1bae:	61 05       	cpc	r22, r1
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <__ftoa_engine+0x36>
    1bb2:	3c 5f       	subi	r19, 0xFC	; 252
    1bb4:	3c 5f       	subi	r19, 0xFC	; 252
    1bb6:	3d 93       	st	X+, r19
    1bb8:	91 30       	cpi	r25, 0x01	; 1
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <__ftoa_engine+0x40>
    1bbc:	80 68       	ori	r24, 0x80	; 128
    1bbe:	91 1d       	adc	r25, r1
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	1f 93       	push	r17
    1bc6:	0f 93       	push	r16
    1bc8:	ff 92       	push	r15
    1bca:	ef 92       	push	r14
    1bcc:	19 2f       	mov	r17, r25
    1bce:	98 7f       	andi	r25, 0xF8	; 248
    1bd0:	96 95       	lsr	r25
    1bd2:	e9 2f       	mov	r30, r25
    1bd4:	96 95       	lsr	r25
    1bd6:	96 95       	lsr	r25
    1bd8:	e9 0f       	add	r30, r25
    1bda:	ff 27       	eor	r31, r31
    1bdc:	e2 51       	subi	r30, 0x12	; 18
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	99 27       	eor	r25, r25
    1be2:	33 27       	eor	r19, r19
    1be4:	ee 24       	eor	r14, r14
    1be6:	ff 24       	eor	r15, r15
    1be8:	a7 01       	movw	r20, r14
    1bea:	e7 01       	movw	r28, r14
    1bec:	05 90       	lpm	r0, Z+
    1bee:	08 94       	sec
    1bf0:	07 94       	ror	r0
    1bf2:	28 f4       	brcc	.+10     	; 0x1bfe <__ftoa_engine+0x80>
    1bf4:	36 0f       	add	r19, r22
    1bf6:	e7 1e       	adc	r14, r23
    1bf8:	f8 1e       	adc	r15, r24
    1bfa:	49 1f       	adc	r20, r25
    1bfc:	51 1d       	adc	r21, r1
    1bfe:	66 0f       	add	r22, r22
    1c00:	77 1f       	adc	r23, r23
    1c02:	88 1f       	adc	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	06 94       	lsr	r0
    1c08:	a1 f7       	brne	.-24     	; 0x1bf2 <__ftoa_engine+0x74>
    1c0a:	05 90       	lpm	r0, Z+
    1c0c:	07 94       	ror	r0
    1c0e:	28 f4       	brcc	.+10     	; 0x1c1a <__ftoa_engine+0x9c>
    1c10:	e7 0e       	add	r14, r23
    1c12:	f8 1e       	adc	r15, r24
    1c14:	49 1f       	adc	r20, r25
    1c16:	56 1f       	adc	r21, r22
    1c18:	c1 1d       	adc	r28, r1
    1c1a:	77 0f       	add	r23, r23
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	66 1f       	adc	r22, r22
    1c22:	06 94       	lsr	r0
    1c24:	a1 f7       	brne	.-24     	; 0x1c0e <__ftoa_engine+0x90>
    1c26:	05 90       	lpm	r0, Z+
    1c28:	07 94       	ror	r0
    1c2a:	28 f4       	brcc	.+10     	; 0x1c36 <__ftoa_engine+0xb8>
    1c2c:	f8 0e       	add	r15, r24
    1c2e:	49 1f       	adc	r20, r25
    1c30:	56 1f       	adc	r21, r22
    1c32:	c7 1f       	adc	r28, r23
    1c34:	d1 1d       	adc	r29, r1
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	66 1f       	adc	r22, r22
    1c3c:	77 1f       	adc	r23, r23
    1c3e:	06 94       	lsr	r0
    1c40:	a1 f7       	brne	.-24     	; 0x1c2a <__ftoa_engine+0xac>
    1c42:	05 90       	lpm	r0, Z+
    1c44:	07 94       	ror	r0
    1c46:	20 f4       	brcc	.+8      	; 0x1c50 <__ftoa_engine+0xd2>
    1c48:	49 0f       	add	r20, r25
    1c4a:	56 1f       	adc	r21, r22
    1c4c:	c7 1f       	adc	r28, r23
    1c4e:	d8 1f       	adc	r29, r24
    1c50:	99 0f       	add	r25, r25
    1c52:	66 1f       	adc	r22, r22
    1c54:	77 1f       	adc	r23, r23
    1c56:	88 1f       	adc	r24, r24
    1c58:	06 94       	lsr	r0
    1c5a:	a9 f7       	brne	.-22     	; 0x1c46 <__ftoa_engine+0xc8>
    1c5c:	84 91       	lpm	r24, Z
    1c5e:	10 95       	com	r17
    1c60:	17 70       	andi	r17, 0x07	; 7
    1c62:	41 f0       	breq	.+16     	; 0x1c74 <__ftoa_engine+0xf6>
    1c64:	d6 95       	lsr	r29
    1c66:	c7 95       	ror	r28
    1c68:	57 95       	ror	r21
    1c6a:	47 95       	ror	r20
    1c6c:	f7 94       	ror	r15
    1c6e:	e7 94       	ror	r14
    1c70:	1a 95       	dec	r17
    1c72:	c1 f7       	brne	.-16     	; 0x1c64 <__ftoa_engine+0xe6>
    1c74:	e4 e9       	ldi	r30, 0x94	; 148
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	68 94       	set
    1c7a:	15 90       	lpm	r1, Z+
    1c7c:	15 91       	lpm	r17, Z+
    1c7e:	35 91       	lpm	r19, Z+
    1c80:	65 91       	lpm	r22, Z+
    1c82:	95 91       	lpm	r25, Z+
    1c84:	05 90       	lpm	r0, Z+
    1c86:	7f e2       	ldi	r23, 0x2F	; 47
    1c88:	73 95       	inc	r23
    1c8a:	e1 18       	sub	r14, r1
    1c8c:	f1 0a       	sbc	r15, r17
    1c8e:	43 0b       	sbc	r20, r19
    1c90:	56 0b       	sbc	r21, r22
    1c92:	c9 0b       	sbc	r28, r25
    1c94:	d0 09       	sbc	r29, r0
    1c96:	c0 f7       	brcc	.-16     	; 0x1c88 <__ftoa_engine+0x10a>
    1c98:	e1 0c       	add	r14, r1
    1c9a:	f1 1e       	adc	r15, r17
    1c9c:	43 1f       	adc	r20, r19
    1c9e:	56 1f       	adc	r21, r22
    1ca0:	c9 1f       	adc	r28, r25
    1ca2:	d0 1d       	adc	r29, r0
    1ca4:	7e f4       	brtc	.+30     	; 0x1cc4 <__ftoa_engine+0x146>
    1ca6:	70 33       	cpi	r23, 0x30	; 48
    1ca8:	11 f4       	brne	.+4      	; 0x1cae <__ftoa_engine+0x130>
    1caa:	8a 95       	dec	r24
    1cac:	e6 cf       	rjmp	.-52     	; 0x1c7a <__ftoa_engine+0xfc>
    1cae:	e8 94       	clt
    1cb0:	01 50       	subi	r16, 0x01	; 1
    1cb2:	30 f0       	brcs	.+12     	; 0x1cc0 <__ftoa_engine+0x142>
    1cb4:	08 0f       	add	r16, r24
    1cb6:	0a f4       	brpl	.+2      	; 0x1cba <__ftoa_engine+0x13c>
    1cb8:	00 27       	eor	r16, r16
    1cba:	02 17       	cp	r16, r18
    1cbc:	08 f4       	brcc	.+2      	; 0x1cc0 <__ftoa_engine+0x142>
    1cbe:	20 2f       	mov	r18, r16
    1cc0:	23 95       	inc	r18
    1cc2:	02 2f       	mov	r16, r18
    1cc4:	7a 33       	cpi	r23, 0x3A	; 58
    1cc6:	28 f0       	brcs	.+10     	; 0x1cd2 <__ftoa_engine+0x154>
    1cc8:	79 e3       	ldi	r23, 0x39	; 57
    1cca:	7d 93       	st	X+, r23
    1ccc:	2a 95       	dec	r18
    1cce:	e9 f7       	brne	.-6      	; 0x1cca <__ftoa_engine+0x14c>
    1cd0:	10 c0       	rjmp	.+32     	; 0x1cf2 <__ftoa_engine+0x174>
    1cd2:	7d 93       	st	X+, r23
    1cd4:	2a 95       	dec	r18
    1cd6:	89 f6       	brne	.-94     	; 0x1c7a <__ftoa_engine+0xfc>
    1cd8:	06 94       	lsr	r0
    1cda:	97 95       	ror	r25
    1cdc:	67 95       	ror	r22
    1cde:	37 95       	ror	r19
    1ce0:	17 95       	ror	r17
    1ce2:	17 94       	ror	r1
    1ce4:	e1 18       	sub	r14, r1
    1ce6:	f1 0a       	sbc	r15, r17
    1ce8:	43 0b       	sbc	r20, r19
    1cea:	56 0b       	sbc	r21, r22
    1cec:	c9 0b       	sbc	r28, r25
    1cee:	d0 09       	sbc	r29, r0
    1cf0:	98 f0       	brcs	.+38     	; 0x1d18 <__ftoa_engine+0x19a>
    1cf2:	23 95       	inc	r18
    1cf4:	7e 91       	ld	r23, -X
    1cf6:	73 95       	inc	r23
    1cf8:	7a 33       	cpi	r23, 0x3A	; 58
    1cfa:	08 f0       	brcs	.+2      	; 0x1cfe <__ftoa_engine+0x180>
    1cfc:	70 e3       	ldi	r23, 0x30	; 48
    1cfe:	7c 93       	st	X, r23
    1d00:	20 13       	cpse	r18, r16
    1d02:	b8 f7       	brcc	.-18     	; 0x1cf2 <__ftoa_engine+0x174>
    1d04:	7e 91       	ld	r23, -X
    1d06:	70 61       	ori	r23, 0x10	; 16
    1d08:	7d 93       	st	X+, r23
    1d0a:	30 f0       	brcs	.+12     	; 0x1d18 <__ftoa_engine+0x19a>
    1d0c:	83 95       	inc	r24
    1d0e:	71 e3       	ldi	r23, 0x31	; 49
    1d10:	7d 93       	st	X+, r23
    1d12:	70 e3       	ldi	r23, 0x30	; 48
    1d14:	2a 95       	dec	r18
    1d16:	e1 f7       	brne	.-8      	; 0x1d10 <__ftoa_engine+0x192>
    1d18:	11 24       	eor	r1, r1
    1d1a:	ef 90       	pop	r14
    1d1c:	ff 90       	pop	r15
    1d1e:	0f 91       	pop	r16
    1d20:	1f 91       	pop	r17
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	99 27       	eor	r25, r25
    1d28:	87 fd       	sbrc	r24, 7
    1d2a:	90 95       	com	r25
    1d2c:	08 95       	ret

00001d2e <strnlen_P>:
    1d2e:	fc 01       	movw	r30, r24
    1d30:	05 90       	lpm	r0, Z+
    1d32:	61 50       	subi	r22, 0x01	; 1
    1d34:	70 40       	sbci	r23, 0x00	; 0
    1d36:	01 10       	cpse	r0, r1
    1d38:	d8 f7       	brcc	.-10     	; 0x1d30 <strnlen_P+0x2>
    1d3a:	80 95       	com	r24
    1d3c:	90 95       	com	r25
    1d3e:	8e 0f       	add	r24, r30
    1d40:	9f 1f       	adc	r25, r31
    1d42:	08 95       	ret

00001d44 <memset>:
    1d44:	dc 01       	movw	r26, r24
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <memset+0x6>
    1d48:	6d 93       	st	X+, r22
    1d4a:	41 50       	subi	r20, 0x01	; 1
    1d4c:	50 40       	sbci	r21, 0x00	; 0
    1d4e:	e0 f7       	brcc	.-8      	; 0x1d48 <memset+0x4>
    1d50:	08 95       	ret

00001d52 <strcmp>:
    1d52:	fb 01       	movw	r30, r22
    1d54:	dc 01       	movw	r26, r24
    1d56:	8d 91       	ld	r24, X+
    1d58:	01 90       	ld	r0, Z+
    1d5a:	80 19       	sub	r24, r0
    1d5c:	01 10       	cpse	r0, r1
    1d5e:	d9 f3       	breq	.-10     	; 0x1d56 <strcmp+0x4>
    1d60:	99 0b       	sbc	r25, r25
    1d62:	08 95       	ret

00001d64 <strcpy>:
    1d64:	fb 01       	movw	r30, r22
    1d66:	dc 01       	movw	r26, r24
    1d68:	01 90       	ld	r0, Z+
    1d6a:	0d 92       	st	X+, r0
    1d6c:	00 20       	and	r0, r0
    1d6e:	e1 f7       	brne	.-8      	; 0x1d68 <strcpy+0x4>
    1d70:	08 95       	ret

00001d72 <strnlen>:
    1d72:	fc 01       	movw	r30, r24
    1d74:	61 50       	subi	r22, 0x01	; 1
    1d76:	70 40       	sbci	r23, 0x00	; 0
    1d78:	01 90       	ld	r0, Z+
    1d7a:	01 10       	cpse	r0, r1
    1d7c:	d8 f7       	brcc	.-10     	; 0x1d74 <strnlen+0x2>
    1d7e:	80 95       	com	r24
    1d80:	90 95       	com	r25
    1d82:	8e 0f       	add	r24, r30
    1d84:	9f 1f       	adc	r25, r31
    1d86:	08 95       	ret

00001d88 <fputc>:
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	8c 01       	movw	r16, r24
    1d92:	eb 01       	movw	r28, r22
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	81 fd       	sbrc	r24, 1
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <fputc+0x18>
    1d9a:	0f ef       	ldi	r16, 0xFF	; 255
    1d9c:	1f ef       	ldi	r17, 0xFF	; 255
    1d9e:	1a c0       	rjmp	.+52     	; 0x1dd4 <fputc+0x4c>
    1da0:	82 ff       	sbrs	r24, 2
    1da2:	0d c0       	rjmp	.+26     	; 0x1dbe <fputc+0x36>
    1da4:	2e 81       	ldd	r18, Y+6	; 0x06
    1da6:	3f 81       	ldd	r19, Y+7	; 0x07
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dac:	28 17       	cp	r18, r24
    1dae:	39 07       	cpc	r19, r25
    1db0:	64 f4       	brge	.+24     	; 0x1dca <fputc+0x42>
    1db2:	e8 81       	ld	r30, Y
    1db4:	f9 81       	ldd	r31, Y+1	; 0x01
    1db6:	01 93       	st	Z+, r16
    1db8:	f9 83       	std	Y+1, r31	; 0x01
    1dba:	e8 83       	st	Y, r30
    1dbc:	06 c0       	rjmp	.+12     	; 0x1dca <fputc+0x42>
    1dbe:	e8 85       	ldd	r30, Y+8	; 0x08
    1dc0:	f9 85       	ldd	r31, Y+9	; 0x09
    1dc2:	80 2f       	mov	r24, r16
    1dc4:	09 95       	icall
    1dc6:	89 2b       	or	r24, r25
    1dc8:	41 f7       	brne	.-48     	; 0x1d9a <fputc+0x12>
    1dca:	8e 81       	ldd	r24, Y+6	; 0x06
    1dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dce:	01 96       	adiw	r24, 0x01	; 1
    1dd0:	9f 83       	std	Y+7, r25	; 0x07
    1dd2:	8e 83       	std	Y+6, r24	; 0x06
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <sprintf>:
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	2e 97       	sbiw	r28, 0x0e	; 14
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	0d 89       	ldd	r16, Y+21	; 0x15
    1dfa:	1e 89       	ldd	r17, Y+22	; 0x16
    1dfc:	86 e0       	ldi	r24, 0x06	; 6
    1dfe:	8c 83       	std	Y+4, r24	; 0x04
    1e00:	1a 83       	std	Y+2, r17	; 0x02
    1e02:	09 83       	std	Y+1, r16	; 0x01
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	9f e7       	ldi	r25, 0x7F	; 127
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	49 96       	adiw	r24, 0x19	; 25
    1e10:	ac 01       	movw	r20, r24
    1e12:	6f 89       	ldd	r22, Y+23	; 0x17
    1e14:	78 8d       	ldd	r23, Y+24	; 0x18
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	9a d9       	rcall	.-3276   	; 0x1150 <vfprintf>
    1e1c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e1e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e20:	e0 0f       	add	r30, r16
    1e22:	f1 1f       	adc	r31, r17
    1e24:	10 82       	st	Z, r1
    1e26:	2e 96       	adiw	r28, 0x0e	; 14
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	08 95       	ret

00001e3c <vsnprintf>:
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	2e 97       	sbiw	r28, 0x0e	; 14
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	8c 01       	movw	r16, r24
    1e56:	ca 01       	movw	r24, r20
    1e58:	46 e0       	ldi	r20, 0x06	; 6
    1e5a:	4c 83       	std	Y+4, r20	; 0x04
    1e5c:	1a 83       	std	Y+2, r17	; 0x02
    1e5e:	09 83       	std	Y+1, r16	; 0x01
    1e60:	77 ff       	sbrs	r23, 7
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <vsnprintf+0x2c>
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	70 e8       	ldi	r23, 0x80	; 128
    1e68:	61 50       	subi	r22, 0x01	; 1
    1e6a:	71 09       	sbc	r23, r1
    1e6c:	7e 83       	std	Y+6, r23	; 0x06
    1e6e:	6d 83       	std	Y+5, r22	; 0x05
    1e70:	a9 01       	movw	r20, r18
    1e72:	bc 01       	movw	r22, r24
    1e74:	ce 01       	movw	r24, r28
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	6b d9       	rcall	.-3370   	; 0x1150 <vfprintf>
    1e7a:	4d 81       	ldd	r20, Y+5	; 0x05
    1e7c:	5e 81       	ldd	r21, Y+6	; 0x06
    1e7e:	57 fd       	sbrc	r21, 7
    1e80:	0a c0       	rjmp	.+20     	; 0x1e96 <vsnprintf+0x5a>
    1e82:	2f 81       	ldd	r18, Y+7	; 0x07
    1e84:	38 85       	ldd	r19, Y+8	; 0x08
    1e86:	42 17       	cp	r20, r18
    1e88:	53 07       	cpc	r21, r19
    1e8a:	0c f4       	brge	.+2      	; 0x1e8e <vsnprintf+0x52>
    1e8c:	9a 01       	movw	r18, r20
    1e8e:	f8 01       	movw	r30, r16
    1e90:	e2 0f       	add	r30, r18
    1e92:	f3 1f       	adc	r31, r19
    1e94:	10 82       	st	Z, r1
    1e96:	2e 96       	adiw	r28, 0x0e	; 14
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <__ultoa_invert>:
    1eac:	fa 01       	movw	r30, r20
    1eae:	aa 27       	eor	r26, r26
    1eb0:	28 30       	cpi	r18, 0x08	; 8
    1eb2:	51 f1       	breq	.+84     	; 0x1f08 <__ultoa_invert+0x5c>
    1eb4:	20 31       	cpi	r18, 0x10	; 16
    1eb6:	81 f1       	breq	.+96     	; 0x1f18 <__ultoa_invert+0x6c>
    1eb8:	e8 94       	clt
    1eba:	6f 93       	push	r22
    1ebc:	6e 7f       	andi	r22, 0xFE	; 254
    1ebe:	6e 5f       	subi	r22, 0xFE	; 254
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	af 4f       	sbci	r26, 0xFF	; 255
    1ec8:	b1 e0       	ldi	r27, 0x01	; 1
    1eca:	3e d0       	rcall	.+124    	; 0x1f48 <__ultoa_invert+0x9c>
    1ecc:	b4 e0       	ldi	r27, 0x04	; 4
    1ece:	3c d0       	rcall	.+120    	; 0x1f48 <__ultoa_invert+0x9c>
    1ed0:	67 0f       	add	r22, r23
    1ed2:	78 1f       	adc	r23, r24
    1ed4:	89 1f       	adc	r24, r25
    1ed6:	9a 1f       	adc	r25, r26
    1ed8:	a1 1d       	adc	r26, r1
    1eda:	68 0f       	add	r22, r24
    1edc:	79 1f       	adc	r23, r25
    1ede:	8a 1f       	adc	r24, r26
    1ee0:	91 1d       	adc	r25, r1
    1ee2:	a1 1d       	adc	r26, r1
    1ee4:	6a 0f       	add	r22, r26
    1ee6:	71 1d       	adc	r23, r1
    1ee8:	81 1d       	adc	r24, r1
    1eea:	91 1d       	adc	r25, r1
    1eec:	a1 1d       	adc	r26, r1
    1eee:	20 d0       	rcall	.+64     	; 0x1f30 <__ultoa_invert+0x84>
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <__ultoa_invert+0x48>
    1ef2:	68 94       	set
    1ef4:	3f 91       	pop	r19
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	26 9f       	mul	r18, r22
    1efa:	11 24       	eor	r1, r1
    1efc:	30 19       	sub	r19, r0
    1efe:	30 5d       	subi	r19, 0xD0	; 208
    1f00:	31 93       	st	Z+, r19
    1f02:	de f6       	brtc	.-74     	; 0x1eba <__ultoa_invert+0xe>
    1f04:	cf 01       	movw	r24, r30
    1f06:	08 95       	ret
    1f08:	46 2f       	mov	r20, r22
    1f0a:	47 70       	andi	r20, 0x07	; 7
    1f0c:	40 5d       	subi	r20, 0xD0	; 208
    1f0e:	41 93       	st	Z+, r20
    1f10:	b3 e0       	ldi	r27, 0x03	; 3
    1f12:	0f d0       	rcall	.+30     	; 0x1f32 <__ultoa_invert+0x86>
    1f14:	c9 f7       	brne	.-14     	; 0x1f08 <__ultoa_invert+0x5c>
    1f16:	f6 cf       	rjmp	.-20     	; 0x1f04 <__ultoa_invert+0x58>
    1f18:	46 2f       	mov	r20, r22
    1f1a:	4f 70       	andi	r20, 0x0F	; 15
    1f1c:	40 5d       	subi	r20, 0xD0	; 208
    1f1e:	4a 33       	cpi	r20, 0x3A	; 58
    1f20:	18 f0       	brcs	.+6      	; 0x1f28 <__ultoa_invert+0x7c>
    1f22:	49 5d       	subi	r20, 0xD9	; 217
    1f24:	31 fd       	sbrc	r19, 1
    1f26:	40 52       	subi	r20, 0x20	; 32
    1f28:	41 93       	st	Z+, r20
    1f2a:	02 d0       	rcall	.+4      	; 0x1f30 <__ultoa_invert+0x84>
    1f2c:	a9 f7       	brne	.-22     	; 0x1f18 <__ultoa_invert+0x6c>
    1f2e:	ea cf       	rjmp	.-44     	; 0x1f04 <__ultoa_invert+0x58>
    1f30:	b4 e0       	ldi	r27, 0x04	; 4
    1f32:	a6 95       	lsr	r26
    1f34:	97 95       	ror	r25
    1f36:	87 95       	ror	r24
    1f38:	77 95       	ror	r23
    1f3a:	67 95       	ror	r22
    1f3c:	ba 95       	dec	r27
    1f3e:	c9 f7       	brne	.-14     	; 0x1f32 <__ultoa_invert+0x86>
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 05       	cpc	r22, r1
    1f44:	71 05       	cpc	r23, r1
    1f46:	08 95       	ret
    1f48:	9b 01       	movw	r18, r22
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	0a 2e       	mov	r0, r26
    1f4e:	06 94       	lsr	r0
    1f50:	57 95       	ror	r21
    1f52:	47 95       	ror	r20
    1f54:	37 95       	ror	r19
    1f56:	27 95       	ror	r18
    1f58:	ba 95       	dec	r27
    1f5a:	c9 f7       	brne	.-14     	; 0x1f4e <__ultoa_invert+0xa2>
    1f5c:	62 0f       	add	r22, r18
    1f5e:	73 1f       	adc	r23, r19
    1f60:	84 1f       	adc	r24, r20
    1f62:	95 1f       	adc	r25, r21
    1f64:	a0 1d       	adc	r26, r0
    1f66:	08 95       	ret

00001f68 <_exit>:
    1f68:	f8 94       	cli

00001f6a <__stop_program>:
    1f6a:	ff cf       	rjmp	.-2      	; 0x1f6a <__stop_program>
