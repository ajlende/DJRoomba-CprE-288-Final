
iRobot Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024c  00800100  000021b0  00002244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  0080034c  0080034c  00002490  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00002490  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa2  00000000  00000000  000056dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000617e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000300  00000000  00000000  000061ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a6e  00000000  00000000  000064ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000103a  00000000  00000000  00009f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002078  00000000  00000000  0000af55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000081c  00000000  00000000  0000cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c70  00000000  00000000  0000d7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000025d7  00000000  00000000  0000e45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000268  00000000  00000000  00010a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c4       	rjmp	.+2446   	; 0x9b4 <__vector_9>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e6 c4       	rjmp	.+2508   	; 0x9fa <__vector_11>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c0       	rjmp	.+396    	; 0x1ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__c.2006>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.2004>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	13 e0       	ldi	r17, 0x03	; 3
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e0 eb       	ldi	r30, 0xB0	; 176
     1a2:	f1 e2       	ldi	r31, 0x21	; 33
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	ac 34       	cpi	r26, 0x4C	; 76
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	23 e0       	ldi	r18, 0x03	; 3
     1b6:	ac e4       	ldi	r26, 0x4C	; 76
     1b8:	b3 e0       	ldi	r27, 0x03	; 3
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a7 3a       	cpi	r26, 0xA7	; 167
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	03 d0       	rcall	.+6      	; 0x1cc <main>
     1c6:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <main>:
	float distance;
	float width;
}object_t;

int main(void)
{
     1cc:	2f 92       	push	r2
     1ce:	3f 92       	push	r3
     1d0:	4f 92       	push	r4
     1d2:	5f 92       	push	r5
     1d4:	6f 92       	push	r6
     1d6:	7f 92       	push	r7
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	c7 56       	subi	r28, 0x67	; 103
     1f6:	d1 09       	sbc	r29, r1
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
	
	serial_init(); // Initialize the Serial Communications
     202:	51 d3       	rcall	.+1698   	; 0x8a6 <serial_init>
	
	ADC_init(); // Initialize the IR sensor
     204:	7c d3       	rcall	.+1784   	; 0x8fe <ADC_init>
	
	ping_init(); // Initialize the Ping))) sensor
     206:	f4 d3       	rcall	.+2024   	; 0x9f0 <ping_init>
	
	lcd_init(); // Initialize the LCD
     208:	6c d1       	rcall	.+728    	; 0x4e2 <lcd_init>
	
	init_push_buttons(); // Initialize the buttons
     20a:	eb d3       	rcall	.+2006   	; 0x9e2 <init_push_buttons>
	
	timer3_init(); // Initialize the servo motor
     20c:	70 d4       	rcall	.+2272   	; 0xaee <timer3_init>
	
	oi_t *sensor_data = oi_alloc();
     20e:	34 d2       	rcall	.+1128   	; 0x678 <oi_alloc>
     210:	a8 96       	adiw	r28, 0x28	; 40
     212:	9f af       	std	Y+63, r25	; 0x3f
     214:	8e af       	std	Y+62, r24	; 0x3e
     216:	a8 97       	sbiw	r28, 0x28	; 40
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
     218:	1a d3       	rcall	.+1588   	; 0x84e <oi_init>
	int count = 0;
	char* numRecieved;
	
	char echoString[20];
	
	servo_turn(degrees);
     21a:	80 e5       	ldi	r24, 0x50	; 80
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	48 d4       	rcall	.+2192   	; 0xab0 <servo_turn>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     220:	0f 2e       	mov	r0, r31
     222:	f0 e5       	ldi	r31, 0x50	; 80
     224:	cf 2e       	mov	r12, r31
     226:	d1 2c       	mov	r13, r1
     228:	f0 2d       	mov	r31, r0
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     22a:	0f 2e       	mov	r0, r31
     22c:	f6 e0       	ldi	r31, 0x06	; 6
     22e:	8f 2e       	mov	r8, r31
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	9f 2e       	mov	r9, r31
     234:	f0 2d       	mov	r31, r0
     236:	aa 24       	eor	r10, r10
     238:	a3 94       	inc	r10
     23a:	b1 2c       	mov	r11, r1
     23c:	ac 0e       	add	r10, r28
     23e:	bd 1e       	adc	r11, r29
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     240:	0f 2e       	mov	r0, r31
     242:	f3 e0       	ldi	r31, 0x03	; 3
     244:	6f 2e       	mov	r6, r31
     246:	71 2c       	mov	r7, r1
     248:	f0 2d       	mov	r31, r0
     24a:	41 2c       	mov	r4, r1
     24c:	31 2c       	mov	r3, r1
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     24e:	2a 2c       	mov	r2, r10
     250:	5b 2c       	mov	r5, r11
		lprintf("Left: %d\nRight: %d", sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal);
		*/
		//numRecieved = USART_RecieveString(count);
		//USART_SendString(numRecieved);
		
		serialInput = USART_Receive();
     252:	39 d3       	rcall	.+1650   	; 0x8c6 <USART_Receive>
     254:	a6 96       	adiw	r28, 0x26	; 38
     256:	8f af       	std	Y+63, r24	; 0x3f
     258:	a6 97       	sbiw	r28, 0x26	; 38
		//if (serialInput) {
		//	USART_SendString(serialInput);
		//}
		
		//Big Scan
		if(serialInput == 'S')
     25a:	83 35       	cpi	r24, 0x53	; 83
     25c:	09 f0       	breq	.+2      	; 0x260 <main+0x94>
     25e:	43 c0       	rjmp	.+134    	; 0x2e6 <main+0x11a>
     260:	38 c0       	rjmp	.+112    	; 0x2d2 <main+0x106>
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	54 d3       	rcall	.+1704   	; 0x90e <ADC_read>
     266:	e8 0e       	add	r14, r24
     268:	f9 1e       	adc	r15, r25
					wait_ms(20);
     26a:	84 e1       	ldi	r24, 0x14	; 20
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	8c d3       	rcall	.+1816   	; 0x988 <wait_ms>
     270:	01 50       	subi	r16, 0x01	; 1
     272:	11 09       	sbc	r17, r1
		{
			while(degrees <= 180) {
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     274:	b1 f7       	brne	.-20     	; 0x262 <main+0x96>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     276:	97 01       	movw	r18, r14
     278:	ab ea       	ldi	r26, 0xAB	; 171
     27a:	ba ea       	ldi	r27, 0xAA	; 170
     27c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__umulhisi3>
     280:	96 95       	lsr	r25
     282:	87 95       	ror	r24
     284:	50 d3       	rcall	.+1696   	; 0x926 <calcCm>
     286:	16 2f       	mov	r17, r22
     288:	07 2f       	mov	r16, r23
     28a:	f8 2e       	mov	r15, r24
     28c:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     28e:	f1 d3       	rcall	.+2018   	; 0xa72 <ping_read>
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     290:	9f 93       	push	r25
     292:	8f 93       	push	r24
     294:	7f 93       	push	r23
     296:	6f 93       	push	r22
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	df 92       	push	r13
     2a2:	cf 92       	push	r12
     2a4:	9f 92       	push	r9
     2a6:	8f 92       	push	r8
     2a8:	bf 92       	push	r11
     2aa:	af 92       	push	r10
     2ac:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
		
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
		
				USART_SendString(OutputString);
     2b0:	82 2d       	mov	r24, r2
     2b2:	95 2d       	mov	r25, r5
     2b4:	0e d3       	rcall	.+1564   	; 0x8d2 <USART_SendString>
		
				degrees += 2;
     2b6:	22 e0       	ldi	r18, 0x02	; 2
     2b8:	c2 0e       	add	r12, r18
     2ba:	d1 1c       	adc	r13, r1
		
				servo_turn(degrees);
     2bc:	c6 01       	movw	r24, r12
     2be:	f8 d3       	rcall	.+2032   	; 0xab0 <servo_turn>
		//}
		
		//Big Scan
		if(serialInput == 'S')
		{
			while(degrees <= 180) {
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	95 eb       	ldi	r25, 0xB5	; 181
     2cc:	c9 16       	cp	r12, r25
     2ce:	d1 04       	cpc	r13, r1
     2d0:	24 f4       	brge	.+8      	; 0x2da <main+0x10e>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     2d2:	83 01       	movw	r16, r6
     2d4:	e4 2c       	mov	r14, r4
     2d6:	f3 2c       	mov	r15, r3
     2d8:	c4 cf       	rjmp	.-120    	; 0x262 <main+0x96>
		
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     2da:	8a e5       	ldi	r24, 0x5A	; 90
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	e8 d3       	rcall	.+2000   	; 0xab0 <servo_turn>
				degrees += 2;
		
				servo_turn(degrees);

			}
			degrees = 0;
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	62 c0       	rjmp	.+196    	; 0x3aa <main+0x1de>
			servo_turn(90);
		}
		
		//Small Scan
		if(serialInput == 's')
     2e6:	a6 96       	adiw	r28, 0x26	; 38
     2e8:	2f ad       	ldd	r18, Y+63	; 0x3f
     2ea:	a6 97       	sbiw	r28, 0x26	; 38
     2ec:	23 37       	cpi	r18, 0x73	; 115
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x126>
     2f0:	4c c0       	rjmp	.+152    	; 0x38a <main+0x1be>
		{
			degrees = 45;
			servo_turn(degrees);
     2f2:	8d e2       	ldi	r24, 0x2D	; 45
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	dc d3       	rcall	.+1976   	; 0xab0 <servo_turn>
		}
		
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
     2f8:	0f 2e       	mov	r0, r31
     2fa:	fd e2       	ldi	r31, 0x2D	; 45
     2fc:	cf 2e       	mov	r12, r31
     2fe:	d1 2c       	mov	r13, r1
     300:	f0 2d       	mov	r31, r0
     302:	39 c0       	rjmp	.+114    	; 0x376 <main+0x1aa>
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	03 d3       	rcall	.+1542   	; 0x90e <ADC_read>
     308:	08 0f       	add	r16, r24
     30a:	19 1f       	adc	r17, r25
					wait_ms(20);
     30c:	84 e1       	ldi	r24, 0x14	; 20
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	3b d3       	rcall	.+1654   	; 0x988 <wait_ms>
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	e8 1a       	sub	r14, r24
     316:	f1 08       	sbc	r15, r1
			servo_turn(degrees);
			while(degrees <= 135) {
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     318:	a9 f7       	brne	.-22     	; 0x304 <main+0x138>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     31a:	98 01       	movw	r18, r16
     31c:	ab ea       	ldi	r26, 0xAB	; 171
     31e:	ba ea       	ldi	r27, 0xAA	; 170
     320:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__umulhisi3>
     324:	96 95       	lsr	r25
     326:	87 95       	ror	r24
     328:	fe d2       	rcall	.+1532   	; 0x926 <calcCm>
     32a:	16 2f       	mov	r17, r22
     32c:	07 2f       	mov	r16, r23
     32e:	f8 2e       	mov	r15, r24
     330:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     332:	9f d3       	rcall	.+1854   	; 0xa72 <ping_read>
				
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	7f 93       	push	r23
     33a:	6f 93       	push	r22
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	df 92       	push	r13
     346:	cf 92       	push	r12
     348:	9f 92       	push	r9
     34a:	8f 92       	push	r8
     34c:	bf 92       	push	r11
     34e:	af 92       	push	r10
     350:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
				
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
				
				USART_SendString(OutputString);
     354:	82 2d       	mov	r24, r2
     356:	95 2d       	mov	r25, r5
     358:	bc d2       	rcall	.+1400   	; 0x8d2 <USART_SendString>
				
				degrees += 2;
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	c9 0e       	add	r12, r25
     35e:	d1 1c       	adc	r13, r1
				
				servo_turn(degrees);
     360:	c6 01       	movw	r24, r12
     362:	a6 d3       	rcall	.+1868   	; 0xab0 <servo_turn>
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
			servo_turn(degrees);
			while(degrees <= 135) {
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	99 e8       	ldi	r25, 0x89	; 137
     370:	c9 16       	cp	r12, r25
     372:	d1 04       	cpc	r13, r1
     374:	21 f0       	breq	.+8      	; 0x37e <main+0x1b2>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     376:	73 01       	movw	r14, r6
     378:	04 2d       	mov	r16, r4
     37a:	13 2d       	mov	r17, r3
     37c:	c3 cf       	rjmp	.-122    	; 0x304 <main+0x138>
				
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     37e:	8a e5       	ldi	r24, 0x5A	; 90
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	96 d3       	rcall	.+1836   	; 0xab0 <servo_turn>
				degrees += 2;
				
				servo_turn(degrees);

			}
			degrees = 0;
     384:	c1 2c       	mov	r12, r1
     386:	d1 2c       	mov	r13, r1
     388:	2c c0       	rjmp	.+88     	; 0x3e2 <main+0x216>
			servo_turn(90);
		}
		
		if(serialInput == 'f')
     38a:	a6 96       	adiw	r28, 0x26	; 38
     38c:	2f ad       	ldd	r18, Y+63	; 0x3f
     38e:	a6 97       	sbiw	r28, 0x26	; 38
     390:	26 36       	cpi	r18, 0x66	; 102
     392:	59 f4       	brne	.+22     	; 0x3aa <main+0x1de>
		{
						
			//int tempDistance = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     394:	98 d2       	rcall	.+1328   	; 0x8c6 <USART_Receive>
		if(serialInput == 'f')
		{
						
			//int tempDistance = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
     396:	88 23       	and	r24, r24
     398:	e9 f3       	breq	.-6      	; 0x394 <main+0x1c8>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-48) * 10;
			move_forward(sensor_data, 50);
     39a:	62 e3       	ldi	r22, 0x32	; 50
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	a8 96       	adiw	r28, 0x28	; 40
     3a0:	8e ad       	ldd	r24, Y+62	; 0x3e
     3a2:	9f ad       	ldd	r25, Y+63	; 0x3f
     3a4:	a8 97       	sbiw	r28, 0x28	; 40
     3a6:	90 d4       	rcall	.+2336   	; 0xcc8 <move_forward>
     3a8:	38 c0       	rjmp	.+112    	; 0x41a <main+0x24e>
		}
		
		if(serialInput == 'r')
     3aa:	a6 96       	adiw	r28, 0x26	; 38
     3ac:	8f ad       	ldd	r24, Y+63	; 0x3f
     3ae:	a6 97       	sbiw	r28, 0x26	; 38
     3b0:	82 37       	cpi	r24, 0x72	; 114
     3b2:	b9 f4       	brne	.+46     	; 0x3e2 <main+0x216>
		{
			//int tempDegrees = atoi(numRecieved);
			
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     3b4:	88 d2       	rcall	.+1296   	; 0x8c6 <USART_Receive>
		if(serialInput == 'r')
		{
			//int tempDegrees = atoi(numRecieved);
			
			char nextletter = 0;
			while(nextletter == 0)
     3b6:	88 23       	and	r24, r24
     3b8:	e9 f3       	breq	.-6      	; 0x3b4 <main+0x1e8>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-48) * 10;
     3ba:	28 2f       	mov	r18, r24
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	22 0f       	add	r18, r18
     3c0:	33 1f       	adc	r19, r19
     3c2:	b9 01       	movw	r22, r18
     3c4:	66 0f       	add	r22, r22
     3c6:	77 1f       	adc	r23, r23
     3c8:	66 0f       	add	r22, r22
     3ca:	77 1f       	adc	r23, r23
     3cc:	26 0f       	add	r18, r22
     3ce:	37 1f       	adc	r19, r23
     3d0:	b9 01       	movw	r22, r18
     3d2:	60 5e       	subi	r22, 0xE0	; 224
     3d4:	71 40       	sbci	r23, 0x01	; 1
			// llprintf("actual %d\n", actualnumber);
			turn_clockwise(sensor_data, actualnumber);
     3d6:	a8 96       	adiw	r28, 0x28	; 40
     3d8:	8e ad       	ldd	r24, Y+62	; 0x3e
     3da:	9f ad       	ldd	r25, Y+63	; 0x3f
     3dc:	a8 97       	sbiw	r28, 0x28	; 40
     3de:	9b d3       	rcall	.+1846   	; 0xb16 <turn_clockwise>
     3e0:	2b c0       	rjmp	.+86     	; 0x438 <main+0x26c>
		}
		
		if(serialInput == 'l')
     3e2:	a6 96       	adiw	r28, 0x26	; 38
     3e4:	9f ad       	ldd	r25, Y+63	; 0x3f
     3e6:	a6 97       	sbiw	r28, 0x26	; 38
     3e8:	9c 36       	cpi	r25, 0x6C	; 108
     3ea:	b9 f4       	brne	.+46     	; 0x41a <main+0x24e>
		{
			//int tempDegrees = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     3ec:	6c d2       	rcall	.+1240   	; 0x8c6 <USART_Receive>
		
		if(serialInput == 'l')
		{
			//int tempDegrees = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
     3ee:	88 23       	and	r24, r24
     3f0:	e9 f3       	breq	.-6      	; 0x3ec <main+0x220>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-48) * 10;
     3f2:	28 2f       	mov	r18, r24
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	22 0f       	add	r18, r18
     3f8:	33 1f       	adc	r19, r19
     3fa:	b9 01       	movw	r22, r18
     3fc:	66 0f       	add	r22, r22
     3fe:	77 1f       	adc	r23, r23
     400:	66 0f       	add	r22, r22
     402:	77 1f       	adc	r23, r23
     404:	26 0f       	add	r18, r22
     406:	37 1f       	adc	r19, r23
     408:	b9 01       	movw	r22, r18
     40a:	60 5e       	subi	r22, 0xE0	; 224
     40c:	71 40       	sbci	r23, 0x01	; 1
			turn_counterclockwise(sensor_data, actualnumber);
     40e:	a8 96       	adiw	r28, 0x28	; 40
     410:	8e ad       	ldd	r24, Y+62	; 0x3e
     412:	9f ad       	ldd	r25, Y+63	; 0x3f
     414:	a8 97       	sbiw	r28, 0x28	; 40
     416:	aa d3       	rcall	.+1876   	; 0xb6c <turn_counterclockwise>
     418:	1c cf       	rjmp	.-456    	; 0x252 <main+0x86>
		}
		// USART_SendString("Small Scan Complete");
		
		if(serialInput == 'c' || serialInput == '!') {
     41a:	a6 96       	adiw	r28, 0x26	; 38
     41c:	2f ad       	ldd	r18, Y+63	; 0x3f
     41e:	a6 97       	sbiw	r28, 0x26	; 38
     420:	23 36       	cpi	r18, 0x63	; 99
     422:	11 f0       	breq	.+4      	; 0x428 <main+0x25c>
     424:	21 32       	cpi	r18, 0x21	; 33
     426:	41 f4       	brne	.+16     	; 0x438 <main+0x26c>
			USART_Flush();
     428:	64 d2       	rcall	.+1224   	; 0x8f2 <USART_Flush>
			lprintf("Flushed!\n");
     42a:	83 e1       	ldi	r24, 0x13	; 19
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	a4 d0       	rcall	.+328    	; 0x57c <lprintf>
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
		}
		
		if(serialInput == 'b')
     438:	a6 96       	adiw	r28, 0x26	; 38
     43a:	8f ad       	ldd	r24, Y+63	; 0x3f
     43c:	a6 97       	sbiw	r28, 0x26	; 38
     43e:	82 36       	cpi	r24, 0x62	; 98
     440:	41 f4       	brne	.+16     	; 0x452 <main+0x286>
		{
			move_backward(sensor_data, 5);
     442:	65 e0       	ldi	r22, 0x05	; 5
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	a8 96       	adiw	r28, 0x28	; 40
     448:	8e ad       	ldd	r24, Y+62	; 0x3e
     44a:	9f ad       	ldd	r25, Y+63	; 0x3f
     44c:	a8 97       	sbiw	r28, 0x28	; 40
     44e:	06 d4       	rcall	.+2060   	; 0xc5c <move_backward>
     450:	00 cf       	rjmp	.-512    	; 0x252 <main+0x86>
				
		if(serialInput == 'd')
		{
			void reportData(sensor_data);
		}
		if(serialInput == 'Q')
     452:	a6 96       	adiw	r28, 0x26	; 38
     454:	9f ad       	ldd	r25, Y+63	; 0x3f
     456:	a6 97       	sbiw	r28, 0x26	; 38
     458:	91 35       	cpi	r25, 0x51	; 81
     45a:	09 f0       	breq	.+2      	; 0x45e <main+0x292>
     45c:	fa ce       	rjmp	.-524    	; 0x252 <main+0x86>
		{
			oi_free(sensor_data);
     45e:	a8 96       	adiw	r28, 0x28	; 40
     460:	8e ad       	ldd	r24, Y+62	; 0x3e
     462:	9f ad       	ldd	r25, Y+63	; 0x3f
     464:	a8 97       	sbiw	r28, 0x28	; 40
     466:	0e d1       	rcall	.+540    	; 0x684 <oi_free>
			return;
		}
	}
     468:	c9 59       	subi	r28, 0x99	; 153
     46a:	df 4f       	sbci	r29, 0xFF	; 255
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	bf 90       	pop	r11
     488:	af 90       	pop	r10
     48a:	9f 90       	pop	r9
     48c:	8f 90       	pop	r8
     48e:	7f 90       	pop	r7
     490:	6f 90       	pop	r6
     492:	5f 90       	pop	r5
     494:	4f 90       	pop	r4
     496:	3f 90       	pop	r3
     498:	2f 90       	pop	r2
     49a:	08 95       	ret

0000049c <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     49c:	de 9a       	sbi	0x1b, 6	; 27
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	73 d2       	rcall	.+1254   	; 0x988 <wait_ms>
     4a2:	de 98       	cbi	0x1b, 6	; 27
     4a4:	8b b3       	in	r24, 0x1b	; 27
     4a6:	80 7f       	andi	r24, 0xF0	; 240
     4a8:	8b bb       	out	0x1b, r24	; 27
     4aa:	08 95       	ret

000004ac <lcd_command>:
     4ac:	cf 93       	push	r28
     4ae:	c8 2f       	mov	r28, r24
     4b0:	dc 98       	cbi	0x1b, 4	; 27
     4b2:	8b b3       	in	r24, 0x1b	; 27
     4b4:	9c 2f       	mov	r25, r28
     4b6:	92 95       	swap	r25
     4b8:	9f 70       	andi	r25, 0x0F	; 15
     4ba:	89 2b       	or	r24, r25
     4bc:	8b bb       	out	0x1b, r24	; 27
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	ed df       	rcall	.-38     	; 0x49c <lcd_toggle_clear>
     4c2:	8b b3       	in	r24, 0x1b	; 27
     4c4:	cf 70       	andi	r28, 0x0F	; 15
     4c6:	c8 2b       	or	r28, r24
     4c8:	cb bb       	out	0x1b, r28	; 27
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	e7 df       	rcall	.-50     	; 0x49c <lcd_toggle_clear>
     4ce:	dc 9a       	sbi	0x1b, 4	; 27
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <lcd_clear>:
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	ea df       	rcall	.-44     	; 0x4ac <lcd_command>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	55 c2       	rjmp	.+1194   	; 0x988 <wait_ms>

000004de <lcd_home_line1>:
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	e5 cf       	rjmp	.-54     	; 0x4ac <lcd_command>

000004e2 <lcd_init>:
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	8a bb       	out	0x1a, r24	; 26
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	8b bb       	out	0x1b, r24	; 27
     4ea:	de 9a       	sbi	0x1b, 6	; 27
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	4b d2       	rcall	.+1174   	; 0x988 <wait_ms>
     4f2:	de 98       	cbi	0x1b, 6	; 27
     4f4:	85 e0       	ldi	r24, 0x05	; 5
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	47 d2       	rcall	.+1166   	; 0x988 <wait_ms>
     4fa:	de 9a       	sbi	0x1b, 6	; 27
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	43 d2       	rcall	.+1158   	; 0x988 <wait_ms>
     502:	de 98       	cbi	0x1b, 6	; 27
     504:	de 9a       	sbi	0x1b, 6	; 27
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	3e d2       	rcall	.+1148   	; 0x988 <wait_ms>
     50c:	de 98       	cbi	0x1b, 6	; 27
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	8b bb       	out	0x1b, r24	; 27
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	c3 df       	rcall	.-122    	; 0x49c <lcd_toggle_clear>
     516:	8b b3       	in	r24, 0x1b	; 27
     518:	8b bb       	out	0x1b, r24	; 27
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	bf df       	rcall	.-130    	; 0x49c <lcd_toggle_clear>
     51e:	8b b3       	in	r24, 0x1b	; 27
     520:	8e 60       	ori	r24, 0x0E	; 14
     522:	8b bb       	out	0x1b, r24	; 27
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	ba df       	rcall	.-140    	; 0x49c <lcd_toggle_clear>
     528:	8b b3       	in	r24, 0x1b	; 27
     52a:	8b bb       	out	0x1b, r24	; 27
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	b6 df       	rcall	.-148    	; 0x49c <lcd_toggle_clear>
     530:	8b b3       	in	r24, 0x1b	; 27
     532:	86 60       	ori	r24, 0x06	; 6
     534:	8b bb       	out	0x1b, r24	; 27
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	b1 df       	rcall	.-158    	; 0x49c <lcd_toggle_clear>
     53a:	8b b3       	in	r24, 0x1b	; 27
     53c:	8b bb       	out	0x1b, r24	; 27
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	ad df       	rcall	.-166    	; 0x49c <lcd_toggle_clear>
     542:	d8 9a       	sbi	0x1b, 0	; 27
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	aa df       	rcall	.-172    	; 0x49c <lcd_toggle_clear>
     548:	dc 9a       	sbi	0x1b, 4	; 27
     54a:	c9 cf       	rjmp	.-110    	; 0x4de <lcd_home_line1>

0000054c <lcd_home_line2>:
     54c:	80 ec       	ldi	r24, 0xC0	; 192
     54e:	ae cf       	rjmp	.-164    	; 0x4ac <lcd_command>

00000550 <lcd_home_line3>:
     550:	84 e9       	ldi	r24, 0x94	; 148
     552:	ac cf       	rjmp	.-168    	; 0x4ac <lcd_command>

00000554 <lcd_home_line4>:
     554:	84 ed       	ldi	r24, 0xD4	; 212
     556:	aa cf       	rjmp	.-172    	; 0x4ac <lcd_command>

00000558 <lcd_putc>:
     558:	cf 93       	push	r28
     55a:	c8 2f       	mov	r28, r24
     55c:	8b b3       	in	r24, 0x1b	; 27
     55e:	9c 2f       	mov	r25, r28
     560:	92 95       	swap	r25
     562:	9f 70       	andi	r25, 0x0F	; 15
     564:	89 2b       	or	r24, r25
     566:	8b bb       	out	0x1b, r24	; 27
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	98 df       	rcall	.-208    	; 0x49c <lcd_toggle_clear>
     56c:	8b b3       	in	r24, 0x1b	; 27
     56e:	cf 70       	andi	r28, 0x0F	; 15
     570:	c8 2b       	or	r28, r24
     572:	cb bb       	out	0x1b, r28	; 27
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	92 df       	rcall	.-220    	; 0x49c <lcd_toggle_clear>
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	c1 55       	subi	r28, 0x51	; 81
     592:	d1 09       	sbc	r29, r1
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	fe 01       	movw	r30, r28
     5a0:	e4 5a       	subi	r30, 0xA4	; 164
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	41 91       	ld	r20, Z+
     5a6:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     5a8:	2e 2f       	mov	r18, r30
     5aa:	3f 2f       	mov	r19, r31
     5ac:	61 e5       	ldi	r22, 0x51	; 81
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	ce 01       	movw	r24, r28
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	0e 94 40 10 	call	0x2080	; 0x2080 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     5b8:	be 01       	movw	r22, r28
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	8c e4       	ldi	r24, 0x4C	; 76
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <strcmp>
     5c6:	28 2f       	mov	r18, r24
     5c8:	39 2f       	mov	r19, r25
     5ca:	23 2b       	or	r18, r19
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <lprintf+0x54>
     5ce:	44 c0       	rjmp	.+136    	; 0x658 <lprintf+0xdc>
		return;
	
	strcpy(lastbuffer, buffer);
     5d0:	be 01       	movw	r22, r28
     5d2:	6f 5f       	subi	r22, 0xFF	; 255
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	8c e4       	ldi	r24, 0x4C	; 76
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <strcpy>
	lcd_clear();
     5de:	7a df       	rcall	.-268    	; 0x4d4 <lcd_clear>
     5e0:	cc 24       	eor	r12, r12
     5e2:	c3 94       	inc	r12
     5e4:	d1 2c       	mov	r13, r1
     5e6:	cc 0e       	add	r12, r28
     5e8:	dd 1e       	adc	r13, r29
	char *str = buffer;
	int charnum = 0;
     5ea:	00 e0       	ldi	r16, 0x00	; 0
     5ec:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f4 e1       	ldi	r31, 0x14	; 20
     5f2:	ef 2e       	mov	r14, r31
     5f4:	f1 2c       	mov	r15, r1
     5f6:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     5f8:	27 c0       	rjmp	.+78     	; 0x648 <lprintf+0xcc>
		if (*str == '\n') {
     5fa:	8a 30       	cpi	r24, 0x0A	; 10
     5fc:	51 f4       	brne	.+20     	; 0x612 <lprintf+0x96>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     5fe:	c8 01       	movw	r24, r16
     600:	b7 01       	movw	r22, r14
     602:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__divmodhi4>
     606:	97 01       	movw	r18, r14
     608:	28 1b       	sub	r18, r24
     60a:	39 0b       	sbc	r19, r25
     60c:	02 0f       	add	r16, r18
     60e:	13 1f       	adc	r17, r19
     610:	03 c0       	rjmp	.+6      	; 0x618 <lprintf+0x9c>
		} else {
			lcd_putc(*str);
     612:	a2 df       	rcall	.-188    	; 0x558 <lcd_putc>
			charnum++;
     614:	0f 5f       	subi	r16, 0xFF	; 255
     616:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     618:	c8 01       	movw	r24, r16
     61a:	b7 01       	movw	r22, r14
     61c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__divmodhi4>
     620:	89 2b       	or	r24, r25
     622:	91 f4       	brne	.+36     	; 0x648 <lprintf+0xcc>
			switch (charnum / LCD_WIDTH) {
     624:	c8 01       	movw	r24, r16
     626:	b7 01       	movw	r22, r14
     628:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__divmodhi4>
     62c:	62 30       	cpi	r22, 0x02	; 2
     62e:	71 05       	cpc	r23, r1
     630:	41 f0       	breq	.+16     	; 0x642 <lprintf+0xc6>
     632:	63 30       	cpi	r22, 0x03	; 3
     634:	71 05       	cpc	r23, r1
     636:	39 f0       	breq	.+14     	; 0x646 <lprintf+0xca>
     638:	61 30       	cpi	r22, 0x01	; 1
     63a:	71 05       	cpc	r23, r1
     63c:	29 f4       	brne	.+10     	; 0x648 <lprintf+0xcc>
			case 1:
				lcd_home_line2();
     63e:	86 df       	rcall	.-244    	; 0x54c <lcd_home_line2>
				break;
     640:	03 c0       	rjmp	.+6      	; 0x648 <lprintf+0xcc>
			case 2:
				lcd_home_line3();
     642:	86 df       	rcall	.-244    	; 0x550 <lcd_home_line3>
				break;
     644:	01 c0       	rjmp	.+2      	; 0x648 <lprintf+0xcc>
			case 3:
				lcd_home_line4();
     646:	86 df       	rcall	.-244    	; 0x554 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     648:	f6 01       	movw	r30, r12
     64a:	81 91       	ld	r24, Z+
     64c:	6f 01       	movw	r12, r30
     64e:	88 23       	and	r24, r24
     650:	19 f0       	breq	.+6      	; 0x658 <lprintf+0xdc>
     652:	00 35       	cpi	r16, 0x50	; 80
     654:	11 05       	cpc	r17, r1
     656:	8c f2       	brlt	.-94     	; 0x5fa <lprintf+0x7e>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     658:	cf 5a       	subi	r28, 0xAF	; 175
     65a:	df 4f       	sbci	r29, 0xFF	; 255
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	08 95       	ret

00000678 <oi_alloc>:
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
     678:	64 e3       	ldi	r22, 0x34	; 52
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <calloc>

00000684 <oi_free>:
     684:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <free>
     688:	08 95       	ret

0000068a <oi_byte_tx>:
     68a:	eb e9       	ldi	r30, 0x9B	; 155
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	90 81       	ld	r25, Z
     690:	95 ff       	sbrs	r25, 5
     692:	fd cf       	rjmp	.-6      	; 0x68e <oi_byte_tx+0x4>
     694:	80 93 9c 00 	sts	0x009C, r24
     698:	08 95       	ret

0000069a <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	18 2f       	mov	r17, r24
     6a4:	09 2f       	mov	r16, r25
     6a6:	c6 2f       	mov	r28, r22
     6a8:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
     6aa:	81 e9       	ldi	r24, 0x91	; 145
     6ac:	ee df       	rcall	.-36     	; 0x68a <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
     6ae:	80 2f       	mov	r24, r16
     6b0:	ec df       	rcall	.-40     	; 0x68a <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
     6b2:	81 2f       	mov	r24, r17
     6b4:	ea df       	rcall	.-44     	; 0x68a <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
     6b6:	8d 2f       	mov	r24, r29
     6b8:	e8 df       	rcall	.-48     	; 0x68a <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
     6ba:	8c 2f       	mov	r24, r28
     6bc:	e6 df       	rcall	.-52     	; 0x68a <oi_byte_tx>
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	08 95       	ret

000006c8 <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	08 2f       	mov	r16, r24
     6d2:	16 2f       	mov	r17, r22
     6d4:	d4 2f       	mov	r29, r20
     6d6:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
     6d8:	8b e8       	ldi	r24, 0x8B	; 139
     6da:	d7 df       	rcall	.-82     	; 0x68a <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
     6dc:	11 23       	and	r17, r17
     6de:	41 f0       	breq	.+16     	; 0x6f0 <oi_set_leds+0x28>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	01 11       	cpse	r16, r1
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <oi_set_leds+0x24>
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	cb 01       	movw	r24, r22
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <oi_set_leds+0x2c>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	ca df       	rcall	.-108    	; 0x68a <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
     6f6:	8d 2f       	mov	r24, r29
     6f8:	c8 df       	rcall	.-112    	; 0x68a <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
     6fa:	8c 2f       	mov	r24, r28
     6fc:	c6 df       	rcall	.-116    	; 0x68a <oi_byte_tx>
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	08 95       	ret

00000708 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     708:	eb e9       	ldi	r30, 0x9B	; 155
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	88 23       	and	r24, r24
     710:	ec f7       	brge	.-6      	; 0x70c <oi_byte_rx+0x4>

	return UDR1;
     712:	80 91 9c 00 	lds	r24, 0x009C
}
     716:	08 95       	ret

00000718 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     726:	80 91 9b 00 	lds	r24, 0x009B
     72a:	88 23       	and	r24, r24
     72c:	44 f4       	brge	.+16     	; 0x73e <oi_update+0x26>
		i = UDR1;
     72e:	ac e9       	ldi	r26, 0x9C	; 156
     730:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     732:	eb e9       	ldi	r30, 0x9B	; 155
     734:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     736:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     738:	80 81       	ld	r24, Z
     73a:	88 23       	and	r24, r24
     73c:	e4 f3       	brlt	.-8      	; 0x736 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     73e:	8e e8       	ldi	r24, 0x8E	; 142
     740:	a4 df       	rcall	.-184    	; 0x68a <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     742:	86 e0       	ldi	r24, 0x06	; 6
     744:	a2 df       	rcall	.-188    	; 0x68a <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     746:	87 01       	movw	r16, r14
     748:	0c 5c       	subi	r16, 0xCC	; 204
     74a:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
     74c:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     74e:	dc df       	rcall	.-72     	; 0x708 <oi_byte_rx>
     750:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     752:	c0 17       	cp	r28, r16
     754:	d1 07       	cpc	r29, r17
     756:	d9 f7       	brne	.-10     	; 0x74e <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     758:	f7 01       	movw	r30, r14
     75a:	94 85       	ldd	r25, Z+12	; 0x0c
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	25 85       	ldd	r18, Z+13	; 0x0d
     760:	82 0f       	add	r24, r18
     762:	91 1d       	adc	r25, r1
     764:	95 87       	std	Z+13, r25	; 0x0d
     766:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     768:	96 85       	ldd	r25, Z+14	; 0x0e
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	27 85       	ldd	r18, Z+15	; 0x0f
     76e:	82 0f       	add	r24, r18
     770:	91 1d       	adc	r25, r1
     772:	97 87       	std	Z+15, r25	; 0x0f
     774:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     776:	91 89       	ldd	r25, Z+17	; 0x11
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	22 89       	ldd	r18, Z+18	; 0x12
     77c:	82 0f       	add	r24, r18
     77e:	91 1d       	adc	r25, r1
     780:	92 8b       	std	Z+18, r25	; 0x12
     782:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     784:	93 89       	ldd	r25, Z+19	; 0x13
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	24 89       	ldd	r18, Z+20	; 0x14
     78a:	82 0f       	add	r24, r18
     78c:	91 1d       	adc	r25, r1
     78e:	94 8b       	std	Z+20, r25	; 0x14
     790:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     792:	96 89       	ldd	r25, Z+22	; 0x16
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	27 89       	ldd	r18, Z+23	; 0x17
     798:	82 0f       	add	r24, r18
     79a:	91 1d       	adc	r25, r1
     79c:	97 8b       	std	Z+23, r25	; 0x17
     79e:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     7a0:	90 8d       	ldd	r25, Z+24	; 0x18
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	21 8d       	ldd	r18, Z+25	; 0x19
     7a6:	82 0f       	add	r24, r18
     7a8:	91 1d       	adc	r25, r1
     7aa:	91 8f       	std	Z+25, r25	; 0x19
     7ac:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     7ae:	92 8d       	ldd	r25, Z+26	; 0x1a
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	23 8d       	ldd	r18, Z+27	; 0x1b
     7b4:	82 0f       	add	r24, r18
     7b6:	91 1d       	adc	r25, r1
     7b8:	93 8f       	std	Z+27, r25	; 0x1b
     7ba:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     7bc:	94 8d       	ldd	r25, Z+28	; 0x1c
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	25 8d       	ldd	r18, Z+29	; 0x1d
     7c2:	82 0f       	add	r24, r18
     7c4:	91 1d       	adc	r25, r1
     7c6:	95 8f       	std	Z+29, r25	; 0x1d
     7c8:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     7ca:	96 8d       	ldd	r25, Z+30	; 0x1e
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	27 8d       	ldd	r18, Z+31	; 0x1f
     7d0:	82 0f       	add	r24, r18
     7d2:	91 1d       	adc	r25, r1
     7d4:	97 8f       	std	Z+31, r25	; 0x1f
     7d6:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     7d8:	90 a1       	ldd	r25, Z+32	; 0x20
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	21 a1       	ldd	r18, Z+33	; 0x21
     7de:	82 0f       	add	r24, r18
     7e0:	91 1d       	adc	r25, r1
     7e2:	91 a3       	std	Z+33, r25	; 0x21
     7e4:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     7e6:	92 a1       	ldd	r25, Z+34	; 0x22
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	23 a1       	ldd	r18, Z+35	; 0x23
     7ec:	82 0f       	add	r24, r18
     7ee:	91 1d       	adc	r25, r1
     7f0:	93 a3       	std	Z+35, r25	; 0x23
     7f2:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     7f4:	42 a5       	ldd	r20, Z+42	; 0x2a
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	31 a5       	ldd	r19, Z+41	; 0x29
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	24 0f       	add	r18, r20
     7fe:	35 1f       	adc	r19, r21
     800:	36 a3       	std	Z+38, r19	; 0x26
     802:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     804:	90 a9       	ldd	r25, Z+48	; 0x30
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	84 0f       	add	r24, r20
     80a:	95 1f       	adc	r25, r21
     80c:	95 a7       	std	Z+45, r25	; 0x2d
     80e:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     810:	92 a9       	ldd	r25, Z+50	; 0x32
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	23 a9       	ldd	r18, Z+51	; 0x33
     816:	82 0f       	add	r24, r18
     818:	91 1d       	adc	r25, r1
     81a:	97 a7       	std	Z+47, r25	; 0x2f
     81c:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     81e:	94 a9       	ldd	r25, Z+52	; 0x34
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	25 a9       	ldd	r18, Z+53	; 0x35
     824:	82 0f       	add	r24, r18
     826:	91 1d       	adc	r25, r1
     828:	91 ab       	std	Z+49, r25	; 0x31
     82a:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     82c:	96 a9       	ldd	r25, Z+54	; 0x36
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	27 a9       	ldd	r18, Z+55	; 0x37
     832:	82 0f       	add	r24, r18
     834:	91 1d       	adc	r25, r1
     836:	93 ab       	std	Z+51, r25	; 0x33
     838:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     83a:	83 e2       	ldi	r24, 0x23	; 35
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	a4 d0       	rcall	.+328    	; 0x988 <wait_ms>
}
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	08 95       	ret

0000084e <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     858:	09 e9       	ldi	r16, 0x99	; 153
     85a:	10 e0       	ldi	r17, 0x00	; 0
     85c:	80 e1       	ldi	r24, 0x10	; 16
     85e:	f8 01       	movw	r30, r16
     860:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     862:	88 e1       	ldi	r24, 0x18	; 24
     864:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     868:	86 e0       	ldi	r24, 0x06	; 6
     86a:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     86e:	80 e8       	ldi	r24, 0x80	; 128
     870:	0c df       	rcall	.-488    	; 0x68a <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     872:	81 e8       	ldi	r24, 0x81	; 129
     874:	0a df       	rcall	.-492    	; 0x68a <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	08 df       	rcall	.-496    	; 0x68a <oi_byte_tx>
	wait_ms(100);
     87a:	84 e6       	ldi	r24, 0x64	; 100
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	84 d0       	rcall	.+264    	; 0x988 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     880:	81 e2       	ldi	r24, 0x21	; 33
     882:	f8 01       	movw	r30, r16
     884:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     886:	84 e8       	ldi	r24, 0x84	; 132
     888:	00 df       	rcall	.-512    	; 0x68a <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     88a:	2f ef       	ldi	r18, 0xFF	; 255
     88c:	47 e0       	ldi	r20, 0x07	; 7
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	1a df       	rcall	.-460    	; 0x6c8 <oi_set_leds>
	
	oi_update(self);
     894:	ce 01       	movw	r24, r28
     896:	40 df       	rcall	.-384    	; 0x718 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     898:	ce 01       	movw	r24, r28
     89a:	3e df       	rcall	.-388    	; 0x718 <oi_update>
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <serial_init>:
	}
	
	//return string
	return receivedVars;
	
}
     8a6:	10 92 90 00 	sts	0x0090, r1
     8aa:	81 e2       	ldi	r24, 0x21	; 33
     8ac:	89 b9       	out	0x09, r24	; 9
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	8b b9       	out	0x0b, r24	; 11
     8b2:	8e e0       	ldi	r24, 0x0E	; 14
     8b4:	80 93 95 00 	sts	0x0095, r24
     8b8:	88 e1       	ldi	r24, 0x18	; 24
     8ba:	8a b9       	out	0x0a, r24	; 10
     8bc:	08 95       	ret

000008be <USART_Transmit>:
     8be:	5d 9b       	sbis	0x0b, 5	; 11
     8c0:	fe cf       	rjmp	.-4      	; 0x8be <USART_Transmit>
     8c2:	8c b9       	out	0x0c, r24	; 12
     8c4:	08 95       	ret

000008c6 <USART_Receive>:
     8c6:	5f 9b       	sbis	0x0b, 7	; 11
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <USART_Receive+0x8>
     8ca:	8c b1       	in	r24, 0x0c	; 12
     8cc:	08 95       	ret
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret

000008d2 <USART_SendString>:


void USART_SendString(char SentString[])
{
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	c8 2f       	mov	r28, r24
     8d8:	d9 2f       	mov	r29, r25
	char flag = 1;
	int i = 0;
	while(flag)
	{
		if(SentString[i])
     8da:	89 91       	ld	r24, Y+
     8dc:	88 23       	and	r24, r24
     8de:	11 f0       	breq	.+4      	; 0x8e4 <USART_SendString+0x12>
		{
			USART_Transmit(SentString[i]);
     8e0:	ee df       	rcall	.-36     	; 0x8be <USART_Transmit>
     8e2:	fb cf       	rjmp	.-10     	; 0x8da <USART_SendString+0x8>
		}
		else
		{
			flag = 0;
			USART_Transmit(10);
     8e4:	8a e0       	ldi	r24, 0x0A	; 10
     8e6:	eb df       	rcall	.-42     	; 0x8be <USART_Transmit>
			USART_Transmit(13);
     8e8:	8d e0       	ldi	r24, 0x0D	; 13
     8ea:	e9 df       	rcall	.-46     	; 0x8be <USART_Transmit>
		}
		i++;
	}
	
}
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <USART_Flush>:

void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC) )
     8f2:	5f 9b       	sbis	0x0b, 7	; 11
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <USART_Flush+0xa>
	{
		dummy = UDR0;
     8f6:	8c b1       	in	r24, 0x0c	; 12
}

void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC) )
     8f8:	5f 99       	sbic	0x0b, 7	; 11
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <USART_Flush+0x4>
     8fc:	08 95       	ret

000008fe <ADC_init>:
			return n+1;
		}
	}
	
	return 0;
}
     8fe:	37 9a       	sbi	0x06, 7	; 6
     900:	86 b1       	in	r24, 0x06	; 6
     902:	87 60       	ori	r24, 0x07	; 7
     904:	86 b9       	out	0x06, r24	; 6
     906:	87 b1       	in	r24, 0x07	; 7
     908:	80 6c       	ori	r24, 0xC0	; 192
     90a:	87 b9       	out	0x07, r24	; 7
     90c:	08 95       	ret

0000090e <ADC_read>:
     90e:	97 b1       	in	r25, 0x07	; 7
     910:	8f 71       	andi	r24, 0x1F	; 31
     912:	98 2b       	or	r25, r24
     914:	97 b9       	out	0x07, r25	; 7
     916:	36 9a       	sbi	0x06, 6	; 6
     918:	36 99       	sbic	0x06, 6	; 6
     91a:	fe cf       	rjmp	.-4      	; 0x918 <ADC_read+0xa>
     91c:	24 b1       	in	r18, 0x04	; 4
     91e:	35 b1       	in	r19, 0x05	; 5
     920:	82 2f       	mov	r24, r18
     922:	93 2f       	mov	r25, r19
     924:	08 95       	ret

00000926 <calcCm>:
     926:	bc 01       	movw	r22, r24
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	42 d4       	rcall	.+2180   	; 0x11b2 <__floatunsisf>
     92e:	2a e9       	ldi	r18, 0x9A	; 154
     930:	39 e9       	ldi	r19, 0x99	; 153
     932:	49 e7       	ldi	r20, 0x79	; 121
     934:	50 e4       	ldi	r21, 0x40	; 64
     936:	cb d4       	rcall	.+2454   	; 0x12ce <__mulsf3>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 ea       	ldi	r20, 0xA0	; 160
     93e:	50 e4       	ldi	r21, 0x40	; 64
     940:	40 d3       	rcall	.+1664   	; 0xfc2 <__addsf3>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 eb       	ldi	r23, 0xB0	; 176
     94a:	83 e3       	ldi	r24, 0x33	; 51
     94c:	97 e4       	ldi	r25, 0x47	; 71
     94e:	9d c3       	rjmp	.+1850   	; 0x108a <__divsf3>

00000950 <timer2_start>:
     950:	10 92 a2 03 	sts	0x03A2, r1
     954:	10 92 a1 03 	sts	0x03A1, r1
     958:	81 11       	cpse	r24, r1
     95a:	06 c0       	rjmp	.+12     	; 0x968 <timer2_start+0x18>
     95c:	8b e0       	ldi	r24, 0x0B	; 11
     95e:	85 bd       	out	0x25, r24	; 37
     960:	87 b7       	in	r24, 0x37	; 55
     962:	80 68       	ori	r24, 0x80	; 128
     964:	87 bf       	out	0x37, r24	; 55
     966:	07 c0       	rjmp	.+14     	; 0x976 <timer2_start+0x26>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	29 f4       	brne	.+10     	; 0x976 <timer2_start+0x26>
     96c:	89 e0       	ldi	r24, 0x09	; 9
     96e:	85 bd       	out	0x25, r24	; 37
     970:	87 b7       	in	r24, 0x37	; 55
     972:	80 68       	ori	r24, 0x80	; 128
     974:	87 bf       	out	0x37, r24	; 55
     976:	78 94       	sei
     978:	08 95       	ret

0000097a <timer2_stop>:
     97a:	87 b7       	in	r24, 0x37	; 55
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	87 bf       	out	0x37, r24	; 55
     980:	85 b5       	in	r24, 0x25	; 37
     982:	8f 77       	andi	r24, 0x7F	; 127
     984:	85 bd       	out	0x25, r24	; 37
     986:	08 95       	ret

00000988 <wait_ms>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
     98e:	8a ef       	ldi	r24, 0xFA	; 250
     990:	83 bd       	out	0x23, r24	; 35
     992:	10 92 a2 03 	sts	0x03A2, r1
     996:	10 92 a1 03 	sts	0x03A1, r1
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	d9 df       	rcall	.-78     	; 0x950 <timer2_start>
     99e:	20 91 a1 03 	lds	r18, 0x03A1
     9a2:	30 91 a2 03 	lds	r19, 0x03A2
     9a6:	2c 17       	cp	r18, r28
     9a8:	3d 07       	cpc	r19, r29
     9aa:	c8 f3       	brcs	.-14     	; 0x99e <wait_ms+0x16>
     9ac:	e6 df       	rcall	.-52     	; 0x97a <timer2_stop>
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <__vector_9>:
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	80 91 a1 03 	lds	r24, 0x03A1
     9c6:	90 91 a2 03 	lds	r25, 0x03A2
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	90 93 a2 03 	sts	0x03A2, r25
     9d0:	80 93 a1 03 	sts	0x03A1, r24
     9d4:	9f 91       	pop	r25
     9d6:	8f 91       	pop	r24
     9d8:	0f 90       	pop	r0
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	0f 90       	pop	r0
     9de:	1f 90       	pop	r1
     9e0:	18 95       	reti

000009e2 <init_push_buttons>:
     9e2:	84 b3       	in	r24, 0x14	; 20
     9e4:	80 7c       	andi	r24, 0xC0	; 192
     9e6:	84 bb       	out	0x14, r24	; 20
     9e8:	85 b3       	in	r24, 0x15	; 21
     9ea:	8f 63       	ori	r24, 0x3F	; 63
     9ec:	85 bb       	out	0x15, r24	; 21
     9ee:	08 95       	ret

000009f0 <ping_init>:
     9f0:	1f bc       	out	0x2f, r1	; 47
     9f2:	84 ec       	ldi	r24, 0xC4	; 196
     9f4:	8e bd       	out	0x2e, r24	; 46
     9f6:	17 be       	out	0x37, r1	; 55
     9f8:	08 95       	ret

000009fa <__vector_11>:
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	2f 93       	push	r18
     a06:	3f 93       	push	r19
     a08:	8f 93       	push	r24
     a0a:	9f 93       	push	r25
     a0c:	86 b5       	in	r24, 0x26	; 38
     a0e:	97 b5       	in	r25, 0x27	; 39
     a10:	90 93 a0 03 	sts	0x03A0, r25
     a14:	80 93 9f 03 	sts	0x039F, r24
     a18:	20 91 9d 03 	lds	r18, 0x039D
     a1c:	30 91 9e 03 	lds	r19, 0x039E
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	23 2b       	or	r18, r19
     a26:	11 f0       	breq	.+4      	; 0xa2c <__vector_11+0x32>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	90 93 9e 03 	sts	0x039E, r25
     a30:	80 93 9d 03 	sts	0x039D, r24
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	3f 91       	pop	r19
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <send_pulse>:
     a46:	8c 9a       	sbi	0x11, 4	; 17
     a48:	94 9a       	sbi	0x12, 4	; 18
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	9c df       	rcall	.-200    	; 0x988 <wait_ms>
     a50:	94 98       	cbi	0x12, 4	; 18
     a52:	8c 98       	cbi	0x11, 4	; 17
     a54:	08 95       	ret

00000a56 <time2dist>:
     a56:	bc 01       	movw	r22, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	aa d3       	rcall	.+1876   	; 0x11b2 <__floatunsisf>
     a5e:	22 ef       	ldi	r18, 0xF2	; 242
     a60:	32 ed       	ldi	r19, 0xD2	; 210
     a62:	4d e8       	ldi	r20, 0x8D	; 141
     a64:	5e e3       	ldi	r21, 0x3E	; 62
     a66:	33 d4       	rcall	.+2150   	; 0x12ce <__mulsf3>
     a68:	20 e5       	ldi	r18, 0x50	; 80
     a6a:	3d e8       	ldi	r19, 0x8D	; 141
     a6c:	4f ef       	ldi	r20, 0xFF	; 255
     a6e:	51 e4       	ldi	r21, 0x41	; 65
     a70:	a7 c2       	rjmp	.+1358   	; 0xfc0 <__subsf3>

00000a72 <ping_read>:
     a72:	e9 df       	rcall	.-46     	; 0xa46 <send_pulse>
     a74:	80 e2       	ldi	r24, 0x20	; 32
     a76:	87 bf       	out	0x37, r24	; 55
     a78:	80 91 9d 03 	lds	r24, 0x039D
     a7c:	90 91 9e 03 	lds	r25, 0x039E
     a80:	89 2b       	or	r24, r25
     a82:	d1 f7       	brne	.-12     	; 0xa78 <ping_read+0x6>
     a84:	84 e8       	ldi	r24, 0x84	; 132
     a86:	8e bd       	out	0x2e, r24	; 46
     a88:	20 91 9f 03 	lds	r18, 0x039F
     a8c:	30 91 a0 03 	lds	r19, 0x03A0
     a90:	80 91 9d 03 	lds	r24, 0x039D
     a94:	90 91 9e 03 	lds	r25, 0x039E
     a98:	89 2b       	or	r24, r25
     a9a:	d1 f3       	breq	.-12     	; 0xa90 <ping_read+0x1e>
     a9c:	84 ec       	ldi	r24, 0xC4	; 196
     a9e:	8e bd       	out	0x2e, r24	; 46
     aa0:	80 91 9f 03 	lds	r24, 0x039F
     aa4:	90 91 a0 03 	lds	r25, 0x03A0
     aa8:	17 be       	out	0x37, r1	; 55
     aaa:	82 1b       	sub	r24, r18
     aac:	93 0b       	sbc	r25, r19
     aae:	d3 cf       	rjmp	.-90     	; 0xa56 <time2dist>

00000ab0 <servo_turn>:
     ab0:	bc 01       	movw	r22, r24
     ab2:	88 27       	eor	r24, r24
     ab4:	77 fd       	sbrc	r23, 7
     ab6:	80 95       	com	r24
     ab8:	98 2f       	mov	r25, r24
     aba:	7d d3       	rcall	.+1786   	; 0x11b6 <__floatsisf>
     abc:	2b e3       	ldi	r18, 0x3B	; 59
     abe:	3a ea       	ldi	r19, 0xAA	; 170
     ac0:	4a e1       	ldi	r20, 0x1A	; 26
     ac2:	5c e3       	ldi	r21, 0x3C	; 60
     ac4:	04 d4       	rcall	.+2056   	; 0x12ce <__mulsf3>
     ac6:	28 e4       	ldi	r18, 0x48	; 72
     ac8:	31 ee       	ldi	r19, 0xE1	; 225
     aca:	4a ef       	ldi	r20, 0xFA	; 250
     acc:	5e e3       	ldi	r21, 0x3E	; 62
     ace:	79 d2       	rcall	.+1266   	; 0xfc2 <__addsf3>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	4a e7       	ldi	r20, 0x7A	; 122
     ad6:	53 e4       	ldi	r21, 0x43	; 67
     ad8:	fa d3       	rcall	.+2036   	; 0x12ce <__mulsf3>
     ada:	3f d3       	rcall	.+1662   	; 0x115a <__fixunssfsi>
     adc:	61 50       	subi	r22, 0x01	; 1
     ade:	71 09       	sbc	r23, r1
     ae0:	70 93 85 00 	sts	0x0085, r23
     ae4:	60 93 84 00 	sts	0x0084, r22
     ae8:	84 e1       	ldi	r24, 0x14	; 20
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	4d cf       	rjmp	.-358    	; 0x988 <wait_ms>

00000aee <timer3_init>:
     aee:	83 ec       	ldi	r24, 0xC3	; 195
     af0:	99 e0       	ldi	r25, 0x09	; 9
     af2:	90 93 87 00 	sts	0x0087, r25
     af6:	80 93 86 00 	sts	0x0086, r24
     afa:	80 e5       	ldi	r24, 0x50	; 80
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	90 93 85 00 	sts	0x0085, r25
     b02:	80 93 84 00 	sts	0x0084, r24
     b06:	83 e2       	ldi	r24, 0x23	; 35
     b08:	80 93 8b 00 	sts	0x008B, r24
     b0c:	8b e1       	ldi	r24, 0x1B	; 27
     b0e:	80 93 8a 00 	sts	0x008A, r24
     b12:	14 9a       	sbi	0x02, 4	; 2
     b14:	08 95       	ret

00000b16 <turn_clockwise>:
	oi_set_wheels(0, 0); // stop	
	reportData(sensor);
}

void turn_clockwise(oi_t *sensor, int degrees)
{
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	8c 01       	movw	r16, r24
     b24:	7b 01       	movw	r14, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-150, 150);
     b26:	66 e9       	ldi	r22, 0x96	; 150
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	8a e6       	ldi	r24, 0x6A	; 106
     b2c:	9f ef       	ldi	r25, 0xFF	; 255
     b2e:	b5 dd       	rcall	.-1174   	; 0x69a <oi_set_wheels>
	while (sum < degrees-12) {
     b30:	8c e0       	ldi	r24, 0x0C	; 12
     b32:	e8 1a       	sub	r14, r24
     b34:	f1 08       	sbc	r15, r1
     b36:	1e 14       	cp	r1, r14
     b38:	1f 04       	cpc	r1, r15
     b3a:	64 f4       	brge	.+24     	; 0xb54 <turn_clockwise+0x3e>
	reportData(sensor);
}

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     b3c:	c0 e0       	ldi	r28, 0x00	; 0
     b3e:	d0 e0       	ldi	r29, 0x00	; 0
	char outputString[20];
	oi_set_wheels(-150, 150);
	while (sum < degrees-12) {
		oi_update(sensor);
     b40:	c8 01       	movw	r24, r16
     b42:	ea dd       	rcall	.-1068   	; 0x718 <oi_update>
		sum -= sensor->angle;
     b44:	f8 01       	movw	r30, r16
     b46:	86 85       	ldd	r24, Z+14	; 0x0e
     b48:	97 85       	ldd	r25, Z+15	; 0x0f
     b4a:	c8 1b       	sub	r28, r24
     b4c:	d9 0b       	sbc	r29, r25
void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-150, 150);
	while (sum < degrees-12) {
     b4e:	ce 15       	cp	r28, r14
     b50:	df 05       	cpc	r29, r15
     b52:	b4 f3       	brlt	.-20     	; 0xb40 <turn_clockwise+0x2a>
	
	// sprintf(outputString, "Turned %d degrees clockwise", degrees);
	
	// USART_SendString(outputString);
	
	oi_set_wheels(0, 0); // stop
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	9e dd       	rcall	.-1220   	; 0x69a <oi_set_wheels>
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret

00000b6c <turn_counterclockwise>:

void turn_counterclockwise(oi_t *sensor, int degrees)
{
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	8c 01       	movw	r16, r24
     b7a:	7b 01       	movw	r14, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(150, -150);
     b7c:	6a e6       	ldi	r22, 0x6A	; 106
     b7e:	7f ef       	ldi	r23, 0xFF	; 255
     b80:	86 e9       	ldi	r24, 0x96	; 150
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	8a dd       	rcall	.-1260   	; 0x69a <oi_set_wheels>
	while (sum < degrees-12) {
     b86:	8c e0       	ldi	r24, 0x0C	; 12
     b88:	e8 1a       	sub	r14, r24
     b8a:	f1 08       	sbc	r15, r1
     b8c:	1e 14       	cp	r1, r14
     b8e:	1f 04       	cpc	r1, r15
     b90:	64 f4       	brge	.+24     	; 0xbaa <turn_counterclockwise+0x3e>
	oi_set_wheels(0, 0); // stop
}

void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     b92:	c0 e0       	ldi	r28, 0x00	; 0
     b94:	d0 e0       	ldi	r29, 0x00	; 0
	char outputString[20];
	oi_set_wheels(150, -150);
	while (sum < degrees-12) {
		oi_update(sensor);
     b96:	c8 01       	movw	r24, r16
     b98:	bf dd       	rcall	.-1154   	; 0x718 <oi_update>
		sum += sensor->angle; //maybe
     b9a:	f8 01       	movw	r30, r16
     b9c:	86 85       	ldd	r24, Z+14	; 0x0e
     b9e:	97 85       	ldd	r25, Z+15	; 0x0f
     ba0:	c8 0f       	add	r28, r24
     ba2:	d9 1f       	adc	r29, r25
void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(150, -150);
	while (sum < degrees-12) {
     ba4:	ce 15       	cp	r28, r14
     ba6:	df 05       	cpc	r29, r15
     ba8:	b4 f3       	brlt	.-20     	; 0xb96 <turn_counterclockwise+0x2a>
		// sprintf(outputString, "Turned %f degrees counterclockwise", degrees);
		
		//USART_SendString(outputString);

	}
	oi_set_wheels(0, 0); // stop
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	73 dd       	rcall	.-1306   	; 0x69a <oi_set_wheels>
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	08 95       	ret

00000bc2 <reportData>:

void reportData(oi_t *sensor)
{
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	e2 97       	sbiw	r28, 0x32	; 50
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	8c 01       	movw	r16, r24
	char senDat[50];
	oi_update(sensor);
     bdc:	9d dd       	rcall	.-1222   	; 0x718 <oi_update>
	
	sprintf(senDat, "Cliff Left: %d | Cliff FrontLeft: %d | Cliff FrontRight: %d | Cliff Right: %d | Wheel Drop Left: %d | Wheel Drop Middle: %d | Wheel Drop Left: %d", sensor->cliff_left_signal, sensor->cliff_frontleft_signal, sensor->cliff_frontright_signal, sensor->cliff_right_signal,sensor->wheeldrop_left, sensor->wheeldrop_caster, sensor->wheeldrop_right);
     bde:	f8 01       	movw	r30, r16
     be0:	80 81       	ld	r24, Z
     be2:	82 fb       	bst	r24, 2
     be4:	88 27       	eor	r24, r24
     be6:	80 f9       	bld	r24, 0
     be8:	1f 92       	push	r1
     bea:	8f 93       	push	r24
     bec:	80 81       	ld	r24, Z
     bee:	82 95       	swap	r24
     bf0:	81 70       	andi	r24, 0x01	; 1
     bf2:	1f 92       	push	r1
     bf4:	8f 93       	push	r24
     bf6:	80 81       	ld	r24, Z
     bf8:	83 fb       	bst	r24, 3
     bfa:	88 27       	eor	r24, r24
     bfc:	80 f9       	bld	r24, 0
     bfe:	1f 92       	push	r1
     c00:	8f 93       	push	r24
     c02:	83 a1       	ldd	r24, Z+35	; 0x23
     c04:	8f 93       	push	r24
     c06:	82 a1       	ldd	r24, Z+34	; 0x22
     c08:	8f 93       	push	r24
     c0a:	81 a1       	ldd	r24, Z+33	; 0x21
     c0c:	8f 93       	push	r24
     c0e:	80 a1       	ldd	r24, Z+32	; 0x20
     c10:	8f 93       	push	r24
     c12:	87 8d       	ldd	r24, Z+31	; 0x1f
     c14:	8f 93       	push	r24
     c16:	86 8d       	ldd	r24, Z+30	; 0x1e
     c18:	8f 93       	push	r24
     c1a:	85 8d       	ldd	r24, Z+29	; 0x1d
     c1c:	8f 93       	push	r24
     c1e:	84 8d       	ldd	r24, Z+28	; 0x1c
     c20:	8f 93       	push	r24
     c22:	8d e1       	ldi	r24, 0x1D	; 29
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	8e 01       	movw	r16, r28
     c2c:	0f 5f       	subi	r16, 0xFF	; 255
     c2e:	1f 4f       	sbci	r17, 0xFF	; 255
     c30:	1f 93       	push	r17
     c32:	0f 93       	push	r16
     c34:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
	USART_SendString(senDat);
     c38:	c8 01       	movw	r24, r16
     c3a:	4b de       	rcall	.-874    	; 0x8d2 <USART_SendString>
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61

}
     c46:	e2 96       	adiw	r28, 0x32	; 50
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <move_backward>:
	return 0;
}


void move_backward(oi_t *sensor, int centimeters)
{
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	8c 01       	movw	r16, r24
     c6a:	d6 2f       	mov	r29, r22
     c6c:	c7 2f       	mov	r28, r23
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
     c6e:	68 e3       	ldi	r22, 0x38	; 56
     c70:	7f ef       	ldi	r23, 0xFF	; 255
     c72:	88 e3       	ldi	r24, 0x38	; 56
     c74:	9f ef       	ldi	r25, 0xFF	; 255
     c76:	11 dd       	rcall	.-1502   	; 0x69a <oi_set_wheels>
	while (sum < centimeters*10) {
     c78:	ed 2e       	mov	r14, r29
     c7a:	fc 2e       	mov	r15, r28
     c7c:	ee 0c       	add	r14, r14
     c7e:	ff 1c       	adc	r15, r15
     c80:	c7 01       	movw	r24, r14
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	e8 0e       	add	r14, r24
     c8c:	f9 1e       	adc	r15, r25
     c8e:	1e 14       	cp	r1, r14
     c90:	1f 04       	cpc	r1, r15
     c92:	64 f4       	brge	.+24     	; 0xcac <move_backward+0x50>
}


void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     c94:	c0 e0       	ldi	r28, 0x00	; 0
     c96:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
		oi_update(sensor);
     c98:	c8 01       	movw	r24, r16
     c9a:	3e dd       	rcall	.-1412   	; 0x718 <oi_update>
		sum -= sensor->distance;
     c9c:	f8 01       	movw	r30, r16
     c9e:	84 85       	ldd	r24, Z+12	; 0x0c
     ca0:	95 85       	ldd	r25, Z+13	; 0x0d
     ca2:	c8 1b       	sub	r28, r24
     ca4:	d9 0b       	sbc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
     ca6:	ce 15       	cp	r28, r14
     ca8:	df 05       	cpc	r29, r15
     caa:	b4 f3       	brlt	.-20     	; 0xc98 <move_backward+0x3c>
		oi_update(sensor);
		sum -= sensor->distance;
	}
	
	oi_set_wheels(0, 0); // stop	
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	f2 dc       	rcall	.-1564   	; 0x69a <oi_set_wheels>
	reportData(sensor);
     cb6:	c8 01       	movw	r24, r16
     cb8:	84 df       	rcall	.-248    	; 0xbc2 <reportData>
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	08 95       	ret

00000cc8 <move_forward>:
}

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	a8 97       	sbiw	r28, 0x28	; 40
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	8c 01       	movw	r16, r24
     cee:	e6 2e       	mov	r14, r22
     cf0:	f7 2e       	mov	r15, r23
	int sum = 0;
	int dist = 0;
	char outputString[20];
	lprintf("Debug 1\n");
     cf2:	8f ea       	ldi	r24, 0xAF	; 175
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	40 dc       	rcall	.-1920   	; 0x57c <lprintf>
	oi_set_wheels(150, 150); // move forward
     cfc:	66 e9       	ldi	r22, 0x96	; 150
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	86 e9       	ldi	r24, 0x96	; 150
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	ca dc       	rcall	.-1644   	; 0x69a <oi_set_wheels>
	lprintf("Debug 2\n");
     d06:	88 eb       	ldi	r24, 0xB8	; 184
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	36 dc       	rcall	.-1940   	; 0x57c <lprintf>
	while (sum < centimeters*10)
     d10:	ae 2c       	mov	r10, r14
     d12:	bf 2c       	mov	r11, r15
     d14:	aa 0c       	add	r10, r10
     d16:	bb 1c       	adc	r11, r11
     d18:	c5 01       	movw	r24, r10
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	a8 0e       	add	r10, r24
     d24:	b9 1e       	adc	r11, r25
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     d2e:	e1 2c       	mov	r14, r1
     d30:	f1 2c       	mov	r15, r1
	lprintf("Debug 2\n");
	while (sum < centimeters*10)
	{
		oi_update(sensor);
		sum += sensor->distance;
		lprintf("%d\n", sum);
     d32:	0f 2e       	mov	r0, r31
     d34:	f1 ec       	ldi	r31, 0xC1	; 193
     d36:	cf 2e       	mov	r12, r31
     d38:	f1 e0       	ldi	r31, 0x01	; 1
     d3a:	df 2e       	mov	r13, r31
     d3c:	f0 2d       	mov	r31, r0
	int dist = 0;
	char outputString[20];
	lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
	lprintf("Debug 2\n");
	while (sum < centimeters*10)
     d3e:	10 c1       	rjmp	.+544    	; 0xf60 <move_forward+0x298>
	{
		oi_update(sensor);
     d40:	c8 01       	movw	r24, r16
     d42:	ea dc       	rcall	.-1580   	; 0x718 <oi_update>
		sum += sensor->distance;
     d44:	f8 01       	movw	r30, r16
     d46:	84 85       	ldd	r24, Z+12	; 0x0c
     d48:	95 85       	ldd	r25, Z+13	; 0x0d
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
		lprintf("%d\n", sum);
     d4e:	ff 92       	push	r15
     d50:	ef 92       	push	r14
     d52:	df 92       	push	r13
     d54:	cf 92       	push	r12
     d56:	12 dc       	rcall	.-2012   	; 0x57c <lprintf>
		if(sensor->bumper_left)
     d58:	f8 01       	movw	r30, r16
     d5a:	40 81       	ld	r20, Z
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	41 ff       	sbrs	r20, 1
     d66:	12 c0       	rjmp	.+36     	; 0xd8c <move_forward+0xc4>
		{
			oi_set_wheels(0, 0); // stop
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	94 dc       	rcall	.-1752   	; 0x69a <oi_set_wheels>

			move_backward(sensor,10);
     d72:	6a e0       	ldi	r22, 0x0A	; 10
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	c8 01       	movw	r24, r16
     d78:	71 df       	rcall	.-286    	; 0xc5c <move_backward>
			turn_clockwise(sensor,45);
     d7a:	6d e2       	ldi	r22, 0x2D	; 45
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	c8 01       	movw	r24, r16
     d80:	ca de       	rcall	.-620    	; 0xb16 <turn_clockwise>

			USART_SendString("Left Bumper Triggered"); //
     d82:	85 ec       	ldi	r24, 0xC5	; 197
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	a5 dd       	rcall	.-1206   	; 0x8d2 <USART_SendString>
			return 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	09 c1       	rjmp	.+530    	; 0xf9e <move_forward+0x2d6>
		}
		else if(sensor->bumper_right)
     d8c:	40 ff       	sbrs	r20, 0
     d8e:	12 c0       	rjmp	.+36     	; 0xdb4 <move_forward+0xec>
		{
			oi_set_wheels(0, 0); // stop
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	80 dc       	rcall	.-1792   	; 0x69a <oi_set_wheels>

			move_backward(sensor,10);
     d9a:	6a e0       	ldi	r22, 0x0A	; 10
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	c8 01       	movw	r24, r16
     da0:	5d df       	rcall	.-326    	; 0xc5c <move_backward>
			turn_counterclockwise(sensor,45);
     da2:	6d e2       	ldi	r22, 0x2D	; 45
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	c8 01       	movw	r24, r16
     da8:	e1 de       	rcall	.-574    	; 0xb6c <turn_counterclockwise>

			USART_SendString("Right Bumper Triggered");
     daa:	8b ed       	ldi	r24, 0xDB	; 219
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	91 dd       	rcall	.-1246   	; 0x8d2 <USART_SendString>
			return 2;
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	f5 c0       	rjmp	.+490    	; 0xf9e <move_forward+0x2d6>
		}
		
		if((sensor->cliff_frontleft_signal > 800) || (sensor->cliff_frontright_signal > 800))
     db4:	f8 01       	movw	r30, r16
     db6:	86 8d       	ldd	r24, Z+30	; 0x1e
     db8:	97 8d       	ldd	r25, Z+31	; 0x1f
     dba:	81 32       	cpi	r24, 0x21	; 33
     dbc:	f3 e0       	ldi	r31, 0x03	; 3
     dbe:	9f 07       	cpc	r25, r31
     dc0:	38 f4       	brcc	.+14     	; 0xdd0 <move_forward+0x108>
     dc2:	f8 01       	movw	r30, r16
     dc4:	20 a1       	ldd	r18, Z+32	; 0x20
     dc6:	31 a1       	ldd	r19, Z+33	; 0x21
     dc8:	21 32       	cpi	r18, 0x21	; 33
     dca:	f3 e0       	ldi	r31, 0x03	; 3
     dcc:	3f 07       	cpc	r19, r31
     dce:	88 f0       	brcs	.+34     	; 0xdf2 <move_forward+0x12a>
		{
			lprintf("Line Detected");
     dd0:	82 ef       	ldi	r24, 0xF2	; 242
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	9f 93       	push	r25
     dd6:	8f 93       	push	r24
     dd8:	d1 db       	rcall	.-2142   	; 0x57c <lprintf>
			oi_set_wheels(0,0);
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	5b dc       	rcall	.-1866   	; 0x69a <oi_set_wheels>
			USART_SendString("Line Detected");
     de4:	82 ef       	ldi	r24, 0xF2	; 242
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	74 dd       	rcall	.-1304   	; 0x8d2 <USART_SendString>
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
			return 3;
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	d6 c0       	rjmp	.+428    	; 0xf9e <move_forward+0x2d6>
		}
		else if((sensor->wheeldrop_caster == 1) || (sensor->wheeldrop_left == 1) || (sensor->wheeldrop_right == 1))
     df2:	4c 71       	andi	r20, 0x1C	; 28
     df4:	31 f1       	breq	.+76     	; 0xe42 <move_forward+0x17a>
		{
			char sensorData[20];
			sprintf(sensorData, "Cliff Edge Detected: Right Sensor: %d Front Right: %d Front Left%d Left: %d", (int) sensor->cliff_frontright_signal, (int) sensor->cliff_frontright_signal, (int) sensor->cliff_frontleft_signal, (int) sensor->cliff_frontleft_signal);
     df6:	9f 93       	push	r25
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	8f 93       	push	r24
     dfe:	3f 93       	push	r19
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	2f 93       	push	r18
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	9f 93       	push	r25
     e0c:	8f 93       	push	r24
     e0e:	8e 01       	movw	r16, r28
     e10:	0b 5e       	subi	r16, 0xEB	; 235
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	1f 93       	push	r17
     e16:	0f 93       	push	r16
     e18:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
			USART_SendString(sensorData);
     e1c:	c8 01       	movw	r24, r16
     e1e:	59 dd       	rcall	.-1358   	; 0x8d2 <USART_SendString>
			lprintf("Cliff Edge Detected");
     e20:	8c e4       	ldi	r24, 0x4C	; 76
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	9f 93       	push	r25
     e26:	8f 93       	push	r24
     e28:	a9 db       	rcall	.-2222   	; 0x57c <lprintf>
			// move_backward(sensor,10);
			oi_set_wheels(0,0);
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	33 dc       	rcall	.-1946   	; 0x69a <oi_set_wheels>
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
			return 4;
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	ae c0       	rjmp	.+348    	; 0xf9e <move_forward+0x2d6>
		}
		
		else if (sensor->cliff_frontleft_signal < 10) 
     e42:	0a 97       	sbiw	r24, 0x0a	; 10
     e44:	00 f5       	brcc	.+64     	; 0xe86 <move_forward+0x1be>
		{
			char sensorData[20];
			sprintf(sensorData, "Cliff Edge Detected: Front Left | distance moved: %d cm", sum / 10);
     e46:	c7 01       	movw	r24, r14
     e48:	6a e0       	ldi	r22, 0x0A	; 10
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	31 d6       	rcall	.+3170   	; 0x1ab0 <__divmodhi4>
     e4e:	7f 93       	push	r23
     e50:	6f 93       	push	r22
     e52:	80 e6       	ldi	r24, 0x60	; 96
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	9f 93       	push	r25
     e58:	8f 93       	push	r24
     e5a:	8e 01       	movw	r16, r28
     e5c:	0b 5e       	subi	r16, 0xEB	; 235
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	1f 93       	push	r17
     e62:	0f 93       	push	r16
     e64:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
			USART_SendString(sensorData);
     e68:	c8 01       	movw	r24, r16
     e6a:	33 dd       	rcall	.-1434   	; 0x8d2 <USART_SendString>
			oi_set_wheels(0,0);
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	12 dc       	rcall	.-2012   	; 0x69a <oi_set_wheels>
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
			return 5;
     e82:	85 e0       	ldi	r24, 0x05	; 5
     e84:	8c c0       	rjmp	.+280    	; 0xf9e <move_forward+0x2d6>
		}
		else if (sensor->cliff_frontright_signal < 10)
     e86:	2a 30       	cpi	r18, 0x0A	; 10
     e88:	31 05       	cpc	r19, r1
     e8a:	00 f5       	brcc	.+64     	; 0xecc <move_forward+0x204>
		{
			char sensorData[20];
			sprintf(sensorData, "Cliff Edge Detected: Front Right | distance moved: %d cm", sum / 10);
     e8c:	c7 01       	movw	r24, r14
     e8e:	6a e0       	ldi	r22, 0x0A	; 10
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	0e d6       	rcall	.+3100   	; 0x1ab0 <__divmodhi4>
     e94:	7f 93       	push	r23
     e96:	6f 93       	push	r22
     e98:	88 e9       	ldi	r24, 0x98	; 152
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	9f 93       	push	r25
     e9e:	8f 93       	push	r24
     ea0:	8e 01       	movw	r16, r28
     ea2:	0b 5e       	subi	r16, 0xEB	; 235
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	1f 93       	push	r17
     ea8:	0f 93       	push	r16
     eaa:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
			USART_SendString(sensorData);
     eae:	c8 01       	movw	r24, r16
     eb0:	10 dd       	rcall	.-1504   	; 0x8d2 <USART_SendString>
			oi_set_wheels(0,0);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	ef db       	rcall	.-2082   	; 0x69a <oi_set_wheels>
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
			return 6;
     ec8:	86 e0       	ldi	r24, 0x06	; 6
     eca:	69 c0       	rjmp	.+210    	; 0xf9e <move_forward+0x2d6>
		}
		else if (sensor->cliff_left_signal < 10) 
     ecc:	f8 01       	movw	r30, r16
     ece:	84 8d       	ldd	r24, Z+28	; 0x1c
     ed0:	95 8d       	ldd	r25, Z+29	; 0x1d
     ed2:	0a 97       	sbiw	r24, 0x0a	; 10
     ed4:	00 f5       	brcc	.+64     	; 0xf16 <move_forward+0x24e>
		{
			char sensorData[20];
			sprintf(sensorData, "Cliff Edge Detected: Left | distance moved: %d cm", sum / 10);		
     ed6:	c7 01       	movw	r24, r14
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	e9 d5       	rcall	.+3026   	; 0x1ab0 <__divmodhi4>
     ede:	7f 93       	push	r23
     ee0:	6f 93       	push	r22
     ee2:	81 ed       	ldi	r24, 0xD1	; 209
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	9f 93       	push	r25
     ee8:	8f 93       	push	r24
     eea:	8e 01       	movw	r16, r28
     eec:	0b 5e       	subi	r16, 0xEB	; 235
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	1f 93       	push	r17
     ef2:	0f 93       	push	r16
     ef4:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
			USART_SendString(sensorData);	
     ef8:	c8 01       	movw	r24, r16
     efa:	eb dc       	rcall	.-1578   	; 0x8d2 <USART_SendString>
			oi_set_wheels(0,0);
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	ca db       	rcall	.-2156   	; 0x69a <oi_set_wheels>
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
			return 7;
     f12:	87 e0       	ldi	r24, 0x07	; 7
     f14:	44 c0       	rjmp	.+136    	; 0xf9e <move_forward+0x2d6>
		}
		else if (sensor->cliff_right_signal < 10)
     f16:	f8 01       	movw	r30, r16
     f18:	82 a1       	ldd	r24, Z+34	; 0x22
     f1a:	93 a1       	ldd	r25, Z+35	; 0x23
     f1c:	0a 97       	sbiw	r24, 0x0a	; 10
     f1e:	00 f5       	brcc	.+64     	; 0xf60 <move_forward+0x298>
		{
			char sensorData[20];
			sprintf(sensorData, "Cliff Edge Detected: Right | distance moved: %d cm", sum / 10);
     f20:	c7 01       	movw	r24, r14
     f22:	6a e0       	ldi	r22, 0x0A	; 10
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	c4 d5       	rcall	.+2952   	; 0x1ab0 <__divmodhi4>
     f28:	7f 93       	push	r23
     f2a:	6f 93       	push	r22
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	8e 01       	movw	r16, r28
     f36:	0b 5e       	subi	r16, 0xEB	; 235
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	1f 93       	push	r17
     f3c:	0f 93       	push	r16
     f3e:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
			USART_SendString(sensorData);		
     f42:	c8 01       	movw	r24, r16
     f44:	c6 dc       	rcall	.-1652   	; 0x8d2 <USART_SendString>
			oi_set_wheels(0,0);	
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a5 db       	rcall	.-2230   	; 0x69a <oi_set_wheels>
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
			return 8;
     f5c:	88 e0       	ldi	r24, 0x08	; 8
     f5e:	1f c0       	rjmp	.+62     	; 0xf9e <move_forward+0x2d6>
	int dist = 0;
	char outputString[20];
	lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
	lprintf("Debug 2\n");
	while (sum < centimeters*10)
     f60:	ea 14       	cp	r14, r10
     f62:	fb 04       	cpc	r15, r11
     f64:	0c f4       	brge	.+2      	; 0xf68 <move_forward+0x2a0>
     f66:	ec ce       	rjmp	.-552    	; 0xd40 <move_forward+0x78>
			oi_set_wheels(0,0);	
			return 8;
		}
	}

	oi_set_wheels(0, 0); // stop
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	94 db       	rcall	.-2264   	; 0x69a <oi_set_wheels>
	
	sprintf(outputString, "Moved %d centimeters", sum);
     f72:	ff 92       	push	r15
     f74:	ef 92       	push	r14
     f76:	86 e3       	ldi	r24, 0x36	; 54
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	9f 93       	push	r25
     f7c:	8f 93       	push	r24
     f7e:	8e 01       	movw	r16, r28
     f80:	0f 5f       	subi	r16, 0xFF	; 255
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	1f 93       	push	r17
     f86:	0f 93       	push	r16
     f88:	0e 94 12 10 	call	0x2024	; 0x2024 <sprintf>
	
	USART_SendString(outputString);
     f8c:	c8 01       	movw	r24, r16
     f8e:	a1 dc       	rcall	.-1726   	; 0x8d2 <USART_SendString>
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0

	return 0;
     f9c:	80 e0       	ldi	r24, 0x00	; 0
}
     f9e:	a8 96       	adiw	r28, 0x28	; 40
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	bf 90       	pop	r11
     fbc:	af 90       	pop	r10
     fbe:	08 95       	ret

00000fc0 <__subsf3>:
     fc0:	50 58       	subi	r21, 0x80	; 128

00000fc2 <__addsf3>:
     fc2:	bb 27       	eor	r27, r27
     fc4:	aa 27       	eor	r26, r26
     fc6:	0e d0       	rcall	.+28     	; 0xfe4 <__addsf3x>
     fc8:	48 c1       	rjmp	.+656    	; 0x125a <__fp_round>
     fca:	39 d1       	rcall	.+626    	; 0x123e <__fp_pscA>
     fcc:	30 f0       	brcs	.+12     	; 0xfda <__addsf3+0x18>
     fce:	3e d1       	rcall	.+636    	; 0x124c <__fp_pscB>
     fd0:	20 f0       	brcs	.+8      	; 0xfda <__addsf3+0x18>
     fd2:	31 f4       	brne	.+12     	; 0xfe0 <__addsf3+0x1e>
     fd4:	9f 3f       	cpi	r25, 0xFF	; 255
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__addsf3+0x1a>
     fd8:	1e f4       	brtc	.+6      	; 0xfe0 <__addsf3+0x1e>
     fda:	2e c1       	rjmp	.+604    	; 0x1238 <__fp_nan>
     fdc:	0e f4       	brtc	.+2      	; 0xfe0 <__addsf3+0x1e>
     fde:	e0 95       	com	r30
     fe0:	e7 fb       	bst	r30, 7
     fe2:	24 c1       	rjmp	.+584    	; 0x122c <__fp_inf>

00000fe4 <__addsf3x>:
     fe4:	e9 2f       	mov	r30, r25
     fe6:	4a d1       	rcall	.+660    	; 0x127c <__fp_split3>
     fe8:	80 f3       	brcs	.-32     	; 0xfca <__addsf3+0x8>
     fea:	ba 17       	cp	r27, r26
     fec:	62 07       	cpc	r22, r18
     fee:	73 07       	cpc	r23, r19
     ff0:	84 07       	cpc	r24, r20
     ff2:	95 07       	cpc	r25, r21
     ff4:	18 f0       	brcs	.+6      	; 0xffc <__addsf3x+0x18>
     ff6:	71 f4       	brne	.+28     	; 0x1014 <__addsf3x+0x30>
     ff8:	9e f5       	brtc	.+102    	; 0x1060 <__addsf3x+0x7c>
     ffa:	62 c1       	rjmp	.+708    	; 0x12c0 <__fp_zero>
     ffc:	0e f4       	brtc	.+2      	; 0x1000 <__addsf3x+0x1c>
     ffe:	e0 95       	com	r30
    1000:	0b 2e       	mov	r0, r27
    1002:	ba 2f       	mov	r27, r26
    1004:	a0 2d       	mov	r26, r0
    1006:	0b 01       	movw	r0, r22
    1008:	b9 01       	movw	r22, r18
    100a:	90 01       	movw	r18, r0
    100c:	0c 01       	movw	r0, r24
    100e:	ca 01       	movw	r24, r20
    1010:	a0 01       	movw	r20, r0
    1012:	11 24       	eor	r1, r1
    1014:	ff 27       	eor	r31, r31
    1016:	59 1b       	sub	r21, r25
    1018:	99 f0       	breq	.+38     	; 0x1040 <__addsf3x+0x5c>
    101a:	59 3f       	cpi	r21, 0xF9	; 249
    101c:	50 f4       	brcc	.+20     	; 0x1032 <__addsf3x+0x4e>
    101e:	50 3e       	cpi	r21, 0xE0	; 224
    1020:	68 f1       	brcs	.+90     	; 0x107c <__addsf3x+0x98>
    1022:	1a 16       	cp	r1, r26
    1024:	f0 40       	sbci	r31, 0x00	; 0
    1026:	a2 2f       	mov	r26, r18
    1028:	23 2f       	mov	r18, r19
    102a:	34 2f       	mov	r19, r20
    102c:	44 27       	eor	r20, r20
    102e:	58 5f       	subi	r21, 0xF8	; 248
    1030:	f3 cf       	rjmp	.-26     	; 0x1018 <__addsf3x+0x34>
    1032:	46 95       	lsr	r20
    1034:	37 95       	ror	r19
    1036:	27 95       	ror	r18
    1038:	a7 95       	ror	r26
    103a:	f0 40       	sbci	r31, 0x00	; 0
    103c:	53 95       	inc	r21
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__addsf3x+0x4e>
    1040:	7e f4       	brtc	.+30     	; 0x1060 <__addsf3x+0x7c>
    1042:	1f 16       	cp	r1, r31
    1044:	ba 0b       	sbc	r27, r26
    1046:	62 0b       	sbc	r22, r18
    1048:	73 0b       	sbc	r23, r19
    104a:	84 0b       	sbc	r24, r20
    104c:	ba f0       	brmi	.+46     	; 0x107c <__addsf3x+0x98>
    104e:	91 50       	subi	r25, 0x01	; 1
    1050:	a1 f0       	breq	.+40     	; 0x107a <__addsf3x+0x96>
    1052:	ff 0f       	add	r31, r31
    1054:	bb 1f       	adc	r27, r27
    1056:	66 1f       	adc	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	c2 f7       	brpl	.-16     	; 0x104e <__addsf3x+0x6a>
    105e:	0e c0       	rjmp	.+28     	; 0x107c <__addsf3x+0x98>
    1060:	ba 0f       	add	r27, r26
    1062:	62 1f       	adc	r22, r18
    1064:	73 1f       	adc	r23, r19
    1066:	84 1f       	adc	r24, r20
    1068:	48 f4       	brcc	.+18     	; 0x107c <__addsf3x+0x98>
    106a:	87 95       	ror	r24
    106c:	77 95       	ror	r23
    106e:	67 95       	ror	r22
    1070:	b7 95       	ror	r27
    1072:	f7 95       	ror	r31
    1074:	9e 3f       	cpi	r25, 0xFE	; 254
    1076:	08 f0       	brcs	.+2      	; 0x107a <__addsf3x+0x96>
    1078:	b3 cf       	rjmp	.-154    	; 0xfe0 <__addsf3+0x1e>
    107a:	93 95       	inc	r25
    107c:	88 0f       	add	r24, r24
    107e:	08 f0       	brcs	.+2      	; 0x1082 <__addsf3x+0x9e>
    1080:	99 27       	eor	r25, r25
    1082:	ee 0f       	add	r30, r30
    1084:	97 95       	ror	r25
    1086:	87 95       	ror	r24
    1088:	08 95       	ret

0000108a <__divsf3>:
    108a:	0c d0       	rcall	.+24     	; 0x10a4 <__divsf3x>
    108c:	e6 c0       	rjmp	.+460    	; 0x125a <__fp_round>
    108e:	de d0       	rcall	.+444    	; 0x124c <__fp_pscB>
    1090:	40 f0       	brcs	.+16     	; 0x10a2 <__divsf3+0x18>
    1092:	d5 d0       	rcall	.+426    	; 0x123e <__fp_pscA>
    1094:	30 f0       	brcs	.+12     	; 0x10a2 <__divsf3+0x18>
    1096:	21 f4       	brne	.+8      	; 0x10a0 <__divsf3+0x16>
    1098:	5f 3f       	cpi	r21, 0xFF	; 255
    109a:	19 f0       	breq	.+6      	; 0x10a2 <__divsf3+0x18>
    109c:	c7 c0       	rjmp	.+398    	; 0x122c <__fp_inf>
    109e:	51 11       	cpse	r21, r1
    10a0:	10 c1       	rjmp	.+544    	; 0x12c2 <__fp_szero>
    10a2:	ca c0       	rjmp	.+404    	; 0x1238 <__fp_nan>

000010a4 <__divsf3x>:
    10a4:	eb d0       	rcall	.+470    	; 0x127c <__fp_split3>
    10a6:	98 f3       	brcs	.-26     	; 0x108e <__divsf3+0x4>

000010a8 <__divsf3_pse>:
    10a8:	99 23       	and	r25, r25
    10aa:	c9 f3       	breq	.-14     	; 0x109e <__divsf3+0x14>
    10ac:	55 23       	and	r21, r21
    10ae:	b1 f3       	breq	.-20     	; 0x109c <__divsf3+0x12>
    10b0:	95 1b       	sub	r25, r21
    10b2:	55 0b       	sbc	r21, r21
    10b4:	bb 27       	eor	r27, r27
    10b6:	aa 27       	eor	r26, r26
    10b8:	62 17       	cp	r22, r18
    10ba:	73 07       	cpc	r23, r19
    10bc:	84 07       	cpc	r24, r20
    10be:	38 f0       	brcs	.+14     	; 0x10ce <__divsf3_pse+0x26>
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	44 1f       	adc	r20, r20
    10ca:	aa 1f       	adc	r26, r26
    10cc:	a9 f3       	breq	.-22     	; 0x10b8 <__divsf3_pse+0x10>
    10ce:	33 d0       	rcall	.+102    	; 0x1136 <__stack+0x37>
    10d0:	0e 2e       	mov	r0, r30
    10d2:	3a f0       	brmi	.+14     	; 0x10e2 <__divsf3_pse+0x3a>
    10d4:	e0 e8       	ldi	r30, 0x80	; 128
    10d6:	30 d0       	rcall	.+96     	; 0x1138 <__stack+0x39>
    10d8:	91 50       	subi	r25, 0x01	; 1
    10da:	50 40       	sbci	r21, 0x00	; 0
    10dc:	e6 95       	lsr	r30
    10de:	00 1c       	adc	r0, r0
    10e0:	ca f7       	brpl	.-14     	; 0x10d4 <__divsf3_pse+0x2c>
    10e2:	29 d0       	rcall	.+82     	; 0x1136 <__stack+0x37>
    10e4:	fe 2f       	mov	r31, r30
    10e6:	27 d0       	rcall	.+78     	; 0x1136 <__stack+0x37>
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	bb 1f       	adc	r27, r27
    10f0:	26 17       	cp	r18, r22
    10f2:	37 07       	cpc	r19, r23
    10f4:	48 07       	cpc	r20, r24
    10f6:	ab 07       	cpc	r26, r27
    10f8:	b0 e8       	ldi	r27, 0x80	; 128
    10fa:	09 f0       	breq	.+2      	; 0x10fe <__divsf3_pse+0x56>
    10fc:	bb 0b       	sbc	r27, r27
    10fe:	80 2d       	mov	r24, r0
    1100:	bf 01       	movw	r22, r30
    1102:	ff 27       	eor	r31, r31
    1104:	93 58       	subi	r25, 0x83	; 131
    1106:	5f 4f       	sbci	r21, 0xFF	; 255
    1108:	2a f0       	brmi	.+10     	; 0x1114 <__stack+0x15>
    110a:	9e 3f       	cpi	r25, 0xFE	; 254
    110c:	51 05       	cpc	r21, r1
    110e:	68 f0       	brcs	.+26     	; 0x112a <__stack+0x2b>
    1110:	8d c0       	rjmp	.+282    	; 0x122c <__fp_inf>
    1112:	d7 c0       	rjmp	.+430    	; 0x12c2 <__fp_szero>
    1114:	5f 3f       	cpi	r21, 0xFF	; 255
    1116:	ec f3       	brlt	.-6      	; 0x1112 <__stack+0x13>
    1118:	98 3e       	cpi	r25, 0xE8	; 232
    111a:	dc f3       	brlt	.-10     	; 0x1112 <__stack+0x13>
    111c:	86 95       	lsr	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b7 95       	ror	r27
    1124:	f7 95       	ror	r31
    1126:	9f 5f       	subi	r25, 0xFF	; 255
    1128:	c9 f7       	brne	.-14     	; 0x111c <__stack+0x1d>
    112a:	88 0f       	add	r24, r24
    112c:	91 1d       	adc	r25, r1
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret
    1136:	e1 e0       	ldi	r30, 0x01	; 1
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	bb 1f       	adc	r27, r27
    1140:	62 17       	cp	r22, r18
    1142:	73 07       	cpc	r23, r19
    1144:	84 07       	cpc	r24, r20
    1146:	ba 07       	cpc	r27, r26
    1148:	20 f0       	brcs	.+8      	; 0x1152 <__stack+0x53>
    114a:	62 1b       	sub	r22, r18
    114c:	73 0b       	sbc	r23, r19
    114e:	84 0b       	sbc	r24, r20
    1150:	ba 0b       	sbc	r27, r26
    1152:	ee 1f       	adc	r30, r30
    1154:	88 f7       	brcc	.-30     	; 0x1138 <__stack+0x39>
    1156:	e0 95       	com	r30
    1158:	08 95       	ret

0000115a <__fixunssfsi>:
    115a:	98 d0       	rcall	.+304    	; 0x128c <__fp_splitA>
    115c:	88 f0       	brcs	.+34     	; 0x1180 <__fixunssfsi+0x26>
    115e:	9f 57       	subi	r25, 0x7F	; 127
    1160:	90 f0       	brcs	.+36     	; 0x1186 <__fixunssfsi+0x2c>
    1162:	b9 2f       	mov	r27, r25
    1164:	99 27       	eor	r25, r25
    1166:	b7 51       	subi	r27, 0x17	; 23
    1168:	a0 f0       	brcs	.+40     	; 0x1192 <__fixunssfsi+0x38>
    116a:	d1 f0       	breq	.+52     	; 0x11a0 <__fixunssfsi+0x46>
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	1a f0       	brmi	.+6      	; 0x117c <__fixunssfsi+0x22>
    1176:	ba 95       	dec	r27
    1178:	c9 f7       	brne	.-14     	; 0x116c <__fixunssfsi+0x12>
    117a:	12 c0       	rjmp	.+36     	; 0x11a0 <__fixunssfsi+0x46>
    117c:	b1 30       	cpi	r27, 0x01	; 1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <__fixunssfsi+0x46>
    1180:	9f d0       	rcall	.+318    	; 0x12c0 <__fp_zero>
    1182:	b1 e0       	ldi	r27, 0x01	; 1
    1184:	08 95       	ret
    1186:	9c c0       	rjmp	.+312    	; 0x12c0 <__fp_zero>
    1188:	67 2f       	mov	r22, r23
    118a:	78 2f       	mov	r23, r24
    118c:	88 27       	eor	r24, r24
    118e:	b8 5f       	subi	r27, 0xF8	; 248
    1190:	39 f0       	breq	.+14     	; 0x11a0 <__fixunssfsi+0x46>
    1192:	b9 3f       	cpi	r27, 0xF9	; 249
    1194:	cc f3       	brlt	.-14     	; 0x1188 <__fixunssfsi+0x2e>
    1196:	86 95       	lsr	r24
    1198:	77 95       	ror	r23
    119a:	67 95       	ror	r22
    119c:	b3 95       	inc	r27
    119e:	d9 f7       	brne	.-10     	; 0x1196 <__fixunssfsi+0x3c>
    11a0:	3e f4       	brtc	.+14     	; 0x11b0 <__fixunssfsi+0x56>
    11a2:	90 95       	com	r25
    11a4:	80 95       	com	r24
    11a6:	70 95       	com	r23
    11a8:	61 95       	neg	r22
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	8f 4f       	sbci	r24, 0xFF	; 255
    11ae:	9f 4f       	sbci	r25, 0xFF	; 255
    11b0:	08 95       	ret

000011b2 <__floatunsisf>:
    11b2:	e8 94       	clt
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <__floatsisf+0x12>

000011b6 <__floatsisf>:
    11b6:	97 fb       	bst	r25, 7
    11b8:	3e f4       	brtc	.+14     	; 0x11c8 <__floatsisf+0x12>
    11ba:	90 95       	com	r25
    11bc:	80 95       	com	r24
    11be:	70 95       	com	r23
    11c0:	61 95       	neg	r22
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	8f 4f       	sbci	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	99 23       	and	r25, r25
    11ca:	a9 f0       	breq	.+42     	; 0x11f6 <__floatsisf+0x40>
    11cc:	f9 2f       	mov	r31, r25
    11ce:	96 e9       	ldi	r25, 0x96	; 150
    11d0:	bb 27       	eor	r27, r27
    11d2:	93 95       	inc	r25
    11d4:	f6 95       	lsr	r31
    11d6:	87 95       	ror	r24
    11d8:	77 95       	ror	r23
    11da:	67 95       	ror	r22
    11dc:	b7 95       	ror	r27
    11de:	f1 11       	cpse	r31, r1
    11e0:	f8 cf       	rjmp	.-16     	; 0x11d2 <__floatsisf+0x1c>
    11e2:	fa f4       	brpl	.+62     	; 0x1222 <__floatsisf+0x6c>
    11e4:	bb 0f       	add	r27, r27
    11e6:	11 f4       	brne	.+4      	; 0x11ec <__floatsisf+0x36>
    11e8:	60 ff       	sbrs	r22, 0
    11ea:	1b c0       	rjmp	.+54     	; 0x1222 <__floatsisf+0x6c>
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	16 c0       	rjmp	.+44     	; 0x1222 <__floatsisf+0x6c>
    11f6:	88 23       	and	r24, r24
    11f8:	11 f0       	breq	.+4      	; 0x11fe <__floatsisf+0x48>
    11fa:	96 e9       	ldi	r25, 0x96	; 150
    11fc:	11 c0       	rjmp	.+34     	; 0x1220 <__floatsisf+0x6a>
    11fe:	77 23       	and	r23, r23
    1200:	21 f0       	breq	.+8      	; 0x120a <__floatsisf+0x54>
    1202:	9e e8       	ldi	r25, 0x8E	; 142
    1204:	87 2f       	mov	r24, r23
    1206:	76 2f       	mov	r23, r22
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <__floatsisf+0x5e>
    120a:	66 23       	and	r22, r22
    120c:	71 f0       	breq	.+28     	; 0x122a <__floatsisf+0x74>
    120e:	96 e8       	ldi	r25, 0x86	; 134
    1210:	86 2f       	mov	r24, r22
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	2a f0       	brmi	.+10     	; 0x1222 <__floatsisf+0x6c>
    1218:	9a 95       	dec	r25
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	da f7       	brpl	.-10     	; 0x1218 <__floatsisf+0x62>
    1222:	88 0f       	add	r24, r24
    1224:	96 95       	lsr	r25
    1226:	87 95       	ror	r24
    1228:	97 f9       	bld	r25, 7
    122a:	08 95       	ret

0000122c <__fp_inf>:
    122c:	97 f9       	bld	r25, 7
    122e:	9f 67       	ori	r25, 0x7F	; 127
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	08 95       	ret

00001238 <__fp_nan>:
    1238:	9f ef       	ldi	r25, 0xFF	; 255
    123a:	80 ec       	ldi	r24, 0xC0	; 192
    123c:	08 95       	ret

0000123e <__fp_pscA>:
    123e:	00 24       	eor	r0, r0
    1240:	0a 94       	dec	r0
    1242:	16 16       	cp	r1, r22
    1244:	17 06       	cpc	r1, r23
    1246:	18 06       	cpc	r1, r24
    1248:	09 06       	cpc	r0, r25
    124a:	08 95       	ret

0000124c <__fp_pscB>:
    124c:	00 24       	eor	r0, r0
    124e:	0a 94       	dec	r0
    1250:	12 16       	cp	r1, r18
    1252:	13 06       	cpc	r1, r19
    1254:	14 06       	cpc	r1, r20
    1256:	05 06       	cpc	r0, r21
    1258:	08 95       	ret

0000125a <__fp_round>:
    125a:	09 2e       	mov	r0, r25
    125c:	03 94       	inc	r0
    125e:	00 0c       	add	r0, r0
    1260:	11 f4       	brne	.+4      	; 0x1266 <__fp_round+0xc>
    1262:	88 23       	and	r24, r24
    1264:	52 f0       	brmi	.+20     	; 0x127a <__fp_round+0x20>
    1266:	bb 0f       	add	r27, r27
    1268:	40 f4       	brcc	.+16     	; 0x127a <__fp_round+0x20>
    126a:	bf 2b       	or	r27, r31
    126c:	11 f4       	brne	.+4      	; 0x1272 <__fp_round+0x18>
    126e:	60 ff       	sbrs	r22, 0
    1270:	04 c0       	rjmp	.+8      	; 0x127a <__fp_round+0x20>
    1272:	6f 5f       	subi	r22, 0xFF	; 255
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	8f 4f       	sbci	r24, 0xFF	; 255
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	08 95       	ret

0000127c <__fp_split3>:
    127c:	57 fd       	sbrc	r21, 7
    127e:	90 58       	subi	r25, 0x80	; 128
    1280:	44 0f       	add	r20, r20
    1282:	55 1f       	adc	r21, r21
    1284:	59 f0       	breq	.+22     	; 0x129c <__fp_splitA+0x10>
    1286:	5f 3f       	cpi	r21, 0xFF	; 255
    1288:	71 f0       	breq	.+28     	; 0x12a6 <__fp_splitA+0x1a>
    128a:	47 95       	ror	r20

0000128c <__fp_splitA>:
    128c:	88 0f       	add	r24, r24
    128e:	97 fb       	bst	r25, 7
    1290:	99 1f       	adc	r25, r25
    1292:	61 f0       	breq	.+24     	; 0x12ac <__fp_splitA+0x20>
    1294:	9f 3f       	cpi	r25, 0xFF	; 255
    1296:	79 f0       	breq	.+30     	; 0x12b6 <__fp_splitA+0x2a>
    1298:	87 95       	ror	r24
    129a:	08 95       	ret
    129c:	12 16       	cp	r1, r18
    129e:	13 06       	cpc	r1, r19
    12a0:	14 06       	cpc	r1, r20
    12a2:	55 1f       	adc	r21, r21
    12a4:	f2 cf       	rjmp	.-28     	; 0x128a <__fp_split3+0xe>
    12a6:	46 95       	lsr	r20
    12a8:	f1 df       	rcall	.-30     	; 0x128c <__fp_splitA>
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <__fp_splitA+0x30>
    12ac:	16 16       	cp	r1, r22
    12ae:	17 06       	cpc	r1, r23
    12b0:	18 06       	cpc	r1, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	f1 cf       	rjmp	.-30     	; 0x1298 <__fp_splitA+0xc>
    12b6:	86 95       	lsr	r24
    12b8:	71 05       	cpc	r23, r1
    12ba:	61 05       	cpc	r22, r1
    12bc:	08 94       	sec
    12be:	08 95       	ret

000012c0 <__fp_zero>:
    12c0:	e8 94       	clt

000012c2 <__fp_szero>:
    12c2:	bb 27       	eor	r27, r27
    12c4:	66 27       	eor	r22, r22
    12c6:	77 27       	eor	r23, r23
    12c8:	cb 01       	movw	r24, r22
    12ca:	97 f9       	bld	r25, 7
    12cc:	08 95       	ret

000012ce <__mulsf3>:
    12ce:	0b d0       	rcall	.+22     	; 0x12e6 <__mulsf3x>
    12d0:	c4 cf       	rjmp	.-120    	; 0x125a <__fp_round>
    12d2:	b5 df       	rcall	.-150    	; 0x123e <__fp_pscA>
    12d4:	28 f0       	brcs	.+10     	; 0x12e0 <__mulsf3+0x12>
    12d6:	ba df       	rcall	.-140    	; 0x124c <__fp_pscB>
    12d8:	18 f0       	brcs	.+6      	; 0x12e0 <__mulsf3+0x12>
    12da:	95 23       	and	r25, r21
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__mulsf3+0x12>
    12de:	a6 cf       	rjmp	.-180    	; 0x122c <__fp_inf>
    12e0:	ab cf       	rjmp	.-170    	; 0x1238 <__fp_nan>
    12e2:	11 24       	eor	r1, r1
    12e4:	ee cf       	rjmp	.-36     	; 0x12c2 <__fp_szero>

000012e6 <__mulsf3x>:
    12e6:	ca df       	rcall	.-108    	; 0x127c <__fp_split3>
    12e8:	a0 f3       	brcs	.-24     	; 0x12d2 <__mulsf3+0x4>

000012ea <__mulsf3_pse>:
    12ea:	95 9f       	mul	r25, r21
    12ec:	d1 f3       	breq	.-12     	; 0x12e2 <__mulsf3+0x14>
    12ee:	95 0f       	add	r25, r21
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	55 1f       	adc	r21, r21
    12f4:	62 9f       	mul	r22, r18
    12f6:	f0 01       	movw	r30, r0
    12f8:	72 9f       	mul	r23, r18
    12fa:	bb 27       	eor	r27, r27
    12fc:	f0 0d       	add	r31, r0
    12fe:	b1 1d       	adc	r27, r1
    1300:	63 9f       	mul	r22, r19
    1302:	aa 27       	eor	r26, r26
    1304:	f0 0d       	add	r31, r0
    1306:	b1 1d       	adc	r27, r1
    1308:	aa 1f       	adc	r26, r26
    130a:	64 9f       	mul	r22, r20
    130c:	66 27       	eor	r22, r22
    130e:	b0 0d       	add	r27, r0
    1310:	a1 1d       	adc	r26, r1
    1312:	66 1f       	adc	r22, r22
    1314:	82 9f       	mul	r24, r18
    1316:	22 27       	eor	r18, r18
    1318:	b0 0d       	add	r27, r0
    131a:	a1 1d       	adc	r26, r1
    131c:	62 1f       	adc	r22, r18
    131e:	73 9f       	mul	r23, r19
    1320:	b0 0d       	add	r27, r0
    1322:	a1 1d       	adc	r26, r1
    1324:	62 1f       	adc	r22, r18
    1326:	83 9f       	mul	r24, r19
    1328:	a0 0d       	add	r26, r0
    132a:	61 1d       	adc	r22, r1
    132c:	22 1f       	adc	r18, r18
    132e:	74 9f       	mul	r23, r20
    1330:	33 27       	eor	r19, r19
    1332:	a0 0d       	add	r26, r0
    1334:	61 1d       	adc	r22, r1
    1336:	23 1f       	adc	r18, r19
    1338:	84 9f       	mul	r24, r20
    133a:	60 0d       	add	r22, r0
    133c:	21 1d       	adc	r18, r1
    133e:	82 2f       	mov	r24, r18
    1340:	76 2f       	mov	r23, r22
    1342:	6a 2f       	mov	r22, r26
    1344:	11 24       	eor	r1, r1
    1346:	9f 57       	subi	r25, 0x7F	; 127
    1348:	50 40       	sbci	r21, 0x00	; 0
    134a:	8a f0       	brmi	.+34     	; 0x136e <__mulsf3_pse+0x84>
    134c:	e1 f0       	breq	.+56     	; 0x1386 <__mulsf3_pse+0x9c>
    134e:	88 23       	and	r24, r24
    1350:	4a f0       	brmi	.+18     	; 0x1364 <__mulsf3_pse+0x7a>
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	bb 1f       	adc	r27, r27
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	91 50       	subi	r25, 0x01	; 1
    1360:	50 40       	sbci	r21, 0x00	; 0
    1362:	a9 f7       	brne	.-22     	; 0x134e <__mulsf3_pse+0x64>
    1364:	9e 3f       	cpi	r25, 0xFE	; 254
    1366:	51 05       	cpc	r21, r1
    1368:	70 f0       	brcs	.+28     	; 0x1386 <__mulsf3_pse+0x9c>
    136a:	60 cf       	rjmp	.-320    	; 0x122c <__fp_inf>
    136c:	aa cf       	rjmp	.-172    	; 0x12c2 <__fp_szero>
    136e:	5f 3f       	cpi	r21, 0xFF	; 255
    1370:	ec f3       	brlt	.-6      	; 0x136c <__mulsf3_pse+0x82>
    1372:	98 3e       	cpi	r25, 0xE8	; 232
    1374:	dc f3       	brlt	.-10     	; 0x136c <__mulsf3_pse+0x82>
    1376:	86 95       	lsr	r24
    1378:	77 95       	ror	r23
    137a:	67 95       	ror	r22
    137c:	b7 95       	ror	r27
    137e:	f7 95       	ror	r31
    1380:	e7 95       	ror	r30
    1382:	9f 5f       	subi	r25, 0xFF	; 255
    1384:	c1 f7       	brne	.-16     	; 0x1376 <__mulsf3_pse+0x8c>
    1386:	fe 2b       	or	r31, r30
    1388:	88 0f       	add	r24, r24
    138a:	91 1d       	adc	r25, r1
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	97 f9       	bld	r25, 7
    1392:	08 95       	ret

00001394 <vfprintf>:
    1394:	2f 92       	push	r2
    1396:	3f 92       	push	r3
    1398:	4f 92       	push	r4
    139a:	5f 92       	push	r5
    139c:	6f 92       	push	r6
    139e:	7f 92       	push	r7
    13a0:	8f 92       	push	r8
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	62 97       	sbiw	r28, 0x12	; 18
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	7c 01       	movw	r14, r24
    13ca:	1b 01       	movw	r2, r22
    13cc:	6a 01       	movw	r12, r20
    13ce:	fc 01       	movw	r30, r24
    13d0:	17 82       	std	Z+7, r1	; 0x07
    13d2:	16 82       	std	Z+6, r1	; 0x06
    13d4:	83 81       	ldd	r24, Z+3	; 0x03
    13d6:	81 fd       	sbrc	r24, 1
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <vfprintf+0x4c>
    13da:	4e c3       	rjmp	.+1692   	; 0x1a78 <vfprintf+0x6e4>
    13dc:	65 01       	movw	r12, r10
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <vfprintf+0x56>
    13e0:	88 24       	eor	r8, r8
    13e2:	83 94       	inc	r8
    13e4:	91 2c       	mov	r9, r1
    13e6:	8c 0e       	add	r8, r28
    13e8:	9d 1e       	adc	r9, r29
    13ea:	f7 01       	movw	r30, r14
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	f1 01       	movw	r30, r2
    13f0:	93 fd       	sbrc	r25, 3
    13f2:	85 91       	lpm	r24, Z+
    13f4:	93 ff       	sbrs	r25, 3
    13f6:	81 91       	ld	r24, Z+
    13f8:	1f 01       	movw	r2, r30
    13fa:	88 23       	and	r24, r24
    13fc:	09 f4       	brne	.+2      	; 0x1400 <vfprintf+0x6c>
    13fe:	38 c3       	rjmp	.+1648   	; 0x1a70 <vfprintf+0x6dc>
    1400:	85 32       	cpi	r24, 0x25	; 37
    1402:	39 f4       	brne	.+14     	; 0x1412 <vfprintf+0x7e>
    1404:	93 fd       	sbrc	r25, 3
    1406:	85 91       	lpm	r24, Z+
    1408:	93 ff       	sbrs	r25, 3
    140a:	81 91       	ld	r24, Z+
    140c:	1f 01       	movw	r2, r30
    140e:	85 32       	cpi	r24, 0x25	; 37
    1410:	29 f4       	brne	.+10     	; 0x141c <vfprintf+0x88>
    1412:	b7 01       	movw	r22, r14
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	da d5       	rcall	.+2996   	; 0x1fcc <fputc>
    1418:	56 01       	movw	r10, r12
    141a:	e0 cf       	rjmp	.-64     	; 0x13dc <vfprintf+0x48>
    141c:	71 2c       	mov	r7, r1
    141e:	61 2c       	mov	r6, r1
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	20 32       	cpi	r18, 0x20	; 32
    1424:	a8 f4       	brcc	.+42     	; 0x1450 <vfprintf+0xbc>
    1426:	8b 32       	cpi	r24, 0x2B	; 43
    1428:	61 f0       	breq	.+24     	; 0x1442 <vfprintf+0xae>
    142a:	28 f4       	brcc	.+10     	; 0x1436 <vfprintf+0xa2>
    142c:	80 32       	cpi	r24, 0x20	; 32
    142e:	51 f0       	breq	.+20     	; 0x1444 <vfprintf+0xb0>
    1430:	83 32       	cpi	r24, 0x23	; 35
    1432:	71 f4       	brne	.+28     	; 0x1450 <vfprintf+0xbc>
    1434:	0b c0       	rjmp	.+22     	; 0x144c <vfprintf+0xb8>
    1436:	8d 32       	cpi	r24, 0x2D	; 45
    1438:	39 f0       	breq	.+14     	; 0x1448 <vfprintf+0xb4>
    143a:	80 33       	cpi	r24, 0x30	; 48
    143c:	49 f4       	brne	.+18     	; 0x1450 <vfprintf+0xbc>
    143e:	21 60       	ori	r18, 0x01	; 1
    1440:	28 c0       	rjmp	.+80     	; 0x1492 <vfprintf+0xfe>
    1442:	22 60       	ori	r18, 0x02	; 2
    1444:	24 60       	ori	r18, 0x04	; 4
    1446:	25 c0       	rjmp	.+74     	; 0x1492 <vfprintf+0xfe>
    1448:	28 60       	ori	r18, 0x08	; 8
    144a:	23 c0       	rjmp	.+70     	; 0x1492 <vfprintf+0xfe>
    144c:	20 61       	ori	r18, 0x10	; 16
    144e:	21 c0       	rjmp	.+66     	; 0x1492 <vfprintf+0xfe>
    1450:	27 fd       	sbrc	r18, 7
    1452:	27 c0       	rjmp	.+78     	; 0x14a2 <vfprintf+0x10e>
    1454:	38 2f       	mov	r19, r24
    1456:	30 53       	subi	r19, 0x30	; 48
    1458:	3a 30       	cpi	r19, 0x0A	; 10
    145a:	78 f4       	brcc	.+30     	; 0x147a <vfprintf+0xe6>
    145c:	26 ff       	sbrs	r18, 6
    145e:	06 c0       	rjmp	.+12     	; 0x146c <vfprintf+0xd8>
    1460:	fa e0       	ldi	r31, 0x0A	; 10
    1462:	7f 9e       	mul	r7, r31
    1464:	30 0d       	add	r19, r0
    1466:	11 24       	eor	r1, r1
    1468:	73 2e       	mov	r7, r19
    146a:	13 c0       	rjmp	.+38     	; 0x1492 <vfprintf+0xfe>
    146c:	4a e0       	ldi	r20, 0x0A	; 10
    146e:	64 9e       	mul	r6, r20
    1470:	30 0d       	add	r19, r0
    1472:	11 24       	eor	r1, r1
    1474:	63 2e       	mov	r6, r19
    1476:	20 62       	ori	r18, 0x20	; 32
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <vfprintf+0xfe>
    147a:	8e 32       	cpi	r24, 0x2E	; 46
    147c:	21 f4       	brne	.+8      	; 0x1486 <vfprintf+0xf2>
    147e:	26 fd       	sbrc	r18, 6
    1480:	f7 c2       	rjmp	.+1518   	; 0x1a70 <vfprintf+0x6dc>
    1482:	20 64       	ori	r18, 0x40	; 64
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <vfprintf+0xfe>
    1486:	8c 36       	cpi	r24, 0x6C	; 108
    1488:	11 f4       	brne	.+4      	; 0x148e <vfprintf+0xfa>
    148a:	20 68       	ori	r18, 0x80	; 128
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <vfprintf+0xfe>
    148e:	88 36       	cpi	r24, 0x68	; 104
    1490:	41 f4       	brne	.+16     	; 0x14a2 <vfprintf+0x10e>
    1492:	f1 01       	movw	r30, r2
    1494:	93 fd       	sbrc	r25, 3
    1496:	85 91       	lpm	r24, Z+
    1498:	93 ff       	sbrs	r25, 3
    149a:	81 91       	ld	r24, Z+
    149c:	1f 01       	movw	r2, r30
    149e:	81 11       	cpse	r24, r1
    14a0:	c0 cf       	rjmp	.-128    	; 0x1422 <vfprintf+0x8e>
    14a2:	98 2f       	mov	r25, r24
    14a4:	95 54       	subi	r25, 0x45	; 69
    14a6:	93 30       	cpi	r25, 0x03	; 3
    14a8:	18 f4       	brcc	.+6      	; 0x14b0 <vfprintf+0x11c>
    14aa:	20 61       	ori	r18, 0x10	; 16
    14ac:	80 5e       	subi	r24, 0xE0	; 224
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <vfprintf+0x128>
    14b0:	98 2f       	mov	r25, r24
    14b2:	95 56       	subi	r25, 0x65	; 101
    14b4:	93 30       	cpi	r25, 0x03	; 3
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <vfprintf+0x126>
    14b8:	94 c1       	rjmp	.+808    	; 0x17e2 <vfprintf+0x44e>
    14ba:	2f 7e       	andi	r18, 0xEF	; 239
    14bc:	26 fd       	sbrc	r18, 6
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x130>
    14c0:	16 e0       	ldi	r17, 0x06	; 6
    14c2:	71 2e       	mov	r7, r17
    14c4:	bf e3       	ldi	r27, 0x3F	; 63
    14c6:	5b 2e       	mov	r5, r27
    14c8:	52 22       	and	r5, r18
    14ca:	85 36       	cpi	r24, 0x65	; 101
    14cc:	19 f4       	brne	.+6      	; 0x14d4 <vfprintf+0x140>
    14ce:	f0 e4       	ldi	r31, 0x40	; 64
    14d0:	5f 2a       	or	r5, r31
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <vfprintf+0x14e>
    14d4:	86 36       	cpi	r24, 0x66	; 102
    14d6:	19 f4       	brne	.+6      	; 0x14de <vfprintf+0x14a>
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	54 2a       	or	r5, r20
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <vfprintf+0x14e>
    14de:	71 10       	cpse	r7, r1
    14e0:	7a 94       	dec	r7
    14e2:	57 fe       	sbrs	r5, 7
    14e4:	07 c0       	rjmp	.+14     	; 0x14f4 <vfprintf+0x160>
    14e6:	5b e3       	ldi	r21, 0x3B	; 59
    14e8:	57 15       	cp	r21, r7
    14ea:	48 f0       	brcs	.+18     	; 0x14fe <vfprintf+0x16a>
    14ec:	47 2c       	mov	r4, r7
    14ee:	43 94       	inc	r4
    14f0:	27 e0       	ldi	r18, 0x07	; 7
    14f2:	0d c0       	rjmp	.+26     	; 0x150e <vfprintf+0x17a>
    14f4:	87 e0       	ldi	r24, 0x07	; 7
    14f6:	87 15       	cp	r24, r7
    14f8:	30 f0       	brcs	.+12     	; 0x1506 <vfprintf+0x172>
    14fa:	27 2d       	mov	r18, r7
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <vfprintf+0x178>
    14fe:	27 e0       	ldi	r18, 0x07	; 7
    1500:	ac e3       	ldi	r26, 0x3C	; 60
    1502:	4a 2e       	mov	r4, r26
    1504:	04 c0       	rjmp	.+8      	; 0x150e <vfprintf+0x17a>
    1506:	27 e0       	ldi	r18, 0x07	; 7
    1508:	f7 e0       	ldi	r31, 0x07	; 7
    150a:	7f 2e       	mov	r7, r31
    150c:	41 2c       	mov	r4, r1
    150e:	56 01       	movw	r10, r12
    1510:	94 e0       	ldi	r25, 0x04	; 4
    1512:	a9 0e       	add	r10, r25
    1514:	b1 1c       	adc	r11, r1
    1516:	f6 01       	movw	r30, r12
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	04 2d       	mov	r16, r4
    1522:	a4 01       	movw	r20, r8
    1524:	4e d4       	rcall	.+2204   	; 0x1dc2 <__ftoa_engine>
    1526:	8c 01       	movw	r16, r24
    1528:	49 81       	ldd	r20, Y+1	; 0x01
    152a:	4c 87       	std	Y+12, r20	; 0x0c
    152c:	40 ff       	sbrs	r20, 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x1a0>
    1530:	43 ff       	sbrs	r20, 3
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <vfprintf+0x1ae>
    1534:	51 fc       	sbrc	r5, 1
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <vfprintf+0x1b4>
    1538:	52 fe       	sbrs	r5, 2
    153a:	09 c0       	rjmp	.+18     	; 0x154e <vfprintf+0x1ba>
    153c:	e0 e2       	ldi	r30, 0x20	; 32
    153e:	de 2e       	mov	r13, r30
    1540:	07 c0       	rjmp	.+14     	; 0x1550 <vfprintf+0x1bc>
    1542:	7d e2       	ldi	r23, 0x2D	; 45
    1544:	d7 2e       	mov	r13, r23
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <vfprintf+0x1bc>
    1548:	6b e2       	ldi	r22, 0x2B	; 43
    154a:	d6 2e       	mov	r13, r22
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <vfprintf+0x1bc>
    154e:	d1 2c       	mov	r13, r1
    1550:	8c 85       	ldd	r24, Y+12	; 0x0c
    1552:	8c 70       	andi	r24, 0x0C	; 12
    1554:	89 f1       	breq	.+98     	; 0x15b8 <vfprintf+0x224>
    1556:	dd 20       	and	r13, r13
    1558:	11 f0       	breq	.+4      	; 0x155e <vfprintf+0x1ca>
    155a:	84 e0       	ldi	r24, 0x04	; 4
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <vfprintf+0x1cc>
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	86 15       	cp	r24, r6
    1562:	10 f0       	brcs	.+4      	; 0x1568 <vfprintf+0x1d4>
    1564:	61 2c       	mov	r6, r1
    1566:	0a c0       	rjmp	.+20     	; 0x157c <vfprintf+0x1e8>
    1568:	68 1a       	sub	r6, r24
    156a:	53 fc       	sbrc	r5, 3
    156c:	07 c0       	rjmp	.+14     	; 0x157c <vfprintf+0x1e8>
    156e:	b7 01       	movw	r22, r14
    1570:	80 e2       	ldi	r24, 0x20	; 32
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	2b d5       	rcall	.+2646   	; 0x1fcc <fputc>
    1576:	6a 94       	dec	r6
    1578:	d1 f7       	brne	.-12     	; 0x156e <vfprintf+0x1da>
    157a:	f4 cf       	rjmp	.-24     	; 0x1564 <vfprintf+0x1d0>
    157c:	dd 20       	and	r13, r13
    157e:	21 f0       	breq	.+8      	; 0x1588 <vfprintf+0x1f4>
    1580:	b7 01       	movw	r22, r14
    1582:	8d 2d       	mov	r24, r13
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	22 d5       	rcall	.+2628   	; 0x1fcc <fputc>
    1588:	5c 85       	ldd	r21, Y+12	; 0x0c
    158a:	53 fd       	sbrc	r21, 3
    158c:	03 c0       	rjmp	.+6      	; 0x1594 <vfprintf+0x200>
    158e:	00 e9       	ldi	r16, 0x90	; 144
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	0b c0       	rjmp	.+22     	; 0x15aa <vfprintf+0x216>
    1594:	0c e8       	ldi	r16, 0x8C	; 140
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	08 c0       	rjmp	.+16     	; 0x15aa <vfprintf+0x216>
    159a:	51 10       	cpse	r5, r1
    159c:	80 52       	subi	r24, 0x20	; 32
    159e:	b7 01       	movw	r22, r14
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	14 d5       	rcall	.+2600   	; 0x1fcc <fputc>
    15a4:	0f 5f       	subi	r16, 0xFF	; 255
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <vfprintf+0x21a>
    15aa:	80 e1       	ldi	r24, 0x10	; 16
    15ac:	58 22       	and	r5, r24
    15ae:	f8 01       	movw	r30, r16
    15b0:	84 91       	lpm	r24, Z
    15b2:	81 11       	cpse	r24, r1
    15b4:	f2 cf       	rjmp	.-28     	; 0x159a <vfprintf+0x206>
    15b6:	59 c2       	rjmp	.+1202   	; 0x1a6a <vfprintf+0x6d6>
    15b8:	57 fe       	sbrs	r5, 7
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <vfprintf+0x244>
    15bc:	40 0e       	add	r4, r16
    15be:	4c 85       	ldd	r20, Y+12	; 0x0c
    15c0:	44 ff       	sbrs	r20, 4
    15c2:	04 c0       	rjmp	.+8      	; 0x15cc <vfprintf+0x238>
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	81 33       	cpi	r24, 0x31	; 49
    15c8:	09 f4       	brne	.+2      	; 0x15cc <vfprintf+0x238>
    15ca:	4a 94       	dec	r4
    15cc:	14 14       	cp	r1, r4
    15ce:	4c f5       	brge	.+82     	; 0x1622 <vfprintf+0x28e>
    15d0:	58 e0       	ldi	r21, 0x08	; 8
    15d2:	54 15       	cp	r21, r4
    15d4:	48 f1       	brcs	.+82     	; 0x1628 <vfprintf+0x294>
    15d6:	2c c0       	rjmp	.+88     	; 0x1630 <vfprintf+0x29c>
    15d8:	56 fc       	sbrc	r5, 6
    15da:	2a c0       	rjmp	.+84     	; 0x1630 <vfprintf+0x29c>
    15dc:	87 2d       	mov	r24, r7
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	80 17       	cp	r24, r16
    15e2:	91 07       	cpc	r25, r17
    15e4:	44 f0       	brlt	.+16     	; 0x15f6 <vfprintf+0x262>
    15e6:	0c 3f       	cpi	r16, 0xFC	; 252
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	18 07       	cpc	r17, r24
    15ec:	24 f0       	brlt	.+8      	; 0x15f6 <vfprintf+0x262>
    15ee:	90 e8       	ldi	r25, 0x80	; 128
    15f0:	59 2a       	or	r5, r25
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <vfprintf+0x262>
    15f4:	7a 94       	dec	r7
    15f6:	77 20       	and	r7, r7
    15f8:	49 f0       	breq	.+18     	; 0x160c <vfprintf+0x278>
    15fa:	e2 e0       	ldi	r30, 0x02	; 2
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	ec 0f       	add	r30, r28
    1600:	fd 1f       	adc	r31, r29
    1602:	e7 0d       	add	r30, r7
    1604:	f1 1d       	adc	r31, r1
    1606:	80 81       	ld	r24, Z
    1608:	80 33       	cpi	r24, 0x30	; 48
    160a:	a1 f3       	breq	.-24     	; 0x15f4 <vfprintf+0x260>
    160c:	57 fe       	sbrs	r5, 7
    160e:	10 c0       	rjmp	.+32     	; 0x1630 <vfprintf+0x29c>
    1610:	47 2c       	mov	r4, r7
    1612:	43 94       	inc	r4
    1614:	87 2d       	mov	r24, r7
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	08 17       	cp	r16, r24
    161a:	19 07       	cpc	r17, r25
    161c:	44 f4       	brge	.+16     	; 0x162e <vfprintf+0x29a>
    161e:	70 1a       	sub	r7, r16
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <vfprintf+0x29c>
    1622:	44 24       	eor	r4, r4
    1624:	43 94       	inc	r4
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <vfprintf+0x29c>
    1628:	58 e0       	ldi	r21, 0x08	; 8
    162a:	45 2e       	mov	r4, r21
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <vfprintf+0x29c>
    162e:	71 2c       	mov	r7, r1
    1630:	57 fe       	sbrs	r5, 7
    1632:	07 c0       	rjmp	.+14     	; 0x1642 <vfprintf+0x2ae>
    1634:	10 16       	cp	r1, r16
    1636:	11 06       	cpc	r1, r17
    1638:	3c f4       	brge	.+14     	; 0x1648 <vfprintf+0x2b4>
    163a:	98 01       	movw	r18, r16
    163c:	2f 5f       	subi	r18, 0xFF	; 255
    163e:	3f 4f       	sbci	r19, 0xFF	; 255
    1640:	05 c0       	rjmp	.+10     	; 0x164c <vfprintf+0x2b8>
    1642:	25 e0       	ldi	r18, 0x05	; 5
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0x2b8>
    1648:	21 e0       	ldi	r18, 0x01	; 1
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	dd 20       	and	r13, r13
    164e:	11 f0       	breq	.+4      	; 0x1654 <vfprintf+0x2c0>
    1650:	2f 5f       	subi	r18, 0xFF	; 255
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	77 20       	and	r7, r7
    1656:	31 f0       	breq	.+12     	; 0x1664 <vfprintf+0x2d0>
    1658:	47 2d       	mov	r20, r7
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	4f 5f       	subi	r20, 0xFF	; 255
    165e:	5f 4f       	sbci	r21, 0xFF	; 255
    1660:	24 0f       	add	r18, r20
    1662:	35 1f       	adc	r19, r21
    1664:	46 2d       	mov	r20, r6
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	24 17       	cp	r18, r20
    166a:	35 07       	cpc	r19, r21
    166c:	14 f4       	brge	.+4      	; 0x1672 <vfprintf+0x2de>
    166e:	62 1a       	sub	r6, r18
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <vfprintf+0x2e0>
    1672:	61 2c       	mov	r6, r1
    1674:	85 2d       	mov	r24, r5
    1676:	89 70       	andi	r24, 0x09	; 9
    1678:	41 f4       	brne	.+16     	; 0x168a <vfprintf+0x2f6>
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <vfprintf+0x2f2>
    167c:	b7 01       	movw	r22, r14
    167e:	80 e2       	ldi	r24, 0x20	; 32
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a4 d4       	rcall	.+2376   	; 0x1fcc <fputc>
    1684:	6a 94       	dec	r6
    1686:	61 10       	cpse	r6, r1
    1688:	f9 cf       	rjmp	.-14     	; 0x167c <vfprintf+0x2e8>
    168a:	dd 20       	and	r13, r13
    168c:	21 f0       	breq	.+8      	; 0x1696 <vfprintf+0x302>
    168e:	b7 01       	movw	r22, r14
    1690:	8d 2d       	mov	r24, r13
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	9b d4       	rcall	.+2358   	; 0x1fcc <fputc>
    1696:	53 fc       	sbrc	r5, 3
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <vfprintf+0x316>
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <vfprintf+0x312>
    169c:	b7 01       	movw	r22, r14
    169e:	80 e3       	ldi	r24, 0x30	; 48
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	94 d4       	rcall	.+2344   	; 0x1fcc <fputc>
    16a4:	6a 94       	dec	r6
    16a6:	61 10       	cpse	r6, r1
    16a8:	f9 cf       	rjmp	.-14     	; 0x169c <vfprintf+0x308>
    16aa:	57 fe       	sbrs	r5, 7
    16ac:	54 c0       	rjmp	.+168    	; 0x1756 <vfprintf+0x3c2>
    16ae:	68 01       	movw	r12, r16
    16b0:	17 ff       	sbrs	r17, 7
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <vfprintf+0x324>
    16b4:	c1 2c       	mov	r12, r1
    16b6:	d1 2c       	mov	r13, r1
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	a8 01       	movw	r20, r16
    16be:	44 19       	sub	r20, r4
    16c0:	51 09       	sbc	r21, r1
    16c2:	5e 87       	std	Y+14, r21	; 0x0e
    16c4:	4d 87       	std	Y+13, r20	; 0x0d
    16c6:	28 01       	movw	r4, r16
    16c8:	4c 18       	sub	r4, r12
    16ca:	5d 08       	sbc	r5, r13
    16cc:	48 0c       	add	r4, r8
    16ce:	59 1c       	adc	r5, r9
    16d0:	87 2d       	mov	r24, r7
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	44 27       	eor	r20, r20
    16d6:	55 27       	eor	r21, r21
    16d8:	48 1b       	sub	r20, r24
    16da:	59 0b       	sbc	r21, r25
    16dc:	58 8b       	std	Y+16, r21	; 0x10
    16de:	4f 87       	std	Y+15, r20	; 0x0f
    16e0:	5f ef       	ldi	r21, 0xFF	; 255
    16e2:	c5 16       	cp	r12, r21
    16e4:	d5 06       	cpc	r13, r21
    16e6:	41 f4       	brne	.+16     	; 0x16f8 <vfprintf+0x364>
    16e8:	b7 01       	movw	r22, r14
    16ea:	8e e2       	ldi	r24, 0x2E	; 46
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	2a 8b       	std	Y+18, r18	; 0x12
    16f0:	39 8b       	std	Y+17, r19	; 0x11
    16f2:	6c d4       	rcall	.+2264   	; 0x1fcc <fputc>
    16f4:	39 89       	ldd	r19, Y+17	; 0x11
    16f6:	2a 89       	ldd	r18, Y+18	; 0x12
    16f8:	0c 15       	cp	r16, r12
    16fa:	1d 05       	cpc	r17, r13
    16fc:	54 f0       	brlt	.+20     	; 0x1712 <vfprintf+0x37e>
    16fe:	4d 85       	ldd	r20, Y+13	; 0x0d
    1700:	5e 85       	ldd	r21, Y+14	; 0x0e
    1702:	4c 15       	cp	r20, r12
    1704:	5d 05       	cpc	r21, r13
    1706:	2c f4       	brge	.+10     	; 0x1712 <vfprintf+0x37e>
    1708:	f2 01       	movw	r30, r4
    170a:	e2 0f       	add	r30, r18
    170c:	f3 1f       	adc	r31, r19
    170e:	81 81       	ldd	r24, Z+1	; 0x01
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <vfprintf+0x380>
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	51 e0       	ldi	r21, 0x01	; 1
    1716:	c5 1a       	sub	r12, r21
    1718:	d1 08       	sbc	r13, r1
    171a:	2f 5f       	subi	r18, 0xFF	; 255
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1720:	58 89       	ldd	r21, Y+16	; 0x10
    1722:	c4 16       	cp	r12, r20
    1724:	d5 06       	cpc	r13, r21
    1726:	44 f0       	brlt	.+16     	; 0x1738 <vfprintf+0x3a4>
    1728:	b7 01       	movw	r22, r14
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	2a 8b       	std	Y+18, r18	; 0x12
    172e:	39 8b       	std	Y+17, r19	; 0x11
    1730:	4d d4       	rcall	.+2202   	; 0x1fcc <fputc>
    1732:	2a 89       	ldd	r18, Y+18	; 0x12
    1734:	39 89       	ldd	r19, Y+17	; 0x11
    1736:	d4 cf       	rjmp	.-88     	; 0x16e0 <vfprintf+0x34c>
    1738:	c0 16       	cp	r12, r16
    173a:	d1 06       	cpc	r13, r17
    173c:	49 f4       	brne	.+18     	; 0x1750 <vfprintf+0x3bc>
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	96 33       	cpi	r25, 0x36	; 54
    1742:	28 f4       	brcc	.+10     	; 0x174e <vfprintf+0x3ba>
    1744:	95 33       	cpi	r25, 0x35	; 53
    1746:	21 f4       	brne	.+8      	; 0x1750 <vfprintf+0x3bc>
    1748:	5c 85       	ldd	r21, Y+12	; 0x0c
    174a:	54 fd       	sbrc	r21, 4
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <vfprintf+0x3bc>
    174e:	81 e3       	ldi	r24, 0x31	; 49
    1750:	b7 01       	movw	r22, r14
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	44 c0       	rjmp	.+136    	; 0x17de <vfprintf+0x44a>
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	81 33       	cpi	r24, 0x31	; 49
    175a:	19 f0       	breq	.+6      	; 0x1762 <vfprintf+0x3ce>
    175c:	4c 85       	ldd	r20, Y+12	; 0x0c
    175e:	4f 7e       	andi	r20, 0xEF	; 239
    1760:	4c 87       	std	Y+12, r20	; 0x0c
    1762:	b7 01       	movw	r22, r14
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	32 d4       	rcall	.+2148   	; 0x1fcc <fputc>
    1768:	71 10       	cpse	r7, r1
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <vfprintf+0x3e2>
    176c:	54 fe       	sbrs	r5, 4
    176e:	14 c0       	rjmp	.+40     	; 0x1798 <vfprintf+0x404>
    1770:	85 e4       	ldi	r24, 0x45	; 69
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	13 c0       	rjmp	.+38     	; 0x179c <vfprintf+0x408>
    1776:	b7 01       	movw	r22, r14
    1778:	8e e2       	ldi	r24, 0x2E	; 46
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	27 d4       	rcall	.+2126   	; 0x1fcc <fputc>
    177e:	42 e0       	ldi	r20, 0x02	; 2
    1780:	d4 2e       	mov	r13, r20
    1782:	f4 01       	movw	r30, r8
    1784:	ed 0d       	add	r30, r13
    1786:	f1 1d       	adc	r31, r1
    1788:	d3 94       	inc	r13
    178a:	b7 01       	movw	r22, r14
    178c:	80 81       	ld	r24, Z
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	1d d4       	rcall	.+2106   	; 0x1fcc <fputc>
    1792:	7a 94       	dec	r7
    1794:	b1 f7       	brne	.-20     	; 0x1782 <vfprintf+0x3ee>
    1796:	ea cf       	rjmp	.-44     	; 0x176c <vfprintf+0x3d8>
    1798:	85 e6       	ldi	r24, 0x65	; 101
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	b7 01       	movw	r22, r14
    179e:	16 d4       	rcall	.+2092   	; 0x1fcc <fputc>
    17a0:	17 fd       	sbrc	r17, 7
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <vfprintf+0x41c>
    17a4:	01 15       	cp	r16, r1
    17a6:	11 05       	cpc	r17, r1
    17a8:	41 f4       	brne	.+16     	; 0x17ba <vfprintf+0x426>
    17aa:	5c 85       	ldd	r21, Y+12	; 0x0c
    17ac:	54 ff       	sbrs	r21, 4
    17ae:	05 c0       	rjmp	.+10     	; 0x17ba <vfprintf+0x426>
    17b0:	11 95       	neg	r17
    17b2:	01 95       	neg	r16
    17b4:	11 09       	sbc	r17, r1
    17b6:	8d e2       	ldi	r24, 0x2D	; 45
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <vfprintf+0x428>
    17ba:	8b e2       	ldi	r24, 0x2B	; 43
    17bc:	b7 01       	movw	r22, r14
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	05 d4       	rcall	.+2058   	; 0x1fcc <fputc>
    17c2:	80 e3       	ldi	r24, 0x30	; 48
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <vfprintf+0x438>
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	0a 50       	subi	r16, 0x0A	; 10
    17ca:	11 09       	sbc	r17, r1
    17cc:	0a 30       	cpi	r16, 0x0A	; 10
    17ce:	11 05       	cpc	r17, r1
    17d0:	d4 f7       	brge	.-12     	; 0x17c6 <vfprintf+0x432>
    17d2:	b7 01       	movw	r22, r14
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	fa d3       	rcall	.+2036   	; 0x1fcc <fputc>
    17d8:	b7 01       	movw	r22, r14
    17da:	c8 01       	movw	r24, r16
    17dc:	c0 96       	adiw	r24, 0x30	; 48
    17de:	f6 d3       	rcall	.+2028   	; 0x1fcc <fputc>
    17e0:	44 c1       	rjmp	.+648    	; 0x1a6a <vfprintf+0x6d6>
    17e2:	83 36       	cpi	r24, 0x63	; 99
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <vfprintf+0x45e>
    17e6:	83 37       	cpi	r24, 0x73	; 115
    17e8:	81 f0       	breq	.+32     	; 0x180a <vfprintf+0x476>
    17ea:	83 35       	cpi	r24, 0x53	; 83
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <vfprintf+0x45c>
    17ee:	5a c0       	rjmp	.+180    	; 0x18a4 <vfprintf+0x510>
    17f0:	23 c0       	rjmp	.+70     	; 0x1838 <vfprintf+0x4a4>
    17f2:	56 01       	movw	r10, r12
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	a8 0e       	add	r10, r24
    17f8:	b1 1c       	adc	r11, r1
    17fa:	f6 01       	movw	r30, r12
    17fc:	80 81       	ld	r24, Z
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	cc 24       	eor	r12, r12
    1802:	c3 94       	inc	r12
    1804:	d1 2c       	mov	r13, r1
    1806:	84 01       	movw	r16, r8
    1808:	13 c0       	rjmp	.+38     	; 0x1830 <vfprintf+0x49c>
    180a:	56 01       	movw	r10, r12
    180c:	f2 e0       	ldi	r31, 0x02	; 2
    180e:	af 0e       	add	r10, r31
    1810:	b1 1c       	adc	r11, r1
    1812:	f6 01       	movw	r30, r12
    1814:	00 81       	ld	r16, Z
    1816:	11 81       	ldd	r17, Z+1	; 0x01
    1818:	26 ff       	sbrs	r18, 6
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <vfprintf+0x48e>
    181c:	67 2d       	mov	r22, r7
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <vfprintf+0x492>
    1822:	6f ef       	ldi	r22, 0xFF	; 255
    1824:	7f ef       	ldi	r23, 0xFF	; 255
    1826:	c8 01       	movw	r24, r16
    1828:	2a 8b       	std	Y+18, r18	; 0x12
    182a:	c5 d3       	rcall	.+1930   	; 0x1fb6 <strnlen>
    182c:	6c 01       	movw	r12, r24
    182e:	2a 89       	ldd	r18, Y+18	; 0x12
    1830:	9f e7       	ldi	r25, 0x7F	; 127
    1832:	59 2e       	mov	r5, r25
    1834:	52 22       	and	r5, r18
    1836:	16 c0       	rjmp	.+44     	; 0x1864 <vfprintf+0x4d0>
    1838:	56 01       	movw	r10, r12
    183a:	f2 e0       	ldi	r31, 0x02	; 2
    183c:	af 0e       	add	r10, r31
    183e:	b1 1c       	adc	r11, r1
    1840:	f6 01       	movw	r30, r12
    1842:	00 81       	ld	r16, Z
    1844:	11 81       	ldd	r17, Z+1	; 0x01
    1846:	26 ff       	sbrs	r18, 6
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <vfprintf+0x4bc>
    184a:	67 2d       	mov	r22, r7
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <vfprintf+0x4c0>
    1850:	6f ef       	ldi	r22, 0xFF	; 255
    1852:	7f ef       	ldi	r23, 0xFF	; 255
    1854:	c8 01       	movw	r24, r16
    1856:	2a 8b       	std	Y+18, r18	; 0x12
    1858:	8c d3       	rcall	.+1816   	; 0x1f72 <strnlen_P>
    185a:	6c 01       	movw	r12, r24
    185c:	2a 89       	ldd	r18, Y+18	; 0x12
    185e:	80 e8       	ldi	r24, 0x80	; 128
    1860:	58 2e       	mov	r5, r24
    1862:	52 2a       	or	r5, r18
    1864:	53 fc       	sbrc	r5, 3
    1866:	1a c0       	rjmp	.+52     	; 0x189c <vfprintf+0x508>
    1868:	05 c0       	rjmp	.+10     	; 0x1874 <vfprintf+0x4e0>
    186a:	b7 01       	movw	r22, r14
    186c:	80 e2       	ldi	r24, 0x20	; 32
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	ad d3       	rcall	.+1882   	; 0x1fcc <fputc>
    1872:	6a 94       	dec	r6
    1874:	86 2d       	mov	r24, r6
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	c8 16       	cp	r12, r24
    187a:	d9 06       	cpc	r13, r25
    187c:	b0 f3       	brcs	.-20     	; 0x186a <vfprintf+0x4d6>
    187e:	0e c0       	rjmp	.+28     	; 0x189c <vfprintf+0x508>
    1880:	f8 01       	movw	r30, r16
    1882:	57 fc       	sbrc	r5, 7
    1884:	85 91       	lpm	r24, Z+
    1886:	57 fe       	sbrs	r5, 7
    1888:	81 91       	ld	r24, Z+
    188a:	8f 01       	movw	r16, r30
    188c:	b7 01       	movw	r22, r14
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9d d3       	rcall	.+1850   	; 0x1fcc <fputc>
    1892:	61 10       	cpse	r6, r1
    1894:	6a 94       	dec	r6
    1896:	f1 e0       	ldi	r31, 0x01	; 1
    1898:	cf 1a       	sub	r12, r31
    189a:	d1 08       	sbc	r13, r1
    189c:	c1 14       	cp	r12, r1
    189e:	d1 04       	cpc	r13, r1
    18a0:	79 f7       	brne	.-34     	; 0x1880 <vfprintf+0x4ec>
    18a2:	e3 c0       	rjmp	.+454    	; 0x1a6a <vfprintf+0x6d6>
    18a4:	84 36       	cpi	r24, 0x64	; 100
    18a6:	11 f0       	breq	.+4      	; 0x18ac <vfprintf+0x518>
    18a8:	89 36       	cpi	r24, 0x69	; 105
    18aa:	49 f5       	brne	.+82     	; 0x18fe <vfprintf+0x56a>
    18ac:	56 01       	movw	r10, r12
    18ae:	27 ff       	sbrs	r18, 7
    18b0:	09 c0       	rjmp	.+18     	; 0x18c4 <vfprintf+0x530>
    18b2:	44 e0       	ldi	r20, 0x04	; 4
    18b4:	a4 0e       	add	r10, r20
    18b6:	b1 1c       	adc	r11, r1
    18b8:	f6 01       	movw	r30, r12
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <vfprintf+0x544>
    18c4:	f2 e0       	ldi	r31, 0x02	; 2
    18c6:	af 0e       	add	r10, r31
    18c8:	b1 1c       	adc	r11, r1
    18ca:	f6 01       	movw	r30, r12
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	88 27       	eor	r24, r24
    18d2:	77 fd       	sbrc	r23, 7
    18d4:	80 95       	com	r24
    18d6:	98 2f       	mov	r25, r24
    18d8:	12 2f       	mov	r17, r18
    18da:	1f 76       	andi	r17, 0x6F	; 111
    18dc:	97 ff       	sbrs	r25, 7
    18de:	08 c0       	rjmp	.+16     	; 0x18f0 <vfprintf+0x55c>
    18e0:	90 95       	com	r25
    18e2:	80 95       	com	r24
    18e4:	70 95       	com	r23
    18e6:	61 95       	neg	r22
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	10 68       	ori	r17, 0x80	; 128
    18f0:	2a e0       	ldi	r18, 0x0A	; 10
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	a4 01       	movw	r20, r8
    18f6:	fc d3       	rcall	.+2040   	; 0x20f0 <__ultoa_invert>
    18f8:	d8 2e       	mov	r13, r24
    18fa:	d8 18       	sub	r13, r8
    18fc:	3f c0       	rjmp	.+126    	; 0x197c <vfprintf+0x5e8>
    18fe:	12 2f       	mov	r17, r18
    1900:	85 37       	cpi	r24, 0x75	; 117
    1902:	21 f4       	brne	.+8      	; 0x190c <vfprintf+0x578>
    1904:	1f 7e       	andi	r17, 0xEF	; 239
    1906:	2a e0       	ldi	r18, 0x0A	; 10
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	1f c0       	rjmp	.+62     	; 0x194a <vfprintf+0x5b6>
    190c:	19 7f       	andi	r17, 0xF9	; 249
    190e:	8f 36       	cpi	r24, 0x6F	; 111
    1910:	a1 f0       	breq	.+40     	; 0x193a <vfprintf+0x5a6>
    1912:	20 f4       	brcc	.+8      	; 0x191c <vfprintf+0x588>
    1914:	88 35       	cpi	r24, 0x58	; 88
    1916:	09 f0       	breq	.+2      	; 0x191a <vfprintf+0x586>
    1918:	ab c0       	rjmp	.+342    	; 0x1a70 <vfprintf+0x6dc>
    191a:	0b c0       	rjmp	.+22     	; 0x1932 <vfprintf+0x59e>
    191c:	80 37       	cpi	r24, 0x70	; 112
    191e:	21 f0       	breq	.+8      	; 0x1928 <vfprintf+0x594>
    1920:	88 37       	cpi	r24, 0x78	; 120
    1922:	09 f0       	breq	.+2      	; 0x1926 <vfprintf+0x592>
    1924:	a5 c0       	rjmp	.+330    	; 0x1a70 <vfprintf+0x6dc>
    1926:	01 c0       	rjmp	.+2      	; 0x192a <vfprintf+0x596>
    1928:	10 61       	ori	r17, 0x10	; 16
    192a:	14 ff       	sbrs	r17, 4
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <vfprintf+0x5ac>
    192e:	14 60       	ori	r17, 0x04	; 4
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <vfprintf+0x5ac>
    1932:	24 ff       	sbrs	r18, 4
    1934:	08 c0       	rjmp	.+16     	; 0x1946 <vfprintf+0x5b2>
    1936:	16 60       	ori	r17, 0x06	; 6
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <vfprintf+0x5b2>
    193a:	28 e0       	ldi	r18, 0x08	; 8
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	05 c0       	rjmp	.+10     	; 0x194a <vfprintf+0x5b6>
    1940:	20 e1       	ldi	r18, 0x10	; 16
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	02 c0       	rjmp	.+4      	; 0x194a <vfprintf+0x5b6>
    1946:	20 e1       	ldi	r18, 0x10	; 16
    1948:	32 e0       	ldi	r19, 0x02	; 2
    194a:	56 01       	movw	r10, r12
    194c:	17 ff       	sbrs	r17, 7
    194e:	09 c0       	rjmp	.+18     	; 0x1962 <vfprintf+0x5ce>
    1950:	f4 e0       	ldi	r31, 0x04	; 4
    1952:	af 0e       	add	r10, r31
    1954:	b1 1c       	adc	r11, r1
    1956:	f6 01       	movw	r30, r12
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	08 c0       	rjmp	.+16     	; 0x1972 <vfprintf+0x5de>
    1962:	f2 e0       	ldi	r31, 0x02	; 2
    1964:	af 0e       	add	r10, r31
    1966:	b1 1c       	adc	r11, r1
    1968:	f6 01       	movw	r30, r12
    196a:	60 81       	ld	r22, Z
    196c:	71 81       	ldd	r23, Z+1	; 0x01
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a4 01       	movw	r20, r8
    1974:	bd d3       	rcall	.+1914   	; 0x20f0 <__ultoa_invert>
    1976:	d8 2e       	mov	r13, r24
    1978:	d8 18       	sub	r13, r8
    197a:	1f 77       	andi	r17, 0x7F	; 127
    197c:	16 ff       	sbrs	r17, 6
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <vfprintf+0x602>
    1980:	21 2f       	mov	r18, r17
    1982:	2e 7f       	andi	r18, 0xFE	; 254
    1984:	d7 14       	cp	r13, r7
    1986:	50 f4       	brcc	.+20     	; 0x199c <vfprintf+0x608>
    1988:	14 ff       	sbrs	r17, 4
    198a:	0a c0       	rjmp	.+20     	; 0x19a0 <vfprintf+0x60c>
    198c:	12 fd       	sbrc	r17, 2
    198e:	08 c0       	rjmp	.+16     	; 0x19a0 <vfprintf+0x60c>
    1990:	21 2f       	mov	r18, r17
    1992:	2e 7e       	andi	r18, 0xEE	; 238
    1994:	05 c0       	rjmp	.+10     	; 0x19a0 <vfprintf+0x60c>
    1996:	0d 2d       	mov	r16, r13
    1998:	21 2f       	mov	r18, r17
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <vfprintf+0x60e>
    199c:	0d 2d       	mov	r16, r13
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <vfprintf+0x60e>
    19a0:	07 2d       	mov	r16, r7
    19a2:	24 ff       	sbrs	r18, 4
    19a4:	0c c0       	rjmp	.+24     	; 0x19be <vfprintf+0x62a>
    19a6:	fe 01       	movw	r30, r28
    19a8:	ed 0d       	add	r30, r13
    19aa:	f1 1d       	adc	r31, r1
    19ac:	80 81       	ld	r24, Z
    19ae:	80 33       	cpi	r24, 0x30	; 48
    19b0:	11 f4       	brne	.+4      	; 0x19b6 <vfprintf+0x622>
    19b2:	29 7e       	andi	r18, 0xE9	; 233
    19b4:	08 c0       	rjmp	.+16     	; 0x19c6 <vfprintf+0x632>
    19b6:	22 ff       	sbrs	r18, 2
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <vfprintf+0x630>
    19ba:	0e 5f       	subi	r16, 0xFE	; 254
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <vfprintf+0x632>
    19be:	82 2f       	mov	r24, r18
    19c0:	86 78       	andi	r24, 0x86	; 134
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <vfprintf+0x632>
    19c4:	0f 5f       	subi	r16, 0xFF	; 255
    19c6:	23 fd       	sbrc	r18, 3
    19c8:	13 c0       	rjmp	.+38     	; 0x19f0 <vfprintf+0x65c>
    19ca:	20 ff       	sbrs	r18, 0
    19cc:	0e c0       	rjmp	.+28     	; 0x19ea <vfprintf+0x656>
    19ce:	7d 2c       	mov	r7, r13
    19d0:	06 15       	cp	r16, r6
    19d2:	58 f4       	brcc	.+22     	; 0x19ea <vfprintf+0x656>
    19d4:	76 0c       	add	r7, r6
    19d6:	70 1a       	sub	r7, r16
    19d8:	06 2d       	mov	r16, r6
    19da:	07 c0       	rjmp	.+14     	; 0x19ea <vfprintf+0x656>
    19dc:	b7 01       	movw	r22, r14
    19de:	80 e2       	ldi	r24, 0x20	; 32
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	2a 8b       	std	Y+18, r18	; 0x12
    19e4:	f3 d2       	rcall	.+1510   	; 0x1fcc <fputc>
    19e6:	0f 5f       	subi	r16, 0xFF	; 255
    19e8:	2a 89       	ldd	r18, Y+18	; 0x12
    19ea:	06 15       	cp	r16, r6
    19ec:	b8 f3       	brcs	.-18     	; 0x19dc <vfprintf+0x648>
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <vfprintf+0x664>
    19f0:	06 15       	cp	r16, r6
    19f2:	10 f4       	brcc	.+4      	; 0x19f8 <vfprintf+0x664>
    19f4:	60 1a       	sub	r6, r16
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <vfprintf+0x666>
    19f8:	61 2c       	mov	r6, r1
    19fa:	24 ff       	sbrs	r18, 4
    19fc:	11 c0       	rjmp	.+34     	; 0x1a20 <vfprintf+0x68c>
    19fe:	b7 01       	movw	r22, r14
    1a00:	80 e3       	ldi	r24, 0x30	; 48
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	2a 8b       	std	Y+18, r18	; 0x12
    1a06:	e2 d2       	rcall	.+1476   	; 0x1fcc <fputc>
    1a08:	2a 89       	ldd	r18, Y+18	; 0x12
    1a0a:	22 ff       	sbrs	r18, 2
    1a0c:	1c c0       	rjmp	.+56     	; 0x1a46 <vfprintf+0x6b2>
    1a0e:	21 ff       	sbrs	r18, 1
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <vfprintf+0x684>
    1a12:	88 e5       	ldi	r24, 0x58	; 88
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <vfprintf+0x688>
    1a18:	88 e7       	ldi	r24, 0x78	; 120
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	b7 01       	movw	r22, r14
    1a1e:	0c c0       	rjmp	.+24     	; 0x1a38 <vfprintf+0x6a4>
    1a20:	82 2f       	mov	r24, r18
    1a22:	86 78       	andi	r24, 0x86	; 134
    1a24:	81 f0       	breq	.+32     	; 0x1a46 <vfprintf+0x6b2>
    1a26:	21 fd       	sbrc	r18, 1
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <vfprintf+0x69a>
    1a2a:	80 e2       	ldi	r24, 0x20	; 32
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <vfprintf+0x69c>
    1a2e:	8b e2       	ldi	r24, 0x2B	; 43
    1a30:	27 fd       	sbrc	r18, 7
    1a32:	8d e2       	ldi	r24, 0x2D	; 45
    1a34:	b7 01       	movw	r22, r14
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	c9 d2       	rcall	.+1426   	; 0x1fcc <fputc>
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <vfprintf+0x6b2>
    1a3c:	b7 01       	movw	r22, r14
    1a3e:	80 e3       	ldi	r24, 0x30	; 48
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	c4 d2       	rcall	.+1416   	; 0x1fcc <fputc>
    1a44:	7a 94       	dec	r7
    1a46:	d7 14       	cp	r13, r7
    1a48:	c8 f3       	brcs	.-14     	; 0x1a3c <vfprintf+0x6a8>
    1a4a:	da 94       	dec	r13
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	ed 0d       	add	r30, r13
    1a50:	f1 1d       	adc	r31, r1
    1a52:	b7 01       	movw	r22, r14
    1a54:	80 81       	ld	r24, Z
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	b9 d2       	rcall	.+1394   	; 0x1fcc <fputc>
    1a5a:	d1 10       	cpse	r13, r1
    1a5c:	f6 cf       	rjmp	.-20     	; 0x1a4a <vfprintf+0x6b6>
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <vfprintf+0x6d6>
    1a60:	b7 01       	movw	r22, r14
    1a62:	80 e2       	ldi	r24, 0x20	; 32
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	b2 d2       	rcall	.+1380   	; 0x1fcc <fputc>
    1a68:	6a 94       	dec	r6
    1a6a:	61 10       	cpse	r6, r1
    1a6c:	f9 cf       	rjmp	.-14     	; 0x1a60 <vfprintf+0x6cc>
    1a6e:	b6 cc       	rjmp	.-1684   	; 0x13dc <vfprintf+0x48>
    1a70:	f7 01       	movw	r30, r14
    1a72:	26 81       	ldd	r18, Z+6	; 0x06
    1a74:	37 81       	ldd	r19, Z+7	; 0x07
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <vfprintf+0x6e8>
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	62 96       	adiw	r28, 0x12	; 18
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	9f 90       	pop	r9
    1aa0:	8f 90       	pop	r8
    1aa2:	7f 90       	pop	r7
    1aa4:	6f 90       	pop	r6
    1aa6:	5f 90       	pop	r5
    1aa8:	4f 90       	pop	r4
    1aaa:	3f 90       	pop	r3
    1aac:	2f 90       	pop	r2
    1aae:	08 95       	ret

00001ab0 <__divmodhi4>:
    1ab0:	97 fb       	bst	r25, 7
    1ab2:	07 2e       	mov	r0, r23
    1ab4:	16 f4       	brtc	.+4      	; 0x1aba <__divmodhi4+0xa>
    1ab6:	00 94       	com	r0
    1ab8:	06 d0       	rcall	.+12     	; 0x1ac6 <__divmodhi4_neg1>
    1aba:	77 fd       	sbrc	r23, 7
    1abc:	08 d0       	rcall	.+16     	; 0x1ace <__divmodhi4_neg2>
    1abe:	17 d0       	rcall	.+46     	; 0x1aee <__udivmodhi4>
    1ac0:	07 fc       	sbrc	r0, 7
    1ac2:	05 d0       	rcall	.+10     	; 0x1ace <__divmodhi4_neg2>
    1ac4:	3e f4       	brtc	.+14     	; 0x1ad4 <__divmodhi4_exit>

00001ac6 <__divmodhi4_neg1>:
    1ac6:	90 95       	com	r25
    1ac8:	81 95       	neg	r24
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	08 95       	ret

00001ace <__divmodhi4_neg2>:
    1ace:	70 95       	com	r23
    1ad0:	61 95       	neg	r22
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255

00001ad4 <__divmodhi4_exit>:
    1ad4:	08 95       	ret

00001ad6 <__umulhisi3>:
    1ad6:	a2 9f       	mul	r26, r18
    1ad8:	b0 01       	movw	r22, r0
    1ada:	b3 9f       	mul	r27, r19
    1adc:	c0 01       	movw	r24, r0
    1ade:	a3 9f       	mul	r26, r19
    1ae0:	01 d0       	rcall	.+2      	; 0x1ae4 <__umulhisi3+0xe>
    1ae2:	b2 9f       	mul	r27, r18
    1ae4:	70 0d       	add	r23, r0
    1ae6:	81 1d       	adc	r24, r1
    1ae8:	11 24       	eor	r1, r1
    1aea:	91 1d       	adc	r25, r1
    1aec:	08 95       	ret

00001aee <__udivmodhi4>:
    1aee:	aa 1b       	sub	r26, r26
    1af0:	bb 1b       	sub	r27, r27
    1af2:	51 e1       	ldi	r21, 0x11	; 17
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <__udivmodhi4_ep>

00001af6 <__udivmodhi4_loop>:
    1af6:	aa 1f       	adc	r26, r26
    1af8:	bb 1f       	adc	r27, r27
    1afa:	a6 17       	cp	r26, r22
    1afc:	b7 07       	cpc	r27, r23
    1afe:	10 f0       	brcs	.+4      	; 0x1b04 <__udivmodhi4_ep>
    1b00:	a6 1b       	sub	r26, r22
    1b02:	b7 0b       	sbc	r27, r23

00001b04 <__udivmodhi4_ep>:
    1b04:	88 1f       	adc	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	5a 95       	dec	r21
    1b0a:	a9 f7       	brne	.-22     	; 0x1af6 <__udivmodhi4_loop>
    1b0c:	80 95       	com	r24
    1b0e:	90 95       	com	r25
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	08 95       	ret

00001b16 <calloc>:
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	68 9f       	mul	r22, r24
    1b20:	80 01       	movw	r16, r0
    1b22:	69 9f       	mul	r22, r25
    1b24:	10 0d       	add	r17, r0
    1b26:	78 9f       	mul	r23, r24
    1b28:	10 0d       	add	r17, r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	0f d0       	rcall	.+30     	; 0x1b4e <malloc>
    1b30:	c8 2f       	mov	r28, r24
    1b32:	d9 2f       	mov	r29, r25
    1b34:	20 97       	sbiw	r28, 0x00	; 0
    1b36:	29 f0       	breq	.+10     	; 0x1b42 <calloc+0x2c>
    1b38:	a8 01       	movw	r20, r16
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	8c 2f       	mov	r24, r28
    1b40:	23 d2       	rcall	.+1094   	; 0x1f88 <memset>
    1b42:	ce 01       	movw	r24, r28
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <malloc>:
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	82 30       	cpi	r24, 0x02	; 2
    1b58:	91 05       	cpc	r25, r1
    1b5a:	10 f4       	brcc	.+4      	; 0x1b60 <malloc+0x12>
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	e0 91 a5 03 	lds	r30, 0x03A5
    1b64:	f0 91 a6 03 	lds	r31, 0x03A6
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	c0 e0       	ldi	r28, 0x00	; 0
    1b6e:	d0 e0       	ldi	r29, 0x00	; 0
    1b70:	23 c0       	rjmp	.+70     	; 0x1bb8 <malloc+0x6a>
    1b72:	40 81       	ld	r20, Z
    1b74:	51 81       	ldd	r21, Z+1	; 0x01
    1b76:	48 17       	cp	r20, r24
    1b78:	59 07       	cpc	r21, r25
    1b7a:	a8 f0       	brcs	.+42     	; 0x1ba6 <malloc+0x58>
    1b7c:	48 17       	cp	r20, r24
    1b7e:	59 07       	cpc	r21, r25
    1b80:	61 f4       	brne	.+24     	; 0x1b9a <malloc+0x4c>
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	20 97       	sbiw	r28, 0x00	; 0
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <malloc+0x42>
    1b8a:	9b 83       	std	Y+3, r25	; 0x03
    1b8c:	8a 83       	std	Y+2, r24	; 0x02
    1b8e:	2e c0       	rjmp	.+92     	; 0x1bec <malloc+0x9e>
    1b90:	90 93 a6 03 	sts	0x03A6, r25
    1b94:	80 93 a5 03 	sts	0x03A5, r24
    1b98:	29 c0       	rjmp	.+82     	; 0x1bec <malloc+0x9e>
    1b9a:	21 15       	cp	r18, r1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	29 f0       	breq	.+10     	; 0x1baa <malloc+0x5c>
    1ba0:	42 17       	cp	r20, r18
    1ba2:	53 07       	cpc	r21, r19
    1ba4:	10 f0       	brcs	.+4      	; 0x1baa <malloc+0x5c>
    1ba6:	a9 01       	movw	r20, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <malloc+0x60>
    1baa:	be 01       	movw	r22, r28
    1bac:	df 01       	movw	r26, r30
    1bae:	02 81       	ldd	r16, Z+2	; 0x02
    1bb0:	13 81       	ldd	r17, Z+3	; 0x03
    1bb2:	ef 01       	movw	r28, r30
    1bb4:	9a 01       	movw	r18, r20
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	30 97       	sbiw	r30, 0x00	; 0
    1bba:	d9 f6       	brne	.-74     	; 0x1b72 <malloc+0x24>
    1bbc:	21 15       	cp	r18, r1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	09 f1       	breq	.+66     	; 0x1c04 <malloc+0xb6>
    1bc2:	28 1b       	sub	r18, r24
    1bc4:	39 0b       	sbc	r19, r25
    1bc6:	24 30       	cpi	r18, 0x04	; 4
    1bc8:	31 05       	cpc	r19, r1
    1bca:	90 f4       	brcc	.+36     	; 0x1bf0 <malloc+0xa2>
    1bcc:	12 96       	adiw	r26, 0x02	; 2
    1bce:	8d 91       	ld	r24, X+
    1bd0:	9c 91       	ld	r25, X
    1bd2:	13 97       	sbiw	r26, 0x03	; 3
    1bd4:	61 15       	cp	r22, r1
    1bd6:	71 05       	cpc	r23, r1
    1bd8:	21 f0       	breq	.+8      	; 0x1be2 <malloc+0x94>
    1bda:	fb 01       	movw	r30, r22
    1bdc:	93 83       	std	Z+3, r25	; 0x03
    1bde:	82 83       	std	Z+2, r24	; 0x02
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <malloc+0x9c>
    1be2:	90 93 a6 03 	sts	0x03A6, r25
    1be6:	80 93 a5 03 	sts	0x03A5, r24
    1bea:	fd 01       	movw	r30, r26
    1bec:	32 96       	adiw	r30, 0x02	; 2
    1bee:	44 c0       	rjmp	.+136    	; 0x1c78 <malloc+0x12a>
    1bf0:	fd 01       	movw	r30, r26
    1bf2:	e2 0f       	add	r30, r18
    1bf4:	f3 1f       	adc	r31, r19
    1bf6:	81 93       	st	Z+, r24
    1bf8:	91 93       	st	Z+, r25
    1bfa:	22 50       	subi	r18, 0x02	; 2
    1bfc:	31 09       	sbc	r19, r1
    1bfe:	2d 93       	st	X+, r18
    1c00:	3c 93       	st	X, r19
    1c02:	3a c0       	rjmp	.+116    	; 0x1c78 <malloc+0x12a>
    1c04:	20 91 a3 03 	lds	r18, 0x03A3
    1c08:	30 91 a4 03 	lds	r19, 0x03A4
    1c0c:	23 2b       	or	r18, r19
    1c0e:	41 f4       	brne	.+16     	; 0x1c20 <malloc+0xd2>
    1c10:	20 91 02 01 	lds	r18, 0x0102
    1c14:	30 91 03 01 	lds	r19, 0x0103
    1c18:	30 93 a4 03 	sts	0x03A4, r19
    1c1c:	20 93 a3 03 	sts	0x03A3, r18
    1c20:	20 91 00 01 	lds	r18, 0x0100
    1c24:	30 91 01 01 	lds	r19, 0x0101
    1c28:	21 15       	cp	r18, r1
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	41 f4       	brne	.+16     	; 0x1c3e <malloc+0xf0>
    1c2e:	2d b7       	in	r18, 0x3d	; 61
    1c30:	3e b7       	in	r19, 0x3e	; 62
    1c32:	40 91 04 01 	lds	r20, 0x0104
    1c36:	50 91 05 01 	lds	r21, 0x0105
    1c3a:	24 1b       	sub	r18, r20
    1c3c:	35 0b       	sbc	r19, r21
    1c3e:	e0 91 a3 03 	lds	r30, 0x03A3
    1c42:	f0 91 a4 03 	lds	r31, 0x03A4
    1c46:	e2 17       	cp	r30, r18
    1c48:	f3 07       	cpc	r31, r19
    1c4a:	a0 f4       	brcc	.+40     	; 0x1c74 <malloc+0x126>
    1c4c:	2e 1b       	sub	r18, r30
    1c4e:	3f 0b       	sbc	r19, r31
    1c50:	28 17       	cp	r18, r24
    1c52:	39 07       	cpc	r19, r25
    1c54:	78 f0       	brcs	.+30     	; 0x1c74 <malloc+0x126>
    1c56:	ac 01       	movw	r20, r24
    1c58:	4e 5f       	subi	r20, 0xFE	; 254
    1c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5c:	24 17       	cp	r18, r20
    1c5e:	35 07       	cpc	r19, r21
    1c60:	48 f0       	brcs	.+18     	; 0x1c74 <malloc+0x126>
    1c62:	4e 0f       	add	r20, r30
    1c64:	5f 1f       	adc	r21, r31
    1c66:	50 93 a4 03 	sts	0x03A4, r21
    1c6a:	40 93 a3 03 	sts	0x03A3, r20
    1c6e:	81 93       	st	Z+, r24
    1c70:	91 93       	st	Z+, r25
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <malloc+0x12a>
    1c74:	e0 e0       	ldi	r30, 0x00	; 0
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	cf 01       	movw	r24, r30
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret

00001c84 <free>:
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <free+0x12>
    1c94:	8f c0       	rjmp	.+286    	; 0x1db4 <free+0x130>
    1c96:	dc 01       	movw	r26, r24
    1c98:	12 97       	sbiw	r26, 0x02	; 2
    1c9a:	13 96       	adiw	r26, 0x03	; 3
    1c9c:	1c 92       	st	X, r1
    1c9e:	1e 92       	st	-X, r1
    1ca0:	12 97       	sbiw	r26, 0x02	; 2
    1ca2:	e0 90 a5 03 	lds	r14, 0x03A5
    1ca6:	f0 90 a6 03 	lds	r15, 0x03A6
    1caa:	e1 14       	cp	r14, r1
    1cac:	f1 04       	cpc	r15, r1
    1cae:	89 f4       	brne	.+34     	; 0x1cd2 <free+0x4e>
    1cb0:	2d 91       	ld	r18, X+
    1cb2:	3c 91       	ld	r19, X
    1cb4:	11 97       	sbiw	r26, 0x01	; 1
    1cb6:	28 0f       	add	r18, r24
    1cb8:	39 1f       	adc	r19, r25
    1cba:	80 91 a3 03 	lds	r24, 0x03A3
    1cbe:	90 91 a4 03 	lds	r25, 0x03A4
    1cc2:	82 17       	cp	r24, r18
    1cc4:	93 07       	cpc	r25, r19
    1cc6:	89 f5       	brne	.+98     	; 0x1d2a <free+0xa6>
    1cc8:	b0 93 a4 03 	sts	0x03A4, r27
    1ccc:	a0 93 a3 03 	sts	0x03A3, r26
    1cd0:	71 c0       	rjmp	.+226    	; 0x1db4 <free+0x130>
    1cd2:	e7 01       	movw	r28, r14
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <free+0x58>
    1cda:	ea 01       	movw	r28, r20
    1cdc:	ca 17       	cp	r28, r26
    1cde:	db 07       	cpc	r29, r27
    1ce0:	38 f4       	brcc	.+14     	; 0x1cf0 <free+0x6c>
    1ce2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ce4:	5b 81       	ldd	r21, Y+3	; 0x03
    1ce6:	9e 01       	movw	r18, r28
    1ce8:	41 15       	cp	r20, r1
    1cea:	51 05       	cpc	r21, r1
    1cec:	b1 f7       	brne	.-20     	; 0x1cda <free+0x56>
    1cee:	22 c0       	rjmp	.+68     	; 0x1d34 <free+0xb0>
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	62 50       	subi	r22, 0x02	; 2
    1cf4:	71 09       	sbc	r23, r1
    1cf6:	fb 01       	movw	r30, r22
    1cf8:	d3 83       	std	Z+3, r29	; 0x03
    1cfa:	c2 83       	std	Z+2, r28	; 0x02
    1cfc:	00 81       	ld	r16, Z
    1cfe:	11 81       	ldd	r17, Z+1	; 0x01
    1d00:	ac 01       	movw	r20, r24
    1d02:	40 0f       	add	r20, r16
    1d04:	51 1f       	adc	r21, r17
    1d06:	4c 17       	cp	r20, r28
    1d08:	5d 07       	cpc	r21, r29
    1d0a:	61 f4       	brne	.+24     	; 0x1d24 <free+0xa0>
    1d0c:	48 81       	ld	r20, Y
    1d0e:	59 81       	ldd	r21, Y+1	; 0x01
    1d10:	40 0f       	add	r20, r16
    1d12:	51 1f       	adc	r21, r17
    1d14:	4e 5f       	subi	r20, 0xFE	; 254
    1d16:	5f 4f       	sbci	r21, 0xFF	; 255
    1d18:	51 83       	std	Z+1, r21	; 0x01
    1d1a:	40 83       	st	Z, r20
    1d1c:	4a 81       	ldd	r20, Y+2	; 0x02
    1d1e:	5b 81       	ldd	r21, Y+3	; 0x03
    1d20:	53 83       	std	Z+3, r21	; 0x03
    1d22:	42 83       	std	Z+2, r20	; 0x02
    1d24:	21 15       	cp	r18, r1
    1d26:	31 05       	cpc	r19, r1
    1d28:	29 f4       	brne	.+10     	; 0x1d34 <free+0xb0>
    1d2a:	b0 93 a6 03 	sts	0x03A6, r27
    1d2e:	a0 93 a5 03 	sts	0x03A5, r26
    1d32:	40 c0       	rjmp	.+128    	; 0x1db4 <free+0x130>
    1d34:	f9 01       	movw	r30, r18
    1d36:	b3 83       	std	Z+3, r27	; 0x03
    1d38:	a2 83       	std	Z+2, r26	; 0x02
    1d3a:	e9 01       	movw	r28, r18
    1d3c:	69 91       	ld	r22, Y+
    1d3e:	79 91       	ld	r23, Y+
    1d40:	c6 0f       	add	r28, r22
    1d42:	d7 1f       	adc	r29, r23
    1d44:	ac 17       	cp	r26, r28
    1d46:	bd 07       	cpc	r27, r29
    1d48:	79 f4       	brne	.+30     	; 0x1d68 <free+0xe4>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	5e 91       	ld	r21, -X
    1d4e:	4e 91       	ld	r20, -X
    1d50:	46 0f       	add	r20, r22
    1d52:	57 1f       	adc	r21, r23
    1d54:	4e 5f       	subi	r20, 0xFE	; 254
    1d56:	5f 4f       	sbci	r21, 0xFF	; 255
    1d58:	51 83       	std	Z+1, r21	; 0x01
    1d5a:	40 83       	st	Z, r20
    1d5c:	12 96       	adiw	r26, 0x02	; 2
    1d5e:	8d 91       	ld	r24, X+
    1d60:	9c 91       	ld	r25, X
    1d62:	13 97       	sbiw	r26, 0x03	; 3
    1d64:	93 83       	std	Z+3, r25	; 0x03
    1d66:	82 83       	std	Z+2, r24	; 0x02
    1d68:	a0 e0       	ldi	r26, 0x00	; 0
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <free+0xee>
    1d6e:	d7 01       	movw	r26, r14
    1d70:	7c 01       	movw	r14, r24
    1d72:	f7 01       	movw	r30, r14
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	c9 f7       	brne	.-14     	; 0x1d6e <free+0xea>
    1d7c:	c7 01       	movw	r24, r14
    1d7e:	02 96       	adiw	r24, 0x02	; 2
    1d80:	20 81       	ld	r18, Z
    1d82:	31 81       	ldd	r19, Z+1	; 0x01
    1d84:	82 0f       	add	r24, r18
    1d86:	93 1f       	adc	r25, r19
    1d88:	20 91 a3 03 	lds	r18, 0x03A3
    1d8c:	30 91 a4 03 	lds	r19, 0x03A4
    1d90:	28 17       	cp	r18, r24
    1d92:	39 07       	cpc	r19, r25
    1d94:	79 f4       	brne	.+30     	; 0x1db4 <free+0x130>
    1d96:	10 97       	sbiw	r26, 0x00	; 0
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <free+0x120>
    1d9a:	10 92 a6 03 	sts	0x03A6, r1
    1d9e:	10 92 a5 03 	sts	0x03A5, r1
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <free+0x128>
    1da4:	13 96       	adiw	r26, 0x03	; 3
    1da6:	1c 92       	st	X, r1
    1da8:	1e 92       	st	-X, r1
    1daa:	12 97       	sbiw	r26, 0x02	; 2
    1dac:	f0 92 a4 03 	sts	0x03A4, r15
    1db0:	e0 92 a3 03 	sts	0x03A3, r14
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	08 95       	ret

00001dc2 <__ftoa_engine>:
    1dc2:	28 30       	cpi	r18, 0x08	; 8
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <__ftoa_engine+0x6>
    1dc6:	27 e0       	ldi	r18, 0x07	; 7
    1dc8:	33 27       	eor	r19, r19
    1dca:	da 01       	movw	r26, r20
    1dcc:	99 0f       	add	r25, r25
    1dce:	31 1d       	adc	r19, r1
    1dd0:	87 fd       	sbrc	r24, 7
    1dd2:	91 60       	ori	r25, 0x01	; 1
    1dd4:	00 96       	adiw	r24, 0x00	; 0
    1dd6:	61 05       	cpc	r22, r1
    1dd8:	71 05       	cpc	r23, r1
    1dda:	39 f4       	brne	.+14     	; 0x1dea <__ftoa_engine+0x28>
    1ddc:	32 60       	ori	r19, 0x02	; 2
    1dde:	2e 5f       	subi	r18, 0xFE	; 254
    1de0:	3d 93       	st	X+, r19
    1de2:	30 e3       	ldi	r19, 0x30	; 48
    1de4:	2a 95       	dec	r18
    1de6:	e1 f7       	brne	.-8      	; 0x1de0 <__ftoa_engine+0x1e>
    1de8:	08 95       	ret
    1dea:	9f 3f       	cpi	r25, 0xFF	; 255
    1dec:	30 f0       	brcs	.+12     	; 0x1dfa <__ftoa_engine+0x38>
    1dee:	80 38       	cpi	r24, 0x80	; 128
    1df0:	71 05       	cpc	r23, r1
    1df2:	61 05       	cpc	r22, r1
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <__ftoa_engine+0x36>
    1df6:	3c 5f       	subi	r19, 0xFC	; 252
    1df8:	3c 5f       	subi	r19, 0xFC	; 252
    1dfa:	3d 93       	st	X+, r19
    1dfc:	91 30       	cpi	r25, 0x01	; 1
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <__ftoa_engine+0x40>
    1e00:	80 68       	ori	r24, 0x80	; 128
    1e02:	91 1d       	adc	r25, r1
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	1f 93       	push	r17
    1e0a:	0f 93       	push	r16
    1e0c:	ff 92       	push	r15
    1e0e:	ef 92       	push	r14
    1e10:	19 2f       	mov	r17, r25
    1e12:	98 7f       	andi	r25, 0xF8	; 248
    1e14:	96 95       	lsr	r25
    1e16:	e9 2f       	mov	r30, r25
    1e18:	96 95       	lsr	r25
    1e1a:	96 95       	lsr	r25
    1e1c:	e9 0f       	add	r30, r25
    1e1e:	ff 27       	eor	r31, r31
    1e20:	e2 51       	subi	r30, 0x12	; 18
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	99 27       	eor	r25, r25
    1e26:	33 27       	eor	r19, r19
    1e28:	ee 24       	eor	r14, r14
    1e2a:	ff 24       	eor	r15, r15
    1e2c:	a7 01       	movw	r20, r14
    1e2e:	e7 01       	movw	r28, r14
    1e30:	05 90       	lpm	r0, Z+
    1e32:	08 94       	sec
    1e34:	07 94       	ror	r0
    1e36:	28 f4       	brcc	.+10     	; 0x1e42 <__ftoa_engine+0x80>
    1e38:	36 0f       	add	r19, r22
    1e3a:	e7 1e       	adc	r14, r23
    1e3c:	f8 1e       	adc	r15, r24
    1e3e:	49 1f       	adc	r20, r25
    1e40:	51 1d       	adc	r21, r1
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	06 94       	lsr	r0
    1e4c:	a1 f7       	brne	.-24     	; 0x1e36 <__ftoa_engine+0x74>
    1e4e:	05 90       	lpm	r0, Z+
    1e50:	07 94       	ror	r0
    1e52:	28 f4       	brcc	.+10     	; 0x1e5e <__ftoa_engine+0x9c>
    1e54:	e7 0e       	add	r14, r23
    1e56:	f8 1e       	adc	r15, r24
    1e58:	49 1f       	adc	r20, r25
    1e5a:	56 1f       	adc	r21, r22
    1e5c:	c1 1d       	adc	r28, r1
    1e5e:	77 0f       	add	r23, r23
    1e60:	88 1f       	adc	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	66 1f       	adc	r22, r22
    1e66:	06 94       	lsr	r0
    1e68:	a1 f7       	brne	.-24     	; 0x1e52 <__ftoa_engine+0x90>
    1e6a:	05 90       	lpm	r0, Z+
    1e6c:	07 94       	ror	r0
    1e6e:	28 f4       	brcc	.+10     	; 0x1e7a <__ftoa_engine+0xb8>
    1e70:	f8 0e       	add	r15, r24
    1e72:	49 1f       	adc	r20, r25
    1e74:	56 1f       	adc	r21, r22
    1e76:	c7 1f       	adc	r28, r23
    1e78:	d1 1d       	adc	r29, r1
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	66 1f       	adc	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	06 94       	lsr	r0
    1e84:	a1 f7       	brne	.-24     	; 0x1e6e <__ftoa_engine+0xac>
    1e86:	05 90       	lpm	r0, Z+
    1e88:	07 94       	ror	r0
    1e8a:	20 f4       	brcc	.+8      	; 0x1e94 <__ftoa_engine+0xd2>
    1e8c:	49 0f       	add	r20, r25
    1e8e:	56 1f       	adc	r21, r22
    1e90:	c7 1f       	adc	r28, r23
    1e92:	d8 1f       	adc	r29, r24
    1e94:	99 0f       	add	r25, r25
    1e96:	66 1f       	adc	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	06 94       	lsr	r0
    1e9e:	a9 f7       	brne	.-22     	; 0x1e8a <__ftoa_engine+0xc8>
    1ea0:	84 91       	lpm	r24, Z
    1ea2:	10 95       	com	r17
    1ea4:	17 70       	andi	r17, 0x07	; 7
    1ea6:	41 f0       	breq	.+16     	; 0x1eb8 <__ftoa_engine+0xf6>
    1ea8:	d6 95       	lsr	r29
    1eaa:	c7 95       	ror	r28
    1eac:	57 95       	ror	r21
    1eae:	47 95       	ror	r20
    1eb0:	f7 94       	ror	r15
    1eb2:	e7 94       	ror	r14
    1eb4:	1a 95       	dec	r17
    1eb6:	c1 f7       	brne	.-16     	; 0x1ea8 <__ftoa_engine+0xe6>
    1eb8:	e4 e9       	ldi	r30, 0x94	; 148
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	68 94       	set
    1ebe:	15 90       	lpm	r1, Z+
    1ec0:	15 91       	lpm	r17, Z+
    1ec2:	35 91       	lpm	r19, Z+
    1ec4:	65 91       	lpm	r22, Z+
    1ec6:	95 91       	lpm	r25, Z+
    1ec8:	05 90       	lpm	r0, Z+
    1eca:	7f e2       	ldi	r23, 0x2F	; 47
    1ecc:	73 95       	inc	r23
    1ece:	e1 18       	sub	r14, r1
    1ed0:	f1 0a       	sbc	r15, r17
    1ed2:	43 0b       	sbc	r20, r19
    1ed4:	56 0b       	sbc	r21, r22
    1ed6:	c9 0b       	sbc	r28, r25
    1ed8:	d0 09       	sbc	r29, r0
    1eda:	c0 f7       	brcc	.-16     	; 0x1ecc <__ftoa_engine+0x10a>
    1edc:	e1 0c       	add	r14, r1
    1ede:	f1 1e       	adc	r15, r17
    1ee0:	43 1f       	adc	r20, r19
    1ee2:	56 1f       	adc	r21, r22
    1ee4:	c9 1f       	adc	r28, r25
    1ee6:	d0 1d       	adc	r29, r0
    1ee8:	7e f4       	brtc	.+30     	; 0x1f08 <__ftoa_engine+0x146>
    1eea:	70 33       	cpi	r23, 0x30	; 48
    1eec:	11 f4       	brne	.+4      	; 0x1ef2 <__ftoa_engine+0x130>
    1eee:	8a 95       	dec	r24
    1ef0:	e6 cf       	rjmp	.-52     	; 0x1ebe <__ftoa_engine+0xfc>
    1ef2:	e8 94       	clt
    1ef4:	01 50       	subi	r16, 0x01	; 1
    1ef6:	30 f0       	brcs	.+12     	; 0x1f04 <__ftoa_engine+0x142>
    1ef8:	08 0f       	add	r16, r24
    1efa:	0a f4       	brpl	.+2      	; 0x1efe <__ftoa_engine+0x13c>
    1efc:	00 27       	eor	r16, r16
    1efe:	02 17       	cp	r16, r18
    1f00:	08 f4       	brcc	.+2      	; 0x1f04 <__ftoa_engine+0x142>
    1f02:	20 2f       	mov	r18, r16
    1f04:	23 95       	inc	r18
    1f06:	02 2f       	mov	r16, r18
    1f08:	7a 33       	cpi	r23, 0x3A	; 58
    1f0a:	28 f0       	brcs	.+10     	; 0x1f16 <__ftoa_engine+0x154>
    1f0c:	79 e3       	ldi	r23, 0x39	; 57
    1f0e:	7d 93       	st	X+, r23
    1f10:	2a 95       	dec	r18
    1f12:	e9 f7       	brne	.-6      	; 0x1f0e <__ftoa_engine+0x14c>
    1f14:	10 c0       	rjmp	.+32     	; 0x1f36 <__ftoa_engine+0x174>
    1f16:	7d 93       	st	X+, r23
    1f18:	2a 95       	dec	r18
    1f1a:	89 f6       	brne	.-94     	; 0x1ebe <__ftoa_engine+0xfc>
    1f1c:	06 94       	lsr	r0
    1f1e:	97 95       	ror	r25
    1f20:	67 95       	ror	r22
    1f22:	37 95       	ror	r19
    1f24:	17 95       	ror	r17
    1f26:	17 94       	ror	r1
    1f28:	e1 18       	sub	r14, r1
    1f2a:	f1 0a       	sbc	r15, r17
    1f2c:	43 0b       	sbc	r20, r19
    1f2e:	56 0b       	sbc	r21, r22
    1f30:	c9 0b       	sbc	r28, r25
    1f32:	d0 09       	sbc	r29, r0
    1f34:	98 f0       	brcs	.+38     	; 0x1f5c <__ftoa_engine+0x19a>
    1f36:	23 95       	inc	r18
    1f38:	7e 91       	ld	r23, -X
    1f3a:	73 95       	inc	r23
    1f3c:	7a 33       	cpi	r23, 0x3A	; 58
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <__ftoa_engine+0x180>
    1f40:	70 e3       	ldi	r23, 0x30	; 48
    1f42:	7c 93       	st	X, r23
    1f44:	20 13       	cpse	r18, r16
    1f46:	b8 f7       	brcc	.-18     	; 0x1f36 <__ftoa_engine+0x174>
    1f48:	7e 91       	ld	r23, -X
    1f4a:	70 61       	ori	r23, 0x10	; 16
    1f4c:	7d 93       	st	X+, r23
    1f4e:	30 f0       	brcs	.+12     	; 0x1f5c <__ftoa_engine+0x19a>
    1f50:	83 95       	inc	r24
    1f52:	71 e3       	ldi	r23, 0x31	; 49
    1f54:	7d 93       	st	X+, r23
    1f56:	70 e3       	ldi	r23, 0x30	; 48
    1f58:	2a 95       	dec	r18
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <__ftoa_engine+0x192>
    1f5c:	11 24       	eor	r1, r1
    1f5e:	ef 90       	pop	r14
    1f60:	ff 90       	pop	r15
    1f62:	0f 91       	pop	r16
    1f64:	1f 91       	pop	r17
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	99 27       	eor	r25, r25
    1f6c:	87 fd       	sbrc	r24, 7
    1f6e:	90 95       	com	r25
    1f70:	08 95       	ret

00001f72 <strnlen_P>:
    1f72:	fc 01       	movw	r30, r24
    1f74:	05 90       	lpm	r0, Z+
    1f76:	61 50       	subi	r22, 0x01	; 1
    1f78:	70 40       	sbci	r23, 0x00	; 0
    1f7a:	01 10       	cpse	r0, r1
    1f7c:	d8 f7       	brcc	.-10     	; 0x1f74 <strnlen_P+0x2>
    1f7e:	80 95       	com	r24
    1f80:	90 95       	com	r25
    1f82:	8e 0f       	add	r24, r30
    1f84:	9f 1f       	adc	r25, r31
    1f86:	08 95       	ret

00001f88 <memset>:
    1f88:	dc 01       	movw	r26, r24
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <memset+0x6>
    1f8c:	6d 93       	st	X+, r22
    1f8e:	41 50       	subi	r20, 0x01	; 1
    1f90:	50 40       	sbci	r21, 0x00	; 0
    1f92:	e0 f7       	brcc	.-8      	; 0x1f8c <memset+0x4>
    1f94:	08 95       	ret

00001f96 <strcmp>:
    1f96:	fb 01       	movw	r30, r22
    1f98:	dc 01       	movw	r26, r24
    1f9a:	8d 91       	ld	r24, X+
    1f9c:	01 90       	ld	r0, Z+
    1f9e:	80 19       	sub	r24, r0
    1fa0:	01 10       	cpse	r0, r1
    1fa2:	d9 f3       	breq	.-10     	; 0x1f9a <strcmp+0x4>
    1fa4:	99 0b       	sbc	r25, r25
    1fa6:	08 95       	ret

00001fa8 <strcpy>:
    1fa8:	fb 01       	movw	r30, r22
    1faa:	dc 01       	movw	r26, r24
    1fac:	01 90       	ld	r0, Z+
    1fae:	0d 92       	st	X+, r0
    1fb0:	00 20       	and	r0, r0
    1fb2:	e1 f7       	brne	.-8      	; 0x1fac <strcpy+0x4>
    1fb4:	08 95       	ret

00001fb6 <strnlen>:
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	61 50       	subi	r22, 0x01	; 1
    1fba:	70 40       	sbci	r23, 0x00	; 0
    1fbc:	01 90       	ld	r0, Z+
    1fbe:	01 10       	cpse	r0, r1
    1fc0:	d8 f7       	brcc	.-10     	; 0x1fb8 <strnlen+0x2>
    1fc2:	80 95       	com	r24
    1fc4:	90 95       	com	r25
    1fc6:	8e 0f       	add	r24, r30
    1fc8:	9f 1f       	adc	r25, r31
    1fca:	08 95       	ret

00001fcc <fputc>:
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	8c 01       	movw	r16, r24
    1fd6:	eb 01       	movw	r28, r22
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	81 fd       	sbrc	r24, 1
    1fdc:	03 c0       	rjmp	.+6      	; 0x1fe4 <fputc+0x18>
    1fde:	0f ef       	ldi	r16, 0xFF	; 255
    1fe0:	1f ef       	ldi	r17, 0xFF	; 255
    1fe2:	1a c0       	rjmp	.+52     	; 0x2018 <fputc+0x4c>
    1fe4:	82 ff       	sbrs	r24, 2
    1fe6:	0d c0       	rjmp	.+26     	; 0x2002 <fputc+0x36>
    1fe8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fea:	3f 81       	ldd	r19, Y+7	; 0x07
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	28 17       	cp	r18, r24
    1ff2:	39 07       	cpc	r19, r25
    1ff4:	64 f4       	brge	.+24     	; 0x200e <fputc+0x42>
    1ff6:	e8 81       	ld	r30, Y
    1ff8:	f9 81       	ldd	r31, Y+1	; 0x01
    1ffa:	01 93       	st	Z+, r16
    1ffc:	f9 83       	std	Y+1, r31	; 0x01
    1ffe:	e8 83       	st	Y, r30
    2000:	06 c0       	rjmp	.+12     	; 0x200e <fputc+0x42>
    2002:	e8 85       	ldd	r30, Y+8	; 0x08
    2004:	f9 85       	ldd	r31, Y+9	; 0x09
    2006:	80 2f       	mov	r24, r16
    2008:	09 95       	icall
    200a:	89 2b       	or	r24, r25
    200c:	41 f7       	brne	.-48     	; 0x1fde <fputc+0x12>
    200e:	8e 81       	ldd	r24, Y+6	; 0x06
    2010:	9f 81       	ldd	r25, Y+7	; 0x07
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	9f 83       	std	Y+7, r25	; 0x07
    2016:	8e 83       	std	Y+6, r24	; 0x06
    2018:	c8 01       	movw	r24, r16
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <sprintf>:
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	2e 97       	sbiw	r28, 0x0e	; 14
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	0d 89       	ldd	r16, Y+21	; 0x15
    203e:	1e 89       	ldd	r17, Y+22	; 0x16
    2040:	86 e0       	ldi	r24, 0x06	; 6
    2042:	8c 83       	std	Y+4, r24	; 0x04
    2044:	1a 83       	std	Y+2, r17	; 0x02
    2046:	09 83       	std	Y+1, r16	; 0x01
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	9f e7       	ldi	r25, 0x7F	; 127
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	ce 01       	movw	r24, r28
    2052:	49 96       	adiw	r24, 0x19	; 25
    2054:	ac 01       	movw	r20, r24
    2056:	6f 89       	ldd	r22, Y+23	; 0x17
    2058:	78 8d       	ldd	r23, Y+24	; 0x18
    205a:	ce 01       	movw	r24, r28
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	9a d9       	rcall	.-3276   	; 0x1394 <vfprintf>
    2060:	ef 81       	ldd	r30, Y+7	; 0x07
    2062:	f8 85       	ldd	r31, Y+8	; 0x08
    2064:	e0 0f       	add	r30, r16
    2066:	f1 1f       	adc	r31, r17
    2068:	10 82       	st	Z, r1
    206a:	2e 96       	adiw	r28, 0x0e	; 14
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	08 95       	ret

00002080 <vsnprintf>:
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	2e 97       	sbiw	r28, 0x0e	; 14
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	8c 01       	movw	r16, r24
    209a:	ca 01       	movw	r24, r20
    209c:	46 e0       	ldi	r20, 0x06	; 6
    209e:	4c 83       	std	Y+4, r20	; 0x04
    20a0:	1a 83       	std	Y+2, r17	; 0x02
    20a2:	09 83       	std	Y+1, r16	; 0x01
    20a4:	77 ff       	sbrs	r23, 7
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <vsnprintf+0x2c>
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	70 e8       	ldi	r23, 0x80	; 128
    20ac:	61 50       	subi	r22, 0x01	; 1
    20ae:	71 09       	sbc	r23, r1
    20b0:	7e 83       	std	Y+6, r23	; 0x06
    20b2:	6d 83       	std	Y+5, r22	; 0x05
    20b4:	a9 01       	movw	r20, r18
    20b6:	bc 01       	movw	r22, r24
    20b8:	ce 01       	movw	r24, r28
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	6b d9       	rcall	.-3370   	; 0x1394 <vfprintf>
    20be:	4d 81       	ldd	r20, Y+5	; 0x05
    20c0:	5e 81       	ldd	r21, Y+6	; 0x06
    20c2:	57 fd       	sbrc	r21, 7
    20c4:	0a c0       	rjmp	.+20     	; 0x20da <vsnprintf+0x5a>
    20c6:	2f 81       	ldd	r18, Y+7	; 0x07
    20c8:	38 85       	ldd	r19, Y+8	; 0x08
    20ca:	42 17       	cp	r20, r18
    20cc:	53 07       	cpc	r21, r19
    20ce:	0c f4       	brge	.+2      	; 0x20d2 <vsnprintf+0x52>
    20d0:	9a 01       	movw	r18, r20
    20d2:	f8 01       	movw	r30, r16
    20d4:	e2 0f       	add	r30, r18
    20d6:	f3 1f       	adc	r31, r19
    20d8:	10 82       	st	Z, r1
    20da:	2e 96       	adiw	r28, 0x0e	; 14
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	08 95       	ret

000020f0 <__ultoa_invert>:
    20f0:	fa 01       	movw	r30, r20
    20f2:	aa 27       	eor	r26, r26
    20f4:	28 30       	cpi	r18, 0x08	; 8
    20f6:	51 f1       	breq	.+84     	; 0x214c <__ultoa_invert+0x5c>
    20f8:	20 31       	cpi	r18, 0x10	; 16
    20fa:	81 f1       	breq	.+96     	; 0x215c <__ultoa_invert+0x6c>
    20fc:	e8 94       	clt
    20fe:	6f 93       	push	r22
    2100:	6e 7f       	andi	r22, 0xFE	; 254
    2102:	6e 5f       	subi	r22, 0xFE	; 254
    2104:	7f 4f       	sbci	r23, 0xFF	; 255
    2106:	8f 4f       	sbci	r24, 0xFF	; 255
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	af 4f       	sbci	r26, 0xFF	; 255
    210c:	b1 e0       	ldi	r27, 0x01	; 1
    210e:	3e d0       	rcall	.+124    	; 0x218c <__ultoa_invert+0x9c>
    2110:	b4 e0       	ldi	r27, 0x04	; 4
    2112:	3c d0       	rcall	.+120    	; 0x218c <__ultoa_invert+0x9c>
    2114:	67 0f       	add	r22, r23
    2116:	78 1f       	adc	r23, r24
    2118:	89 1f       	adc	r24, r25
    211a:	9a 1f       	adc	r25, r26
    211c:	a1 1d       	adc	r26, r1
    211e:	68 0f       	add	r22, r24
    2120:	79 1f       	adc	r23, r25
    2122:	8a 1f       	adc	r24, r26
    2124:	91 1d       	adc	r25, r1
    2126:	a1 1d       	adc	r26, r1
    2128:	6a 0f       	add	r22, r26
    212a:	71 1d       	adc	r23, r1
    212c:	81 1d       	adc	r24, r1
    212e:	91 1d       	adc	r25, r1
    2130:	a1 1d       	adc	r26, r1
    2132:	20 d0       	rcall	.+64     	; 0x2174 <__ultoa_invert+0x84>
    2134:	09 f4       	brne	.+2      	; 0x2138 <__ultoa_invert+0x48>
    2136:	68 94       	set
    2138:	3f 91       	pop	r19
    213a:	2a e0       	ldi	r18, 0x0A	; 10
    213c:	26 9f       	mul	r18, r22
    213e:	11 24       	eor	r1, r1
    2140:	30 19       	sub	r19, r0
    2142:	30 5d       	subi	r19, 0xD0	; 208
    2144:	31 93       	st	Z+, r19
    2146:	de f6       	brtc	.-74     	; 0x20fe <__ultoa_invert+0xe>
    2148:	cf 01       	movw	r24, r30
    214a:	08 95       	ret
    214c:	46 2f       	mov	r20, r22
    214e:	47 70       	andi	r20, 0x07	; 7
    2150:	40 5d       	subi	r20, 0xD0	; 208
    2152:	41 93       	st	Z+, r20
    2154:	b3 e0       	ldi	r27, 0x03	; 3
    2156:	0f d0       	rcall	.+30     	; 0x2176 <__ultoa_invert+0x86>
    2158:	c9 f7       	brne	.-14     	; 0x214c <__ultoa_invert+0x5c>
    215a:	f6 cf       	rjmp	.-20     	; 0x2148 <__ultoa_invert+0x58>
    215c:	46 2f       	mov	r20, r22
    215e:	4f 70       	andi	r20, 0x0F	; 15
    2160:	40 5d       	subi	r20, 0xD0	; 208
    2162:	4a 33       	cpi	r20, 0x3A	; 58
    2164:	18 f0       	brcs	.+6      	; 0x216c <__ultoa_invert+0x7c>
    2166:	49 5d       	subi	r20, 0xD9	; 217
    2168:	31 fd       	sbrc	r19, 1
    216a:	40 52       	subi	r20, 0x20	; 32
    216c:	41 93       	st	Z+, r20
    216e:	02 d0       	rcall	.+4      	; 0x2174 <__ultoa_invert+0x84>
    2170:	a9 f7       	brne	.-22     	; 0x215c <__ultoa_invert+0x6c>
    2172:	ea cf       	rjmp	.-44     	; 0x2148 <__ultoa_invert+0x58>
    2174:	b4 e0       	ldi	r27, 0x04	; 4
    2176:	a6 95       	lsr	r26
    2178:	97 95       	ror	r25
    217a:	87 95       	ror	r24
    217c:	77 95       	ror	r23
    217e:	67 95       	ror	r22
    2180:	ba 95       	dec	r27
    2182:	c9 f7       	brne	.-14     	; 0x2176 <__ultoa_invert+0x86>
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	61 05       	cpc	r22, r1
    2188:	71 05       	cpc	r23, r1
    218a:	08 95       	ret
    218c:	9b 01       	movw	r18, r22
    218e:	ac 01       	movw	r20, r24
    2190:	0a 2e       	mov	r0, r26
    2192:	06 94       	lsr	r0
    2194:	57 95       	ror	r21
    2196:	47 95       	ror	r20
    2198:	37 95       	ror	r19
    219a:	27 95       	ror	r18
    219c:	ba 95       	dec	r27
    219e:	c9 f7       	brne	.-14     	; 0x2192 <__ultoa_invert+0xa2>
    21a0:	62 0f       	add	r22, r18
    21a2:	73 1f       	adc	r23, r19
    21a4:	84 1f       	adc	r24, r20
    21a6:	95 1f       	adc	r25, r21
    21a8:	a0 1d       	adc	r26, r0
    21aa:	08 95       	ret

000021ac <_exit>:
    21ac:	f8 94       	cli

000021ae <__stop_program>:
    21ae:	ff cf       	rjmp	.-2      	; 0x21ae <__stop_program>
