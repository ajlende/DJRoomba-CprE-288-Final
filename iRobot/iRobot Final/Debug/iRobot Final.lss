
iRobot Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00001ad0  00001b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008001b6  008001b6  00001c1a  2**0
                  ALLOC
  3 .stab         00002a00  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b0c  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005128  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  00005157  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000034f7  00000000  00000000  00005447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001004  00000000  00000000  0000893e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001df0  00000000  00000000  00009942  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000838  00000000  00000000  0000b734  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c31  00000000  00000000  0000bf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022d7  00000000  00000000  0000cb9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000240  00000000  00000000  0000ee74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	45 c4       	rjmp	.+2186   	; 0x8b0 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	64 c4       	rjmp	.+2248   	; 0x8f6 <__vector_11>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ed       	ldi	r30, 0xD0	; 208
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3b       	cpi	r26, 0xB6	; 182
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a6 eb       	ldi	r26, 0xB6	; 182
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 31       	cpi	r26, 0x11	; 17
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
	float distance;
	float width;
}object_t;

int main(void)
{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	c9 56       	subi	r28, 0x69	; 105
      f4:	d1 09       	sbc	r29, r1
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
	
	serial_init(); // Initialize the Serial Communications
     100:	29 d3       	rcall	.+1618   	; 0x754 <serial_init>
	
	ADC_init(); // Initialize the IR sensor
     102:	7b d3       	rcall	.+1782   	; 0x7fa <ADC_init>
	
	ping_init(); // Initialize the Ping))) sensor
     104:	f3 d3       	rcall	.+2022   	; 0x8ec <ping_init>
	
	lcd_init(); // Initialize the LCD
     106:	49 d1       	rcall	.+658    	; 0x39a <lcd_init>
	
	init_push_buttons(); // Initialize the buttons
     108:	ea d3       	rcall	.+2004   	; 0x8de <init_push_buttons>
	
	timer3_init(); // Initialize the servo motor
     10a:	6f d4       	rcall	.+2270   	; 0x9ea <timer3_init>
	
	oi_t *sensor_data = oi_alloc();
     10c:	0e d2       	rcall	.+1052   	; 0x52a <oi_alloc>
     10e:	aa 96       	adiw	r28, 0x2a	; 42
     110:	9f af       	std	Y+63, r25	; 0x3f
     112:	8e af       	std	Y+62, r24	; 0x3e
     114:	aa 97       	sbiw	r28, 0x2a	; 42
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
     116:	f2 d2       	rcall	.+1508   	; 0x6fc <oi_init>
	int i = 0;
	char serialInput;
	int count = 0;
	char* numRecieved;
	
	servo_turn(degrees);
     118:	80 e5       	ldi	r24, 0x50	; 80
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	47 d4       	rcall	.+2190   	; 0x9ac <servo_turn>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     11e:	0f 2e       	mov	r0, r31
     120:	f0 e5       	ldi	r31, 0x50	; 80
     122:	cf 2e       	mov	r12, r31
     124:	d1 2c       	mov	r13, r1
     126:	f0 2d       	mov	r31, r0
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     128:	0f 2e       	mov	r0, r31
     12a:	f6 e0       	ldi	r31, 0x06	; 6
     12c:	8f 2e       	mov	r8, r31
     12e:	f1 e0       	ldi	r31, 0x01	; 1
     130:	9f 2e       	mov	r9, r31
     132:	f0 2d       	mov	r31, r0
     134:	aa 24       	eor	r10, r10
     136:	a3 94       	inc	r10
     138:	b1 2c       	mov	r11, r1
     13a:	ac 0e       	add	r10, r28
     13c:	bd 1e       	adc	r11, r29
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     13e:	0f 2e       	mov	r0, r31
     140:	f3 e0       	ldi	r31, 0x03	; 3
     142:	6f 2e       	mov	r6, r31
     144:	71 2c       	mov	r7, r1
     146:	f0 2d       	mov	r31, r0
     148:	51 2c       	mov	r5, r1
     14a:	41 2c       	mov	r4, r1
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     14c:	3a 2c       	mov	r3, r10
     14e:	2b 2c       	mov	r2, r11
	//sprintf(OutputString, "%s%1s%1s", "Degrees", "IR Distance (cm)", "Sonar Distance (cm)");
	
	//USART_SendString(OutputString);
	while(1)
	{
		count = (int) USART_Receive() - 48;
     150:	11 d3       	rcall	.+1570   	; 0x774 <USART_Receive>
     152:	18 2f       	mov	r17, r24
		
		serialInput = USART_Receive();
     154:	0f d3       	rcall	.+1566   	; 0x774 <USART_Receive>
     156:	a6 96       	adiw	r28, 0x26	; 38
     158:	8f af       	std	Y+63, r24	; 0x3f
     15a:	a6 97       	sbiw	r28, 0x26	; 38
	//sprintf(OutputString, "%s%1s%1s", "Degrees", "IR Distance (cm)", "Sonar Distance (cm)");
	
	//USART_SendString(OutputString);
	while(1)
	{
		count = (int) USART_Receive() - 48;
     15c:	81 2f       	mov	r24, r17
     15e:	90 e0       	ldi	r25, 0x00	; 0
		
		serialInput = USART_Receive();
		
		numRecieved = USART_RecieveString(count);
     160:	c0 97       	sbiw	r24, 0x30	; 48
     162:	0e d3       	rcall	.+1564   	; 0x780 <USART_RecieveString>
     164:	a8 96       	adiw	r28, 0x28	; 40
     166:	9f af       	std	Y+63, r25	; 0x3f
     168:	8e af       	std	Y+62, r24	; 0x3e
     16a:	a8 97       	sbiw	r28, 0x28	; 40
		
			
		//Big Scan
		if(serialInput == 'S')
     16c:	a6 96       	adiw	r28, 0x26	; 38
     16e:	8f ad       	ldd	r24, Y+63	; 0x3f
     170:	a6 97       	sbiw	r28, 0x26	; 38
     172:	83 35       	cpi	r24, 0x53	; 83
     174:	09 f0       	breq	.+2      	; 0x178 <main+0xae>
     176:	42 c0       	rjmp	.+132    	; 0x1fc <main+0x132>
     178:	37 c0       	rjmp	.+110    	; 0x1e8 <main+0x11e>
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	46 d3       	rcall	.+1676   	; 0x80a <ADC_read>
     17e:	e8 0e       	add	r14, r24
     180:	f9 1e       	adc	r15, r25
					wait_ms(20);
     182:	84 e1       	ldi	r24, 0x14	; 20
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	7e d3       	rcall	.+1788   	; 0x884 <wait_ms>
     188:	01 50       	subi	r16, 0x01	; 1
     18a:	11 09       	sbc	r17, r1
		{
			while(degrees <= 180) {
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     18c:	b1 f7       	brne	.-20     	; 0x17a <main+0xb0>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     18e:	97 01       	movw	r18, r14
     190:	ab ea       	ldi	r26, 0xAB	; 171
     192:	ba ea       	ldi	r27, 0xAA	; 170
     194:	eb d7       	rcall	.+4054   	; 0x116c <__umulhisi3>
     196:	96 95       	lsr	r25
     198:	87 95       	ror	r24
     19a:	43 d3       	rcall	.+1670   	; 0x822 <calcCm>
     19c:	16 2f       	mov	r17, r22
     19e:	07 2f       	mov	r16, r23
     1a0:	f8 2e       	mov	r15, r24
     1a2:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     1a4:	e4 d3       	rcall	.+1992   	; 0x96e <ping_read>
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     1a6:	9f 93       	push	r25
     1a8:	8f 93       	push	r24
     1aa:	7f 93       	push	r23
     1ac:	6f 93       	push	r22
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	df 92       	push	r13
     1b8:	cf 92       	push	r12
     1ba:	9f 92       	push	r9
     1bc:	8f 92       	push	r8
     1be:	bf 92       	push	r11
     1c0:	af 92       	push	r10
     1c2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
		
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
		
				USART_SendString(OutputString);
     1c6:	83 2d       	mov	r24, r3
     1c8:	92 2d       	mov	r25, r2
     1ca:	07 d3       	rcall	.+1550   	; 0x7da <USART_SendString>
		
				degrees += 2;
     1cc:	92 e0       	ldi	r25, 0x02	; 2
     1ce:	c9 0e       	add	r12, r25
     1d0:	d1 1c       	adc	r13, r1
		
				servo_turn(degrees);
     1d2:	c6 01       	movw	r24, r12
     1d4:	eb d3       	rcall	.+2006   	; 0x9ac <servo_turn>
		
			
		//Big Scan
		if(serialInput == 'S')
		{
			while(degrees <= 180) {
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	95 eb       	ldi	r25, 0xB5	; 181
     1e2:	c9 16       	cp	r12, r25
     1e4:	d1 04       	cpc	r13, r1
     1e6:	24 f4       	brge	.+8      	; 0x1f0 <main+0x126>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     1e8:	83 01       	movw	r16, r6
     1ea:	e5 2c       	mov	r14, r5
     1ec:	f4 2c       	mov	r15, r4
     1ee:	c5 cf       	rjmp	.-118    	; 0x17a <main+0xb0>
		
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     1f0:	8a e5       	ldi	r24, 0x5A	; 90
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	db d3       	rcall	.+1974   	; 0x9ac <servo_turn>
				degrees += 2;
		
				servo_turn(degrees);

			}
			degrees = 0;
     1f6:	c1 2c       	mov	r12, r1
     1f8:	d1 2c       	mov	r13, r1
     1fa:	63 c0       	rjmp	.+198    	; 0x2c2 <main+0x1f8>
			servo_turn(90);
		}
		
		//Small Scan
		if(serialInput == 's')
     1fc:	a6 96       	adiw	r28, 0x26	; 38
     1fe:	8f ad       	ldd	r24, Y+63	; 0x3f
     200:	a6 97       	sbiw	r28, 0x26	; 38
     202:	83 37       	cpi	r24, 0x73	; 115
     204:	09 f0       	breq	.+2      	; 0x208 <main+0x13e>
     206:	4b c0       	rjmp	.+150    	; 0x29e <main+0x1d4>
		{
			degrees = 45;
			servo_turn(degrees);
     208:	8d e2       	ldi	r24, 0x2D	; 45
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	cf d3       	rcall	.+1950   	; 0x9ac <servo_turn>
		}
		
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
     20e:	0f 2e       	mov	r0, r31
     210:	fd e2       	ldi	r31, 0x2D	; 45
     212:	cf 2e       	mov	r12, r31
     214:	d1 2c       	mov	r13, r1
     216:	f0 2d       	mov	r31, r0
     218:	38 c0       	rjmp	.+112    	; 0x28a <main+0x1c0>
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     21a:	82 e0       	ldi	r24, 0x02	; 2
     21c:	f6 d2       	rcall	.+1516   	; 0x80a <ADC_read>
     21e:	08 0f       	add	r16, r24
     220:	19 1f       	adc	r17, r25
					wait_ms(20);
     222:	84 e1       	ldi	r24, 0x14	; 20
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	2e d3       	rcall	.+1628   	; 0x884 <wait_ms>
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	e9 1a       	sub	r14, r25
     22c:	f1 08       	sbc	r15, r1
			servo_turn(degrees);
			while(degrees <= 135) {
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     22e:	a9 f7       	brne	.-22     	; 0x21a <main+0x150>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     230:	98 01       	movw	r18, r16
     232:	ab ea       	ldi	r26, 0xAB	; 171
     234:	ba ea       	ldi	r27, 0xAA	; 170
     236:	9a d7       	rcall	.+3892   	; 0x116c <__umulhisi3>
     238:	96 95       	lsr	r25
     23a:	87 95       	ror	r24
     23c:	f2 d2       	rcall	.+1508   	; 0x822 <calcCm>
     23e:	16 2f       	mov	r17, r22
     240:	07 2f       	mov	r16, r23
     242:	f8 2e       	mov	r15, r24
     244:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     246:	93 d3       	rcall	.+1830   	; 0x96e <ping_read>
				
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     248:	9f 93       	push	r25
     24a:	8f 93       	push	r24
     24c:	7f 93       	push	r23
     24e:	6f 93       	push	r22
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	df 92       	push	r13
     25a:	cf 92       	push	r12
     25c:	9f 92       	push	r9
     25e:	8f 92       	push	r8
     260:	bf 92       	push	r11
     262:	af 92       	push	r10
     264:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
				
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
				
				USART_SendString(OutputString);
     268:	83 2d       	mov	r24, r3
     26a:	92 2d       	mov	r25, r2
     26c:	b6 d2       	rcall	.+1388   	; 0x7da <USART_SendString>
				
				degrees += 2;
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	c8 0e       	add	r12, r24
     272:	d1 1c       	adc	r13, r1
				
				servo_turn(degrees);
     274:	c6 01       	movw	r24, r12
     276:	9a d3       	rcall	.+1844   	; 0x9ac <servo_turn>
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
			servo_turn(degrees);
			while(degrees <= 135) {
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	99 e8       	ldi	r25, 0x89	; 137
     284:	c9 16       	cp	r12, r25
     286:	d1 04       	cpc	r13, r1
     288:	21 f0       	breq	.+8      	; 0x292 <main+0x1c8>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     28a:	73 01       	movw	r14, r6
     28c:	05 2d       	mov	r16, r5
     28e:	14 2d       	mov	r17, r4
     290:	c4 cf       	rjmp	.-120    	; 0x21a <main+0x150>
				
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     292:	8a e5       	ldi	r24, 0x5A	; 90
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	8a d3       	rcall	.+1812   	; 0x9ac <servo_turn>
				degrees += 2;
				
				servo_turn(degrees);

			}
			degrees = 0;
     298:	c1 2c       	mov	r12, r1
     29a:	d1 2c       	mov	r13, r1
     29c:	24 c0       	rjmp	.+72     	; 0x2e6 <main+0x21c>
			servo_turn(90);
		}
		
		if(serialInput == 'f')
     29e:	a6 96       	adiw	r28, 0x26	; 38
     2a0:	8f ad       	ldd	r24, Y+63	; 0x3f
     2a2:	a6 97       	sbiw	r28, 0x26	; 38
     2a4:	86 36       	cpi	r24, 0x66	; 102
     2a6:	69 f4       	brne	.+26     	; 0x2c2 <main+0x1f8>
		{
						
			int tempDistance = atoi(numRecieved);
     2a8:	a8 96       	adiw	r28, 0x28	; 40
     2aa:	8e ad       	ldd	r24, Y+62	; 0x3e
     2ac:	9f ad       	ldd	r25, Y+63	; 0x3f
     2ae:	a8 97       	sbiw	r28, 0x28	; 40
     2b0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <atoi>
			
			move_forward(sensor_data, tempDistance);
     2b4:	bc 01       	movw	r22, r24
     2b6:	aa 96       	adiw	r28, 0x2a	; 42
     2b8:	8e ad       	ldd	r24, Y+62	; 0x3e
     2ba:	9f ad       	ldd	r25, Y+63	; 0x3f
     2bc:	aa 97       	sbiw	r28, 0x2a	; 42
     2be:	a1 d4       	rcall	.+2370   	; 0xc02 <move_forward>
     2c0:	24 c0       	rjmp	.+72     	; 0x30a <main+0x240>
		}
		
		if(serialInput == 'r')
     2c2:	a6 96       	adiw	r28, 0x26	; 38
     2c4:	9f ad       	ldd	r25, Y+63	; 0x3f
     2c6:	a6 97       	sbiw	r28, 0x26	; 38
     2c8:	92 37       	cpi	r25, 0x72	; 114
     2ca:	69 f4       	brne	.+26     	; 0x2e6 <main+0x21c>
		{
			int tempDegrees = atoi(numRecieved);
     2cc:	a8 96       	adiw	r28, 0x28	; 40
     2ce:	8e ad       	ldd	r24, Y+62	; 0x3e
     2d0:	9f ad       	ldd	r25, Y+63	; 0x3f
     2d2:	a8 97       	sbiw	r28, 0x28	; 40
     2d4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <atoi>
			turn_clockwise(sensor_data, tempDegrees);
     2d8:	bc 01       	movw	r22, r24
     2da:	aa 96       	adiw	r28, 0x2a	; 42
     2dc:	8e ad       	ldd	r24, Y+62	; 0x3e
     2de:	9f ad       	ldd	r25, Y+63	; 0x3f
     2e0:	aa 97       	sbiw	r28, 0x2a	; 42
     2e2:	cb d3       	rcall	.+1942   	; 0xa7a <turn_clockwise>
     2e4:	35 cf       	rjmp	.-406    	; 0x150 <main+0x86>
		}
		
		if(serialInput == 'l')
     2e6:	a6 96       	adiw	r28, 0x26	; 38
     2e8:	8f ad       	ldd	r24, Y+63	; 0x3f
     2ea:	a6 97       	sbiw	r28, 0x26	; 38
     2ec:	8c 36       	cpi	r24, 0x6C	; 108
     2ee:	69 f4       	brne	.+26     	; 0x30a <main+0x240>
		{
			int tempDegrees = atoi(numRecieved);
     2f0:	a8 96       	adiw	r28, 0x28	; 40
     2f2:	8e ad       	ldd	r24, Y+62	; 0x3e
     2f4:	9f ad       	ldd	r25, Y+63	; 0x3f
     2f6:	a8 97       	sbiw	r28, 0x28	; 40
     2f8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <atoi>
			turn_clockwise(sensor_data, tempDegrees);
     2fc:	bc 01       	movw	r22, r24
     2fe:	aa 96       	adiw	r28, 0x2a	; 42
     300:	8e ad       	ldd	r24, Y+62	; 0x3e
     302:	9f ad       	ldd	r25, Y+63	; 0x3f
     304:	aa 97       	sbiw	r28, 0x2a	; 42
     306:	b9 d3       	rcall	.+1906   	; 0xa7a <turn_clockwise>
     308:	23 cf       	rjmp	.-442    	; 0x150 <main+0x86>
		}
		// USART_SendString("Small Scan Complete");
		
		
		if(serialInput == 'Q')
     30a:	a6 96       	adiw	r28, 0x26	; 38
     30c:	9f ad       	ldd	r25, Y+63	; 0x3f
     30e:	a6 97       	sbiw	r28, 0x26	; 38
     310:	91 35       	cpi	r25, 0x51	; 81
     312:	09 f0       	breq	.+2      	; 0x316 <main+0x24c>
     314:	1d cf       	rjmp	.-454    	; 0x150 <main+0x86>
		{
			oi_free(sensor_data);
     316:	aa 96       	adiw	r28, 0x2a	; 42
     318:	8e ad       	ldd	r24, Y+62	; 0x3e
     31a:	9f ad       	ldd	r25, Y+63	; 0x3f
     31c:	aa 97       	sbiw	r28, 0x2a	; 42
     31e:	0a d1       	rcall	.+532    	; 0x534 <oi_free>
			return;
		}
	}
     320:	c7 59       	subi	r28, 0x97	; 151
     322:	df 4f       	sbci	r29, 0xFF	; 255
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	ef 90       	pop	r14
     33a:	df 90       	pop	r13
     33c:	cf 90       	pop	r12
     33e:	bf 90       	pop	r11
     340:	af 90       	pop	r10
     342:	9f 90       	pop	r9
     344:	8f 90       	pop	r8
     346:	7f 90       	pop	r7
     348:	6f 90       	pop	r6
     34a:	5f 90       	pop	r5
     34c:	4f 90       	pop	r4
     34e:	3f 90       	pop	r3
     350:	2f 90       	pop	r2
     352:	08 95       	ret

00000354 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     354:	de 9a       	sbi	0x1b, 6	; 27
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	95 d2       	rcall	.+1322   	; 0x884 <wait_ms>
     35a:	de 98       	cbi	0x1b, 6	; 27
     35c:	8b b3       	in	r24, 0x1b	; 27
     35e:	80 7f       	andi	r24, 0xF0	; 240
     360:	8b bb       	out	0x1b, r24	; 27
     362:	08 95       	ret

00000364 <lcd_command>:
     364:	cf 93       	push	r28
     366:	c8 2f       	mov	r28, r24
     368:	dc 98       	cbi	0x1b, 4	; 27
     36a:	8b b3       	in	r24, 0x1b	; 27
     36c:	9c 2f       	mov	r25, r28
     36e:	92 95       	swap	r25
     370:	9f 70       	andi	r25, 0x0F	; 15
     372:	89 2b       	or	r24, r25
     374:	8b bb       	out	0x1b, r24	; 27
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	ed df       	rcall	.-38     	; 0x354 <lcd_toggle_clear>
     37a:	8b b3       	in	r24, 0x1b	; 27
     37c:	cf 70       	andi	r28, 0x0F	; 15
     37e:	c8 2b       	or	r28, r24
     380:	cb bb       	out	0x1b, r28	; 27
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	e7 df       	rcall	.-50     	; 0x354 <lcd_toggle_clear>
     386:	dc 9a       	sbi	0x1b, 4	; 27
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <lcd_clear>:
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	ea df       	rcall	.-44     	; 0x364 <lcd_command>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	77 c2       	rjmp	.+1262   	; 0x884 <wait_ms>

00000396 <lcd_home_line1>:
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	e5 cf       	rjmp	.-54     	; 0x364 <lcd_command>

0000039a <lcd_init>:
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	8a bb       	out	0x1a, r24	; 26
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	8b bb       	out	0x1b, r24	; 27
     3a2:	de 9a       	sbi	0x1b, 6	; 27
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	6d d2       	rcall	.+1242   	; 0x884 <wait_ms>
     3aa:	de 98       	cbi	0x1b, 6	; 27
     3ac:	85 e0       	ldi	r24, 0x05	; 5
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	69 d2       	rcall	.+1234   	; 0x884 <wait_ms>
     3b2:	de 9a       	sbi	0x1b, 6	; 27
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	65 d2       	rcall	.+1226   	; 0x884 <wait_ms>
     3ba:	de 98       	cbi	0x1b, 6	; 27
     3bc:	de 9a       	sbi	0x1b, 6	; 27
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	60 d2       	rcall	.+1216   	; 0x884 <wait_ms>
     3c4:	de 98       	cbi	0x1b, 6	; 27
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	8b bb       	out	0x1b, r24	; 27
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	c3 df       	rcall	.-122    	; 0x354 <lcd_toggle_clear>
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	8b bb       	out	0x1b, r24	; 27
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	bf df       	rcall	.-130    	; 0x354 <lcd_toggle_clear>
     3d6:	8b b3       	in	r24, 0x1b	; 27
     3d8:	8e 60       	ori	r24, 0x0E	; 14
     3da:	8b bb       	out	0x1b, r24	; 27
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	ba df       	rcall	.-140    	; 0x354 <lcd_toggle_clear>
     3e0:	8b b3       	in	r24, 0x1b	; 27
     3e2:	8b bb       	out	0x1b, r24	; 27
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	b6 df       	rcall	.-148    	; 0x354 <lcd_toggle_clear>
     3e8:	8b b3       	in	r24, 0x1b	; 27
     3ea:	86 60       	ori	r24, 0x06	; 6
     3ec:	8b bb       	out	0x1b, r24	; 27
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	b1 df       	rcall	.-158    	; 0x354 <lcd_toggle_clear>
     3f2:	8b b3       	in	r24, 0x1b	; 27
     3f4:	8b bb       	out	0x1b, r24	; 27
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	ad df       	rcall	.-166    	; 0x354 <lcd_toggle_clear>
     3fa:	d8 9a       	sbi	0x1b, 0	; 27
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	aa df       	rcall	.-172    	; 0x354 <lcd_toggle_clear>
     400:	dc 9a       	sbi	0x1b, 4	; 27
     402:	c9 cf       	rjmp	.-110    	; 0x396 <lcd_home_line1>

00000404 <lcd_home_line2>:
     404:	80 ec       	ldi	r24, 0xC0	; 192
     406:	ae cf       	rjmp	.-164    	; 0x364 <lcd_command>

00000408 <lcd_home_line3>:
     408:	84 e9       	ldi	r24, 0x94	; 148
     40a:	ac cf       	rjmp	.-168    	; 0x364 <lcd_command>

0000040c <lcd_home_line4>:
     40c:	84 ed       	ldi	r24, 0xD4	; 212
     40e:	aa cf       	rjmp	.-172    	; 0x364 <lcd_command>

00000410 <lcd_putc>:
     410:	cf 93       	push	r28
     412:	c8 2f       	mov	r28, r24
     414:	8b b3       	in	r24, 0x1b	; 27
     416:	9c 2f       	mov	r25, r28
     418:	92 95       	swap	r25
     41a:	9f 70       	andi	r25, 0x0F	; 15
     41c:	89 2b       	or	r24, r25
     41e:	8b bb       	out	0x1b, r24	; 27
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	98 df       	rcall	.-208    	; 0x354 <lcd_toggle_clear>
     424:	8b b3       	in	r24, 0x1b	; 27
     426:	cf 70       	andi	r28, 0x0F	; 15
     428:	c8 2b       	or	r28, r24
     42a:	cb bb       	out	0x1b, r28	; 27
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	92 df       	rcall	.-220    	; 0x354 <lcd_toggle_clear>
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	c1 55       	subi	r28, 0x51	; 81
     44a:	d1 09       	sbc	r29, r1
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	fe 01       	movw	r30, r28
     458:	e4 5a       	subi	r30, 0xA4	; 164
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	41 91       	ld	r20, Z+
     45e:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     460:	2e 2f       	mov	r18, r30
     462:	3f 2f       	mov	r19, r31
     464:	61 e5       	ldi	r22, 0x51	; 81
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 96 0a 	call	0x152c	; 0x152c <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     470:	be 01       	movw	r22, r28
     472:	6f 5f       	subi	r22, 0xFF	; 255
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	86 eb       	ldi	r24, 0xB6	; 182
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <strcmp>
     47e:	28 2f       	mov	r18, r24
     480:	39 2f       	mov	r19, r25
     482:	23 2b       	or	r18, r19
     484:	09 f4       	brne	.+2      	; 0x488 <lprintf+0x54>
     486:	41 c0       	rjmp	.+130    	; 0x50a <lprintf+0xd6>
		return;
	
	strcpy(lastbuffer, buffer);
     488:	be 01       	movw	r22, r28
     48a:	6f 5f       	subi	r22, 0xFF	; 255
     48c:	7f 4f       	sbci	r23, 0xFF	; 255
     48e:	86 eb       	ldi	r24, 0xB6	; 182
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <strcpy>
	lcd_clear();
     496:	7a df       	rcall	.-268    	; 0x38c <lcd_clear>
     498:	cc 24       	eor	r12, r12
     49a:	c3 94       	inc	r12
     49c:	d1 2c       	mov	r13, r1
     49e:	cc 0e       	add	r12, r28
     4a0:	dd 1e       	adc	r13, r29
	char *str = buffer;
	int charnum = 0;
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     4a6:	0f 2e       	mov	r0, r31
     4a8:	f4 e1       	ldi	r31, 0x14	; 20
     4aa:	ef 2e       	mov	r14, r31
     4ac:	f1 2c       	mov	r15, r1
     4ae:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     4b0:	24 c0       	rjmp	.+72     	; 0x4fa <lprintf+0xc6>
		if (*str == '\n') {
     4b2:	8a 30       	cpi	r24, 0x0A	; 10
     4b4:	49 f4       	brne	.+18     	; 0x4c8 <lprintf+0x94>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     4b6:	c8 01       	movw	r24, r16
     4b8:	b7 01       	movw	r22, r14
     4ba:	45 d6       	rcall	.+3210   	; 0x1146 <__divmodhi4>
     4bc:	97 01       	movw	r18, r14
     4be:	28 1b       	sub	r18, r24
     4c0:	39 0b       	sbc	r19, r25
     4c2:	02 0f       	add	r16, r18
     4c4:	13 1f       	adc	r17, r19
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <lprintf+0x9a>
		} else {
			lcd_putc(*str);
     4c8:	a3 df       	rcall	.-186    	; 0x410 <lcd_putc>
			charnum++;
     4ca:	0f 5f       	subi	r16, 0xFF	; 255
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     4ce:	c8 01       	movw	r24, r16
     4d0:	b7 01       	movw	r22, r14
     4d2:	39 d6       	rcall	.+3186   	; 0x1146 <__divmodhi4>
     4d4:	89 2b       	or	r24, r25
     4d6:	89 f4       	brne	.+34     	; 0x4fa <lprintf+0xc6>
			switch (charnum / LCD_WIDTH) {
     4d8:	c8 01       	movw	r24, r16
     4da:	b7 01       	movw	r22, r14
     4dc:	34 d6       	rcall	.+3176   	; 0x1146 <__divmodhi4>
     4de:	62 30       	cpi	r22, 0x02	; 2
     4e0:	71 05       	cpc	r23, r1
     4e2:	41 f0       	breq	.+16     	; 0x4f4 <lprintf+0xc0>
     4e4:	63 30       	cpi	r22, 0x03	; 3
     4e6:	71 05       	cpc	r23, r1
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <lprintf+0xc4>
     4ea:	61 30       	cpi	r22, 0x01	; 1
     4ec:	71 05       	cpc	r23, r1
     4ee:	29 f4       	brne	.+10     	; 0x4fa <lprintf+0xc6>
			case 1:
				lcd_home_line2();
     4f0:	89 df       	rcall	.-238    	; 0x404 <lcd_home_line2>
				break;
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <lprintf+0xc6>
			case 2:
				lcd_home_line3();
     4f4:	89 df       	rcall	.-238    	; 0x408 <lcd_home_line3>
				break;
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <lprintf+0xc6>
			case 3:
				lcd_home_line4();
     4f8:	89 df       	rcall	.-238    	; 0x40c <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     4fa:	f6 01       	movw	r30, r12
     4fc:	81 91       	ld	r24, Z+
     4fe:	6f 01       	movw	r12, r30
     500:	88 23       	and	r24, r24
     502:	19 f0       	breq	.+6      	; 0x50a <lprintf+0xd6>
     504:	00 35       	cpi	r16, 0x50	; 80
     506:	11 05       	cpc	r17, r1
     508:	a4 f2       	brlt	.-88     	; 0x4b2 <lprintf+0x7e>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     50a:	cf 5a       	subi	r28, 0xAF	; 175
     50c:	df 4f       	sbci	r29, 0xFF	; 255
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	df 90       	pop	r13
     526:	cf 90       	pop	r12
     528:	08 95       	ret

0000052a <oi_alloc>:
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
     52a:	64 e3       	ldi	r22, 0x34	; 52
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	3c c6       	rjmp	.+3192   	; 0x11ac <calloc>

00000534 <oi_free>:
     534:	f2 c6       	rjmp	.+3556   	; 0x131a <free>
     536:	08 95       	ret

00000538 <oi_byte_tx>:
     538:	eb e9       	ldi	r30, 0x9B	; 155
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	90 81       	ld	r25, Z
     53e:	95 ff       	sbrs	r25, 5
     540:	fd cf       	rjmp	.-6      	; 0x53c <oi_byte_tx+0x4>
     542:	80 93 9c 00 	sts	0x009C, r24
     546:	08 95       	ret

00000548 <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	18 2f       	mov	r17, r24
     552:	09 2f       	mov	r16, r25
     554:	c6 2f       	mov	r28, r22
     556:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
     558:	81 e9       	ldi	r24, 0x91	; 145
     55a:	ee df       	rcall	.-36     	; 0x538 <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
     55c:	80 2f       	mov	r24, r16
     55e:	ec df       	rcall	.-40     	; 0x538 <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
     560:	81 2f       	mov	r24, r17
     562:	ea df       	rcall	.-44     	; 0x538 <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
     564:	8d 2f       	mov	r24, r29
     566:	e8 df       	rcall	.-48     	; 0x538 <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
     568:	8c 2f       	mov	r24, r28
     56a:	e6 df       	rcall	.-52     	; 0x538 <oi_byte_tx>
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	08 2f       	mov	r16, r24
     580:	16 2f       	mov	r17, r22
     582:	d4 2f       	mov	r29, r20
     584:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
     586:	8b e8       	ldi	r24, 0x8B	; 139
     588:	d7 df       	rcall	.-82     	; 0x538 <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
     58a:	11 23       	and	r17, r17
     58c:	41 f0       	breq	.+16     	; 0x59e <oi_set_leds+0x28>
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	01 11       	cpse	r16, r1
     594:	02 c0       	rjmp	.+4      	; 0x59a <oi_set_leds+0x24>
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	cb 01       	movw	r24, r22
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <oi_set_leds+0x2c>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	ca df       	rcall	.-108    	; 0x538 <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
     5a4:	8d 2f       	mov	r24, r29
     5a6:	c8 df       	rcall	.-112    	; 0x538 <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
     5a8:	8c 2f       	mov	r24, r28
     5aa:	c6 df       	rcall	.-116    	; 0x538 <oi_byte_tx>
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     5b6:	eb e9       	ldi	r30, 0x9B	; 155
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	88 23       	and	r24, r24
     5be:	ec f7       	brge	.-6      	; 0x5ba <oi_byte_rx+0x4>

	return UDR1;
     5c0:	80 91 9c 00 	lds	r24, 0x009C
}
     5c4:	08 95       	ret

000005c6 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     5d4:	80 91 9b 00 	lds	r24, 0x009B
     5d8:	88 23       	and	r24, r24
     5da:	44 f4       	brge	.+16     	; 0x5ec <oi_update+0x26>
		i = UDR1;
     5dc:	ac e9       	ldi	r26, 0x9C	; 156
     5de:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     5e0:	eb e9       	ldi	r30, 0x9B	; 155
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     5e4:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     5e6:	80 81       	ld	r24, Z
     5e8:	88 23       	and	r24, r24
     5ea:	e4 f3       	brlt	.-8      	; 0x5e4 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     5ec:	8e e8       	ldi	r24, 0x8E	; 142
     5ee:	a4 df       	rcall	.-184    	; 0x538 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     5f0:	86 e0       	ldi	r24, 0x06	; 6
     5f2:	a2 df       	rcall	.-188    	; 0x538 <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     5f4:	87 01       	movw	r16, r14
     5f6:	0c 5c       	subi	r16, 0xCC	; 204
     5f8:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
     5fa:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     5fc:	dc df       	rcall	.-72     	; 0x5b6 <oi_byte_rx>
     5fe:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     600:	c0 17       	cp	r28, r16
     602:	d1 07       	cpc	r29, r17
     604:	d9 f7       	brne	.-10     	; 0x5fc <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     606:	f7 01       	movw	r30, r14
     608:	94 85       	ldd	r25, Z+12	; 0x0c
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	25 85       	ldd	r18, Z+13	; 0x0d
     60e:	82 0f       	add	r24, r18
     610:	91 1d       	adc	r25, r1
     612:	95 87       	std	Z+13, r25	; 0x0d
     614:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     616:	96 85       	ldd	r25, Z+14	; 0x0e
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	27 85       	ldd	r18, Z+15	; 0x0f
     61c:	82 0f       	add	r24, r18
     61e:	91 1d       	adc	r25, r1
     620:	97 87       	std	Z+15, r25	; 0x0f
     622:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     624:	91 89       	ldd	r25, Z+17	; 0x11
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	22 89       	ldd	r18, Z+18	; 0x12
     62a:	82 0f       	add	r24, r18
     62c:	91 1d       	adc	r25, r1
     62e:	92 8b       	std	Z+18, r25	; 0x12
     630:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     632:	93 89       	ldd	r25, Z+19	; 0x13
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	24 89       	ldd	r18, Z+20	; 0x14
     638:	82 0f       	add	r24, r18
     63a:	91 1d       	adc	r25, r1
     63c:	94 8b       	std	Z+20, r25	; 0x14
     63e:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     640:	96 89       	ldd	r25, Z+22	; 0x16
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	27 89       	ldd	r18, Z+23	; 0x17
     646:	82 0f       	add	r24, r18
     648:	91 1d       	adc	r25, r1
     64a:	97 8b       	std	Z+23, r25	; 0x17
     64c:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     64e:	90 8d       	ldd	r25, Z+24	; 0x18
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	21 8d       	ldd	r18, Z+25	; 0x19
     654:	82 0f       	add	r24, r18
     656:	91 1d       	adc	r25, r1
     658:	91 8f       	std	Z+25, r25	; 0x19
     65a:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     65c:	92 8d       	ldd	r25, Z+26	; 0x1a
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	23 8d       	ldd	r18, Z+27	; 0x1b
     662:	82 0f       	add	r24, r18
     664:	91 1d       	adc	r25, r1
     666:	93 8f       	std	Z+27, r25	; 0x1b
     668:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     66a:	94 8d       	ldd	r25, Z+28	; 0x1c
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	25 8d       	ldd	r18, Z+29	; 0x1d
     670:	82 0f       	add	r24, r18
     672:	91 1d       	adc	r25, r1
     674:	95 8f       	std	Z+29, r25	; 0x1d
     676:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     678:	96 8d       	ldd	r25, Z+30	; 0x1e
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	27 8d       	ldd	r18, Z+31	; 0x1f
     67e:	82 0f       	add	r24, r18
     680:	91 1d       	adc	r25, r1
     682:	97 8f       	std	Z+31, r25	; 0x1f
     684:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     686:	90 a1       	ldd	r25, Z+32	; 0x20
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	21 a1       	ldd	r18, Z+33	; 0x21
     68c:	82 0f       	add	r24, r18
     68e:	91 1d       	adc	r25, r1
     690:	91 a3       	std	Z+33, r25	; 0x21
     692:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     694:	92 a1       	ldd	r25, Z+34	; 0x22
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	23 a1       	ldd	r18, Z+35	; 0x23
     69a:	82 0f       	add	r24, r18
     69c:	91 1d       	adc	r25, r1
     69e:	93 a3       	std	Z+35, r25	; 0x23
     6a0:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     6a2:	42 a5       	ldd	r20, Z+42	; 0x2a
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	31 a5       	ldd	r19, Z+41	; 0x29
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	24 0f       	add	r18, r20
     6ac:	35 1f       	adc	r19, r21
     6ae:	36 a3       	std	Z+38, r19	; 0x26
     6b0:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     6b2:	90 a9       	ldd	r25, Z+48	; 0x30
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	84 0f       	add	r24, r20
     6b8:	95 1f       	adc	r25, r21
     6ba:	95 a7       	std	Z+45, r25	; 0x2d
     6bc:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     6be:	92 a9       	ldd	r25, Z+50	; 0x32
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	23 a9       	ldd	r18, Z+51	; 0x33
     6c4:	82 0f       	add	r24, r18
     6c6:	91 1d       	adc	r25, r1
     6c8:	97 a7       	std	Z+47, r25	; 0x2f
     6ca:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     6cc:	94 a9       	ldd	r25, Z+52	; 0x34
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	25 a9       	ldd	r18, Z+53	; 0x35
     6d2:	82 0f       	add	r24, r18
     6d4:	91 1d       	adc	r25, r1
     6d6:	91 ab       	std	Z+49, r25	; 0x31
     6d8:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     6da:	96 a9       	ldd	r25, Z+54	; 0x36
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	27 a9       	ldd	r18, Z+55	; 0x37
     6e0:	82 0f       	add	r24, r18
     6e2:	91 1d       	adc	r25, r1
     6e4:	93 ab       	std	Z+51, r25	; 0x33
     6e6:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     6e8:	83 e2       	ldi	r24, 0x23	; 35
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	cb d0       	rcall	.+406    	; 0x884 <wait_ms>
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	08 95       	ret

000006fc <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     706:	09 e9       	ldi	r16, 0x99	; 153
     708:	10 e0       	ldi	r17, 0x00	; 0
     70a:	80 e1       	ldi	r24, 0x10	; 16
     70c:	f8 01       	movw	r30, r16
     70e:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     710:	88 e1       	ldi	r24, 0x18	; 24
     712:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     716:	86 e0       	ldi	r24, 0x06	; 6
     718:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     71c:	80 e8       	ldi	r24, 0x80	; 128
     71e:	0c df       	rcall	.-488    	; 0x538 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     720:	81 e8       	ldi	r24, 0x81	; 129
     722:	0a df       	rcall	.-492    	; 0x538 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     724:	88 e0       	ldi	r24, 0x08	; 8
     726:	08 df       	rcall	.-496    	; 0x538 <oi_byte_tx>
	wait_ms(100);
     728:	84 e6       	ldi	r24, 0x64	; 100
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	ab d0       	rcall	.+342    	; 0x884 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     72e:	81 e2       	ldi	r24, 0x21	; 33
     730:	f8 01       	movw	r30, r16
     732:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     734:	84 e8       	ldi	r24, 0x84	; 132
     736:	00 df       	rcall	.-512    	; 0x538 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     738:	2f ef       	ldi	r18, 0xFF	; 255
     73a:	47 e0       	ldi	r20, 0x07	; 7
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	1a df       	rcall	.-460    	; 0x576 <oi_set_leds>
	
	oi_update(self);
     742:	ce 01       	movw	r24, r28
     744:	40 df       	rcall	.-384    	; 0x5c6 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     746:	ce 01       	movw	r24, r28
     748:	3e df       	rcall	.-388    	; 0x5c6 <oi_update>
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <serial_init>:

	// WAS 51
	baud = (F_CPU/8/baud)-1;
	
	/* Set baud rate */ 
	UBRR0H = (unsigned char) (baud >> 8); 
     754:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char) baud; 
     758:	81 e2       	ldi	r24, 0x21	; 33
     75a:	89 b9       	out	0x09, r24	; 9
	
	/* Enable double speed mode */ 
	UCSR0A = 0b00000010; 
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	8b b9       	out	0x0b, r24	; 11
	
	/* Set frame format: 8 data bits, 2 stop bits */ 
	UCSR0C = 0b00001110; 
     760:	8e e0       	ldi	r24, 0x0E	; 14
     762:	80 93 95 00 	sts	0x0095, r24
	
	/* Enable receiver and transmitter */ 
	UCSR0B = 0b00011000;
     766:	88 e1       	ldi	r24, 0x18	; 24
     768:	8a b9       	out	0x0a, r24	; 10
     76a:	08 95       	ret

0000076c <USART_Transmit>:
}


void USART_Transmit( char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & 0b00100000) );
     76c:	5d 9b       	sbis	0x0b, 5	; 11
     76e:	fe cf       	rjmp	.-4      	; 0x76c <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     770:	8c b9       	out	0x0c, r24	; 12
     772:	08 95       	ret

00000774 <USART_Receive>:

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	//while ( !(UCSR1A & (1<<RXC1)) )
	if((UCSR0A & 0b10000000))
     774:	5f 9b       	sbis	0x0b, 7	; 11
     776:	02 c0       	rjmp	.+4      	; 0x77c <USART_Receive+0x8>
	{
			return UDR0;
     778:	8c b1       	in	r24, 0x0c	; 12
     77a:	08 95       	ret
	}
	/* Get and return received data from buffer */
	else
	{
		return 0;
     77c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     77e:	08 95       	ret

00000780 <USART_RecieveString>:

char* USART_RecieveString(int count)
{
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	29 97       	sbiw	r28, 0x09	; 9
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	
	//String to return
	char receivedVars[9];
			
	//iterate through to get string		
	for(int i = 0; i < count; i++)
     79c:	18 16       	cp	r1, r24
     79e:	19 06       	cpc	r1, r25
     7a0:	6c f4       	brge	.+26     	; 0x7bc <USART_RecieveString+0x3c>
     7a2:	8e 01       	movw	r16, r28
     7a4:	0f 5f       	subi	r16, 0xFF	; 255
     7a6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		return 0;
	}
}

char* USART_RecieveString(int count)
     7a8:	78 01       	movw	r14, r16
     7aa:	e8 0e       	add	r14, r24
     7ac:	f9 1e       	adc	r15, r25
	char receivedVars[9];
			
	//iterate through to get string		
	for(int i = 0; i < count; i++)
	{
		receivedVars[i] = USART_Receive();
     7ae:	e2 df       	rcall	.-60     	; 0x774 <USART_Receive>
     7b0:	f8 01       	movw	r30, r16
     7b2:	81 93       	st	Z+, r24
     7b4:	8f 01       	movw	r16, r30
	
	//String to return
	char receivedVars[9];
			
	//iterate through to get string		
	for(int i = 0; i < count; i++)
     7b6:	ee 15       	cp	r30, r14
     7b8:	ff 05       	cpc	r31, r15
     7ba:	c9 f7       	brne	.-14     	; 0x7ae <USART_RecieveString+0x2e>
	}
	
	//return string
	return receivedVars;
	
}
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	29 96       	adiw	r28, 0x09	; 9
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	08 95       	ret

000007da <USART_SendString>:


void USART_SendString(char SentString[])
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	c8 2f       	mov	r28, r24
     7e0:	d9 2f       	mov	r29, r25
	char flag = 1;
	int i = 0;
	while(flag)
	{
		if(SentString[i])
     7e2:	89 91       	ld	r24, Y+
     7e4:	88 23       	and	r24, r24
     7e6:	11 f0       	breq	.+4      	; 0x7ec <USART_SendString+0x12>
		{
			USART_Transmit(SentString[i]);
     7e8:	c1 df       	rcall	.-126    	; 0x76c <USART_Transmit>
     7ea:	fb cf       	rjmp	.-10     	; 0x7e2 <USART_SendString+0x8>
		}
		else
		{
			flag = 0;
			USART_Transmit(10);
     7ec:	8a e0       	ldi	r24, 0x0A	; 10
     7ee:	be df       	rcall	.-132    	; 0x76c <USART_Transmit>
			USART_Transmit(13);
     7f0:	8d e0       	ldi	r24, 0x0D	; 13
     7f2:	bc df       	rcall	.-136    	; 0x76c <USART_Transmit>
		}
		i++;
	}
	
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <ADC_init>:
			return n+1;
		}
	}
	
	return 0;
}
     7fa:	37 9a       	sbi	0x06, 7	; 6
     7fc:	86 b1       	in	r24, 0x06	; 6
     7fe:	87 60       	ori	r24, 0x07	; 7
     800:	86 b9       	out	0x06, r24	; 6
     802:	87 b1       	in	r24, 0x07	; 7
     804:	80 6c       	ori	r24, 0xC0	; 192
     806:	87 b9       	out	0x07, r24	; 7
     808:	08 95       	ret

0000080a <ADC_read>:
     80a:	97 b1       	in	r25, 0x07	; 7
     80c:	8f 71       	andi	r24, 0x1F	; 31
     80e:	98 2b       	or	r25, r24
     810:	97 b9       	out	0x07, r25	; 7
     812:	36 9a       	sbi	0x06, 6	; 6
     814:	36 99       	sbic	0x06, 6	; 6
     816:	fe cf       	rjmp	.-4      	; 0x814 <ADC_read+0xa>
     818:	24 b1       	in	r18, 0x04	; 4
     81a:	35 b1       	in	r19, 0x05	; 5
     81c:	82 2f       	mov	r24, r18
     81e:	93 2f       	mov	r25, r19
     820:	08 95       	ret

00000822 <calcCm>:
     822:	bc 01       	movw	r22, r24
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	9d d3       	rcall	.+1850   	; 0xf64 <__floatunsisf>
     82a:	2a e9       	ldi	r18, 0x9A	; 154
     82c:	39 e9       	ldi	r19, 0x99	; 153
     82e:	49 e7       	ldi	r20, 0x79	; 121
     830:	50 e4       	ldi	r21, 0x40	; 64
     832:	26 d4       	rcall	.+2124   	; 0x1080 <__mulsf3>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 ea       	ldi	r20, 0xA0	; 160
     83a:	50 e4       	ldi	r21, 0x40	; 64
     83c:	9b d2       	rcall	.+1334   	; 0xd74 <__addsf3>
     83e:	9b 01       	movw	r18, r22
     840:	ac 01       	movw	r20, r24
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 eb       	ldi	r23, 0xB0	; 176
     846:	83 e3       	ldi	r24, 0x33	; 51
     848:	97 e4       	ldi	r25, 0x47	; 71
     84a:	f8 c2       	rjmp	.+1520   	; 0xe3c <__divsf3>

0000084c <timer2_start>:
     84c:	10 92 0c 02 	sts	0x020C, r1
     850:	10 92 0b 02 	sts	0x020B, r1
     854:	81 11       	cpse	r24, r1
     856:	06 c0       	rjmp	.+12     	; 0x864 <timer2_start+0x18>
     858:	8b e0       	ldi	r24, 0x0B	; 11
     85a:	85 bd       	out	0x25, r24	; 37
     85c:	87 b7       	in	r24, 0x37	; 55
     85e:	80 68       	ori	r24, 0x80	; 128
     860:	87 bf       	out	0x37, r24	; 55
     862:	07 c0       	rjmp	.+14     	; 0x872 <timer2_start+0x26>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	29 f4       	brne	.+10     	; 0x872 <timer2_start+0x26>
     868:	89 e0       	ldi	r24, 0x09	; 9
     86a:	85 bd       	out	0x25, r24	; 37
     86c:	87 b7       	in	r24, 0x37	; 55
     86e:	80 68       	ori	r24, 0x80	; 128
     870:	87 bf       	out	0x37, r24	; 55
     872:	78 94       	sei
     874:	08 95       	ret

00000876 <timer2_stop>:
     876:	87 b7       	in	r24, 0x37	; 55
     878:	8f 77       	andi	r24, 0x7F	; 127
     87a:	87 bf       	out	0x37, r24	; 55
     87c:	85 b5       	in	r24, 0x25	; 37
     87e:	8f 77       	andi	r24, 0x7F	; 127
     880:	85 bd       	out	0x25, r24	; 37
     882:	08 95       	ret

00000884 <wait_ms>:
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	8a ef       	ldi	r24, 0xFA	; 250
     88c:	83 bd       	out	0x23, r24	; 35
     88e:	10 92 0c 02 	sts	0x020C, r1
     892:	10 92 0b 02 	sts	0x020B, r1
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	d9 df       	rcall	.-78     	; 0x84c <timer2_start>
     89a:	20 91 0b 02 	lds	r18, 0x020B
     89e:	30 91 0c 02 	lds	r19, 0x020C
     8a2:	2c 17       	cp	r18, r28
     8a4:	3d 07       	cpc	r19, r29
     8a6:	c8 f3       	brcs	.-14     	; 0x89a <wait_ms+0x16>
     8a8:	e6 df       	rcall	.-52     	; 0x876 <timer2_stop>
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <__vector_9>:
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	80 91 0b 02 	lds	r24, 0x020B
     8c2:	90 91 0c 02 	lds	r25, 0x020C
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	90 93 0c 02 	sts	0x020C, r25
     8cc:	80 93 0b 02 	sts	0x020B, r24
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <init_push_buttons>:
     8de:	84 b3       	in	r24, 0x14	; 20
     8e0:	80 7c       	andi	r24, 0xC0	; 192
     8e2:	84 bb       	out	0x14, r24	; 20
     8e4:	85 b3       	in	r24, 0x15	; 21
     8e6:	8f 63       	ori	r24, 0x3F	; 63
     8e8:	85 bb       	out	0x15, r24	; 21
     8ea:	08 95       	ret

000008ec <ping_init>:
     8ec:	1f bc       	out	0x2f, r1	; 47
     8ee:	84 ec       	ldi	r24, 0xC4	; 196
     8f0:	8e bd       	out	0x2e, r24	; 46
     8f2:	17 be       	out	0x37, r1	; 55
     8f4:	08 95       	ret

000008f6 <__vector_11>:
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	86 b5       	in	r24, 0x26	; 38
     90a:	97 b5       	in	r25, 0x27	; 39
     90c:	90 93 0a 02 	sts	0x020A, r25
     910:	80 93 09 02 	sts	0x0209, r24
     914:	20 91 07 02 	lds	r18, 0x0207
     918:	30 91 08 02 	lds	r19, 0x0208
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	23 2b       	or	r18, r19
     922:	11 f0       	breq	.+4      	; 0x928 <__vector_11+0x32>
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	90 93 08 02 	sts	0x0208, r25
     92c:	80 93 07 02 	sts	0x0207, r24
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <send_pulse>:
     942:	8c 9a       	sbi	0x11, 4	; 17
     944:	94 9a       	sbi	0x12, 4	; 18
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	9c df       	rcall	.-200    	; 0x884 <wait_ms>
     94c:	94 98       	cbi	0x12, 4	; 18
     94e:	8c 98       	cbi	0x11, 4	; 17
     950:	08 95       	ret

00000952 <time2dist>:
     952:	bc 01       	movw	r22, r24
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	05 d3       	rcall	.+1546   	; 0xf64 <__floatunsisf>
     95a:	22 ef       	ldi	r18, 0xF2	; 242
     95c:	32 ed       	ldi	r19, 0xD2	; 210
     95e:	4d e8       	ldi	r20, 0x8D	; 141
     960:	5e e3       	ldi	r21, 0x3E	; 62
     962:	8e d3       	rcall	.+1820   	; 0x1080 <__mulsf3>
     964:	20 e5       	ldi	r18, 0x50	; 80
     966:	3d e8       	ldi	r19, 0x8D	; 141
     968:	4f ef       	ldi	r20, 0xFF	; 255
     96a:	51 e4       	ldi	r21, 0x41	; 65
     96c:	02 c2       	rjmp	.+1028   	; 0xd72 <__subsf3>

0000096e <ping_read>:
     96e:	e9 df       	rcall	.-46     	; 0x942 <send_pulse>
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	87 bf       	out	0x37, r24	; 55
     974:	80 91 07 02 	lds	r24, 0x0207
     978:	90 91 08 02 	lds	r25, 0x0208
     97c:	89 2b       	or	r24, r25
     97e:	d1 f7       	brne	.-12     	; 0x974 <ping_read+0x6>
     980:	84 e8       	ldi	r24, 0x84	; 132
     982:	8e bd       	out	0x2e, r24	; 46
     984:	20 91 09 02 	lds	r18, 0x0209
     988:	30 91 0a 02 	lds	r19, 0x020A
     98c:	80 91 07 02 	lds	r24, 0x0207
     990:	90 91 08 02 	lds	r25, 0x0208
     994:	89 2b       	or	r24, r25
     996:	d1 f3       	breq	.-12     	; 0x98c <ping_read+0x1e>
     998:	84 ec       	ldi	r24, 0xC4	; 196
     99a:	8e bd       	out	0x2e, r24	; 46
     99c:	80 91 09 02 	lds	r24, 0x0209
     9a0:	90 91 0a 02 	lds	r25, 0x020A
     9a4:	17 be       	out	0x37, r1	; 55
     9a6:	82 1b       	sub	r24, r18
     9a8:	93 0b       	sbc	r25, r19
     9aa:	d3 cf       	rjmp	.-90     	; 0x952 <time2dist>

000009ac <servo_turn>:
     9ac:	bc 01       	movw	r22, r24
     9ae:	88 27       	eor	r24, r24
     9b0:	77 fd       	sbrc	r23, 7
     9b2:	80 95       	com	r24
     9b4:	98 2f       	mov	r25, r24
     9b6:	d8 d2       	rcall	.+1456   	; 0xf68 <__floatsisf>
     9b8:	2b e3       	ldi	r18, 0x3B	; 59
     9ba:	3a ea       	ldi	r19, 0xAA	; 170
     9bc:	4a e1       	ldi	r20, 0x1A	; 26
     9be:	5c e3       	ldi	r21, 0x3C	; 60
     9c0:	5f d3       	rcall	.+1726   	; 0x1080 <__mulsf3>
     9c2:	28 e4       	ldi	r18, 0x48	; 72
     9c4:	31 ee       	ldi	r19, 0xE1	; 225
     9c6:	4a ef       	ldi	r20, 0xFA	; 250
     9c8:	5e e3       	ldi	r21, 0x3E	; 62
     9ca:	d4 d1       	rcall	.+936    	; 0xd74 <__addsf3>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	4a e7       	ldi	r20, 0x7A	; 122
     9d2:	53 e4       	ldi	r21, 0x43	; 67
     9d4:	55 d3       	rcall	.+1706   	; 0x1080 <__mulsf3>
     9d6:	9a d2       	rcall	.+1332   	; 0xf0c <__fixunssfsi>
     9d8:	61 50       	subi	r22, 0x01	; 1
     9da:	71 09       	sbc	r23, r1
     9dc:	70 93 85 00 	sts	0x0085, r23
     9e0:	60 93 84 00 	sts	0x0084, r22
     9e4:	84 e1       	ldi	r24, 0x14	; 20
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	4d cf       	rjmp	.-358    	; 0x884 <wait_ms>

000009ea <timer3_init>:
     9ea:	83 ec       	ldi	r24, 0xC3	; 195
     9ec:	99 e0       	ldi	r25, 0x09	; 9
     9ee:	90 93 87 00 	sts	0x0087, r25
     9f2:	80 93 86 00 	sts	0x0086, r24
     9f6:	80 e5       	ldi	r24, 0x50	; 80
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	90 93 85 00 	sts	0x0085, r25
     9fe:	80 93 84 00 	sts	0x0084, r24
     a02:	83 e2       	ldi	r24, 0x23	; 35
     a04:	80 93 8b 00 	sts	0x008B, r24
     a08:	8b e1       	ldi	r24, 0x1B	; 27
     a0a:	80 93 8a 00 	sts	0x008A, r24
     a0e:	14 9a       	sbi	0x02, 4	; 2
     a10:	08 95       	ret

00000a12 <move_backward>:

}


void move_backward(oi_t *sensor, int centimeters)
{
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	8c 01       	movw	r16, r24
     a20:	d6 2f       	mov	r29, r22
     a22:	c7 2f       	mov	r28, r23
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
     a24:	68 e3       	ldi	r22, 0x38	; 56
     a26:	7f ef       	ldi	r23, 0xFF	; 255
     a28:	88 e3       	ldi	r24, 0x38	; 56
     a2a:	9f ef       	ldi	r25, 0xFF	; 255
     a2c:	8d dd       	rcall	.-1254   	; 0x548 <oi_set_wheels>
	while (sum < centimeters*10) {
     a2e:	ed 2e       	mov	r14, r29
     a30:	fc 2e       	mov	r15, r28
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	c7 01       	movw	r24, r14
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	e8 0e       	add	r14, r24
     a42:	f9 1e       	adc	r15, r25
     a44:	1e 14       	cp	r1, r14
     a46:	1f 04       	cpc	r1, r15
     a48:	64 f4       	brge	.+24     	; 0xa62 <move_backward+0x50>
}


void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     a4a:	c0 e0       	ldi	r28, 0x00	; 0
     a4c:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
		oi_update(sensor);
     a4e:	c8 01       	movw	r24, r16
     a50:	ba dd       	rcall	.-1164   	; 0x5c6 <oi_update>
		sum -= sensor->distance;
     a52:	f8 01       	movw	r30, r16
     a54:	84 85       	ldd	r24, Z+12	; 0x0c
     a56:	95 85       	ldd	r25, Z+13	; 0x0d
     a58:	c8 1b       	sub	r28, r24
     a5a:	d9 0b       	sbc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
     a5c:	ce 15       	cp	r28, r14
     a5e:	df 05       	cpc	r29, r15
     a60:	b4 f3       	brlt	.-20     	; 0xa4e <move_backward+0x3c>
		oi_update(sensor);
		sum -= sensor->distance;
	}

	oi_set_wheels(0, 0); // stop
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	6e dd       	rcall	.-1316   	; 0x548 <oi_set_wheels>
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	08 95       	ret

00000a7a <turn_clockwise>:

void turn_clockwise(oi_t *sensor, int degrees)
{
     a7a:	6f 92       	push	r6
     a7c:	7f 92       	push	r7
     a7e:	8f 92       	push	r8
     a80:	9f 92       	push	r9
     a82:	af 92       	push	r10
     a84:	bf 92       	push	r11
     a86:	cf 92       	push	r12
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	64 97       	sbiw	r28, 0x14	; 20
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	5c 01       	movw	r10, r24
     aa8:	6b 01       	movw	r12, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-200, 200);
     aaa:	68 ec       	ldi	r22, 0xC8	; 200
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	88 e3       	ldi	r24, 0x38	; 56
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	4a dd       	rcall	.-1388   	; 0x548 <oi_set_wheels>
	while (sum < degrees-12) {
     ab4:	46 01       	movw	r8, r12
     ab6:	8c e0       	ldi	r24, 0x0C	; 12
     ab8:	88 1a       	sub	r8, r24
     aba:	91 08       	sbc	r9, r1
     abc:	18 14       	cp	r1, r8
     abe:	19 04       	cpc	r1, r9
     ac0:	24 f5       	brge	.+72     	; 0xb0a <turn_clockwise+0x90>
	oi_set_wheels(0, 0); // stop
}

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     ac2:	e1 2c       	mov	r14, r1
     ac4:	f1 2c       	mov	r15, r1
	oi_set_wheels(-200, 200);
	while (sum < degrees-12) {
		oi_update(sensor);
		sum -= sensor->angle;
		
		sprintf(outputString, "Turned %f degrees clockwise", degrees);
     ac6:	0f 2e       	mov	r0, r31
     ac8:	f3 e1       	ldi	r31, 0x13	; 19
     aca:	6f 2e       	mov	r6, r31
     acc:	f1 e0       	ldi	r31, 0x01	; 1
     ace:	7f 2e       	mov	r7, r31
     ad0:	f0 2d       	mov	r31, r0
     ad2:	8e 01       	movw	r16, r28
     ad4:	0f 5f       	subi	r16, 0xFF	; 255
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-200, 200);
	while (sum < degrees-12) {
		oi_update(sensor);
     ad8:	c5 01       	movw	r24, r10
     ada:	75 dd       	rcall	.-1302   	; 0x5c6 <oi_update>
		sum -= sensor->angle;
     adc:	f5 01       	movw	r30, r10
     ade:	86 85       	ldd	r24, Z+14	; 0x0e
     ae0:	97 85       	ldd	r25, Z+15	; 0x0f
     ae2:	e8 1a       	sub	r14, r24
     ae4:	f9 0a       	sbc	r15, r25
		
		sprintf(outputString, "Turned %f degrees clockwise", degrees);
     ae6:	df 92       	push	r13
     ae8:	cf 92       	push	r12
     aea:	7f 92       	push	r7
     aec:	6f 92       	push	r6
     aee:	1f 93       	push	r17
     af0:	0f 93       	push	r16
     af2:	ee d4       	rcall	.+2524   	; 0x14d0 <sprintf>
		
		USART_SendString(outputString);
     af4:	c8 01       	movw	r24, r16
     af6:	71 de       	rcall	.-798    	; 0x7da <USART_SendString>
void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-200, 200);
	while (sum < degrees-12) {
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	e8 14       	cp	r14, r8
     b06:	f9 04       	cpc	r15, r9
     b08:	3c f3       	brlt	.-50     	; 0xad8 <turn_clockwise+0x5e>
		sprintf(outputString, "Turned %f degrees clockwise", degrees);
		
		USART_SendString(outputString);

	}
	oi_set_wheels(0, 0); // stop
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	1a dd       	rcall	.-1484   	; 0x548 <oi_set_wheels>
}
     b14:	64 96       	adiw	r28, 0x14	; 20
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	bf 90       	pop	r11
     b32:	af 90       	pop	r10
     b34:	9f 90       	pop	r9
     b36:	8f 90       	pop	r8
     b38:	7f 90       	pop	r7
     b3a:	6f 90       	pop	r6
     b3c:	08 95       	ret

00000b3e <turn_counterclockwise>:

void turn_counterclockwise(oi_t *sensor, int degrees)
{
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	64 97       	sbiw	r28, 0x14	; 20
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	5c 01       	movw	r10, r24
     b6c:	6b 01       	movw	r12, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(200, -200);
     b6e:	68 e3       	ldi	r22, 0x38	; 56
     b70:	7f ef       	ldi	r23, 0xFF	; 255
     b72:	88 ec       	ldi	r24, 0xC8	; 200
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	e8 dc       	rcall	.-1584   	; 0x548 <oi_set_wheels>
	while (sum < degrees-12) {
     b78:	46 01       	movw	r8, r12
     b7a:	8c e0       	ldi	r24, 0x0C	; 12
     b7c:	88 1a       	sub	r8, r24
     b7e:	91 08       	sbc	r9, r1
     b80:	18 14       	cp	r1, r8
     b82:	19 04       	cpc	r1, r9
     b84:	24 f5       	brge	.+72     	; 0xbce <turn_counterclockwise+0x90>
	oi_set_wheels(0, 0); // stop
}

void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     b86:	e1 2c       	mov	r14, r1
     b88:	f1 2c       	mov	r15, r1
	oi_set_wheels(200, -200);
	while (sum < degrees-12) {
		oi_update(sensor);
		sum += sensor->angle; //maybe
		
		sprintf(outputString, "Turned %f degrees counterclockwise", degrees);
     b8a:	0f 2e       	mov	r0, r31
     b8c:	ff e2       	ldi	r31, 0x2F	; 47
     b8e:	6f 2e       	mov	r6, r31
     b90:	f1 e0       	ldi	r31, 0x01	; 1
     b92:	7f 2e       	mov	r7, r31
     b94:	f0 2d       	mov	r31, r0
     b96:	8e 01       	movw	r16, r28
     b98:	0f 5f       	subi	r16, 0xFF	; 255
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(200, -200);
	while (sum < degrees-12) {
		oi_update(sensor);
     b9c:	c5 01       	movw	r24, r10
     b9e:	13 dd       	rcall	.-1498   	; 0x5c6 <oi_update>
		sum += sensor->angle; //maybe
     ba0:	f5 01       	movw	r30, r10
     ba2:	86 85       	ldd	r24, Z+14	; 0x0e
     ba4:	97 85       	ldd	r25, Z+15	; 0x0f
     ba6:	e8 0e       	add	r14, r24
     ba8:	f9 1e       	adc	r15, r25
		
		sprintf(outputString, "Turned %f degrees counterclockwise", degrees);
     baa:	df 92       	push	r13
     bac:	cf 92       	push	r12
     bae:	7f 92       	push	r7
     bb0:	6f 92       	push	r6
     bb2:	1f 93       	push	r17
     bb4:	0f 93       	push	r16
     bb6:	8c d4       	rcall	.+2328   	; 0x14d0 <sprintf>
		
		USART_SendString(outputString);
     bb8:	c8 01       	movw	r24, r16
     bba:	0f de       	rcall	.-994    	; 0x7da <USART_SendString>
void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(200, -200);
	while (sum < degrees-12) {
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	e8 14       	cp	r14, r8
     bca:	f9 04       	cpc	r15, r9
     bcc:	3c f3       	brlt	.-50     	; 0xb9c <turn_counterclockwise+0x5e>
		sprintf(outputString, "Turned %f degrees counterclockwise", degrees);
		
		USART_SendString(outputString);

	}
	oi_set_wheels(0, 0); // stop
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	b8 dc       	rcall	.-1680   	; 0x548 <oi_set_wheels>
}
     bd8:	64 96       	adiw	r28, 0x14	; 20
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	8f 90       	pop	r8
     bfc:	7f 90       	pop	r7
     bfe:	6f 90       	pop	r6
     c00:	08 95       	ret

00000c02 <move_forward>:
}

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	64 97       	sbiw	r28, 0x14	; 20
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	8c 01       	movw	r16, r24
     c20:	e6 2e       	mov	r14, r22
     c22:	f7 2e       	mov	r15, r23
	int sum = 0;
	int dist = 0;
	int new_dist = 0;
	char outputString[20];
	oi_set_wheels(150, 150); // move forward
     c24:	66 e9       	ldi	r22, 0x96	; 150
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	86 e9       	ldi	r24, 0x96	; 150
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	8d dc       	rcall	.-1766   	; 0x548 <oi_set_wheels>

	while (sum < centimeters*10)
     c2e:	8e 2d       	mov	r24, r14
     c30:	9f 2d       	mov	r25, r15
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	9c 01       	movw	r18, r24
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	22 0f       	add	r18, r18
     c3e:	33 1f       	adc	r19, r19
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	18 16       	cp	r1, r24
     c46:	19 06       	cpc	r1, r25
     c48:	0c f0       	brlt	.+2      	; 0xc4c <move_forward+0x4a>
     c4a:	6b c0       	rjmp	.+214    	; 0xd22 <move_forward+0x120>
	{
		oi_update(sensor);
     c4c:	c8 01       	movw	r24, r16
     c4e:	bb dc       	rcall	.-1674   	; 0x5c6 <oi_update>
		sum += sensor->distance;

		if(sensor->bumper_left)
     c50:	f8 01       	movw	r30, r16
     c52:	40 81       	ld	r20, Z
     c54:	41 ff       	sbrs	r20, 1
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <move_forward+0x7a>
		{
			oi_set_wheels(0, 0); // stop
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	73 dc       	rcall	.-1818   	; 0x548 <oi_set_wheels>

			move_backward(sensor,10);
     c62:	6a e0       	ldi	r22, 0x0A	; 10
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	c8 01       	movw	r24, r16
     c68:	d4 de       	rcall	.-600    	; 0xa12 <move_backward>
			turn_clockwise(sensor,45);
     c6a:	6d e2       	ldi	r22, 0x2D	; 45
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	c8 01       	movw	r24, r16
     c70:	04 df       	rcall	.-504    	; 0xa7a <turn_clockwise>

			USART_SendString("Left Bumper Triggered"); //
     c72:	82 e5       	ldi	r24, 0x52	; 82
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	b1 dd       	rcall	.-1182   	; 0x7da <USART_SendString>
			return 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	6e c0       	rjmp	.+220    	; 0xd58 <move_forward+0x156>
		}
		else if(sensor->bumper_right)
     c7c:	40 ff       	sbrs	r20, 0
     c7e:	12 c0       	rjmp	.+36     	; 0xca4 <move_forward+0xa2>
		{
			oi_set_wheels(0, 0); // stop
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	5f dc       	rcall	.-1858   	; 0x548 <oi_set_wheels>

			move_backward(sensor,10);
     c8a:	6a e0       	ldi	r22, 0x0A	; 10
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	c8 01       	movw	r24, r16
     c90:	c0 de       	rcall	.-640    	; 0xa12 <move_backward>
			turn_counterclockwise(sensor,45);
     c92:	6d e2       	ldi	r22, 0x2D	; 45
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	c8 01       	movw	r24, r16
     c98:	52 df       	rcall	.-348    	; 0xb3e <turn_counterclockwise>

			USART_SendString("Right Bumper Triggered");
     c9a:	88 e6       	ldi	r24, 0x68	; 104
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	9d dd       	rcall	.-1222   	; 0x7da <USART_SendString>
			return 2;
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	5a c0       	rjmp	.+180    	; 0xd58 <move_forward+0x156>
		}
		if((sensor->cliff_frontleft_signal > 550) || (sensor->cliff_frontright_signal > 450))
     ca4:	f8 01       	movw	r30, r16
     ca6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ca8:	97 8d       	ldd	r25, Z+31	; 0x1f
     caa:	87 32       	cpi	r24, 0x27	; 39
     cac:	f2 e0       	ldi	r31, 0x02	; 2
     cae:	9f 07       	cpc	r25, r31
     cb0:	38 f4       	brcc	.+14     	; 0xcc0 <move_forward+0xbe>
     cb2:	f8 01       	movw	r30, r16
     cb4:	20 a1       	ldd	r18, Z+32	; 0x20
     cb6:	31 a1       	ldd	r19, Z+33	; 0x21
     cb8:	23 3c       	cpi	r18, 0xC3	; 195
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	3f 07       	cpc	r19, r31
     cbe:	88 f0       	brcs	.+34     	; 0xce2 <move_forward+0xe0>
		{
			lprintf("Line Detected");
     cc0:	8f e7       	ldi	r24, 0x7F	; 127
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	b5 db       	rcall	.-2198   	; 0x434 <lprintf>
			oi_set_wheels(0,0);
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	3a dc       	rcall	.-1932   	; 0x548 <oi_set_wheels>
			USART_SendString("Line Detected");
     cd4:	8f e7       	ldi	r24, 0x7F	; 127
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	80 dd       	rcall	.-1280   	; 0x7da <USART_SendString>
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
			return 3;
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	3b c0       	rjmp	.+118    	; 0xd58 <move_forward+0x156>
		}
		else if((sensor->wheeldrop_caster == 1) || (sensor->wheeldrop_left == 1) || (sensor->wheeldrop_right == 1) || (sensor->cliff_frontleft_signal < 10) || (sensor->cliff_frontright_signal < 10)|| (sensor->cliff_left_signal < 10) || (sensor->cliff_right_signal < 10))
     ce2:	4c 71       	andi	r20, 0x1C	; 28
     ce4:	71 f4       	brne	.+28     	; 0xd02 <move_forward+0x100>
     ce6:	0a 97       	sbiw	r24, 0x0a	; 10
     ce8:	60 f0       	brcs	.+24     	; 0xd02 <move_forward+0x100>
     cea:	2a 30       	cpi	r18, 0x0A	; 10
     cec:	31 05       	cpc	r19, r1
     cee:	48 f0       	brcs	.+18     	; 0xd02 <move_forward+0x100>
     cf0:	f8 01       	movw	r30, r16
     cf2:	84 8d       	ldd	r24, Z+28	; 0x1c
     cf4:	95 8d       	ldd	r25, Z+29	; 0x1d
     cf6:	0a 97       	sbiw	r24, 0x0a	; 10
     cf8:	20 f0       	brcs	.+8      	; 0xd02 <move_forward+0x100>
     cfa:	82 a1       	ldd	r24, Z+34	; 0x22
     cfc:	93 a1       	ldd	r25, Z+35	; 0x23
     cfe:	0a 97       	sbiw	r24, 0x0a	; 10
     d00:	50 f5       	brcc	.+84     	; 0xd56 <move_forward+0x154>
		{
			lprintf("Cliff Edge Detected");
     d02:	8d e8       	ldi	r24, 0x8D	; 141
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	94 db       	rcall	.-2264   	; 0x434 <lprintf>
			move_backward(sensor,10);
     d0c:	6a e0       	ldi	r22, 0x0A	; 10
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	c8 01       	movw	r24, r16
     d12:	7f de       	rcall	.-770    	; 0xa12 <move_backward>

			USART_SendString("Cliff Edge Detected");
     d14:	8d e8       	ldi	r24, 0x8D	; 141
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	60 dd       	rcall	.-1344   	; 0x7da <USART_SendString>
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
			return 4;
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	1b c0       	rjmp	.+54     	; 0xd58 <move_forward+0x156>
		}
		return 0;
	}

	oi_set_wheels(0, 0); // stop
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e dc       	rcall	.-2020   	; 0x548 <oi_set_wheels>
	
	sprintf(outputString, "Moved %f centimeters", sum);
     d2c:	1f 92       	push	r1
     d2e:	1f 92       	push	r1
     d30:	81 ea       	ldi	r24, 0xA1	; 161
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	9f 93       	push	r25
     d36:	8f 93       	push	r24
     d38:	8e 01       	movw	r16, r28
     d3a:	0f 5f       	subi	r16, 0xFF	; 255
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	1f 93       	push	r17
     d40:	0f 93       	push	r16
     d42:	c6 d3       	rcall	.+1932   	; 0x14d0 <sprintf>
	
	USART_SendString(outputString);
     d44:	c8 01       	movw	r24, r16
     d46:	49 dd       	rcall	.-1390   	; 0x7da <USART_SendString>

}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <move_forward+0x156>
			move_backward(sensor,10);

			USART_SendString("Cliff Edge Detected");
			return 4;
		}
		return 0;
     d56:	80 e0       	ldi	r24, 0x00	; 0
	
	sprintf(outputString, "Moved %f centimeters", sum);
	
	USART_SendString(outputString);

}
     d58:	64 96       	adiw	r28, 0x14	; 20
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	08 95       	ret

00000d72 <__subsf3>:
     d72:	50 58       	subi	r21, 0x80	; 128

00000d74 <__addsf3>:
     d74:	bb 27       	eor	r27, r27
     d76:	aa 27       	eor	r26, r26
     d78:	0e d0       	rcall	.+28     	; 0xd96 <__addsf3x>
     d7a:	48 c1       	rjmp	.+656    	; 0x100c <__fp_round>
     d7c:	39 d1       	rcall	.+626    	; 0xff0 <__fp_pscA>
     d7e:	30 f0       	brcs	.+12     	; 0xd8c <__addsf3+0x18>
     d80:	3e d1       	rcall	.+636    	; 0xffe <__fp_pscB>
     d82:	20 f0       	brcs	.+8      	; 0xd8c <__addsf3+0x18>
     d84:	31 f4       	brne	.+12     	; 0xd92 <__addsf3+0x1e>
     d86:	9f 3f       	cpi	r25, 0xFF	; 255
     d88:	11 f4       	brne	.+4      	; 0xd8e <__addsf3+0x1a>
     d8a:	1e f4       	brtc	.+6      	; 0xd92 <__addsf3+0x1e>
     d8c:	2e c1       	rjmp	.+604    	; 0xfea <__fp_nan>
     d8e:	0e f4       	brtc	.+2      	; 0xd92 <__addsf3+0x1e>
     d90:	e0 95       	com	r30
     d92:	e7 fb       	bst	r30, 7
     d94:	24 c1       	rjmp	.+584    	; 0xfde <__fp_inf>

00000d96 <__addsf3x>:
     d96:	e9 2f       	mov	r30, r25
     d98:	4a d1       	rcall	.+660    	; 0x102e <__fp_split3>
     d9a:	80 f3       	brcs	.-32     	; 0xd7c <__addsf3+0x8>
     d9c:	ba 17       	cp	r27, r26
     d9e:	62 07       	cpc	r22, r18
     da0:	73 07       	cpc	r23, r19
     da2:	84 07       	cpc	r24, r20
     da4:	95 07       	cpc	r25, r21
     da6:	18 f0       	brcs	.+6      	; 0xdae <__addsf3x+0x18>
     da8:	71 f4       	brne	.+28     	; 0xdc6 <__addsf3x+0x30>
     daa:	9e f5       	brtc	.+102    	; 0xe12 <__addsf3x+0x7c>
     dac:	62 c1       	rjmp	.+708    	; 0x1072 <__fp_zero>
     dae:	0e f4       	brtc	.+2      	; 0xdb2 <__addsf3x+0x1c>
     db0:	e0 95       	com	r30
     db2:	0b 2e       	mov	r0, r27
     db4:	ba 2f       	mov	r27, r26
     db6:	a0 2d       	mov	r26, r0
     db8:	0b 01       	movw	r0, r22
     dba:	b9 01       	movw	r22, r18
     dbc:	90 01       	movw	r18, r0
     dbe:	0c 01       	movw	r0, r24
     dc0:	ca 01       	movw	r24, r20
     dc2:	a0 01       	movw	r20, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	ff 27       	eor	r31, r31
     dc8:	59 1b       	sub	r21, r25
     dca:	99 f0       	breq	.+38     	; 0xdf2 <__addsf3x+0x5c>
     dcc:	59 3f       	cpi	r21, 0xF9	; 249
     dce:	50 f4       	brcc	.+20     	; 0xde4 <__addsf3x+0x4e>
     dd0:	50 3e       	cpi	r21, 0xE0	; 224
     dd2:	68 f1       	brcs	.+90     	; 0xe2e <__addsf3x+0x98>
     dd4:	1a 16       	cp	r1, r26
     dd6:	f0 40       	sbci	r31, 0x00	; 0
     dd8:	a2 2f       	mov	r26, r18
     dda:	23 2f       	mov	r18, r19
     ddc:	34 2f       	mov	r19, r20
     dde:	44 27       	eor	r20, r20
     de0:	58 5f       	subi	r21, 0xF8	; 248
     de2:	f3 cf       	rjmp	.-26     	; 0xdca <__addsf3x+0x34>
     de4:	46 95       	lsr	r20
     de6:	37 95       	ror	r19
     de8:	27 95       	ror	r18
     dea:	a7 95       	ror	r26
     dec:	f0 40       	sbci	r31, 0x00	; 0
     dee:	53 95       	inc	r21
     df0:	c9 f7       	brne	.-14     	; 0xde4 <__addsf3x+0x4e>
     df2:	7e f4       	brtc	.+30     	; 0xe12 <__addsf3x+0x7c>
     df4:	1f 16       	cp	r1, r31
     df6:	ba 0b       	sbc	r27, r26
     df8:	62 0b       	sbc	r22, r18
     dfa:	73 0b       	sbc	r23, r19
     dfc:	84 0b       	sbc	r24, r20
     dfe:	ba f0       	brmi	.+46     	; 0xe2e <__addsf3x+0x98>
     e00:	91 50       	subi	r25, 0x01	; 1
     e02:	a1 f0       	breq	.+40     	; 0xe2c <__addsf3x+0x96>
     e04:	ff 0f       	add	r31, r31
     e06:	bb 1f       	adc	r27, r27
     e08:	66 1f       	adc	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	c2 f7       	brpl	.-16     	; 0xe00 <__addsf3x+0x6a>
     e10:	0e c0       	rjmp	.+28     	; 0xe2e <__addsf3x+0x98>
     e12:	ba 0f       	add	r27, r26
     e14:	62 1f       	adc	r22, r18
     e16:	73 1f       	adc	r23, r19
     e18:	84 1f       	adc	r24, r20
     e1a:	48 f4       	brcc	.+18     	; 0xe2e <__addsf3x+0x98>
     e1c:	87 95       	ror	r24
     e1e:	77 95       	ror	r23
     e20:	67 95       	ror	r22
     e22:	b7 95       	ror	r27
     e24:	f7 95       	ror	r31
     e26:	9e 3f       	cpi	r25, 0xFE	; 254
     e28:	08 f0       	brcs	.+2      	; 0xe2c <__addsf3x+0x96>
     e2a:	b3 cf       	rjmp	.-154    	; 0xd92 <__addsf3+0x1e>
     e2c:	93 95       	inc	r25
     e2e:	88 0f       	add	r24, r24
     e30:	08 f0       	brcs	.+2      	; 0xe34 <__addsf3x+0x9e>
     e32:	99 27       	eor	r25, r25
     e34:	ee 0f       	add	r30, r30
     e36:	97 95       	ror	r25
     e38:	87 95       	ror	r24
     e3a:	08 95       	ret

00000e3c <__divsf3>:
     e3c:	0c d0       	rcall	.+24     	; 0xe56 <__divsf3x>
     e3e:	e6 c0       	rjmp	.+460    	; 0x100c <__fp_round>
     e40:	de d0       	rcall	.+444    	; 0xffe <__fp_pscB>
     e42:	40 f0       	brcs	.+16     	; 0xe54 <__divsf3+0x18>
     e44:	d5 d0       	rcall	.+426    	; 0xff0 <__fp_pscA>
     e46:	30 f0       	brcs	.+12     	; 0xe54 <__divsf3+0x18>
     e48:	21 f4       	brne	.+8      	; 0xe52 <__divsf3+0x16>
     e4a:	5f 3f       	cpi	r21, 0xFF	; 255
     e4c:	19 f0       	breq	.+6      	; 0xe54 <__divsf3+0x18>
     e4e:	c7 c0       	rjmp	.+398    	; 0xfde <__fp_inf>
     e50:	51 11       	cpse	r21, r1
     e52:	10 c1       	rjmp	.+544    	; 0x1074 <__fp_szero>
     e54:	ca c0       	rjmp	.+404    	; 0xfea <__fp_nan>

00000e56 <__divsf3x>:
     e56:	eb d0       	rcall	.+470    	; 0x102e <__fp_split3>
     e58:	98 f3       	brcs	.-26     	; 0xe40 <__divsf3+0x4>

00000e5a <__divsf3_pse>:
     e5a:	99 23       	and	r25, r25
     e5c:	c9 f3       	breq	.-14     	; 0xe50 <__divsf3+0x14>
     e5e:	55 23       	and	r21, r21
     e60:	b1 f3       	breq	.-20     	; 0xe4e <__divsf3+0x12>
     e62:	95 1b       	sub	r25, r21
     e64:	55 0b       	sbc	r21, r21
     e66:	bb 27       	eor	r27, r27
     e68:	aa 27       	eor	r26, r26
     e6a:	62 17       	cp	r22, r18
     e6c:	73 07       	cpc	r23, r19
     e6e:	84 07       	cpc	r24, r20
     e70:	38 f0       	brcs	.+14     	; 0xe80 <__divsf3_pse+0x26>
     e72:	9f 5f       	subi	r25, 0xFF	; 255
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	44 1f       	adc	r20, r20
     e7c:	aa 1f       	adc	r26, r26
     e7e:	a9 f3       	breq	.-22     	; 0xe6a <__divsf3_pse+0x10>
     e80:	33 d0       	rcall	.+102    	; 0xee8 <__divsf3_pse+0x8e>
     e82:	0e 2e       	mov	r0, r30
     e84:	3a f0       	brmi	.+14     	; 0xe94 <__divsf3_pse+0x3a>
     e86:	e0 e8       	ldi	r30, 0x80	; 128
     e88:	30 d0       	rcall	.+96     	; 0xeea <__divsf3_pse+0x90>
     e8a:	91 50       	subi	r25, 0x01	; 1
     e8c:	50 40       	sbci	r21, 0x00	; 0
     e8e:	e6 95       	lsr	r30
     e90:	00 1c       	adc	r0, r0
     e92:	ca f7       	brpl	.-14     	; 0xe86 <__divsf3_pse+0x2c>
     e94:	29 d0       	rcall	.+82     	; 0xee8 <__divsf3_pse+0x8e>
     e96:	fe 2f       	mov	r31, r30
     e98:	27 d0       	rcall	.+78     	; 0xee8 <__divsf3_pse+0x8e>
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	bb 1f       	adc	r27, r27
     ea2:	26 17       	cp	r18, r22
     ea4:	37 07       	cpc	r19, r23
     ea6:	48 07       	cpc	r20, r24
     ea8:	ab 07       	cpc	r26, r27
     eaa:	b0 e8       	ldi	r27, 0x80	; 128
     eac:	09 f0       	breq	.+2      	; 0xeb0 <__divsf3_pse+0x56>
     eae:	bb 0b       	sbc	r27, r27
     eb0:	80 2d       	mov	r24, r0
     eb2:	bf 01       	movw	r22, r30
     eb4:	ff 27       	eor	r31, r31
     eb6:	93 58       	subi	r25, 0x83	; 131
     eb8:	5f 4f       	sbci	r21, 0xFF	; 255
     eba:	2a f0       	brmi	.+10     	; 0xec6 <__divsf3_pse+0x6c>
     ebc:	9e 3f       	cpi	r25, 0xFE	; 254
     ebe:	51 05       	cpc	r21, r1
     ec0:	68 f0       	brcs	.+26     	; 0xedc <__divsf3_pse+0x82>
     ec2:	8d c0       	rjmp	.+282    	; 0xfde <__fp_inf>
     ec4:	d7 c0       	rjmp	.+430    	; 0x1074 <__fp_szero>
     ec6:	5f 3f       	cpi	r21, 0xFF	; 255
     ec8:	ec f3       	brlt	.-6      	; 0xec4 <__divsf3_pse+0x6a>
     eca:	98 3e       	cpi	r25, 0xE8	; 232
     ecc:	dc f3       	brlt	.-10     	; 0xec4 <__divsf3_pse+0x6a>
     ece:	86 95       	lsr	r24
     ed0:	77 95       	ror	r23
     ed2:	67 95       	ror	r22
     ed4:	b7 95       	ror	r27
     ed6:	f7 95       	ror	r31
     ed8:	9f 5f       	subi	r25, 0xFF	; 255
     eda:	c9 f7       	brne	.-14     	; 0xece <__divsf3_pse+0x74>
     edc:	88 0f       	add	r24, r24
     ede:	91 1d       	adc	r25, r1
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	97 f9       	bld	r25, 7
     ee6:	08 95       	ret
     ee8:	e1 e0       	ldi	r30, 0x01	; 1
     eea:	66 0f       	add	r22, r22
     eec:	77 1f       	adc	r23, r23
     eee:	88 1f       	adc	r24, r24
     ef0:	bb 1f       	adc	r27, r27
     ef2:	62 17       	cp	r22, r18
     ef4:	73 07       	cpc	r23, r19
     ef6:	84 07       	cpc	r24, r20
     ef8:	ba 07       	cpc	r27, r26
     efa:	20 f0       	brcs	.+8      	; 0xf04 <__divsf3_pse+0xaa>
     efc:	62 1b       	sub	r22, r18
     efe:	73 0b       	sbc	r23, r19
     f00:	84 0b       	sbc	r24, r20
     f02:	ba 0b       	sbc	r27, r26
     f04:	ee 1f       	adc	r30, r30
     f06:	88 f7       	brcc	.-30     	; 0xeea <__divsf3_pse+0x90>
     f08:	e0 95       	com	r30
     f0a:	08 95       	ret

00000f0c <__fixunssfsi>:
     f0c:	98 d0       	rcall	.+304    	; 0x103e <__fp_splitA>
     f0e:	88 f0       	brcs	.+34     	; 0xf32 <__fixunssfsi+0x26>
     f10:	9f 57       	subi	r25, 0x7F	; 127
     f12:	90 f0       	brcs	.+36     	; 0xf38 <__fixunssfsi+0x2c>
     f14:	b9 2f       	mov	r27, r25
     f16:	99 27       	eor	r25, r25
     f18:	b7 51       	subi	r27, 0x17	; 23
     f1a:	a0 f0       	brcs	.+40     	; 0xf44 <__fixunssfsi+0x38>
     f1c:	d1 f0       	breq	.+52     	; 0xf52 <__fixunssfsi+0x46>
     f1e:	66 0f       	add	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	1a f0       	brmi	.+6      	; 0xf2e <__fixunssfsi+0x22>
     f28:	ba 95       	dec	r27
     f2a:	c9 f7       	brne	.-14     	; 0xf1e <__fixunssfsi+0x12>
     f2c:	12 c0       	rjmp	.+36     	; 0xf52 <__fixunssfsi+0x46>
     f2e:	b1 30       	cpi	r27, 0x01	; 1
     f30:	81 f0       	breq	.+32     	; 0xf52 <__fixunssfsi+0x46>
     f32:	9f d0       	rcall	.+318    	; 0x1072 <__fp_zero>
     f34:	b1 e0       	ldi	r27, 0x01	; 1
     f36:	08 95       	ret
     f38:	9c c0       	rjmp	.+312    	; 0x1072 <__fp_zero>
     f3a:	67 2f       	mov	r22, r23
     f3c:	78 2f       	mov	r23, r24
     f3e:	88 27       	eor	r24, r24
     f40:	b8 5f       	subi	r27, 0xF8	; 248
     f42:	39 f0       	breq	.+14     	; 0xf52 <__fixunssfsi+0x46>
     f44:	b9 3f       	cpi	r27, 0xF9	; 249
     f46:	cc f3       	brlt	.-14     	; 0xf3a <__fixunssfsi+0x2e>
     f48:	86 95       	lsr	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b3 95       	inc	r27
     f50:	d9 f7       	brne	.-10     	; 0xf48 <__fixunssfsi+0x3c>
     f52:	3e f4       	brtc	.+14     	; 0xf62 <__fixunssfsi+0x56>
     f54:	90 95       	com	r25
     f56:	80 95       	com	r24
     f58:	70 95       	com	r23
     f5a:	61 95       	neg	r22
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	08 95       	ret

00000f64 <__floatunsisf>:
     f64:	e8 94       	clt
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <__floatsisf+0x12>

00000f68 <__floatsisf>:
     f68:	97 fb       	bst	r25, 7
     f6a:	3e f4       	brtc	.+14     	; 0xf7a <__floatsisf+0x12>
     f6c:	90 95       	com	r25
     f6e:	80 95       	com	r24
     f70:	70 95       	com	r23
     f72:	61 95       	neg	r22
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	8f 4f       	sbci	r24, 0xFF	; 255
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	99 23       	and	r25, r25
     f7c:	a9 f0       	breq	.+42     	; 0xfa8 <__floatsisf+0x40>
     f7e:	f9 2f       	mov	r31, r25
     f80:	96 e9       	ldi	r25, 0x96	; 150
     f82:	bb 27       	eor	r27, r27
     f84:	93 95       	inc	r25
     f86:	f6 95       	lsr	r31
     f88:	87 95       	ror	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b7 95       	ror	r27
     f90:	f1 11       	cpse	r31, r1
     f92:	f8 cf       	rjmp	.-16     	; 0xf84 <__floatsisf+0x1c>
     f94:	fa f4       	brpl	.+62     	; 0xfd4 <__floatsisf+0x6c>
     f96:	bb 0f       	add	r27, r27
     f98:	11 f4       	brne	.+4      	; 0xf9e <__floatsisf+0x36>
     f9a:	60 ff       	sbrs	r22, 0
     f9c:	1b c0       	rjmp	.+54     	; 0xfd4 <__floatsisf+0x6c>
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 4f       	sbci	r24, 0xFF	; 255
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4 <__floatsisf+0x6c>
     fa8:	88 23       	and	r24, r24
     faa:	11 f0       	breq	.+4      	; 0xfb0 <__floatsisf+0x48>
     fac:	96 e9       	ldi	r25, 0x96	; 150
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <__floatsisf+0x6a>
     fb0:	77 23       	and	r23, r23
     fb2:	21 f0       	breq	.+8      	; 0xfbc <__floatsisf+0x54>
     fb4:	9e e8       	ldi	r25, 0x8E	; 142
     fb6:	87 2f       	mov	r24, r23
     fb8:	76 2f       	mov	r23, r22
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <__floatsisf+0x5e>
     fbc:	66 23       	and	r22, r22
     fbe:	71 f0       	breq	.+28     	; 0xfdc <__floatsisf+0x74>
     fc0:	96 e8       	ldi	r25, 0x86	; 134
     fc2:	86 2f       	mov	r24, r22
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	2a f0       	brmi	.+10     	; 0xfd4 <__floatsisf+0x6c>
     fca:	9a 95       	dec	r25
     fcc:	66 0f       	add	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	da f7       	brpl	.-10     	; 0xfca <__floatsisf+0x62>
     fd4:	88 0f       	add	r24, r24
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <__fp_inf>:
     fde:	97 f9       	bld	r25, 7
     fe0:	9f 67       	ori	r25, 0x7F	; 127
     fe2:	80 e8       	ldi	r24, 0x80	; 128
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	08 95       	ret

00000fea <__fp_nan>:
     fea:	9f ef       	ldi	r25, 0xFF	; 255
     fec:	80 ec       	ldi	r24, 0xC0	; 192
     fee:	08 95       	ret

00000ff0 <__fp_pscA>:
     ff0:	00 24       	eor	r0, r0
     ff2:	0a 94       	dec	r0
     ff4:	16 16       	cp	r1, r22
     ff6:	17 06       	cpc	r1, r23
     ff8:	18 06       	cpc	r1, r24
     ffa:	09 06       	cpc	r0, r25
     ffc:	08 95       	ret

00000ffe <__fp_pscB>:
     ffe:	00 24       	eor	r0, r0
    1000:	0a 94       	dec	r0
    1002:	12 16       	cp	r1, r18
    1004:	13 06       	cpc	r1, r19
    1006:	14 06       	cpc	r1, r20
    1008:	05 06       	cpc	r0, r21
    100a:	08 95       	ret

0000100c <__fp_round>:
    100c:	09 2e       	mov	r0, r25
    100e:	03 94       	inc	r0
    1010:	00 0c       	add	r0, r0
    1012:	11 f4       	brne	.+4      	; 0x1018 <__fp_round+0xc>
    1014:	88 23       	and	r24, r24
    1016:	52 f0       	brmi	.+20     	; 0x102c <__fp_round+0x20>
    1018:	bb 0f       	add	r27, r27
    101a:	40 f4       	brcc	.+16     	; 0x102c <__fp_round+0x20>
    101c:	bf 2b       	or	r27, r31
    101e:	11 f4       	brne	.+4      	; 0x1024 <__fp_round+0x18>
    1020:	60 ff       	sbrs	r22, 0
    1022:	04 c0       	rjmp	.+8      	; 0x102c <__fp_round+0x20>
    1024:	6f 5f       	subi	r22, 0xFF	; 255
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	08 95       	ret

0000102e <__fp_split3>:
    102e:	57 fd       	sbrc	r21, 7
    1030:	90 58       	subi	r25, 0x80	; 128
    1032:	44 0f       	add	r20, r20
    1034:	55 1f       	adc	r21, r21
    1036:	59 f0       	breq	.+22     	; 0x104e <__fp_splitA+0x10>
    1038:	5f 3f       	cpi	r21, 0xFF	; 255
    103a:	71 f0       	breq	.+28     	; 0x1058 <__fp_splitA+0x1a>
    103c:	47 95       	ror	r20

0000103e <__fp_splitA>:
    103e:	88 0f       	add	r24, r24
    1040:	97 fb       	bst	r25, 7
    1042:	99 1f       	adc	r25, r25
    1044:	61 f0       	breq	.+24     	; 0x105e <__fp_splitA+0x20>
    1046:	9f 3f       	cpi	r25, 0xFF	; 255
    1048:	79 f0       	breq	.+30     	; 0x1068 <__fp_splitA+0x2a>
    104a:	87 95       	ror	r24
    104c:	08 95       	ret
    104e:	12 16       	cp	r1, r18
    1050:	13 06       	cpc	r1, r19
    1052:	14 06       	cpc	r1, r20
    1054:	55 1f       	adc	r21, r21
    1056:	f2 cf       	rjmp	.-28     	; 0x103c <__fp_split3+0xe>
    1058:	46 95       	lsr	r20
    105a:	f1 df       	rcall	.-30     	; 0x103e <__fp_splitA>
    105c:	08 c0       	rjmp	.+16     	; 0x106e <__fp_splitA+0x30>
    105e:	16 16       	cp	r1, r22
    1060:	17 06       	cpc	r1, r23
    1062:	18 06       	cpc	r1, r24
    1064:	99 1f       	adc	r25, r25
    1066:	f1 cf       	rjmp	.-30     	; 0x104a <__fp_splitA+0xc>
    1068:	86 95       	lsr	r24
    106a:	71 05       	cpc	r23, r1
    106c:	61 05       	cpc	r22, r1
    106e:	08 94       	sec
    1070:	08 95       	ret

00001072 <__fp_zero>:
    1072:	e8 94       	clt

00001074 <__fp_szero>:
    1074:	bb 27       	eor	r27, r27
    1076:	66 27       	eor	r22, r22
    1078:	77 27       	eor	r23, r23
    107a:	cb 01       	movw	r24, r22
    107c:	97 f9       	bld	r25, 7
    107e:	08 95       	ret

00001080 <__mulsf3>:
    1080:	0b d0       	rcall	.+22     	; 0x1098 <__mulsf3x>
    1082:	c4 cf       	rjmp	.-120    	; 0x100c <__fp_round>
    1084:	b5 df       	rcall	.-150    	; 0xff0 <__fp_pscA>
    1086:	28 f0       	brcs	.+10     	; 0x1092 <__mulsf3+0x12>
    1088:	ba df       	rcall	.-140    	; 0xffe <__fp_pscB>
    108a:	18 f0       	brcs	.+6      	; 0x1092 <__mulsf3+0x12>
    108c:	95 23       	and	r25, r21
    108e:	09 f0       	breq	.+2      	; 0x1092 <__mulsf3+0x12>
    1090:	a6 cf       	rjmp	.-180    	; 0xfde <__fp_inf>
    1092:	ab cf       	rjmp	.-170    	; 0xfea <__fp_nan>
    1094:	11 24       	eor	r1, r1
    1096:	ee cf       	rjmp	.-36     	; 0x1074 <__fp_szero>

00001098 <__mulsf3x>:
    1098:	ca df       	rcall	.-108    	; 0x102e <__fp_split3>
    109a:	a0 f3       	brcs	.-24     	; 0x1084 <__mulsf3+0x4>

0000109c <__mulsf3_pse>:
    109c:	95 9f       	mul	r25, r21
    109e:	d1 f3       	breq	.-12     	; 0x1094 <__mulsf3+0x14>
    10a0:	95 0f       	add	r25, r21
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	55 1f       	adc	r21, r21
    10a6:	62 9f       	mul	r22, r18
    10a8:	f0 01       	movw	r30, r0
    10aa:	72 9f       	mul	r23, r18
    10ac:	bb 27       	eor	r27, r27
    10ae:	f0 0d       	add	r31, r0
    10b0:	b1 1d       	adc	r27, r1
    10b2:	63 9f       	mul	r22, r19
    10b4:	aa 27       	eor	r26, r26
    10b6:	f0 0d       	add	r31, r0
    10b8:	b1 1d       	adc	r27, r1
    10ba:	aa 1f       	adc	r26, r26
    10bc:	64 9f       	mul	r22, r20
    10be:	66 27       	eor	r22, r22
    10c0:	b0 0d       	add	r27, r0
    10c2:	a1 1d       	adc	r26, r1
    10c4:	66 1f       	adc	r22, r22
    10c6:	82 9f       	mul	r24, r18
    10c8:	22 27       	eor	r18, r18
    10ca:	b0 0d       	add	r27, r0
    10cc:	a1 1d       	adc	r26, r1
    10ce:	62 1f       	adc	r22, r18
    10d0:	73 9f       	mul	r23, r19
    10d2:	b0 0d       	add	r27, r0
    10d4:	a1 1d       	adc	r26, r1
    10d6:	62 1f       	adc	r22, r18
    10d8:	83 9f       	mul	r24, r19
    10da:	a0 0d       	add	r26, r0
    10dc:	61 1d       	adc	r22, r1
    10de:	22 1f       	adc	r18, r18
    10e0:	74 9f       	mul	r23, r20
    10e2:	33 27       	eor	r19, r19
    10e4:	a0 0d       	add	r26, r0
    10e6:	61 1d       	adc	r22, r1
    10e8:	23 1f       	adc	r18, r19
    10ea:	84 9f       	mul	r24, r20
    10ec:	60 0d       	add	r22, r0
    10ee:	21 1d       	adc	r18, r1
    10f0:	82 2f       	mov	r24, r18
    10f2:	76 2f       	mov	r23, r22
    10f4:	6a 2f       	mov	r22, r26
    10f6:	11 24       	eor	r1, r1
    10f8:	9f 57       	subi	r25, 0x7F	; 127
    10fa:	50 40       	sbci	r21, 0x00	; 0
    10fc:	8a f0       	brmi	.+34     	; 0x1120 <__stack+0x21>
    10fe:	e1 f0       	breq	.+56     	; 0x1138 <__stack+0x39>
    1100:	88 23       	and	r24, r24
    1102:	4a f0       	brmi	.+18     	; 0x1116 <__stack+0x17>
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	bb 1f       	adc	r27, r27
    110a:	66 1f       	adc	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	91 50       	subi	r25, 0x01	; 1
    1112:	50 40       	sbci	r21, 0x00	; 0
    1114:	a9 f7       	brne	.-22     	; 0x1100 <__stack+0x1>
    1116:	9e 3f       	cpi	r25, 0xFE	; 254
    1118:	51 05       	cpc	r21, r1
    111a:	70 f0       	brcs	.+28     	; 0x1138 <__stack+0x39>
    111c:	60 cf       	rjmp	.-320    	; 0xfde <__fp_inf>
    111e:	aa cf       	rjmp	.-172    	; 0x1074 <__fp_szero>
    1120:	5f 3f       	cpi	r21, 0xFF	; 255
    1122:	ec f3       	brlt	.-6      	; 0x111e <__stack+0x1f>
    1124:	98 3e       	cpi	r25, 0xE8	; 232
    1126:	dc f3       	brlt	.-10     	; 0x111e <__stack+0x1f>
    1128:	86 95       	lsr	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	b7 95       	ror	r27
    1130:	f7 95       	ror	r31
    1132:	e7 95       	ror	r30
    1134:	9f 5f       	subi	r25, 0xFF	; 255
    1136:	c1 f7       	brne	.-16     	; 0x1128 <__stack+0x29>
    1138:	fe 2b       	or	r31, r30
    113a:	88 0f       	add	r24, r24
    113c:	91 1d       	adc	r25, r1
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <__divmodhi4>:
    1146:	97 fb       	bst	r25, 7
    1148:	07 2e       	mov	r0, r23
    114a:	16 f4       	brtc	.+4      	; 0x1150 <__divmodhi4+0xa>
    114c:	00 94       	com	r0
    114e:	06 d0       	rcall	.+12     	; 0x115c <__divmodhi4_neg1>
    1150:	77 fd       	sbrc	r23, 7
    1152:	08 d0       	rcall	.+16     	; 0x1164 <__divmodhi4_neg2>
    1154:	17 d0       	rcall	.+46     	; 0x1184 <__udivmodhi4>
    1156:	07 fc       	sbrc	r0, 7
    1158:	05 d0       	rcall	.+10     	; 0x1164 <__divmodhi4_neg2>
    115a:	3e f4       	brtc	.+14     	; 0x116a <__divmodhi4_exit>

0000115c <__divmodhi4_neg1>:
    115c:	90 95       	com	r25
    115e:	81 95       	neg	r24
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__divmodhi4_neg2>:
    1164:	70 95       	com	r23
    1166:	61 95       	neg	r22
    1168:	7f 4f       	sbci	r23, 0xFF	; 255

0000116a <__divmodhi4_exit>:
    116a:	08 95       	ret

0000116c <__umulhisi3>:
    116c:	a2 9f       	mul	r26, r18
    116e:	b0 01       	movw	r22, r0
    1170:	b3 9f       	mul	r27, r19
    1172:	c0 01       	movw	r24, r0
    1174:	a3 9f       	mul	r26, r19
    1176:	01 d0       	rcall	.+2      	; 0x117a <__umulhisi3+0xe>
    1178:	b2 9f       	mul	r27, r18
    117a:	70 0d       	add	r23, r0
    117c:	81 1d       	adc	r24, r1
    117e:	11 24       	eor	r1, r1
    1180:	91 1d       	adc	r25, r1
    1182:	08 95       	ret

00001184 <__udivmodhi4>:
    1184:	aa 1b       	sub	r26, r26
    1186:	bb 1b       	sub	r27, r27
    1188:	51 e1       	ldi	r21, 0x11	; 17
    118a:	07 c0       	rjmp	.+14     	; 0x119a <__udivmodhi4_ep>

0000118c <__udivmodhi4_loop>:
    118c:	aa 1f       	adc	r26, r26
    118e:	bb 1f       	adc	r27, r27
    1190:	a6 17       	cp	r26, r22
    1192:	b7 07       	cpc	r27, r23
    1194:	10 f0       	brcs	.+4      	; 0x119a <__udivmodhi4_ep>
    1196:	a6 1b       	sub	r26, r22
    1198:	b7 0b       	sbc	r27, r23

0000119a <__udivmodhi4_ep>:
    119a:	88 1f       	adc	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	5a 95       	dec	r21
    11a0:	a9 f7       	brne	.-22     	; 0x118c <__udivmodhi4_loop>
    11a2:	80 95       	com	r24
    11a4:	90 95       	com	r25
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	08 95       	ret

000011ac <calloc>:
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	68 9f       	mul	r22, r24
    11b6:	80 01       	movw	r16, r0
    11b8:	69 9f       	mul	r22, r25
    11ba:	10 0d       	add	r17, r0
    11bc:	78 9f       	mul	r23, r24
    11be:	10 0d       	add	r17, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	c8 01       	movw	r24, r16
    11c4:	0f d0       	rcall	.+30     	; 0x11e4 <malloc>
    11c6:	c8 2f       	mov	r28, r24
    11c8:	d9 2f       	mov	r29, r25
    11ca:	20 97       	sbiw	r28, 0x00	; 0
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <calloc+0x2c>
    11ce:	a8 01       	movw	r20, r16
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	8c 2f       	mov	r24, r28
    11d6:	5d d1       	rcall	.+698    	; 0x1492 <memset>
    11d8:	ce 01       	movw	r24, r28
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	08 95       	ret

000011e4 <malloc>:
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	91 05       	cpc	r25, r1
    11f0:	10 f4       	brcc	.+4      	; 0x11f6 <malloc+0x12>
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	e0 91 0f 02 	lds	r30, 0x020F
    11fa:	f0 91 10 02 	lds	r31, 0x0210
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	c0 e0       	ldi	r28, 0x00	; 0
    1204:	d0 e0       	ldi	r29, 0x00	; 0
    1206:	23 c0       	rjmp	.+70     	; 0x124e <malloc+0x6a>
    1208:	40 81       	ld	r20, Z
    120a:	51 81       	ldd	r21, Z+1	; 0x01
    120c:	48 17       	cp	r20, r24
    120e:	59 07       	cpc	r21, r25
    1210:	a8 f0       	brcs	.+42     	; 0x123c <malloc+0x58>
    1212:	48 17       	cp	r20, r24
    1214:	59 07       	cpc	r21, r25
    1216:	61 f4       	brne	.+24     	; 0x1230 <malloc+0x4c>
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	93 81       	ldd	r25, Z+3	; 0x03
    121c:	20 97       	sbiw	r28, 0x00	; 0
    121e:	19 f0       	breq	.+6      	; 0x1226 <malloc+0x42>
    1220:	9b 83       	std	Y+3, r25	; 0x03
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	2e c0       	rjmp	.+92     	; 0x1282 <malloc+0x9e>
    1226:	90 93 10 02 	sts	0x0210, r25
    122a:	80 93 0f 02 	sts	0x020F, r24
    122e:	29 c0       	rjmp	.+82     	; 0x1282 <malloc+0x9e>
    1230:	21 15       	cp	r18, r1
    1232:	31 05       	cpc	r19, r1
    1234:	29 f0       	breq	.+10     	; 0x1240 <malloc+0x5c>
    1236:	42 17       	cp	r20, r18
    1238:	53 07       	cpc	r21, r19
    123a:	10 f0       	brcs	.+4      	; 0x1240 <malloc+0x5c>
    123c:	a9 01       	movw	r20, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <malloc+0x60>
    1240:	be 01       	movw	r22, r28
    1242:	df 01       	movw	r26, r30
    1244:	02 81       	ldd	r16, Z+2	; 0x02
    1246:	13 81       	ldd	r17, Z+3	; 0x03
    1248:	ef 01       	movw	r28, r30
    124a:	9a 01       	movw	r18, r20
    124c:	f8 01       	movw	r30, r16
    124e:	30 97       	sbiw	r30, 0x00	; 0
    1250:	d9 f6       	brne	.-74     	; 0x1208 <malloc+0x24>
    1252:	21 15       	cp	r18, r1
    1254:	31 05       	cpc	r19, r1
    1256:	09 f1       	breq	.+66     	; 0x129a <malloc+0xb6>
    1258:	28 1b       	sub	r18, r24
    125a:	39 0b       	sbc	r19, r25
    125c:	24 30       	cpi	r18, 0x04	; 4
    125e:	31 05       	cpc	r19, r1
    1260:	90 f4       	brcc	.+36     	; 0x1286 <malloc+0xa2>
    1262:	12 96       	adiw	r26, 0x02	; 2
    1264:	8d 91       	ld	r24, X+
    1266:	9c 91       	ld	r25, X
    1268:	13 97       	sbiw	r26, 0x03	; 3
    126a:	61 15       	cp	r22, r1
    126c:	71 05       	cpc	r23, r1
    126e:	21 f0       	breq	.+8      	; 0x1278 <malloc+0x94>
    1270:	fb 01       	movw	r30, r22
    1272:	93 83       	std	Z+3, r25	; 0x03
    1274:	82 83       	std	Z+2, r24	; 0x02
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <malloc+0x9c>
    1278:	90 93 10 02 	sts	0x0210, r25
    127c:	80 93 0f 02 	sts	0x020F, r24
    1280:	fd 01       	movw	r30, r26
    1282:	32 96       	adiw	r30, 0x02	; 2
    1284:	44 c0       	rjmp	.+136    	; 0x130e <malloc+0x12a>
    1286:	fd 01       	movw	r30, r26
    1288:	e2 0f       	add	r30, r18
    128a:	f3 1f       	adc	r31, r19
    128c:	81 93       	st	Z+, r24
    128e:	91 93       	st	Z+, r25
    1290:	22 50       	subi	r18, 0x02	; 2
    1292:	31 09       	sbc	r19, r1
    1294:	2d 93       	st	X+, r18
    1296:	3c 93       	st	X, r19
    1298:	3a c0       	rjmp	.+116    	; 0x130e <malloc+0x12a>
    129a:	20 91 0d 02 	lds	r18, 0x020D
    129e:	30 91 0e 02 	lds	r19, 0x020E
    12a2:	23 2b       	or	r18, r19
    12a4:	41 f4       	brne	.+16     	; 0x12b6 <malloc+0xd2>
    12a6:	20 91 02 01 	lds	r18, 0x0102
    12aa:	30 91 03 01 	lds	r19, 0x0103
    12ae:	30 93 0e 02 	sts	0x020E, r19
    12b2:	20 93 0d 02 	sts	0x020D, r18
    12b6:	20 91 00 01 	lds	r18, 0x0100
    12ba:	30 91 01 01 	lds	r19, 0x0101
    12be:	21 15       	cp	r18, r1
    12c0:	31 05       	cpc	r19, r1
    12c2:	41 f4       	brne	.+16     	; 0x12d4 <malloc+0xf0>
    12c4:	2d b7       	in	r18, 0x3d	; 61
    12c6:	3e b7       	in	r19, 0x3e	; 62
    12c8:	40 91 04 01 	lds	r20, 0x0104
    12cc:	50 91 05 01 	lds	r21, 0x0105
    12d0:	24 1b       	sub	r18, r20
    12d2:	35 0b       	sbc	r19, r21
    12d4:	e0 91 0d 02 	lds	r30, 0x020D
    12d8:	f0 91 0e 02 	lds	r31, 0x020E
    12dc:	e2 17       	cp	r30, r18
    12de:	f3 07       	cpc	r31, r19
    12e0:	a0 f4       	brcc	.+40     	; 0x130a <malloc+0x126>
    12e2:	2e 1b       	sub	r18, r30
    12e4:	3f 0b       	sbc	r19, r31
    12e6:	28 17       	cp	r18, r24
    12e8:	39 07       	cpc	r19, r25
    12ea:	78 f0       	brcs	.+30     	; 0x130a <malloc+0x126>
    12ec:	ac 01       	movw	r20, r24
    12ee:	4e 5f       	subi	r20, 0xFE	; 254
    12f0:	5f 4f       	sbci	r21, 0xFF	; 255
    12f2:	24 17       	cp	r18, r20
    12f4:	35 07       	cpc	r19, r21
    12f6:	48 f0       	brcs	.+18     	; 0x130a <malloc+0x126>
    12f8:	4e 0f       	add	r20, r30
    12fa:	5f 1f       	adc	r21, r31
    12fc:	50 93 0e 02 	sts	0x020E, r21
    1300:	40 93 0d 02 	sts	0x020D, r20
    1304:	81 93       	st	Z+, r24
    1306:	91 93       	st	Z+, r25
    1308:	02 c0       	rjmp	.+4      	; 0x130e <malloc+0x12a>
    130a:	e0 e0       	ldi	r30, 0x00	; 0
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	cf 01       	movw	r24, r30
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <free>:
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	09 f4       	brne	.+2      	; 0x132c <free+0x12>
    132a:	8f c0       	rjmp	.+286    	; 0x144a <free+0x130>
    132c:	dc 01       	movw	r26, r24
    132e:	12 97       	sbiw	r26, 0x02	; 2
    1330:	13 96       	adiw	r26, 0x03	; 3
    1332:	1c 92       	st	X, r1
    1334:	1e 92       	st	-X, r1
    1336:	12 97       	sbiw	r26, 0x02	; 2
    1338:	e0 90 0f 02 	lds	r14, 0x020F
    133c:	f0 90 10 02 	lds	r15, 0x0210
    1340:	e1 14       	cp	r14, r1
    1342:	f1 04       	cpc	r15, r1
    1344:	89 f4       	brne	.+34     	; 0x1368 <free+0x4e>
    1346:	2d 91       	ld	r18, X+
    1348:	3c 91       	ld	r19, X
    134a:	11 97       	sbiw	r26, 0x01	; 1
    134c:	28 0f       	add	r18, r24
    134e:	39 1f       	adc	r19, r25
    1350:	80 91 0d 02 	lds	r24, 0x020D
    1354:	90 91 0e 02 	lds	r25, 0x020E
    1358:	82 17       	cp	r24, r18
    135a:	93 07       	cpc	r25, r19
    135c:	89 f5       	brne	.+98     	; 0x13c0 <free+0xa6>
    135e:	b0 93 0e 02 	sts	0x020E, r27
    1362:	a0 93 0d 02 	sts	0x020D, r26
    1366:	71 c0       	rjmp	.+226    	; 0x144a <free+0x130>
    1368:	e7 01       	movw	r28, r14
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <free+0x58>
    1370:	ea 01       	movw	r28, r20
    1372:	ca 17       	cp	r28, r26
    1374:	db 07       	cpc	r29, r27
    1376:	38 f4       	brcc	.+14     	; 0x1386 <free+0x6c>
    1378:	4a 81       	ldd	r20, Y+2	; 0x02
    137a:	5b 81       	ldd	r21, Y+3	; 0x03
    137c:	9e 01       	movw	r18, r28
    137e:	41 15       	cp	r20, r1
    1380:	51 05       	cpc	r21, r1
    1382:	b1 f7       	brne	.-20     	; 0x1370 <free+0x56>
    1384:	22 c0       	rjmp	.+68     	; 0x13ca <free+0xb0>
    1386:	bc 01       	movw	r22, r24
    1388:	62 50       	subi	r22, 0x02	; 2
    138a:	71 09       	sbc	r23, r1
    138c:	fb 01       	movw	r30, r22
    138e:	d3 83       	std	Z+3, r29	; 0x03
    1390:	c2 83       	std	Z+2, r28	; 0x02
    1392:	00 81       	ld	r16, Z
    1394:	11 81       	ldd	r17, Z+1	; 0x01
    1396:	ac 01       	movw	r20, r24
    1398:	40 0f       	add	r20, r16
    139a:	51 1f       	adc	r21, r17
    139c:	4c 17       	cp	r20, r28
    139e:	5d 07       	cpc	r21, r29
    13a0:	61 f4       	brne	.+24     	; 0x13ba <free+0xa0>
    13a2:	48 81       	ld	r20, Y
    13a4:	59 81       	ldd	r21, Y+1	; 0x01
    13a6:	40 0f       	add	r20, r16
    13a8:	51 1f       	adc	r21, r17
    13aa:	4e 5f       	subi	r20, 0xFE	; 254
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	51 83       	std	Z+1, r21	; 0x01
    13b0:	40 83       	st	Z, r20
    13b2:	4a 81       	ldd	r20, Y+2	; 0x02
    13b4:	5b 81       	ldd	r21, Y+3	; 0x03
    13b6:	53 83       	std	Z+3, r21	; 0x03
    13b8:	42 83       	std	Z+2, r20	; 0x02
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	29 f4       	brne	.+10     	; 0x13ca <free+0xb0>
    13c0:	b0 93 10 02 	sts	0x0210, r27
    13c4:	a0 93 0f 02 	sts	0x020F, r26
    13c8:	40 c0       	rjmp	.+128    	; 0x144a <free+0x130>
    13ca:	f9 01       	movw	r30, r18
    13cc:	b3 83       	std	Z+3, r27	; 0x03
    13ce:	a2 83       	std	Z+2, r26	; 0x02
    13d0:	e9 01       	movw	r28, r18
    13d2:	69 91       	ld	r22, Y+
    13d4:	79 91       	ld	r23, Y+
    13d6:	c6 0f       	add	r28, r22
    13d8:	d7 1f       	adc	r29, r23
    13da:	ac 17       	cp	r26, r28
    13dc:	bd 07       	cpc	r27, r29
    13de:	79 f4       	brne	.+30     	; 0x13fe <free+0xe4>
    13e0:	dc 01       	movw	r26, r24
    13e2:	5e 91       	ld	r21, -X
    13e4:	4e 91       	ld	r20, -X
    13e6:	46 0f       	add	r20, r22
    13e8:	57 1f       	adc	r21, r23
    13ea:	4e 5f       	subi	r20, 0xFE	; 254
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	51 83       	std	Z+1, r21	; 0x01
    13f0:	40 83       	st	Z, r20
    13f2:	12 96       	adiw	r26, 0x02	; 2
    13f4:	8d 91       	ld	r24, X+
    13f6:	9c 91       	ld	r25, X
    13f8:	13 97       	sbiw	r26, 0x03	; 3
    13fa:	93 83       	std	Z+3, r25	; 0x03
    13fc:	82 83       	std	Z+2, r24	; 0x02
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <free+0xee>
    1404:	d7 01       	movw	r26, r14
    1406:	7c 01       	movw	r14, r24
    1408:	f7 01       	movw	r30, r14
    140a:	82 81       	ldd	r24, Z+2	; 0x02
    140c:	93 81       	ldd	r25, Z+3	; 0x03
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	c9 f7       	brne	.-14     	; 0x1404 <free+0xea>
    1412:	c7 01       	movw	r24, r14
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	20 81       	ld	r18, Z
    1418:	31 81       	ldd	r19, Z+1	; 0x01
    141a:	82 0f       	add	r24, r18
    141c:	93 1f       	adc	r25, r19
    141e:	20 91 0d 02 	lds	r18, 0x020D
    1422:	30 91 0e 02 	lds	r19, 0x020E
    1426:	28 17       	cp	r18, r24
    1428:	39 07       	cpc	r19, r25
    142a:	79 f4       	brne	.+30     	; 0x144a <free+0x130>
    142c:	10 97       	sbiw	r26, 0x00	; 0
    142e:	29 f4       	brne	.+10     	; 0x143a <free+0x120>
    1430:	10 92 10 02 	sts	0x0210, r1
    1434:	10 92 0f 02 	sts	0x020F, r1
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <free+0x128>
    143a:	13 96       	adiw	r26, 0x03	; 3
    143c:	1c 92       	st	X, r1
    143e:	1e 92       	st	-X, r1
    1440:	12 97       	sbiw	r26, 0x02	; 2
    1442:	f0 92 0e 02 	sts	0x020E, r15
    1446:	e0 92 0d 02 	sts	0x020D, r14
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	08 95       	ret

00001458 <atoi>:
    1458:	fc 01       	movw	r30, r24
    145a:	88 27       	eor	r24, r24
    145c:	99 27       	eor	r25, r25
    145e:	e8 94       	clt
    1460:	21 91       	ld	r18, Z+
    1462:	20 32       	cpi	r18, 0x20	; 32
    1464:	e9 f3       	breq	.-6      	; 0x1460 <atoi+0x8>
    1466:	29 30       	cpi	r18, 0x09	; 9
    1468:	10 f0       	brcs	.+4      	; 0x146e <atoi+0x16>
    146a:	2e 30       	cpi	r18, 0x0E	; 14
    146c:	c8 f3       	brcs	.-14     	; 0x1460 <atoi+0x8>
    146e:	2b 32       	cpi	r18, 0x2B	; 43
    1470:	39 f0       	breq	.+14     	; 0x1480 <atoi+0x28>
    1472:	2d 32       	cpi	r18, 0x2D	; 45
    1474:	31 f4       	brne	.+12     	; 0x1482 <atoi+0x2a>
    1476:	68 94       	set
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <atoi+0x28>
    147a:	22 d0       	rcall	.+68     	; 0x14c0 <__mulhi_const_10>
    147c:	82 0f       	add	r24, r18
    147e:	91 1d       	adc	r25, r1
    1480:	21 91       	ld	r18, Z+
    1482:	20 53       	subi	r18, 0x30	; 48
    1484:	2a 30       	cpi	r18, 0x0A	; 10
    1486:	c8 f3       	brcs	.-14     	; 0x147a <atoi+0x22>
    1488:	1e f4       	brtc	.+6      	; 0x1490 <atoi+0x38>
    148a:	90 95       	com	r25
    148c:	81 95       	neg	r24
    148e:	9f 4f       	sbci	r25, 0xFF	; 255
    1490:	08 95       	ret

00001492 <memset>:
    1492:	dc 01       	movw	r26, r24
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <memset+0x6>
    1496:	6d 93       	st	X+, r22
    1498:	41 50       	subi	r20, 0x01	; 1
    149a:	50 40       	sbci	r21, 0x00	; 0
    149c:	e0 f7       	brcc	.-8      	; 0x1496 <memset+0x4>
    149e:	08 95       	ret

000014a0 <strcmp>:
    14a0:	fb 01       	movw	r30, r22
    14a2:	dc 01       	movw	r26, r24
    14a4:	8d 91       	ld	r24, X+
    14a6:	01 90       	ld	r0, Z+
    14a8:	80 19       	sub	r24, r0
    14aa:	01 10       	cpse	r0, r1
    14ac:	d9 f3       	breq	.-10     	; 0x14a4 <strcmp+0x4>
    14ae:	99 0b       	sbc	r25, r25
    14b0:	08 95       	ret

000014b2 <strcpy>:
    14b2:	fb 01       	movw	r30, r22
    14b4:	dc 01       	movw	r26, r24
    14b6:	01 90       	ld	r0, Z+
    14b8:	0d 92       	st	X+, r0
    14ba:	00 20       	and	r0, r0
    14bc:	e1 f7       	brne	.-8      	; 0x14b6 <strcpy+0x4>
    14be:	08 95       	ret

000014c0 <__mulhi_const_10>:
    14c0:	7a e0       	ldi	r23, 0x0A	; 10
    14c2:	97 9f       	mul	r25, r23
    14c4:	90 2d       	mov	r25, r0
    14c6:	87 9f       	mul	r24, r23
    14c8:	80 2d       	mov	r24, r0
    14ca:	91 0d       	add	r25, r1
    14cc:	11 24       	eor	r1, r1
    14ce:	08 95       	ret

000014d0 <sprintf>:
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	2e 97       	sbiw	r28, 0x0e	; 14
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	0d 89       	ldd	r16, Y+21	; 0x15
    14ea:	1e 89       	ldd	r17, Y+22	; 0x16
    14ec:	86 e0       	ldi	r24, 0x06	; 6
    14ee:	8c 83       	std	Y+4, r24	; 0x04
    14f0:	1a 83       	std	Y+2, r17	; 0x02
    14f2:	09 83       	std	Y+1, r16	; 0x01
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	9f e7       	ldi	r25, 0x7F	; 127
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	ce 01       	movw	r24, r28
    14fe:	49 96       	adiw	r24, 0x19	; 25
    1500:	ac 01       	movw	r20, r24
    1502:	6f 89       	ldd	r22, Y+23	; 0x17
    1504:	78 8d       	ldd	r23, Y+24	; 0x18
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	48 d0       	rcall	.+144    	; 0x159c <vfprintf>
    150c:	ef 81       	ldd	r30, Y+7	; 0x07
    150e:	f8 85       	ldd	r31, Y+8	; 0x08
    1510:	e0 0f       	add	r30, r16
    1512:	f1 1f       	adc	r31, r17
    1514:	10 82       	st	Z, r1
    1516:	2e 96       	adiw	r28, 0x0e	; 14
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <vsnprintf>:
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	2e 97       	sbiw	r28, 0x0e	; 14
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	8c 01       	movw	r16, r24
    1546:	ca 01       	movw	r24, r20
    1548:	46 e0       	ldi	r20, 0x06	; 6
    154a:	4c 83       	std	Y+4, r20	; 0x04
    154c:	1a 83       	std	Y+2, r17	; 0x02
    154e:	09 83       	std	Y+1, r16	; 0x01
    1550:	77 ff       	sbrs	r23, 7
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <vsnprintf+0x2c>
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e8       	ldi	r23, 0x80	; 128
    1558:	61 50       	subi	r22, 0x01	; 1
    155a:	71 09       	sbc	r23, r1
    155c:	7e 83       	std	Y+6, r23	; 0x06
    155e:	6d 83       	std	Y+5, r22	; 0x05
    1560:	a9 01       	movw	r20, r18
    1562:	bc 01       	movw	r22, r24
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	19 d0       	rcall	.+50     	; 0x159c <vfprintf>
    156a:	4d 81       	ldd	r20, Y+5	; 0x05
    156c:	5e 81       	ldd	r21, Y+6	; 0x06
    156e:	57 fd       	sbrc	r21, 7
    1570:	0a c0       	rjmp	.+20     	; 0x1586 <vsnprintf+0x5a>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	42 17       	cp	r20, r18
    1578:	53 07       	cpc	r21, r19
    157a:	0c f4       	brge	.+2      	; 0x157e <vsnprintf+0x52>
    157c:	9a 01       	movw	r18, r20
    157e:	f8 01       	movw	r30, r16
    1580:	e2 0f       	add	r30, r18
    1582:	f3 1f       	adc	r31, r19
    1584:	10 82       	st	Z, r1
    1586:	2e 96       	adiw	r28, 0x0e	; 14
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	08 95       	ret

0000159c <vfprintf>:
    159c:	2f 92       	push	r2
    159e:	3f 92       	push	r3
    15a0:	4f 92       	push	r4
    15a2:	5f 92       	push	r5
    15a4:	6f 92       	push	r6
    15a6:	7f 92       	push	r7
    15a8:	8f 92       	push	r8
    15aa:	9f 92       	push	r9
    15ac:	af 92       	push	r10
    15ae:	bf 92       	push	r11
    15b0:	cf 92       	push	r12
    15b2:	df 92       	push	r13
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	2c 97       	sbiw	r28, 0x0c	; 12
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	7c 01       	movw	r14, r24
    15d2:	6b 01       	movw	r12, r22
    15d4:	8a 01       	movw	r16, r20
    15d6:	fc 01       	movw	r30, r24
    15d8:	17 82       	std	Z+7, r1	; 0x07
    15da:	16 82       	std	Z+6, r1	; 0x06
    15dc:	83 81       	ldd	r24, Z+3	; 0x03
    15de:	81 ff       	sbrs	r24, 1
    15e0:	b9 c1       	rjmp	.+882    	; 0x1954 <vfprintf+0x3b8>
    15e2:	88 24       	eor	r8, r8
    15e4:	83 94       	inc	r8
    15e6:	91 2c       	mov	r9, r1
    15e8:	8c 0e       	add	r8, r28
    15ea:	9d 1e       	adc	r9, r29
    15ec:	f7 01       	movw	r30, r14
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	f6 01       	movw	r30, r12
    15f2:	93 fd       	sbrc	r25, 3
    15f4:	85 91       	lpm	r24, Z+
    15f6:	93 ff       	sbrs	r25, 3
    15f8:	81 91       	ld	r24, Z+
    15fa:	6f 01       	movw	r12, r30
    15fc:	88 23       	and	r24, r24
    15fe:	09 f4       	brne	.+2      	; 0x1602 <vfprintf+0x66>
    1600:	a5 c1       	rjmp	.+842    	; 0x194c <vfprintf+0x3b0>
    1602:	85 32       	cpi	r24, 0x25	; 37
    1604:	39 f4       	brne	.+14     	; 0x1614 <vfprintf+0x78>
    1606:	93 fd       	sbrc	r25, 3
    1608:	85 91       	lpm	r24, Z+
    160a:	93 ff       	sbrs	r25, 3
    160c:	81 91       	ld	r24, Z+
    160e:	6f 01       	movw	r12, r30
    1610:	85 32       	cpi	r24, 0x25	; 37
    1612:	21 f4       	brne	.+8      	; 0x161c <vfprintf+0x80>
    1614:	b7 01       	movw	r22, r14
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	cf d1       	rcall	.+926    	; 0x19b8 <fputc>
    161a:	e8 cf       	rjmp	.-48     	; 0x15ec <vfprintf+0x50>
    161c:	51 2c       	mov	r5, r1
    161e:	31 2c       	mov	r3, r1
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	20 32       	cpi	r18, 0x20	; 32
    1624:	a8 f4       	brcc	.+42     	; 0x1650 <vfprintf+0xb4>
    1626:	8b 32       	cpi	r24, 0x2B	; 43
    1628:	61 f0       	breq	.+24     	; 0x1642 <vfprintf+0xa6>
    162a:	28 f4       	brcc	.+10     	; 0x1636 <vfprintf+0x9a>
    162c:	80 32       	cpi	r24, 0x20	; 32
    162e:	51 f0       	breq	.+20     	; 0x1644 <vfprintf+0xa8>
    1630:	83 32       	cpi	r24, 0x23	; 35
    1632:	71 f4       	brne	.+28     	; 0x1650 <vfprintf+0xb4>
    1634:	0b c0       	rjmp	.+22     	; 0x164c <vfprintf+0xb0>
    1636:	8d 32       	cpi	r24, 0x2D	; 45
    1638:	39 f0       	breq	.+14     	; 0x1648 <vfprintf+0xac>
    163a:	80 33       	cpi	r24, 0x30	; 48
    163c:	49 f4       	brne	.+18     	; 0x1650 <vfprintf+0xb4>
    163e:	21 60       	ori	r18, 0x01	; 1
    1640:	28 c0       	rjmp	.+80     	; 0x1692 <vfprintf+0xf6>
    1642:	22 60       	ori	r18, 0x02	; 2
    1644:	24 60       	ori	r18, 0x04	; 4
    1646:	25 c0       	rjmp	.+74     	; 0x1692 <vfprintf+0xf6>
    1648:	28 60       	ori	r18, 0x08	; 8
    164a:	23 c0       	rjmp	.+70     	; 0x1692 <vfprintf+0xf6>
    164c:	20 61       	ori	r18, 0x10	; 16
    164e:	21 c0       	rjmp	.+66     	; 0x1692 <vfprintf+0xf6>
    1650:	27 fd       	sbrc	r18, 7
    1652:	27 c0       	rjmp	.+78     	; 0x16a2 <vfprintf+0x106>
    1654:	38 2f       	mov	r19, r24
    1656:	30 53       	subi	r19, 0x30	; 48
    1658:	3a 30       	cpi	r19, 0x0A	; 10
    165a:	78 f4       	brcc	.+30     	; 0x167a <vfprintf+0xde>
    165c:	26 ff       	sbrs	r18, 6
    165e:	06 c0       	rjmp	.+12     	; 0x166c <vfprintf+0xd0>
    1660:	fa e0       	ldi	r31, 0x0A	; 10
    1662:	5f 9e       	mul	r5, r31
    1664:	30 0d       	add	r19, r0
    1666:	11 24       	eor	r1, r1
    1668:	53 2e       	mov	r5, r19
    166a:	13 c0       	rjmp	.+38     	; 0x1692 <vfprintf+0xf6>
    166c:	8a e0       	ldi	r24, 0x0A	; 10
    166e:	38 9e       	mul	r3, r24
    1670:	30 0d       	add	r19, r0
    1672:	11 24       	eor	r1, r1
    1674:	33 2e       	mov	r3, r19
    1676:	20 62       	ori	r18, 0x20	; 32
    1678:	0c c0       	rjmp	.+24     	; 0x1692 <vfprintf+0xf6>
    167a:	8e 32       	cpi	r24, 0x2E	; 46
    167c:	21 f4       	brne	.+8      	; 0x1686 <vfprintf+0xea>
    167e:	26 fd       	sbrc	r18, 6
    1680:	65 c1       	rjmp	.+714    	; 0x194c <vfprintf+0x3b0>
    1682:	20 64       	ori	r18, 0x40	; 64
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0xf6>
    1686:	8c 36       	cpi	r24, 0x6C	; 108
    1688:	11 f4       	brne	.+4      	; 0x168e <vfprintf+0xf2>
    168a:	20 68       	ori	r18, 0x80	; 128
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <vfprintf+0xf6>
    168e:	88 36       	cpi	r24, 0x68	; 104
    1690:	41 f4       	brne	.+16     	; 0x16a2 <vfprintf+0x106>
    1692:	f6 01       	movw	r30, r12
    1694:	93 fd       	sbrc	r25, 3
    1696:	85 91       	lpm	r24, Z+
    1698:	93 ff       	sbrs	r25, 3
    169a:	81 91       	ld	r24, Z+
    169c:	6f 01       	movw	r12, r30
    169e:	81 11       	cpse	r24, r1
    16a0:	c0 cf       	rjmp	.-128    	; 0x1622 <vfprintf+0x86>
    16a2:	98 2f       	mov	r25, r24
    16a4:	95 54       	subi	r25, 0x45	; 69
    16a6:	93 30       	cpi	r25, 0x03	; 3
    16a8:	18 f0       	brcs	.+6      	; 0x16b0 <vfprintf+0x114>
    16aa:	90 52       	subi	r25, 0x20	; 32
    16ac:	93 30       	cpi	r25, 0x03	; 3
    16ae:	28 f4       	brcc	.+10     	; 0x16ba <vfprintf+0x11e>
    16b0:	0c 5f       	subi	r16, 0xFC	; 252
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	ff e3       	ldi	r31, 0x3F	; 63
    16b6:	f9 83       	std	Y+1, r31	; 0x01
    16b8:	0d c0       	rjmp	.+26     	; 0x16d4 <vfprintf+0x138>
    16ba:	83 36       	cpi	r24, 0x63	; 99
    16bc:	31 f0       	breq	.+12     	; 0x16ca <vfprintf+0x12e>
    16be:	83 37       	cpi	r24, 0x73	; 115
    16c0:	71 f0       	breq	.+28     	; 0x16de <vfprintf+0x142>
    16c2:	83 35       	cpi	r24, 0x53	; 83
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <vfprintf+0x12c>
    16c6:	5a c0       	rjmp	.+180    	; 0x177c <vfprintf+0x1e0>
    16c8:	22 c0       	rjmp	.+68     	; 0x170e <vfprintf+0x172>
    16ca:	f8 01       	movw	r30, r16
    16cc:	80 81       	ld	r24, Z
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	0e 5f       	subi	r16, 0xFE	; 254
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	44 24       	eor	r4, r4
    16d6:	43 94       	inc	r4
    16d8:	51 2c       	mov	r5, r1
    16da:	54 01       	movw	r10, r8
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <vfprintf+0x16a>
    16de:	38 01       	movw	r6, r16
    16e0:	f2 e0       	ldi	r31, 0x02	; 2
    16e2:	6f 0e       	add	r6, r31
    16e4:	71 1c       	adc	r7, r1
    16e6:	f8 01       	movw	r30, r16
    16e8:	a0 80       	ld	r10, Z
    16ea:	b1 80       	ldd	r11, Z+1	; 0x01
    16ec:	26 ff       	sbrs	r18, 6
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <vfprintf+0x15a>
    16f0:	65 2d       	mov	r22, r5
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <vfprintf+0x15e>
    16f6:	6f ef       	ldi	r22, 0xFF	; 255
    16f8:	7f ef       	ldi	r23, 0xFF	; 255
    16fa:	c5 01       	movw	r24, r10
    16fc:	2c 87       	std	Y+12, r18	; 0x0c
    16fe:	51 d1       	rcall	.+674    	; 0x19a2 <strnlen>
    1700:	2c 01       	movw	r4, r24
    1702:	83 01       	movw	r16, r6
    1704:	2c 85       	ldd	r18, Y+12	; 0x0c
    1706:	6f e7       	ldi	r22, 0x7F	; 127
    1708:	26 2e       	mov	r2, r22
    170a:	22 22       	and	r2, r18
    170c:	17 c0       	rjmp	.+46     	; 0x173c <vfprintf+0x1a0>
    170e:	38 01       	movw	r6, r16
    1710:	f2 e0       	ldi	r31, 0x02	; 2
    1712:	6f 0e       	add	r6, r31
    1714:	71 1c       	adc	r7, r1
    1716:	f8 01       	movw	r30, r16
    1718:	a0 80       	ld	r10, Z
    171a:	b1 80       	ldd	r11, Z+1	; 0x01
    171c:	26 ff       	sbrs	r18, 6
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x18a>
    1720:	65 2d       	mov	r22, r5
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x18e>
    1726:	6f ef       	ldi	r22, 0xFF	; 255
    1728:	7f ef       	ldi	r23, 0xFF	; 255
    172a:	c5 01       	movw	r24, r10
    172c:	2c 87       	std	Y+12, r18	; 0x0c
    172e:	2e d1       	rcall	.+604    	; 0x198c <strnlen_P>
    1730:	2c 01       	movw	r4, r24
    1732:	2c 85       	ldd	r18, Y+12	; 0x0c
    1734:	50 e8       	ldi	r21, 0x80	; 128
    1736:	25 2e       	mov	r2, r21
    1738:	22 2a       	or	r2, r18
    173a:	83 01       	movw	r16, r6
    173c:	23 fc       	sbrc	r2, 3
    173e:	1a c0       	rjmp	.+52     	; 0x1774 <vfprintf+0x1d8>
    1740:	05 c0       	rjmp	.+10     	; 0x174c <vfprintf+0x1b0>
    1742:	b7 01       	movw	r22, r14
    1744:	80 e2       	ldi	r24, 0x20	; 32
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	37 d1       	rcall	.+622    	; 0x19b8 <fputc>
    174a:	3a 94       	dec	r3
    174c:	83 2d       	mov	r24, r3
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	48 16       	cp	r4, r24
    1752:	59 06       	cpc	r5, r25
    1754:	b0 f3       	brcs	.-20     	; 0x1742 <vfprintf+0x1a6>
    1756:	0e c0       	rjmp	.+28     	; 0x1774 <vfprintf+0x1d8>
    1758:	f5 01       	movw	r30, r10
    175a:	27 fc       	sbrc	r2, 7
    175c:	85 91       	lpm	r24, Z+
    175e:	27 fe       	sbrs	r2, 7
    1760:	81 91       	ld	r24, Z+
    1762:	5f 01       	movw	r10, r30
    1764:	b7 01       	movw	r22, r14
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	27 d1       	rcall	.+590    	; 0x19b8 <fputc>
    176a:	31 10       	cpse	r3, r1
    176c:	3a 94       	dec	r3
    176e:	f1 e0       	ldi	r31, 0x01	; 1
    1770:	4f 1a       	sub	r4, r31
    1772:	51 08       	sbc	r5, r1
    1774:	41 14       	cp	r4, r1
    1776:	51 04       	cpc	r5, r1
    1778:	79 f7       	brne	.-34     	; 0x1758 <vfprintf+0x1bc>
    177a:	e5 c0       	rjmp	.+458    	; 0x1946 <vfprintf+0x3aa>
    177c:	84 36       	cpi	r24, 0x64	; 100
    177e:	11 f0       	breq	.+4      	; 0x1784 <vfprintf+0x1e8>
    1780:	89 36       	cpi	r24, 0x69	; 105
    1782:	39 f5       	brne	.+78     	; 0x17d2 <vfprintf+0x236>
    1784:	f8 01       	movw	r30, r16
    1786:	27 ff       	sbrs	r18, 7
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <vfprintf+0x1fc>
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	0c 5f       	subi	r16, 0xFC	; 252
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <vfprintf+0x20c>
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	88 27       	eor	r24, r24
    179e:	77 fd       	sbrc	r23, 7
    17a0:	80 95       	com	r24
    17a2:	98 2f       	mov	r25, r24
    17a4:	0e 5f       	subi	r16, 0xFE	; 254
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	4f e6       	ldi	r20, 0x6F	; 111
    17aa:	b4 2e       	mov	r11, r20
    17ac:	b2 22       	and	r11, r18
    17ae:	97 ff       	sbrs	r25, 7
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <vfprintf+0x228>
    17b2:	90 95       	com	r25
    17b4:	80 95       	com	r24
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	f0 e8       	ldi	r31, 0x80	; 128
    17c2:	bf 2a       	or	r11, r31
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a4 01       	movw	r20, r8
    17ca:	22 d1       	rcall	.+580    	; 0x1a10 <__ultoa_invert>
    17cc:	a8 2e       	mov	r10, r24
    17ce:	a8 18       	sub	r10, r8
    17d0:	42 c0       	rjmp	.+132    	; 0x1856 <vfprintf+0x2ba>
    17d2:	85 37       	cpi	r24, 0x75	; 117
    17d4:	31 f4       	brne	.+12     	; 0x17e2 <vfprintf+0x246>
    17d6:	3f ee       	ldi	r19, 0xEF	; 239
    17d8:	b3 2e       	mov	r11, r19
    17da:	b2 22       	and	r11, r18
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	24 c0       	rjmp	.+72     	; 0x182a <vfprintf+0x28e>
    17e2:	99 ef       	ldi	r25, 0xF9	; 249
    17e4:	b9 2e       	mov	r11, r25
    17e6:	b2 22       	and	r11, r18
    17e8:	8f 36       	cpi	r24, 0x6F	; 111
    17ea:	b9 f0       	breq	.+46     	; 0x181a <vfprintf+0x27e>
    17ec:	20 f4       	brcc	.+8      	; 0x17f6 <vfprintf+0x25a>
    17ee:	88 35       	cpi	r24, 0x58	; 88
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <vfprintf+0x258>
    17f2:	ac c0       	rjmp	.+344    	; 0x194c <vfprintf+0x3b0>
    17f4:	0d c0       	rjmp	.+26     	; 0x1810 <vfprintf+0x274>
    17f6:	80 37       	cpi	r24, 0x70	; 112
    17f8:	21 f0       	breq	.+8      	; 0x1802 <vfprintf+0x266>
    17fa:	88 37       	cpi	r24, 0x78	; 120
    17fc:	09 f0       	breq	.+2      	; 0x1800 <vfprintf+0x264>
    17fe:	a6 c0       	rjmp	.+332    	; 0x194c <vfprintf+0x3b0>
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x26a>
    1802:	20 e1       	ldi	r18, 0x10	; 16
    1804:	b2 2a       	or	r11, r18
    1806:	b4 fe       	sbrs	r11, 4
    1808:	0b c0       	rjmp	.+22     	; 0x1820 <vfprintf+0x284>
    180a:	84 e0       	ldi	r24, 0x04	; 4
    180c:	b8 2a       	or	r11, r24
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <vfprintf+0x284>
    1810:	24 ff       	sbrs	r18, 4
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <vfprintf+0x28a>
    1814:	e6 e0       	ldi	r30, 0x06	; 6
    1816:	be 2a       	or	r11, r30
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <vfprintf+0x28a>
    181a:	28 e0       	ldi	r18, 0x08	; 8
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	05 c0       	rjmp	.+10     	; 0x182a <vfprintf+0x28e>
    1820:	20 e1       	ldi	r18, 0x10	; 16
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	02 c0       	rjmp	.+4      	; 0x182a <vfprintf+0x28e>
    1826:	20 e1       	ldi	r18, 0x10	; 16
    1828:	32 e0       	ldi	r19, 0x02	; 2
    182a:	f8 01       	movw	r30, r16
    182c:	b7 fe       	sbrs	r11, 7
    182e:	07 c0       	rjmp	.+14     	; 0x183e <vfprintf+0x2a2>
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	0c 5f       	subi	r16, 0xFC	; 252
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x2ae>
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 5f       	subi	r16, 0xFE	; 254
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	a4 01       	movw	r20, r8
    184c:	e1 d0       	rcall	.+450    	; 0x1a10 <__ultoa_invert>
    184e:	a8 2e       	mov	r10, r24
    1850:	a8 18       	sub	r10, r8
    1852:	ff e7       	ldi	r31, 0x7F	; 127
    1854:	bf 22       	and	r11, r31
    1856:	b6 fe       	sbrs	r11, 6
    1858:	0b c0       	rjmp	.+22     	; 0x1870 <vfprintf+0x2d4>
    185a:	2b 2d       	mov	r18, r11
    185c:	2e 7f       	andi	r18, 0xFE	; 254
    185e:	a5 14       	cp	r10, r5
    1860:	50 f4       	brcc	.+20     	; 0x1876 <vfprintf+0x2da>
    1862:	b4 fe       	sbrs	r11, 4
    1864:	0a c0       	rjmp	.+20     	; 0x187a <vfprintf+0x2de>
    1866:	b2 fc       	sbrc	r11, 2
    1868:	08 c0       	rjmp	.+16     	; 0x187a <vfprintf+0x2de>
    186a:	2b 2d       	mov	r18, r11
    186c:	2e 7e       	andi	r18, 0xEE	; 238
    186e:	05 c0       	rjmp	.+10     	; 0x187a <vfprintf+0x2de>
    1870:	7a 2c       	mov	r7, r10
    1872:	2b 2d       	mov	r18, r11
    1874:	03 c0       	rjmp	.+6      	; 0x187c <vfprintf+0x2e0>
    1876:	7a 2c       	mov	r7, r10
    1878:	01 c0       	rjmp	.+2      	; 0x187c <vfprintf+0x2e0>
    187a:	75 2c       	mov	r7, r5
    187c:	24 ff       	sbrs	r18, 4
    187e:	0d c0       	rjmp	.+26     	; 0x189a <vfprintf+0x2fe>
    1880:	fe 01       	movw	r30, r28
    1882:	ea 0d       	add	r30, r10
    1884:	f1 1d       	adc	r31, r1
    1886:	80 81       	ld	r24, Z
    1888:	80 33       	cpi	r24, 0x30	; 48
    188a:	11 f4       	brne	.+4      	; 0x1890 <vfprintf+0x2f4>
    188c:	29 7e       	andi	r18, 0xE9	; 233
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <vfprintf+0x306>
    1890:	22 ff       	sbrs	r18, 2
    1892:	06 c0       	rjmp	.+12     	; 0x18a0 <vfprintf+0x304>
    1894:	73 94       	inc	r7
    1896:	73 94       	inc	r7
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <vfprintf+0x306>
    189a:	82 2f       	mov	r24, r18
    189c:	86 78       	andi	r24, 0x86	; 134
    189e:	09 f0       	breq	.+2      	; 0x18a2 <vfprintf+0x306>
    18a0:	73 94       	inc	r7
    18a2:	23 fd       	sbrc	r18, 3
    18a4:	13 c0       	rjmp	.+38     	; 0x18cc <vfprintf+0x330>
    18a6:	20 ff       	sbrs	r18, 0
    18a8:	0e c0       	rjmp	.+28     	; 0x18c6 <vfprintf+0x32a>
    18aa:	5a 2c       	mov	r5, r10
    18ac:	73 14       	cp	r7, r3
    18ae:	58 f4       	brcc	.+22     	; 0x18c6 <vfprintf+0x32a>
    18b0:	53 0c       	add	r5, r3
    18b2:	57 18       	sub	r5, r7
    18b4:	73 2c       	mov	r7, r3
    18b6:	07 c0       	rjmp	.+14     	; 0x18c6 <vfprintf+0x32a>
    18b8:	b7 01       	movw	r22, r14
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	2c 87       	std	Y+12, r18	; 0x0c
    18c0:	7b d0       	rcall	.+246    	; 0x19b8 <fputc>
    18c2:	73 94       	inc	r7
    18c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c6:	73 14       	cp	r7, r3
    18c8:	b8 f3       	brcs	.-18     	; 0x18b8 <vfprintf+0x31c>
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <vfprintf+0x338>
    18cc:	73 14       	cp	r7, r3
    18ce:	10 f4       	brcc	.+4      	; 0x18d4 <vfprintf+0x338>
    18d0:	37 18       	sub	r3, r7
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <vfprintf+0x33a>
    18d4:	31 2c       	mov	r3, r1
    18d6:	24 ff       	sbrs	r18, 4
    18d8:	11 c0       	rjmp	.+34     	; 0x18fc <vfprintf+0x360>
    18da:	b7 01       	movw	r22, r14
    18dc:	80 e3       	ldi	r24, 0x30	; 48
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	2c 87       	std	Y+12, r18	; 0x0c
    18e2:	6a d0       	rcall	.+212    	; 0x19b8 <fputc>
    18e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18e6:	22 ff       	sbrs	r18, 2
    18e8:	1c c0       	rjmp	.+56     	; 0x1922 <vfprintf+0x386>
    18ea:	21 ff       	sbrs	r18, 1
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <vfprintf+0x358>
    18ee:	88 e5       	ldi	r24, 0x58	; 88
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <vfprintf+0x35c>
    18f4:	88 e7       	ldi	r24, 0x78	; 120
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	b7 01       	movw	r22, r14
    18fa:	0c c0       	rjmp	.+24     	; 0x1914 <vfprintf+0x378>
    18fc:	82 2f       	mov	r24, r18
    18fe:	86 78       	andi	r24, 0x86	; 134
    1900:	81 f0       	breq	.+32     	; 0x1922 <vfprintf+0x386>
    1902:	21 fd       	sbrc	r18, 1
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x36e>
    1906:	80 e2       	ldi	r24, 0x20	; 32
    1908:	01 c0       	rjmp	.+2      	; 0x190c <vfprintf+0x370>
    190a:	8b e2       	ldi	r24, 0x2B	; 43
    190c:	27 fd       	sbrc	r18, 7
    190e:	8d e2       	ldi	r24, 0x2D	; 45
    1910:	b7 01       	movw	r22, r14
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	51 d0       	rcall	.+162    	; 0x19b8 <fputc>
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <vfprintf+0x386>
    1918:	b7 01       	movw	r22, r14
    191a:	80 e3       	ldi	r24, 0x30	; 48
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	4c d0       	rcall	.+152    	; 0x19b8 <fputc>
    1920:	5a 94       	dec	r5
    1922:	a5 14       	cp	r10, r5
    1924:	c8 f3       	brcs	.-14     	; 0x1918 <vfprintf+0x37c>
    1926:	aa 94       	dec	r10
    1928:	f4 01       	movw	r30, r8
    192a:	ea 0d       	add	r30, r10
    192c:	f1 1d       	adc	r31, r1
    192e:	b7 01       	movw	r22, r14
    1930:	80 81       	ld	r24, Z
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	41 d0       	rcall	.+130    	; 0x19b8 <fputc>
    1936:	a1 10       	cpse	r10, r1
    1938:	f6 cf       	rjmp	.-20     	; 0x1926 <vfprintf+0x38a>
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <vfprintf+0x3aa>
    193c:	b7 01       	movw	r22, r14
    193e:	80 e2       	ldi	r24, 0x20	; 32
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	3a d0       	rcall	.+116    	; 0x19b8 <fputc>
    1944:	3a 94       	dec	r3
    1946:	31 10       	cpse	r3, r1
    1948:	f9 cf       	rjmp	.-14     	; 0x193c <vfprintf+0x3a0>
    194a:	50 ce       	rjmp	.-864    	; 0x15ec <vfprintf+0x50>
    194c:	f7 01       	movw	r30, r14
    194e:	26 81       	ldd	r18, Z+6	; 0x06
    1950:	37 81       	ldd	r19, Z+7	; 0x07
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <vfprintf+0x3bc>
    1954:	2f ef       	ldi	r18, 0xFF	; 255
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	c9 01       	movw	r24, r18
    195a:	2c 96       	adiw	r28, 0x0c	; 12
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	7f 90       	pop	r7
    1980:	6f 90       	pop	r6
    1982:	5f 90       	pop	r5
    1984:	4f 90       	pop	r4
    1986:	3f 90       	pop	r3
    1988:	2f 90       	pop	r2
    198a:	08 95       	ret

0000198c <strnlen_P>:
    198c:	fc 01       	movw	r30, r24
    198e:	05 90       	lpm	r0, Z+
    1990:	61 50       	subi	r22, 0x01	; 1
    1992:	70 40       	sbci	r23, 0x00	; 0
    1994:	01 10       	cpse	r0, r1
    1996:	d8 f7       	brcc	.-10     	; 0x198e <strnlen_P+0x2>
    1998:	80 95       	com	r24
    199a:	90 95       	com	r25
    199c:	8e 0f       	add	r24, r30
    199e:	9f 1f       	adc	r25, r31
    19a0:	08 95       	ret

000019a2 <strnlen>:
    19a2:	fc 01       	movw	r30, r24
    19a4:	61 50       	subi	r22, 0x01	; 1
    19a6:	70 40       	sbci	r23, 0x00	; 0
    19a8:	01 90       	ld	r0, Z+
    19aa:	01 10       	cpse	r0, r1
    19ac:	d8 f7       	brcc	.-10     	; 0x19a4 <strnlen+0x2>
    19ae:	80 95       	com	r24
    19b0:	90 95       	com	r25
    19b2:	8e 0f       	add	r24, r30
    19b4:	9f 1f       	adc	r25, r31
    19b6:	08 95       	ret

000019b8 <fputc>:
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	8c 01       	movw	r16, r24
    19c2:	eb 01       	movw	r28, r22
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	81 fd       	sbrc	r24, 1
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <fputc+0x18>
    19ca:	0f ef       	ldi	r16, 0xFF	; 255
    19cc:	1f ef       	ldi	r17, 0xFF	; 255
    19ce:	1a c0       	rjmp	.+52     	; 0x1a04 <fputc+0x4c>
    19d0:	82 ff       	sbrs	r24, 2
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <fputc+0x36>
    19d4:	2e 81       	ldd	r18, Y+6	; 0x06
    19d6:	3f 81       	ldd	r19, Y+7	; 0x07
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	28 17       	cp	r18, r24
    19de:	39 07       	cpc	r19, r25
    19e0:	64 f4       	brge	.+24     	; 0x19fa <fputc+0x42>
    19e2:	e8 81       	ld	r30, Y
    19e4:	f9 81       	ldd	r31, Y+1	; 0x01
    19e6:	01 93       	st	Z+, r16
    19e8:	f9 83       	std	Y+1, r31	; 0x01
    19ea:	e8 83       	st	Y, r30
    19ec:	06 c0       	rjmp	.+12     	; 0x19fa <fputc+0x42>
    19ee:	e8 85       	ldd	r30, Y+8	; 0x08
    19f0:	f9 85       	ldd	r31, Y+9	; 0x09
    19f2:	80 2f       	mov	r24, r16
    19f4:	09 95       	icall
    19f6:	89 2b       	or	r24, r25
    19f8:	41 f7       	brne	.-48     	; 0x19ca <fputc+0x12>
    19fa:	8e 81       	ldd	r24, Y+6	; 0x06
    19fc:	9f 81       	ldd	r25, Y+7	; 0x07
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	9f 83       	std	Y+7, r25	; 0x07
    1a02:	8e 83       	std	Y+6, r24	; 0x06
    1a04:	c8 01       	movw	r24, r16
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	08 95       	ret

00001a10 <__ultoa_invert>:
    1a10:	fa 01       	movw	r30, r20
    1a12:	aa 27       	eor	r26, r26
    1a14:	28 30       	cpi	r18, 0x08	; 8
    1a16:	51 f1       	breq	.+84     	; 0x1a6c <__ultoa_invert+0x5c>
    1a18:	20 31       	cpi	r18, 0x10	; 16
    1a1a:	81 f1       	breq	.+96     	; 0x1a7c <__ultoa_invert+0x6c>
    1a1c:	e8 94       	clt
    1a1e:	6f 93       	push	r22
    1a20:	6e 7f       	andi	r22, 0xFE	; 254
    1a22:	6e 5f       	subi	r22, 0xFE	; 254
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	8f 4f       	sbci	r24, 0xFF	; 255
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	af 4f       	sbci	r26, 0xFF	; 255
    1a2c:	b1 e0       	ldi	r27, 0x01	; 1
    1a2e:	3e d0       	rcall	.+124    	; 0x1aac <__ultoa_invert+0x9c>
    1a30:	b4 e0       	ldi	r27, 0x04	; 4
    1a32:	3c d0       	rcall	.+120    	; 0x1aac <__ultoa_invert+0x9c>
    1a34:	67 0f       	add	r22, r23
    1a36:	78 1f       	adc	r23, r24
    1a38:	89 1f       	adc	r24, r25
    1a3a:	9a 1f       	adc	r25, r26
    1a3c:	a1 1d       	adc	r26, r1
    1a3e:	68 0f       	add	r22, r24
    1a40:	79 1f       	adc	r23, r25
    1a42:	8a 1f       	adc	r24, r26
    1a44:	91 1d       	adc	r25, r1
    1a46:	a1 1d       	adc	r26, r1
    1a48:	6a 0f       	add	r22, r26
    1a4a:	71 1d       	adc	r23, r1
    1a4c:	81 1d       	adc	r24, r1
    1a4e:	91 1d       	adc	r25, r1
    1a50:	a1 1d       	adc	r26, r1
    1a52:	20 d0       	rcall	.+64     	; 0x1a94 <__ultoa_invert+0x84>
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <__ultoa_invert+0x48>
    1a56:	68 94       	set
    1a58:	3f 91       	pop	r19
    1a5a:	2a e0       	ldi	r18, 0x0A	; 10
    1a5c:	26 9f       	mul	r18, r22
    1a5e:	11 24       	eor	r1, r1
    1a60:	30 19       	sub	r19, r0
    1a62:	30 5d       	subi	r19, 0xD0	; 208
    1a64:	31 93       	st	Z+, r19
    1a66:	de f6       	brtc	.-74     	; 0x1a1e <__ultoa_invert+0xe>
    1a68:	cf 01       	movw	r24, r30
    1a6a:	08 95       	ret
    1a6c:	46 2f       	mov	r20, r22
    1a6e:	47 70       	andi	r20, 0x07	; 7
    1a70:	40 5d       	subi	r20, 0xD0	; 208
    1a72:	41 93       	st	Z+, r20
    1a74:	b3 e0       	ldi	r27, 0x03	; 3
    1a76:	0f d0       	rcall	.+30     	; 0x1a96 <__ultoa_invert+0x86>
    1a78:	c9 f7       	brne	.-14     	; 0x1a6c <__ultoa_invert+0x5c>
    1a7a:	f6 cf       	rjmp	.-20     	; 0x1a68 <__ultoa_invert+0x58>
    1a7c:	46 2f       	mov	r20, r22
    1a7e:	4f 70       	andi	r20, 0x0F	; 15
    1a80:	40 5d       	subi	r20, 0xD0	; 208
    1a82:	4a 33       	cpi	r20, 0x3A	; 58
    1a84:	18 f0       	brcs	.+6      	; 0x1a8c <__ultoa_invert+0x7c>
    1a86:	49 5d       	subi	r20, 0xD9	; 217
    1a88:	31 fd       	sbrc	r19, 1
    1a8a:	40 52       	subi	r20, 0x20	; 32
    1a8c:	41 93       	st	Z+, r20
    1a8e:	02 d0       	rcall	.+4      	; 0x1a94 <__ultoa_invert+0x84>
    1a90:	a9 f7       	brne	.-22     	; 0x1a7c <__ultoa_invert+0x6c>
    1a92:	ea cf       	rjmp	.-44     	; 0x1a68 <__ultoa_invert+0x58>
    1a94:	b4 e0       	ldi	r27, 0x04	; 4
    1a96:	a6 95       	lsr	r26
    1a98:	97 95       	ror	r25
    1a9a:	87 95       	ror	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	ba 95       	dec	r27
    1aa2:	c9 f7       	brne	.-14     	; 0x1a96 <__ultoa_invert+0x86>
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	61 05       	cpc	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	08 95       	ret
    1aac:	9b 01       	movw	r18, r22
    1aae:	ac 01       	movw	r20, r24
    1ab0:	0a 2e       	mov	r0, r26
    1ab2:	06 94       	lsr	r0
    1ab4:	57 95       	ror	r21
    1ab6:	47 95       	ror	r20
    1ab8:	37 95       	ror	r19
    1aba:	27 95       	ror	r18
    1abc:	ba 95       	dec	r27
    1abe:	c9 f7       	brne	.-14     	; 0x1ab2 <__ultoa_invert+0xa2>
    1ac0:	62 0f       	add	r22, r18
    1ac2:	73 1f       	adc	r23, r19
    1ac4:	84 1f       	adc	r24, r20
    1ac6:	95 1f       	adc	r25, r21
    1ac8:	a0 1d       	adc	r26, r0
    1aca:	08 95       	ret

00001acc <_exit>:
    1acc:	f8 94       	cli

00001ace <__stop_program>:
    1ace:	ff cf       	rjmp	.-2      	; 0x1ace <__stop_program>
