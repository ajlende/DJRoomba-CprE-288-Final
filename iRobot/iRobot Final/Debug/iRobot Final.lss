
iRobot Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ec  00800100  000029f2  00002a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008004ec  008004ec  00002e72  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00002e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa2  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006b62  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00006b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000489b  00000000  00000000  00006e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000106c  00000000  00000000  0000b734  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000023c5  00000000  00000000  0000c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000864  00000000  00000000  0000eb68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c81  00000000  00000000  0000f3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ae5  00000000  00000000  0001004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000288  00000000  00000000  00012b32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c5       	rjmp	.+2714   	; 0xac0 <__vector_9>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6c c5       	rjmp	.+2776   	; 0xb06 <__vector_11>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c0       	rjmp	.+396    	; 0x1ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__c.2006>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.2004>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	14 e0       	ldi	r17, 0x04	; 4
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e2 ef       	ldi	r30, 0xF2	; 242
     1a2:	f9 e2       	ldi	r31, 0x29	; 41
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	ac 3e       	cpi	r26, 0xEC	; 236
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	25 e0       	ldi	r18, 0x05	; 5
     1b6:	ac ee       	ldi	r26, 0xEC	; 236
     1b8:	b4 e0       	ldi	r27, 0x04	; 4
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a7 34       	cpi	r26, 0x47	; 71
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	03 d0       	rcall	.+6      	; 0x1cc <main>
     1c6:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <main>:
	float distance;
	float width;
}object_t;

int main(void)
{
     1cc:	2f 92       	push	r2
     1ce:	3f 92       	push	r3
     1d0:	4f 92       	push	r4
     1d2:	5f 92       	push	r5
     1d4:	6f 92       	push	r6
     1d6:	7f 92       	push	r7
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	c1 59       	subi	r28, 0x91	; 145
     1f6:	d1 09       	sbc	r29, r1
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
	
	serial_init(); // Initialize the Serial Communications
     202:	c8 d3       	rcall	.+1936   	; 0x994 <serial_init>
	
	ADC_init(); // Initialize the IR sensor
     204:	f3 d3       	rcall	.+2022   	; 0x9ec <ADC_init>
	
	ping_init(); // Initialize the Ping))) sensor
     206:	7a d4       	rcall	.+2292   	; 0xafc <ping_init>
	
	lcd_init(); // Initialize the LCD
     208:	e3 d1       	rcall	.+966    	; 0x5d0 <lcd_init>
	
	init_push_buttons(); // Initialize the buttons
     20a:	71 d4       	rcall	.+2274   	; 0xaee <init_push_buttons>
	
	timer3_init(); // Initialize the servo motor
     20c:	f6 d4       	rcall	.+2540   	; 0xbfa <timer3_init>
	
	song_init();
     20e:	18 d4       	rcall	.+2096   	; 0xa40 <song_init>
	
	oi_t *sensor_data = oi_alloc();
     210:	aa d2       	rcall	.+1364   	; 0x766 <oi_alloc>
     212:	c0 57       	subi	r28, 0x70	; 112
     214:	df 4f       	sbci	r29, 0xFF	; 255
     216:	99 83       	std	Y+1, r25	; 0x01
     218:	88 83       	st	Y, r24
     21a:	c0 59       	subi	r28, 0x90	; 144
     21c:	d0 40       	sbci	r29, 0x00	; 0
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
     21e:	8e d3       	rcall	.+1820   	; 0x93c <oi_init>
	int count = 0;
	char* numRecieved;
	
	char echoString[20];
	
	servo_turn(degrees);
     220:	80 e5       	ldi	r24, 0x50	; 80
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	cb d4       	rcall	.+2454   	; 0xbbc <servo_turn>
	
	char OutputString[100];
 
	song_init();
     226:	0c d4       	rcall	.+2072   	; 0xa40 <song_init>
	oi_byte_tx(141);
     228:	8d e8       	ldi	r24, 0x8D	; 141
     22a:	a6 d2       	rcall	.+1356   	; 0x778 <oi_byte_tx>
	oi_byte_tx(1);
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	a4 d2       	rcall	.+1352   	; 0x778 <oi_byte_tx>
	song_init();
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     230:	0f 2e       	mov	r0, r31
     232:	f0 e5       	ldi	r31, 0x50	; 80
     234:	cf 2e       	mov	r12, r31
     236:	d1 2c       	mov	r13, r1
     238:	f0 2d       	mov	r31, r0
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     23a:	0f 2e       	mov	r0, r31
     23c:	f6 e0       	ldi	r31, 0x06	; 6
     23e:	2f 2e       	mov	r2, r31
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	3f 2e       	mov	r3, r31
     244:	f0 2d       	mov	r31, r0
     246:	44 24       	eor	r4, r4
     248:	43 94       	inc	r4
     24a:	51 2c       	mov	r5, r1
     24c:	4c 0e       	add	r4, r28
     24e:	5d 1e       	adc	r5, r29
	song_init();
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     250:	0f 2e       	mov	r0, r31
     252:	f3 e0       	ldi	r31, 0x03	; 3
     254:	6f 2e       	mov	r6, r31
     256:	71 2c       	mov	r7, r1
     258:	f0 2d       	mov	r31, r0
     25a:	91 2c       	mov	r9, r1
     25c:	a1 2c       	mov	r10, r1
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     25e:	b4 2c       	mov	r11, r4
     260:	85 2c       	mov	r8, r5
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-47) * 10;
			//lprintf("actual %d\n", actualnumber);
			turn_clockwise(sensor_data, actualnumber);
			actualnumber -= 10;
			sprintf(turnMessage,"Turned right %d degrees", actualnumber);
     262:	ce 01       	movw	r24, r28
     264:	8b 59       	subi	r24, 0x9B	; 155
     266:	9f 4f       	sbci	r25, 0xFF	; 255
     268:	c3 57       	subi	r28, 0x73	; 115
     26a:	df 4f       	sbci	r29, 0xFF	; 255
     26c:	99 83       	std	Y+1, r25	; 0x01
     26e:	88 83       	st	Y, r24
     270:	cd 58       	subi	r28, 0x8D	; 141
     272:	d0 40       	sbci	r29, 0x00	; 0
		lprintf("Left: %d\nRight: %d", sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal);
		*/
		//numRecieved = USART_RecieveString(count);
		//USART_SendString(numRecieved);
		
		serialInput = USART_Receive();
     274:	9f d3       	rcall	.+1854   	; 0x9b4 <USART_Receive>
     276:	c1 57       	subi	r28, 0x71	; 113
     278:	df 4f       	sbci	r29, 0xFF	; 255
     27a:	88 83       	st	Y, r24
     27c:	cf 58       	subi	r28, 0x8F	; 143
     27e:	d0 40       	sbci	r29, 0x00	; 0
		//if (serialInput) {
		//	USART_SendString(serialInput);
		//}
		
		//Big Scan
		if(serialInput == 'S')
     280:	83 35       	cpi	r24, 0x53	; 83
     282:	09 f0       	breq	.+2      	; 0x286 <main+0xba>
     284:	43 c0       	rjmp	.+134    	; 0x30c <main+0x140>
     286:	38 c0       	rjmp	.+112    	; 0x2f8 <main+0x12c>
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	b8 d3       	rcall	.+1904   	; 0x9fc <ADC_read>
     28c:	e8 0e       	add	r14, r24
     28e:	f9 1e       	adc	r15, r25
					wait_ms(20);
     290:	84 e1       	ldi	r24, 0x14	; 20
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	ff d3       	rcall	.+2046   	; 0xa94 <wait_ms>
     296:	01 50       	subi	r16, 0x01	; 1
     298:	11 09       	sbc	r17, r1
		{
			while(degrees <= 180) {
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     29a:	b1 f7       	brne	.-20     	; 0x288 <main+0xbc>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     29c:	97 01       	movw	r18, r14
     29e:	ab ea       	ldi	r26, 0xAB	; 171
     2a0:	ba ea       	ldi	r27, 0xAA	; 170
     2a2:	0e 94 8c 11 	call	0x2318	; 0x2318 <__umulhisi3>
     2a6:	96 95       	lsr	r25
     2a8:	87 95       	ror	r24
     2aa:	b4 d3       	rcall	.+1896   	; 0xa14 <calcCm>
     2ac:	16 2f       	mov	r17, r22
     2ae:	07 2f       	mov	r16, r23
     2b0:	f8 2e       	mov	r15, r24
     2b2:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     2b4:	64 d4       	rcall	.+2248   	; 0xb7e <ping_read>
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	7f 93       	push	r23
     2bc:	6f 93       	push	r22
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	df 92       	push	r13
     2c8:	cf 92       	push	r12
     2ca:	3f 92       	push	r3
     2cc:	2f 92       	push	r2
     2ce:	5f 92       	push	r5
     2d0:	4f 92       	push	r4
     2d2:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
		
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
		
				USART_SendString(OutputString);
     2d6:	8b 2d       	mov	r24, r11
     2d8:	98 2d       	mov	r25, r8
     2da:	72 d3       	rcall	.+1764   	; 0x9c0 <USART_SendString>
		
				degrees += 2;
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	c9 0e       	add	r12, r25
     2e0:	d1 1c       	adc	r13, r1
		
				servo_turn(degrees);
     2e2:	c6 01       	movw	r24, r12
     2e4:	6b d4       	rcall	.+2262   	; 0xbbc <servo_turn>
		//}
		
		//Big Scan
		if(serialInput == 'S')
		{
			while(degrees <= 180) {
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	95 eb       	ldi	r25, 0xB5	; 181
     2f2:	c9 16       	cp	r12, r25
     2f4:	d1 04       	cpc	r13, r1
     2f6:	24 f4       	brge	.+8      	; 0x300 <main+0x134>
	song_init();
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     2f8:	83 01       	movw	r16, r6
     2fa:	e9 2c       	mov	r14, r9
     2fc:	fa 2c       	mov	r15, r10
     2fe:	c4 cf       	rjmp	.-120    	; 0x288 <main+0xbc>
		
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     300:	8a e5       	ldi	r24, 0x5A	; 90
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	5b d4       	rcall	.+2230   	; 0xbbc <servo_turn>
				degrees += 2;
		
				servo_turn(degrees);

			}
			degrees = 0;
     306:	c1 2c       	mov	r12, r1
     308:	d1 2c       	mov	r13, r1
     30a:	74 c0       	rjmp	.+232    	; 0x3f4 <main+0x228>
			servo_turn(90);
		}
		
		//Small Scan
		if(serialInput == 's')
     30c:	c1 57       	subi	r28, 0x71	; 113
     30e:	df 4f       	sbci	r29, 0xFF	; 255
     310:	28 81       	ld	r18, Y
     312:	cf 58       	subi	r28, 0x8F	; 143
     314:	d0 40       	sbci	r29, 0x00	; 0
     316:	23 37       	cpi	r18, 0x73	; 115
     318:	09 f0       	breq	.+2      	; 0x31c <main+0x150>
     31a:	4c c0       	rjmp	.+152    	; 0x3b4 <main+0x1e8>
		{
			degrees = 45;
			servo_turn(degrees);
     31c:	8d e2       	ldi	r24, 0x2D	; 45
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	4d d4       	rcall	.+2202   	; 0xbbc <servo_turn>
		}
		
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
     322:	0f 2e       	mov	r0, r31
     324:	fd e2       	ldi	r31, 0x2D	; 45
     326:	cf 2e       	mov	r12, r31
     328:	d1 2c       	mov	r13, r1
     32a:	f0 2d       	mov	r31, r0
     32c:	39 c0       	rjmp	.+114    	; 0x3a0 <main+0x1d4>
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	65 d3       	rcall	.+1738   	; 0x9fc <ADC_read>
     332:	08 0f       	add	r16, r24
     334:	19 1f       	adc	r17, r25
					wait_ms(20);
     336:	84 e1       	ldi	r24, 0x14	; 20
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	ac d3       	rcall	.+1880   	; 0xa94 <wait_ms>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	e8 1a       	sub	r14, r24
     340:	f1 08       	sbc	r15, r1
			servo_turn(degrees);
			while(degrees <= 135) {
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     342:	a9 f7       	brne	.-22     	; 0x32e <main+0x162>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     344:	98 01       	movw	r18, r16
     346:	ab ea       	ldi	r26, 0xAB	; 171
     348:	ba ea       	ldi	r27, 0xAA	; 170
     34a:	0e 94 8c 11 	call	0x2318	; 0x2318 <__umulhisi3>
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	60 d3       	rcall	.+1728   	; 0xa14 <calcCm>
     354:	16 2f       	mov	r17, r22
     356:	07 2f       	mov	r16, r23
     358:	f8 2e       	mov	r15, r24
     35a:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     35c:	10 d4       	rcall	.+2080   	; 0xb7e <ping_read>
				
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     35e:	9f 93       	push	r25
     360:	8f 93       	push	r24
     362:	7f 93       	push	r23
     364:	6f 93       	push	r22
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	df 92       	push	r13
     370:	cf 92       	push	r12
     372:	3f 92       	push	r3
     374:	2f 92       	push	r2
     376:	5f 92       	push	r5
     378:	4f 92       	push	r4
     37a:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
				
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
				
				USART_SendString(OutputString);
     37e:	8b 2d       	mov	r24, r11
     380:	98 2d       	mov	r25, r8
     382:	1e d3       	rcall	.+1596   	; 0x9c0 <USART_SendString>
				
				degrees += 2;
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	c9 0e       	add	r12, r25
     388:	d1 1c       	adc	r13, r1
				
				servo_turn(degrees);
     38a:	c6 01       	movw	r24, r12
     38c:	17 d4       	rcall	.+2094   	; 0xbbc <servo_turn>
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
			servo_turn(degrees);
			while(degrees <= 135) {
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	de bf       	out	0x3e, r29	; 62
     394:	0f be       	out	0x3f, r0	; 63
     396:	cd bf       	out	0x3d, r28	; 61
     398:	99 e8       	ldi	r25, 0x89	; 137
     39a:	c9 16       	cp	r12, r25
     39c:	d1 04       	cpc	r13, r1
     39e:	21 f0       	breq	.+8      	; 0x3a8 <main+0x1dc>
	song_init();
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     3a0:	73 01       	movw	r14, r6
     3a2:	09 2d       	mov	r16, r9
     3a4:	1a 2d       	mov	r17, r10
     3a6:	c3 cf       	rjmp	.-122    	; 0x32e <main+0x162>
				
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     3a8:	8a e5       	ldi	r24, 0x5A	; 90
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	07 d4       	rcall	.+2062   	; 0xbbc <servo_turn>
				degrees += 2;
				
				servo_turn(degrees);

			}
			degrees = 0;
     3ae:	c1 2c       	mov	r12, r1
     3b0:	d1 2c       	mov	r13, r1
     3b2:	60 c0       	rjmp	.+192    	; 0x474 <main+0x2a8>
			servo_turn(90);
		}
		
		if(serialInput == 'f')
     3b4:	c1 57       	subi	r28, 0x71	; 113
     3b6:	df 4f       	sbci	r29, 0xFF	; 255
     3b8:	28 81       	ld	r18, Y
     3ba:	cf 58       	subi	r28, 0x8F	; 143
     3bc:	d0 40       	sbci	r29, 0x00	; 0
     3be:	26 36       	cpi	r18, 0x66	; 102
     3c0:	c9 f4       	brne	.+50     	; 0x3f4 <main+0x228>
		{
						
			//int tempDistance = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     3c2:	f8 d2       	rcall	.+1520   	; 0x9b4 <USART_Receive>
		if(serialInput == 'f')
		{
						
			//int tempDistance = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
     3c4:	88 23       	and	r24, r24
     3c6:	e9 f3       	breq	.-6      	; 0x3c2 <main+0x1f6>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-48) * 10;
     3c8:	28 2f       	mov	r18, r24
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	b9 01       	movw	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	77 1f       	adc	r23, r23
     3d6:	66 0f       	add	r22, r22
     3d8:	77 1f       	adc	r23, r23
     3da:	26 0f       	add	r18, r22
     3dc:	37 1f       	adc	r19, r23
     3de:	b9 01       	movw	r22, r18
     3e0:	60 5e       	subi	r22, 0xE0	; 224
     3e2:	71 40       	sbci	r23, 0x01	; 1
			move_forward(sensor_data, actualnumber);
     3e4:	c0 57       	subi	r28, 0x70	; 112
     3e6:	df 4f       	sbci	r29, 0xFF	; 255
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	c0 59       	subi	r28, 0x90	; 144
     3ee:	d0 40       	sbci	r29, 0x00	; 0
     3f0:	85 d7       	rcall	.+3850   	; 0x12fc <move_forward>
     3f2:	80 c0       	rjmp	.+256    	; 0x4f4 <main+0x328>
		}
		
		if(serialInput == 'r')
     3f4:	c1 57       	subi	r28, 0x71	; 113
     3f6:	df 4f       	sbci	r29, 0xFF	; 255
     3f8:	88 81       	ld	r24, Y
     3fa:	cf 58       	subi	r28, 0x8F	; 143
     3fc:	d0 40       	sbci	r29, 0x00	; 0
     3fe:	82 37       	cpi	r24, 0x72	; 114
     400:	c9 f5       	brne	.+114    	; 0x474 <main+0x2a8>
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];			
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     402:	d8 d2       	rcall	.+1456   	; 0x9b4 <USART_Receive>
		if(serialInput == 'r')
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];			
			char nextletter = 0;
			while(nextletter == 0)
     404:	88 23       	and	r24, r24
     406:	e9 f3       	breq	.-6      	; 0x402 <main+0x236>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-47) * 10;
     408:	28 2f       	mov	r18, r24
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	89 01       	movw	r16, r18
     412:	00 0f       	add	r16, r16
     414:	11 1f       	adc	r17, r17
     416:	00 0f       	add	r16, r16
     418:	11 1f       	adc	r17, r17
     41a:	02 0f       	add	r16, r18
     41c:	13 1f       	adc	r17, r19
     41e:	b8 01       	movw	r22, r16
     420:	66 5d       	subi	r22, 0xD6	; 214
     422:	71 40       	sbci	r23, 0x01	; 1
			//lprintf("actual %d\n", actualnumber);
			turn_clockwise(sensor_data, actualnumber);
     424:	c0 57       	subi	r28, 0x70	; 112
     426:	df 4f       	sbci	r29, 0xFF	; 255
     428:	88 81       	ld	r24, Y
     42a:	99 81       	ldd	r25, Y+1	; 0x01
     42c:	c0 59       	subi	r28, 0x90	; 144
     42e:	d0 40       	sbci	r29, 0x00	; 0
     430:	f8 d3       	rcall	.+2032   	; 0xc22 <turn_clockwise>
			actualnumber -= 10;
     432:	00 5e       	subi	r16, 0xE0	; 224
     434:	11 40       	sbci	r17, 0x01	; 1
			sprintf(turnMessage,"Turned right %d degrees", actualnumber);
     436:	1f 93       	push	r17
     438:	0f 93       	push	r16
     43a:	83 e1       	ldi	r24, 0x13	; 19
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	c2 57       	subi	r28, 0x72	; 114
     444:	df 4f       	sbci	r29, 0xFF	; 255
     446:	88 81       	ld	r24, Y
     448:	ce 58       	subi	r28, 0x8E	; 142
     44a:	d0 40       	sbci	r29, 0x00	; 0
     44c:	8f 93       	push	r24
     44e:	c3 57       	subi	r28, 0x73	; 115
     450:	df 4f       	sbci	r29, 0xFF	; 255
     452:	98 81       	ld	r25, Y
     454:	cd 58       	subi	r28, 0x8D	; 141
     456:	d0 40       	sbci	r29, 0x00	; 0
     458:	9f 93       	push	r25
     45a:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(turnMessage);
     45e:	ce 01       	movw	r24, r28
     460:	8b 59       	subi	r24, 0x9B	; 155
     462:	9f 4f       	sbci	r25, 0xFF	; 255
     464:	ad d2       	rcall	.+1370   	; 0x9c0 <USART_SendString>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	51 c0       	rjmp	.+162    	; 0x516 <main+0x34a>
		}
		
		if(serialInput == 'l')
     474:	c1 57       	subi	r28, 0x71	; 113
     476:	df 4f       	sbci	r29, 0xFF	; 255
     478:	28 81       	ld	r18, Y
     47a:	cf 58       	subi	r28, 0x8F	; 143
     47c:	d0 40       	sbci	r29, 0x00	; 0
     47e:	2c 36       	cpi	r18, 0x6C	; 108
     480:	c9 f5       	brne	.+114    	; 0x4f4 <main+0x328>
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];	
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     482:	98 d2       	rcall	.+1328   	; 0x9b4 <USART_Receive>
		if(serialInput == 'l')
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];	
			char nextletter = 0;
			while(nextletter == 0)
     484:	88 23       	and	r24, r24
     486:	e9 f3       	breq	.-6      	; 0x482 <main+0x2b6>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-47) * 10;
     488:	28 2f       	mov	r18, r24
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	89 01       	movw	r16, r18
     492:	00 0f       	add	r16, r16
     494:	11 1f       	adc	r17, r17
     496:	00 0f       	add	r16, r16
     498:	11 1f       	adc	r17, r17
     49a:	02 0f       	add	r16, r18
     49c:	13 1f       	adc	r17, r19
     49e:	b8 01       	movw	r22, r16
     4a0:	66 5d       	subi	r22, 0xD6	; 214
     4a2:	71 40       	sbci	r23, 0x01	; 1
			turn_counterclockwise(sensor_data, actualnumber);
     4a4:	c0 57       	subi	r28, 0x70	; 112
     4a6:	df 4f       	sbci	r29, 0xFF	; 255
     4a8:	88 81       	ld	r24, Y
     4aa:	99 81       	ldd	r25, Y+1	; 0x01
     4ac:	c0 59       	subi	r28, 0x90	; 144
     4ae:	d0 40       	sbci	r29, 0x00	; 0
     4b0:	2d d5       	rcall	.+2650   	; 0xf0c <turn_counterclockwise>
			actualnumber -= 10;
     4b2:	00 5e       	subi	r16, 0xE0	; 224
     4b4:	11 40       	sbci	r17, 0x01	; 1
			sprintf(turnMessage,"Turned left %d degrees", actualnumber);
     4b6:	1f 93       	push	r17
     4b8:	0f 93       	push	r16
     4ba:	8b e2       	ldi	r24, 0x2B	; 43
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	9f 93       	push	r25
     4c0:	8f 93       	push	r24
     4c2:	c2 57       	subi	r28, 0x72	; 114
     4c4:	df 4f       	sbci	r29, 0xFF	; 255
     4c6:	88 81       	ld	r24, Y
     4c8:	ce 58       	subi	r28, 0x8E	; 142
     4ca:	d0 40       	sbci	r29, 0x00	; 0
     4cc:	8f 93       	push	r24
     4ce:	c3 57       	subi	r28, 0x73	; 115
     4d0:	df 4f       	sbci	r29, 0xFF	; 255
     4d2:	98 81       	ld	r25, Y
     4d4:	cd 58       	subi	r28, 0x8D	; 141
     4d6:	d0 40       	sbci	r29, 0x00	; 0
     4d8:	9f 93       	push	r25
     4da:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(turnMessage);			
     4de:	ce 01       	movw	r24, r28
     4e0:	8b 59       	subi	r24, 0x9B	; 155
     4e2:	9f 4f       	sbci	r25, 0xFF	; 255
     4e4:	6d d2       	rcall	.+1242   	; 0x9c0 <USART_SendString>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	c0 ce       	rjmp	.-640    	; 0x274 <main+0xa8>
		}
		// USART_SendString("Small Scan Complete");
		
		if(serialInput == 'c' || serialInput == '!') {
     4f4:	c1 57       	subi	r28, 0x71	; 113
     4f6:	df 4f       	sbci	r29, 0xFF	; 255
     4f8:	28 81       	ld	r18, Y
     4fa:	cf 58       	subi	r28, 0x8F	; 143
     4fc:	d0 40       	sbci	r29, 0x00	; 0
     4fe:	23 36       	cpi	r18, 0x63	; 99
     500:	11 f0       	breq	.+4      	; 0x506 <main+0x33a>
     502:	21 32       	cpi	r18, 0x21	; 33
     504:	41 f4       	brne	.+16     	; 0x516 <main+0x34a>
			USART_Flush();
     506:	6c d2       	rcall	.+1240   	; 0x9e0 <USART_Flush>
			lprintf("Flushed!\n");
     508:	82 e4       	ldi	r24, 0x42	; 66
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	ac d0       	rcall	.+344    	; 0x66a <lprintf>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
		}
		
		if(serialInput == 'b')
     516:	c1 57       	subi	r28, 0x71	; 113
     518:	df 4f       	sbci	r29, 0xFF	; 255
     51a:	88 81       	ld	r24, Y
     51c:	cf 58       	subi	r28, 0x8F	; 143
     51e:	d0 40       	sbci	r29, 0x00	; 0
     520:	82 36       	cpi	r24, 0x62	; 98
     522:	51 f4       	brne	.+20     	; 0x538 <main+0x36c>
		{
			move_backward(sensor_data, 5);
     524:	65 e0       	ldi	r22, 0x05	; 5
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	c0 57       	subi	r28, 0x70	; 112
     52a:	df 4f       	sbci	r29, 0xFF	; 255
     52c:	88 81       	ld	r24, Y
     52e:	99 81       	ldd	r25, Y+1	; 0x01
     530:	c0 59       	subi	r28, 0x90	; 144
     532:	d0 40       	sbci	r29, 0x00	; 0
     534:	ad d6       	rcall	.+3418   	; 0x1290 <move_backward>
     536:	9e ce       	rjmp	.-708    	; 0x274 <main+0xa8>
				
		if(serialInput == 'd')
		{
			void reportData(sensor_data);
		}
		if(serialInput == 'Q')
     538:	c1 57       	subi	r28, 0x71	; 113
     53a:	df 4f       	sbci	r29, 0xFF	; 255
     53c:	98 81       	ld	r25, Y
     53e:	cf 58       	subi	r28, 0x8F	; 143
     540:	d0 40       	sbci	r29, 0x00	; 0
     542:	91 35       	cpi	r25, 0x51	; 81
     544:	09 f0       	breq	.+2      	; 0x548 <main+0x37c>
     546:	96 ce       	rjmp	.-724    	; 0x274 <main+0xa8>
		{
			oi_free(sensor_data);
     548:	c0 57       	subi	r28, 0x70	; 112
     54a:	df 4f       	sbci	r29, 0xFF	; 255
     54c:	88 81       	ld	r24, Y
     54e:	99 81       	ldd	r25, Y+1	; 0x01
     550:	c0 59       	subi	r28, 0x90	; 144
     552:	d0 40       	sbci	r29, 0x00	; 0
     554:	0e d1       	rcall	.+540    	; 0x772 <oi_free>
			return;
		}
	}
     556:	cf 56       	subi	r28, 0x6F	; 111
     558:	df 4f       	sbci	r29, 0xFF	; 255
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	5f 90       	pop	r5
     582:	4f 90       	pop	r4
     584:	3f 90       	pop	r3
     586:	2f 90       	pop	r2
     588:	08 95       	ret

0000058a <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     58a:	de 9a       	sbi	0x1b, 6	; 27
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	82 d2       	rcall	.+1284   	; 0xa94 <wait_ms>
     590:	de 98       	cbi	0x1b, 6	; 27
     592:	8b b3       	in	r24, 0x1b	; 27
     594:	80 7f       	andi	r24, 0xF0	; 240
     596:	8b bb       	out	0x1b, r24	; 27
     598:	08 95       	ret

0000059a <lcd_command>:
     59a:	cf 93       	push	r28
     59c:	c8 2f       	mov	r28, r24
     59e:	dc 98       	cbi	0x1b, 4	; 27
     5a0:	8b b3       	in	r24, 0x1b	; 27
     5a2:	9c 2f       	mov	r25, r28
     5a4:	92 95       	swap	r25
     5a6:	9f 70       	andi	r25, 0x0F	; 15
     5a8:	89 2b       	or	r24, r25
     5aa:	8b bb       	out	0x1b, r24	; 27
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	ed df       	rcall	.-38     	; 0x58a <lcd_toggle_clear>
     5b0:	8b b3       	in	r24, 0x1b	; 27
     5b2:	cf 70       	andi	r28, 0x0F	; 15
     5b4:	c8 2b       	or	r28, r24
     5b6:	cb bb       	out	0x1b, r28	; 27
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	e7 df       	rcall	.-50     	; 0x58a <lcd_toggle_clear>
     5bc:	dc 9a       	sbi	0x1b, 4	; 27
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <lcd_clear>:
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	ea df       	rcall	.-44     	; 0x59a <lcd_command>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	64 c2       	rjmp	.+1224   	; 0xa94 <wait_ms>

000005cc <lcd_home_line1>:
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	e5 cf       	rjmp	.-54     	; 0x59a <lcd_command>

000005d0 <lcd_init>:
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	8a bb       	out	0x1a, r24	; 26
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	8b bb       	out	0x1b, r24	; 27
     5d8:	de 9a       	sbi	0x1b, 6	; 27
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	5a d2       	rcall	.+1204   	; 0xa94 <wait_ms>
     5e0:	de 98       	cbi	0x1b, 6	; 27
     5e2:	85 e0       	ldi	r24, 0x05	; 5
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	56 d2       	rcall	.+1196   	; 0xa94 <wait_ms>
     5e8:	de 9a       	sbi	0x1b, 6	; 27
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	52 d2       	rcall	.+1188   	; 0xa94 <wait_ms>
     5f0:	de 98       	cbi	0x1b, 6	; 27
     5f2:	de 9a       	sbi	0x1b, 6	; 27
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	4d d2       	rcall	.+1178   	; 0xa94 <wait_ms>
     5fa:	de 98       	cbi	0x1b, 6	; 27
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	8b bb       	out	0x1b, r24	; 27
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	c3 df       	rcall	.-122    	; 0x58a <lcd_toggle_clear>
     604:	8b b3       	in	r24, 0x1b	; 27
     606:	8b bb       	out	0x1b, r24	; 27
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	bf df       	rcall	.-130    	; 0x58a <lcd_toggle_clear>
     60c:	8b b3       	in	r24, 0x1b	; 27
     60e:	8e 60       	ori	r24, 0x0E	; 14
     610:	8b bb       	out	0x1b, r24	; 27
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	ba df       	rcall	.-140    	; 0x58a <lcd_toggle_clear>
     616:	8b b3       	in	r24, 0x1b	; 27
     618:	8b bb       	out	0x1b, r24	; 27
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	b6 df       	rcall	.-148    	; 0x58a <lcd_toggle_clear>
     61e:	8b b3       	in	r24, 0x1b	; 27
     620:	86 60       	ori	r24, 0x06	; 6
     622:	8b bb       	out	0x1b, r24	; 27
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	b1 df       	rcall	.-158    	; 0x58a <lcd_toggle_clear>
     628:	8b b3       	in	r24, 0x1b	; 27
     62a:	8b bb       	out	0x1b, r24	; 27
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	ad df       	rcall	.-166    	; 0x58a <lcd_toggle_clear>
     630:	d8 9a       	sbi	0x1b, 0	; 27
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	aa df       	rcall	.-172    	; 0x58a <lcd_toggle_clear>
     636:	dc 9a       	sbi	0x1b, 4	; 27
     638:	c9 cf       	rjmp	.-110    	; 0x5cc <lcd_home_line1>

0000063a <lcd_home_line2>:
     63a:	80 ec       	ldi	r24, 0xC0	; 192
     63c:	ae cf       	rjmp	.-164    	; 0x59a <lcd_command>

0000063e <lcd_home_line3>:
     63e:	84 e9       	ldi	r24, 0x94	; 148
     640:	ac cf       	rjmp	.-168    	; 0x59a <lcd_command>

00000642 <lcd_home_line4>:
     642:	84 ed       	ldi	r24, 0xD4	; 212
     644:	aa cf       	rjmp	.-172    	; 0x59a <lcd_command>

00000646 <lcd_putc>:
     646:	cf 93       	push	r28
     648:	c8 2f       	mov	r28, r24
     64a:	8b b3       	in	r24, 0x1b	; 27
     64c:	9c 2f       	mov	r25, r28
     64e:	92 95       	swap	r25
     650:	9f 70       	andi	r25, 0x0F	; 15
     652:	89 2b       	or	r24, r25
     654:	8b bb       	out	0x1b, r24	; 27
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	98 df       	rcall	.-208    	; 0x58a <lcd_toggle_clear>
     65a:	8b b3       	in	r24, 0x1b	; 27
     65c:	cf 70       	andi	r28, 0x0F	; 15
     65e:	c8 2b       	or	r28, r24
     660:	cb bb       	out	0x1b, r28	; 27
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	92 df       	rcall	.-220    	; 0x58a <lcd_toggle_clear>
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	c1 55       	subi	r28, 0x51	; 81
     680:	d1 09       	sbc	r29, r1
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	fe 01       	movw	r30, r28
     68e:	e4 5a       	subi	r30, 0xA4	; 164
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	41 91       	ld	r20, Z+
     694:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     696:	2e 2f       	mov	r18, r30
     698:	3f 2f       	mov	r19, r31
     69a:	61 e5       	ldi	r22, 0x51	; 81
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	ce 01       	movw	r24, r28
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	0e 94 61 14 	call	0x28c2	; 0x28c2 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     6a6:	be 01       	movw	r22, r28
     6a8:	6f 5f       	subi	r22, 0xFF	; 255
     6aa:	7f 4f       	sbci	r23, 0xFF	; 255
     6ac:	8c ee       	ldi	r24, 0xEC	; 236
     6ae:	94 e0       	ldi	r25, 0x04	; 4
     6b0:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <strcmp>
     6b4:	28 2f       	mov	r18, r24
     6b6:	39 2f       	mov	r19, r25
     6b8:	23 2b       	or	r18, r19
     6ba:	09 f4       	brne	.+2      	; 0x6be <lprintf+0x54>
     6bc:	44 c0       	rjmp	.+136    	; 0x746 <lprintf+0xdc>
		return;
	
	strcpy(lastbuffer, buffer);
     6be:	be 01       	movw	r22, r28
     6c0:	6f 5f       	subi	r22, 0xFF	; 255
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	8c ee       	ldi	r24, 0xEC	; 236
     6c6:	94 e0       	ldi	r25, 0x04	; 4
     6c8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <strcpy>
	lcd_clear();
     6cc:	7a df       	rcall	.-268    	; 0x5c2 <lcd_clear>
     6ce:	cc 24       	eor	r12, r12
     6d0:	c3 94       	inc	r12
     6d2:	d1 2c       	mov	r13, r1
     6d4:	cc 0e       	add	r12, r28
     6d6:	dd 1e       	adc	r13, r29
	char *str = buffer;
	int charnum = 0;
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     6dc:	0f 2e       	mov	r0, r31
     6de:	f4 e1       	ldi	r31, 0x14	; 20
     6e0:	ef 2e       	mov	r14, r31
     6e2:	f1 2c       	mov	r15, r1
     6e4:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     6e6:	27 c0       	rjmp	.+78     	; 0x736 <lprintf+0xcc>
		if (*str == '\n') {
     6e8:	8a 30       	cpi	r24, 0x0A	; 10
     6ea:	51 f4       	brne	.+20     	; 0x700 <lprintf+0x96>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     6ec:	c8 01       	movw	r24, r16
     6ee:	b7 01       	movw	r22, r14
     6f0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodhi4>
     6f4:	97 01       	movw	r18, r14
     6f6:	28 1b       	sub	r18, r24
     6f8:	39 0b       	sbc	r19, r25
     6fa:	02 0f       	add	r16, r18
     6fc:	13 1f       	adc	r17, r19
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <lprintf+0x9c>
		} else {
			lcd_putc(*str);
     700:	a2 df       	rcall	.-188    	; 0x646 <lcd_putc>
			charnum++;
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     706:	c8 01       	movw	r24, r16
     708:	b7 01       	movw	r22, r14
     70a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodhi4>
     70e:	89 2b       	or	r24, r25
     710:	91 f4       	brne	.+36     	; 0x736 <lprintf+0xcc>
			switch (charnum / LCD_WIDTH) {
     712:	c8 01       	movw	r24, r16
     714:	b7 01       	movw	r22, r14
     716:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__divmodhi4>
     71a:	62 30       	cpi	r22, 0x02	; 2
     71c:	71 05       	cpc	r23, r1
     71e:	41 f0       	breq	.+16     	; 0x730 <lprintf+0xc6>
     720:	63 30       	cpi	r22, 0x03	; 3
     722:	71 05       	cpc	r23, r1
     724:	39 f0       	breq	.+14     	; 0x734 <lprintf+0xca>
     726:	61 30       	cpi	r22, 0x01	; 1
     728:	71 05       	cpc	r23, r1
     72a:	29 f4       	brne	.+10     	; 0x736 <lprintf+0xcc>
			case 1:
				lcd_home_line2();
     72c:	86 df       	rcall	.-244    	; 0x63a <lcd_home_line2>
				break;
     72e:	03 c0       	rjmp	.+6      	; 0x736 <lprintf+0xcc>
			case 2:
				lcd_home_line3();
     730:	86 df       	rcall	.-244    	; 0x63e <lcd_home_line3>
				break;
     732:	01 c0       	rjmp	.+2      	; 0x736 <lprintf+0xcc>
			case 3:
				lcd_home_line4();
     734:	86 df       	rcall	.-244    	; 0x642 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     736:	f6 01       	movw	r30, r12
     738:	81 91       	ld	r24, Z+
     73a:	6f 01       	movw	r12, r30
     73c:	88 23       	and	r24, r24
     73e:	19 f0       	breq	.+6      	; 0x746 <lprintf+0xdc>
     740:	00 35       	cpi	r16, 0x50	; 80
     742:	11 05       	cpc	r17, r1
     744:	8c f2       	brlt	.-94     	; 0x6e8 <lprintf+0x7e>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     746:	cf 5a       	subi	r28, 0xAF	; 175
     748:	df 4f       	sbci	r29, 0xFF	; 255
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	08 95       	ret

00000766 <oi_alloc>:
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
     766:	64 e3       	ldi	r22, 0x34	; 52
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <calloc>

00000772 <oi_free>:
     772:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <free>
     776:	08 95       	ret

00000778 <oi_byte_tx>:
     778:	eb e9       	ldi	r30, 0x9B	; 155
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	90 81       	ld	r25, Z
     77e:	95 ff       	sbrs	r25, 5
     780:	fd cf       	rjmp	.-6      	; 0x77c <oi_byte_tx+0x4>
     782:	80 93 9c 00 	sts	0x009C, r24
     786:	08 95       	ret

00000788 <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	18 2f       	mov	r17, r24
     792:	09 2f       	mov	r16, r25
     794:	c6 2f       	mov	r28, r22
     796:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
     798:	81 e9       	ldi	r24, 0x91	; 145
     79a:	ee df       	rcall	.-36     	; 0x778 <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
     79c:	80 2f       	mov	r24, r16
     79e:	ec df       	rcall	.-40     	; 0x778 <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
     7a0:	81 2f       	mov	r24, r17
     7a2:	ea df       	rcall	.-44     	; 0x778 <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
     7a4:	8d 2f       	mov	r24, r29
     7a6:	e8 df       	rcall	.-48     	; 0x778 <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
     7a8:	8c 2f       	mov	r24, r28
     7aa:	e6 df       	rcall	.-52     	; 0x778 <oi_byte_tx>
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	08 95       	ret

000007b6 <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	08 2f       	mov	r16, r24
     7c0:	16 2f       	mov	r17, r22
     7c2:	d4 2f       	mov	r29, r20
     7c4:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
     7c6:	8b e8       	ldi	r24, 0x8B	; 139
     7c8:	d7 df       	rcall	.-82     	; 0x778 <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
     7ca:	11 23       	and	r17, r17
     7cc:	41 f0       	breq	.+16     	; 0x7de <oi_set_leds+0x28>
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	01 11       	cpse	r16, r1
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <oi_set_leds+0x24>
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	cb 01       	movw	r24, r22
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <oi_set_leds+0x2c>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	ca df       	rcall	.-108    	; 0x778 <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
     7e4:	8d 2f       	mov	r24, r29
     7e6:	c8 df       	rcall	.-112    	; 0x778 <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
     7e8:	8c 2f       	mov	r24, r28
     7ea:	c6 df       	rcall	.-116    	; 0x778 <oi_byte_tx>
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     7f6:	eb e9       	ldi	r30, 0x9B	; 155
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	88 23       	and	r24, r24
     7fe:	ec f7       	brge	.-6      	; 0x7fa <oi_byte_rx+0x4>

	return UDR1;
     800:	80 91 9c 00 	lds	r24, 0x009C
}
     804:	08 95       	ret

00000806 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     814:	80 91 9b 00 	lds	r24, 0x009B
     818:	88 23       	and	r24, r24
     81a:	44 f4       	brge	.+16     	; 0x82c <oi_update+0x26>
		i = UDR1;
     81c:	ac e9       	ldi	r26, 0x9C	; 156
     81e:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     820:	eb e9       	ldi	r30, 0x9B	; 155
     822:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     824:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     826:	80 81       	ld	r24, Z
     828:	88 23       	and	r24, r24
     82a:	e4 f3       	brlt	.-8      	; 0x824 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     82c:	8e e8       	ldi	r24, 0x8E	; 142
     82e:	a4 df       	rcall	.-184    	; 0x778 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     830:	86 e0       	ldi	r24, 0x06	; 6
     832:	a2 df       	rcall	.-188    	; 0x778 <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     834:	87 01       	movw	r16, r14
     836:	0c 5c       	subi	r16, 0xCC	; 204
     838:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
     83a:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     83c:	dc df       	rcall	.-72     	; 0x7f6 <oi_byte_rx>
     83e:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     840:	c0 17       	cp	r28, r16
     842:	d1 07       	cpc	r29, r17
     844:	d9 f7       	brne	.-10     	; 0x83c <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     846:	f7 01       	movw	r30, r14
     848:	94 85       	ldd	r25, Z+12	; 0x0c
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	25 85       	ldd	r18, Z+13	; 0x0d
     84e:	82 0f       	add	r24, r18
     850:	91 1d       	adc	r25, r1
     852:	95 87       	std	Z+13, r25	; 0x0d
     854:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     856:	96 85       	ldd	r25, Z+14	; 0x0e
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	27 85       	ldd	r18, Z+15	; 0x0f
     85c:	82 0f       	add	r24, r18
     85e:	91 1d       	adc	r25, r1
     860:	97 87       	std	Z+15, r25	; 0x0f
     862:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     864:	91 89       	ldd	r25, Z+17	; 0x11
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	22 89       	ldd	r18, Z+18	; 0x12
     86a:	82 0f       	add	r24, r18
     86c:	91 1d       	adc	r25, r1
     86e:	92 8b       	std	Z+18, r25	; 0x12
     870:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     872:	93 89       	ldd	r25, Z+19	; 0x13
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	24 89       	ldd	r18, Z+20	; 0x14
     878:	82 0f       	add	r24, r18
     87a:	91 1d       	adc	r25, r1
     87c:	94 8b       	std	Z+20, r25	; 0x14
     87e:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     880:	96 89       	ldd	r25, Z+22	; 0x16
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	27 89       	ldd	r18, Z+23	; 0x17
     886:	82 0f       	add	r24, r18
     888:	91 1d       	adc	r25, r1
     88a:	97 8b       	std	Z+23, r25	; 0x17
     88c:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     88e:	90 8d       	ldd	r25, Z+24	; 0x18
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	21 8d       	ldd	r18, Z+25	; 0x19
     894:	82 0f       	add	r24, r18
     896:	91 1d       	adc	r25, r1
     898:	91 8f       	std	Z+25, r25	; 0x19
     89a:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     89c:	92 8d       	ldd	r25, Z+26	; 0x1a
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	23 8d       	ldd	r18, Z+27	; 0x1b
     8a2:	82 0f       	add	r24, r18
     8a4:	91 1d       	adc	r25, r1
     8a6:	93 8f       	std	Z+27, r25	; 0x1b
     8a8:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     8aa:	94 8d       	ldd	r25, Z+28	; 0x1c
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	25 8d       	ldd	r18, Z+29	; 0x1d
     8b0:	82 0f       	add	r24, r18
     8b2:	91 1d       	adc	r25, r1
     8b4:	95 8f       	std	Z+29, r25	; 0x1d
     8b6:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     8b8:	96 8d       	ldd	r25, Z+30	; 0x1e
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	27 8d       	ldd	r18, Z+31	; 0x1f
     8be:	82 0f       	add	r24, r18
     8c0:	91 1d       	adc	r25, r1
     8c2:	97 8f       	std	Z+31, r25	; 0x1f
     8c4:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     8c6:	90 a1       	ldd	r25, Z+32	; 0x20
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	21 a1       	ldd	r18, Z+33	; 0x21
     8cc:	82 0f       	add	r24, r18
     8ce:	91 1d       	adc	r25, r1
     8d0:	91 a3       	std	Z+33, r25	; 0x21
     8d2:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     8d4:	92 a1       	ldd	r25, Z+34	; 0x22
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	23 a1       	ldd	r18, Z+35	; 0x23
     8da:	82 0f       	add	r24, r18
     8dc:	91 1d       	adc	r25, r1
     8de:	93 a3       	std	Z+35, r25	; 0x23
     8e0:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     8e2:	42 a5       	ldd	r20, Z+42	; 0x2a
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	31 a5       	ldd	r19, Z+41	; 0x29
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	24 0f       	add	r18, r20
     8ec:	35 1f       	adc	r19, r21
     8ee:	36 a3       	std	Z+38, r19	; 0x26
     8f0:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     8f2:	90 a9       	ldd	r25, Z+48	; 0x30
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	84 0f       	add	r24, r20
     8f8:	95 1f       	adc	r25, r21
     8fa:	95 a7       	std	Z+45, r25	; 0x2d
     8fc:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     8fe:	92 a9       	ldd	r25, Z+50	; 0x32
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	23 a9       	ldd	r18, Z+51	; 0x33
     904:	82 0f       	add	r24, r18
     906:	91 1d       	adc	r25, r1
     908:	97 a7       	std	Z+47, r25	; 0x2f
     90a:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     90c:	94 a9       	ldd	r25, Z+52	; 0x34
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	25 a9       	ldd	r18, Z+53	; 0x35
     912:	82 0f       	add	r24, r18
     914:	91 1d       	adc	r25, r1
     916:	91 ab       	std	Z+49, r25	; 0x31
     918:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     91a:	96 a9       	ldd	r25, Z+54	; 0x36
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	27 a9       	ldd	r18, Z+55	; 0x37
     920:	82 0f       	add	r24, r18
     922:	91 1d       	adc	r25, r1
     924:	93 ab       	std	Z+51, r25	; 0x33
     926:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     928:	83 e2       	ldi	r24, 0x23	; 35
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	b3 d0       	rcall	.+358    	; 0xa94 <wait_ms>
}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	08 95       	ret

0000093c <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     946:	09 e9       	ldi	r16, 0x99	; 153
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	80 e1       	ldi	r24, 0x10	; 16
     94c:	f8 01       	movw	r30, r16
     94e:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     950:	88 e1       	ldi	r24, 0x18	; 24
     952:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     956:	86 e0       	ldi	r24, 0x06	; 6
     958:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     95c:	80 e8       	ldi	r24, 0x80	; 128
     95e:	0c df       	rcall	.-488    	; 0x778 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     960:	81 e8       	ldi	r24, 0x81	; 129
     962:	0a df       	rcall	.-492    	; 0x778 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     964:	88 e0       	ldi	r24, 0x08	; 8
     966:	08 df       	rcall	.-496    	; 0x778 <oi_byte_tx>
	wait_ms(100);
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	93 d0       	rcall	.+294    	; 0xa94 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     96e:	81 e2       	ldi	r24, 0x21	; 33
     970:	f8 01       	movw	r30, r16
     972:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     974:	84 e8       	ldi	r24, 0x84	; 132
     976:	00 df       	rcall	.-512    	; 0x778 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     978:	2f ef       	ldi	r18, 0xFF	; 255
     97a:	47 e0       	ldi	r20, 0x07	; 7
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	1a df       	rcall	.-460    	; 0x7b6 <oi_set_leds>
	
	oi_update(self);
     982:	ce 01       	movw	r24, r28
     984:	40 df       	rcall	.-384    	; 0x806 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     986:	ce 01       	movw	r24, r28
     988:	3e df       	rcall	.-388    	; 0x806 <oi_update>
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <serial_init>:
	}
	
	//return string
	return receivedVars;
	
}
     994:	10 92 90 00 	sts	0x0090, r1
     998:	81 e2       	ldi	r24, 0x21	; 33
     99a:	89 b9       	out	0x09, r24	; 9
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	8b b9       	out	0x0b, r24	; 11
     9a0:	8e e0       	ldi	r24, 0x0E	; 14
     9a2:	80 93 95 00 	sts	0x0095, r24
     9a6:	88 e1       	ldi	r24, 0x18	; 24
     9a8:	8a b9       	out	0x0a, r24	; 10
     9aa:	08 95       	ret

000009ac <USART_Transmit>:
     9ac:	5d 9b       	sbis	0x0b, 5	; 11
     9ae:	fe cf       	rjmp	.-4      	; 0x9ac <USART_Transmit>
     9b0:	8c b9       	out	0x0c, r24	; 12
     9b2:	08 95       	ret

000009b4 <USART_Receive>:
     9b4:	5f 9b       	sbis	0x0b, 7	; 11
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <USART_Receive+0x8>
     9b8:	8c b1       	in	r24, 0x0c	; 12
     9ba:	08 95       	ret
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret

000009c0 <USART_SendString>:


void USART_SendString(char SentString[])
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	c8 2f       	mov	r28, r24
     9c6:	d9 2f       	mov	r29, r25
	char flag = 1;
	int i = 0;
	while(flag)
	{
		if(SentString[i])
     9c8:	89 91       	ld	r24, Y+
     9ca:	88 23       	and	r24, r24
     9cc:	11 f0       	breq	.+4      	; 0x9d2 <USART_SendString+0x12>
		{
			USART_Transmit(SentString[i]);
     9ce:	ee df       	rcall	.-36     	; 0x9ac <USART_Transmit>
     9d0:	fb cf       	rjmp	.-10     	; 0x9c8 <USART_SendString+0x8>
		}
		else
		{
			flag = 0;
			USART_Transmit(10);
     9d2:	8a e0       	ldi	r24, 0x0A	; 10
     9d4:	eb df       	rcall	.-42     	; 0x9ac <USART_Transmit>
			USART_Transmit(13);
     9d6:	8d e0       	ldi	r24, 0x0D	; 13
     9d8:	e9 df       	rcall	.-46     	; 0x9ac <USART_Transmit>
		}
		i++;
	}
	
}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <USART_Flush>:

void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC) )
     9e0:	5f 9b       	sbis	0x0b, 7	; 11
     9e2:	03 c0       	rjmp	.+6      	; 0x9ea <USART_Flush+0xa>
	{
		dummy = UDR0;
     9e4:	8c b1       	in	r24, 0x0c	; 12
}

void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC) )
     9e6:	5f 99       	sbic	0x0b, 7	; 11
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <USART_Flush+0x4>
     9ea:	08 95       	ret

000009ec <ADC_init>:
			return n+1;
		}
	}
	
	return 0;
}
     9ec:	37 9a       	sbi	0x06, 7	; 6
     9ee:	86 b1       	in	r24, 0x06	; 6
     9f0:	87 60       	ori	r24, 0x07	; 7
     9f2:	86 b9       	out	0x06, r24	; 6
     9f4:	87 b1       	in	r24, 0x07	; 7
     9f6:	80 6c       	ori	r24, 0xC0	; 192
     9f8:	87 b9       	out	0x07, r24	; 7
     9fa:	08 95       	ret

000009fc <ADC_read>:
     9fc:	97 b1       	in	r25, 0x07	; 7
     9fe:	8f 71       	andi	r24, 0x1F	; 31
     a00:	98 2b       	or	r25, r24
     a02:	97 b9       	out	0x07, r25	; 7
     a04:	36 9a       	sbi	0x06, 6	; 6
     a06:	36 99       	sbic	0x06, 6	; 6
     a08:	fe cf       	rjmp	.-4      	; 0xa06 <ADC_read+0xa>
     a0a:	24 b1       	in	r18, 0x04	; 4
     a0c:	35 b1       	in	r19, 0x05	; 5
     a0e:	82 2f       	mov	r24, r18
     a10:	93 2f       	mov	r25, r19
     a12:	08 95       	ret

00000a14 <calcCm>:
     a14:	bc 01       	movw	r22, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	ec d7       	rcall	.+4056   	; 0x19f4 <__floatunsisf>
     a1c:	2a e9       	ldi	r18, 0x9A	; 154
     a1e:	39 e9       	ldi	r19, 0x99	; 153
     a20:	49 e7       	ldi	r20, 0x79	; 121
     a22:	50 e4       	ldi	r21, 0x40	; 64
     a24:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__mulsf3>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 ea       	ldi	r20, 0xA0	; 160
     a2e:	50 e4       	ldi	r21, 0x40	; 64
     a30:	e9 d6       	rcall	.+3538   	; 0x1804 <__addsf3>
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	70 eb       	ldi	r23, 0xB0	; 176
     a3a:	83 e3       	ldi	r24, 0x33	; 51
     a3c:	97 e4       	ldi	r25, 0x47	; 71
     a3e:	46 c7       	rjmp	.+3724   	; 0x18cc <__divsf3>

00000a40 <song_init>:
     a40:	8c e8       	ldi	r24, 0x8C	; 140
     a42:	9a de       	rcall	.-716    	; 0x778 <oi_byte_tx>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	98 de       	rcall	.-720    	; 0x778 <oi_byte_tx>
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	96 de       	rcall	.-724    	; 0x778 <oi_byte_tx>
     a4c:	87 e3       	ldi	r24, 0x37	; 55
     a4e:	94 de       	rcall	.-728    	; 0x778 <oi_byte_tx>
     a50:	80 e4       	ldi	r24, 0x40	; 64
     a52:	92 de       	rcall	.-732    	; 0x778 <oi_byte_tx>
     a54:	8a e3       	ldi	r24, 0x3A	; 58
     a56:	90 de       	rcall	.-736    	; 0x778 <oi_byte_tx>
     a58:	80 e4       	ldi	r24, 0x40	; 64
     a5a:	8e ce       	rjmp	.-740    	; 0x778 <oi_byte_tx>

00000a5c <timer2_start>:
     a5c:	10 92 42 05 	sts	0x0542, r1
     a60:	10 92 41 05 	sts	0x0541, r1
     a64:	81 11       	cpse	r24, r1
     a66:	06 c0       	rjmp	.+12     	; 0xa74 <timer2_start+0x18>
     a68:	8b e0       	ldi	r24, 0x0B	; 11
     a6a:	85 bd       	out	0x25, r24	; 37
     a6c:	87 b7       	in	r24, 0x37	; 55
     a6e:	80 68       	ori	r24, 0x80	; 128
     a70:	87 bf       	out	0x37, r24	; 55
     a72:	07 c0       	rjmp	.+14     	; 0xa82 <timer2_start+0x26>
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	29 f4       	brne	.+10     	; 0xa82 <timer2_start+0x26>
     a78:	89 e0       	ldi	r24, 0x09	; 9
     a7a:	85 bd       	out	0x25, r24	; 37
     a7c:	87 b7       	in	r24, 0x37	; 55
     a7e:	80 68       	ori	r24, 0x80	; 128
     a80:	87 bf       	out	0x37, r24	; 55
     a82:	78 94       	sei
     a84:	08 95       	ret

00000a86 <timer2_stop>:
     a86:	87 b7       	in	r24, 0x37	; 55
     a88:	8f 77       	andi	r24, 0x7F	; 127
     a8a:	87 bf       	out	0x37, r24	; 55
     a8c:	85 b5       	in	r24, 0x25	; 37
     a8e:	8f 77       	andi	r24, 0x7F	; 127
     a90:	85 bd       	out	0x25, r24	; 37
     a92:	08 95       	ret

00000a94 <wait_ms>:
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	8a ef       	ldi	r24, 0xFA	; 250
     a9c:	83 bd       	out	0x23, r24	; 35
     a9e:	10 92 42 05 	sts	0x0542, r1
     aa2:	10 92 41 05 	sts	0x0541, r1
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	d9 df       	rcall	.-78     	; 0xa5c <timer2_start>
     aaa:	20 91 41 05 	lds	r18, 0x0541
     aae:	30 91 42 05 	lds	r19, 0x0542
     ab2:	2c 17       	cp	r18, r28
     ab4:	3d 07       	cpc	r19, r29
     ab6:	c8 f3       	brcs	.-14     	; 0xaaa <wait_ms+0x16>
     ab8:	e6 df       	rcall	.-52     	; 0xa86 <timer2_stop>
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <__vector_9>:
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
     ace:	80 91 41 05 	lds	r24, 0x0541
     ad2:	90 91 42 05 	lds	r25, 0x0542
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	90 93 42 05 	sts	0x0542, r25
     adc:	80 93 41 05 	sts	0x0541, r24
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <init_push_buttons>:
     aee:	84 b3       	in	r24, 0x14	; 20
     af0:	80 7c       	andi	r24, 0xC0	; 192
     af2:	84 bb       	out	0x14, r24	; 20
     af4:	85 b3       	in	r24, 0x15	; 21
     af6:	8f 63       	ori	r24, 0x3F	; 63
     af8:	85 bb       	out	0x15, r24	; 21
     afa:	08 95       	ret

00000afc <ping_init>:
     afc:	1f bc       	out	0x2f, r1	; 47
     afe:	84 ec       	ldi	r24, 0xC4	; 196
     b00:	8e bd       	out	0x2e, r24	; 46
     b02:	17 be       	out	0x37, r1	; 55
     b04:	08 95       	ret

00000b06 <__vector_11>:
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	2f 93       	push	r18
     b12:	3f 93       	push	r19
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	86 b5       	in	r24, 0x26	; 38
     b1a:	97 b5       	in	r25, 0x27	; 39
     b1c:	90 93 40 05 	sts	0x0540, r25
     b20:	80 93 3f 05 	sts	0x053F, r24
     b24:	20 91 3d 05 	lds	r18, 0x053D
     b28:	30 91 3e 05 	lds	r19, 0x053E
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	23 2b       	or	r18, r19
     b32:	11 f0       	breq	.+4      	; 0xb38 <__vector_11+0x32>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	90 93 3e 05 	sts	0x053E, r25
     b3c:	80 93 3d 05 	sts	0x053D, r24
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <send_pulse>:
     b52:	8c 9a       	sbi	0x11, 4	; 17
     b54:	94 9a       	sbi	0x12, 4	; 18
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	9c df       	rcall	.-200    	; 0xa94 <wait_ms>
     b5c:	94 98       	cbi	0x12, 4	; 18
     b5e:	8c 98       	cbi	0x11, 4	; 17
     b60:	08 95       	ret

00000b62 <time2dist>:
     b62:	bc 01       	movw	r22, r24
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	45 d7       	rcall	.+3722   	; 0x19f4 <__floatunsisf>
     b6a:	22 ef       	ldi	r18, 0xF2	; 242
     b6c:	32 ed       	ldi	r19, 0xD2	; 210
     b6e:	4d e8       	ldi	r20, 0x8D	; 141
     b70:	5e e3       	ldi	r21, 0x3E	; 62
     b72:	ce d7       	rcall	.+3996   	; 0x1b10 <__mulsf3>
     b74:	20 e5       	ldi	r18, 0x50	; 80
     b76:	3d e8       	ldi	r19, 0x8D	; 141
     b78:	4f ef       	ldi	r20, 0xFF	; 255
     b7a:	51 e4       	ldi	r21, 0x41	; 65
     b7c:	42 c6       	rjmp	.+3204   	; 0x1802 <__subsf3>

00000b7e <ping_read>:
     b7e:	e9 df       	rcall	.-46     	; 0xb52 <send_pulse>
     b80:	80 e2       	ldi	r24, 0x20	; 32
     b82:	87 bf       	out	0x37, r24	; 55
     b84:	80 91 3d 05 	lds	r24, 0x053D
     b88:	90 91 3e 05 	lds	r25, 0x053E
     b8c:	89 2b       	or	r24, r25
     b8e:	d1 f7       	brne	.-12     	; 0xb84 <ping_read+0x6>
     b90:	84 e8       	ldi	r24, 0x84	; 132
     b92:	8e bd       	out	0x2e, r24	; 46
     b94:	20 91 3f 05 	lds	r18, 0x053F
     b98:	30 91 40 05 	lds	r19, 0x0540
     b9c:	80 91 3d 05 	lds	r24, 0x053D
     ba0:	90 91 3e 05 	lds	r25, 0x053E
     ba4:	89 2b       	or	r24, r25
     ba6:	d1 f3       	breq	.-12     	; 0xb9c <ping_read+0x1e>
     ba8:	84 ec       	ldi	r24, 0xC4	; 196
     baa:	8e bd       	out	0x2e, r24	; 46
     bac:	80 91 3f 05 	lds	r24, 0x053F
     bb0:	90 91 40 05 	lds	r25, 0x0540
     bb4:	17 be       	out	0x37, r1	; 55
     bb6:	82 1b       	sub	r24, r18
     bb8:	93 0b       	sbc	r25, r19
     bba:	d3 cf       	rjmp	.-90     	; 0xb62 <time2dist>

00000bbc <servo_turn>:
     bbc:	bc 01       	movw	r22, r24
     bbe:	88 27       	eor	r24, r24
     bc0:	77 fd       	sbrc	r23, 7
     bc2:	80 95       	com	r24
     bc4:	98 2f       	mov	r25, r24
     bc6:	18 d7       	rcall	.+3632   	; 0x19f8 <__floatsisf>
     bc8:	2b e3       	ldi	r18, 0x3B	; 59
     bca:	3a ea       	ldi	r19, 0xAA	; 170
     bcc:	4a e1       	ldi	r20, 0x1A	; 26
     bce:	5c e3       	ldi	r21, 0x3C	; 60
     bd0:	9f d7       	rcall	.+3902   	; 0x1b10 <__mulsf3>
     bd2:	28 e4       	ldi	r18, 0x48	; 72
     bd4:	31 ee       	ldi	r19, 0xE1	; 225
     bd6:	4a ef       	ldi	r20, 0xFA	; 250
     bd8:	5e e3       	ldi	r21, 0x3E	; 62
     bda:	14 d6       	rcall	.+3112   	; 0x1804 <__addsf3>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a e7       	ldi	r20, 0x7A	; 122
     be2:	53 e4       	ldi	r21, 0x43	; 67
     be4:	95 d7       	rcall	.+3882   	; 0x1b10 <__mulsf3>
     be6:	da d6       	rcall	.+3508   	; 0x199c <__fixunssfsi>
     be8:	61 50       	subi	r22, 0x01	; 1
     bea:	71 09       	sbc	r23, r1
     bec:	70 93 85 00 	sts	0x0085, r23
     bf0:	60 93 84 00 	sts	0x0084, r22
     bf4:	84 e1       	ldi	r24, 0x14	; 20
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	4d cf       	rjmp	.-358    	; 0xa94 <wait_ms>

00000bfa <timer3_init>:
     bfa:	83 ec       	ldi	r24, 0xC3	; 195
     bfc:	99 e0       	ldi	r25, 0x09	; 9
     bfe:	90 93 87 00 	sts	0x0087, r25
     c02:	80 93 86 00 	sts	0x0086, r24
     c06:	80 e5       	ldi	r24, 0x50	; 80
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	90 93 85 00 	sts	0x0085, r25
     c0e:	80 93 84 00 	sts	0x0084, r24
     c12:	83 e2       	ldi	r24, 0x23	; 35
     c14:	80 93 8b 00 	sts	0x008B, r24
     c18:	8b e1       	ldi	r24, 0x1B	; 27
     c1a:	80 93 8a 00 	sts	0x008A, r24
     c1e:	14 9a       	sbi	0x02, 4	; 2
     c20:	08 95       	ret

00000c22 <turn_clockwise>:
	oi_set_wheels(0, 0); // stop	
	reportData(sensor);
}

void turn_clockwise(oi_t *sensor, int degrees)
{
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	ec 97       	sbiw	r28, 0x3c	; 60
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	8c 01       	movw	r16, r24
     c44:	6b 01       	movw	r12, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-150, 150);
     c46:	66 e9       	ldi	r22, 0x96	; 150
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	8a e6       	ldi	r24, 0x6A	; 106
     c4c:	9f ef       	ldi	r25, 0xFF	; 255
     c4e:	9c dd       	rcall	.-1224   	; 0x788 <oi_set_wheels>
	
	if(degrees == 30)
     c50:	2e e1       	ldi	r18, 0x1E	; 30
     c52:	c2 16       	cp	r12, r18
     c54:	d1 04       	cpc	r13, r1
     c56:	09 f0       	breq	.+2      	; 0xc5a <turn_clockwise+0x38>
     c58:	3c c1       	rjmp	.+632    	; 0xed2 <turn_clockwise+0x2b0>
     c5a:	e1 2c       	mov	r14, r1
     c5c:	f1 2c       	mov	r15, r1
	{
		while (sum < degrees-10) {
			oi_update(sensor);
     c5e:	c8 01       	movw	r24, r16
     c60:	d2 dd       	rcall	.-1116   	; 0x806 <oi_update>
			sum -= sensor->angle;
     c62:	f8 01       	movw	r30, r16
     c64:	86 85       	ldd	r24, Z+14	; 0x0e
     c66:	97 85       	ldd	r25, Z+15	; 0x0f
     c68:	e8 1a       	sub	r14, r24
     c6a:	f9 0a       	sbc	r15, r25
		
		if((sensor->cliff_frontleft_signal > 800))
     c6c:	86 8d       	ldd	r24, Z+30	; 0x1e
     c6e:	97 8d       	ldd	r25, Z+31	; 0x1f
     c70:	81 32       	cpi	r24, 0x21	; 33
     c72:	93 40       	sbci	r25, 0x03	; 3
     c74:	f8 f0       	brcs	.+62     	; 0xcb4 <turn_clockwise+0x92>
		{
			char sensorData[60];
			lprintf("Line Detected");
     c76:	8c e4       	ldi	r24, 0x4C	; 76
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	9f 93       	push	r25
     c7c:	8f 93       	push	r24
     c7e:	f5 dc       	rcall	.-1558   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	7f dd       	rcall	.-1282   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Front Left Sensor Line Detected | degrees moved: %d", sum);
     c8a:	ff 92       	push	r15
     c8c:	ef 92       	push	r14
     c8e:	8a e5       	ldi	r24, 0x5A	; 90
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	8e 01       	movw	r16, r28
     c98:	0f 5f       	subi	r16, 0xFF	; 255
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	1f 93       	push	r17
     c9e:	0f 93       	push	r16
     ca0:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     ca4:	c8 01       	movw	r24, r16
     ca6:	8c de       	rcall	.-744    	; 0x9c0 <USART_SendString>
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	1d c1       	rjmp	.+570    	; 0xeee <turn_clockwise+0x2cc>
			return 3;
		}
		
		else if((sensor->cliff_frontright_signal > 800))
     cb4:	f8 01       	movw	r30, r16
     cb6:	80 a1       	ldd	r24, Z+32	; 0x20
     cb8:	91 a1       	ldd	r25, Z+33	; 0x21
     cba:	81 32       	cpi	r24, 0x21	; 33
     cbc:	93 40       	sbci	r25, 0x03	; 3
     cbe:	f8 f0       	brcs	.+62     	; 0xcfe <turn_clockwise+0xdc>
		{
			char sensorData[60];
			lprintf("Line Detected");
     cc0:	8c e4       	ldi	r24, 0x4C	; 76
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	d0 dc       	rcall	.-1632   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	5a dd       	rcall	.-1356   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Front Right Sensor Line Detected | degrees moved: %d", sum);
     cd4:	ff 92       	push	r15
     cd6:	ef 92       	push	r14
     cd8:	8e e8       	ldi	r24, 0x8E	; 142
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	8e 01       	movw	r16, r28
     ce2:	0f 5f       	subi	r16, 0xFF	; 255
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	1f 93       	push	r17
     ce8:	0f 93       	push	r16
     cea:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     cee:	c8 01       	movw	r24, r16
     cf0:	67 de       	rcall	.-818    	; 0x9c0 <USART_SendString>
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	f8 c0       	rjmp	.+496    	; 0xeee <turn_clockwise+0x2cc>
			return 3;
		}

		else if((sensor->cliff_right_signal > 800))
     cfe:	f8 01       	movw	r30, r16
     d00:	82 a1       	ldd	r24, Z+34	; 0x22
     d02:	93 a1       	ldd	r25, Z+35	; 0x23
     d04:	81 32       	cpi	r24, 0x21	; 33
     d06:	93 40       	sbci	r25, 0x03	; 3
     d08:	f8 f0       	brcs	.+62     	; 0xd48 <turn_clockwise+0x126>
		{
			char sensorData[60];
			lprintf("Line Detected");
     d0a:	8c e4       	ldi	r24, 0x4C	; 76
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	ab dc       	rcall	.-1706   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	35 dd       	rcall	.-1430   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Right Sensor Line Detected | distance moved: %d", sum);
     d1e:	ff 92       	push	r15
     d20:	ef 92       	push	r14
     d22:	83 ec       	ldi	r24, 0xC3	; 195
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	9f 93       	push	r25
     d28:	8f 93       	push	r24
     d2a:	8e 01       	movw	r16, r28
     d2c:	0f 5f       	subi	r16, 0xFF	; 255
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	1f 93       	push	r17
     d32:	0f 93       	push	r16
     d34:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     d38:	c8 01       	movw	r24, r16
     d3a:	42 de       	rcall	.-892    	; 0x9c0 <USART_SendString>
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	d3 c0       	rjmp	.+422    	; 0xeee <turn_clockwise+0x2cc>
			return 3;
		}

		else if((sensor->cliff_left_signal > 800))
     d48:	f8 01       	movw	r30, r16
     d4a:	84 8d       	ldd	r24, Z+28	; 0x1c
     d4c:	95 8d       	ldd	r25, Z+29	; 0x1d
     d4e:	81 32       	cpi	r24, 0x21	; 33
     d50:	93 40       	sbci	r25, 0x03	; 3
     d52:	f8 f0       	brcs	.+62     	; 0xd92 <turn_clockwise+0x170>
		{
			char sensorData[60];
			lprintf("Line Detected");
     d54:	8c e4       	ldi	r24, 0x4C	; 76
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	86 dc       	rcall	.-1780   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	10 dd       	rcall	.-1504   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Left Sensor Line Detected | distance moved: %d", sum);
     d68:	ff 92       	push	r15
     d6a:	ef 92       	push	r14
     d6c:	83 ef       	ldi	r24, 0xF3	; 243
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	9f 93       	push	r25
     d72:	8f 93       	push	r24
     d74:	8e 01       	movw	r16, r28
     d76:	0f 5f       	subi	r16, 0xFF	; 255
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	1f 93       	push	r17
     d7c:	0f 93       	push	r16
     d7e:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     d82:	c8 01       	movw	r24, r16
     d84:	1d de       	rcall	.-966    	; 0x9c0 <USART_SendString>
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	ae c0       	rjmp	.+348    	; 0xeee <turn_clockwise+0x2cc>
	char outputString[20];
	oi_set_wheels(-150, 150);
	
	if(degrees == 30)
	{
		while (sum < degrees-10) {
     d92:	94 e1       	ldi	r25, 0x14	; 20
     d94:	e9 16       	cp	r14, r25
     d96:	f1 04       	cpc	r15, r1
     d98:	0c f4       	brge	.+2      	; 0xd9c <turn_clockwise+0x17a>
     d9a:	61 cf       	rjmp	.-318    	; 0xc5e <turn_clockwise+0x3c>
     d9c:	a3 c0       	rjmp	.+326    	; 0xee4 <turn_clockwise+0x2c2>
	}
	
	else
	{
		while (sum < degrees-12) {
			oi_update(sensor);
     d9e:	c8 01       	movw	r24, r16
     da0:	32 dd       	rcall	.-1436   	; 0x806 <oi_update>
			sum -= sensor->angle;
     da2:	f8 01       	movw	r30, r16
     da4:	86 85       	ldd	r24, Z+14	; 0x0e
     da6:	97 85       	ldd	r25, Z+15	; 0x0f
     da8:	e8 1a       	sub	r14, r24
     daa:	f9 0a       	sbc	r15, r25
			
		if((sensor->cliff_frontleft_signal > 800))
     dac:	86 8d       	ldd	r24, Z+30	; 0x1e
     dae:	97 8d       	ldd	r25, Z+31	; 0x1f
     db0:	81 32       	cpi	r24, 0x21	; 33
     db2:	93 40       	sbci	r25, 0x03	; 3
     db4:	f8 f0       	brcs	.+62     	; 0xdf4 <turn_clockwise+0x1d2>
		{
			char sensorData[60];
			lprintf("Line Detected");
     db6:	8c e4       	ldi	r24, 0x4C	; 76
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	9f 93       	push	r25
     dbc:	8f 93       	push	r24
     dbe:	55 dc       	rcall	.-1878   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	df dc       	rcall	.-1602   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Front Left Sensor Line Detected | degrees moved: %d", sum);
     dca:	ff 92       	push	r15
     dcc:	ef 92       	push	r14
     dce:	8a e5       	ldi	r24, 0x5A	; 90
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9f 93       	push	r25
     dd4:	8f 93       	push	r24
     dd6:	8e 01       	movw	r16, r28
     dd8:	0f 5f       	subi	r16, 0xFF	; 255
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	1f 93       	push	r17
     dde:	0f 93       	push	r16
     de0:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     de4:	c8 01       	movw	r24, r16
     de6:	ec dd       	rcall	.-1064   	; 0x9c0 <USART_SendString>
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	7d c0       	rjmp	.+250    	; 0xeee <turn_clockwise+0x2cc>
			return 3;
		}
		
		else if((sensor->cliff_frontright_signal > 800))
     df4:	f8 01       	movw	r30, r16
     df6:	80 a1       	ldd	r24, Z+32	; 0x20
     df8:	91 a1       	ldd	r25, Z+33	; 0x21
     dfa:	81 32       	cpi	r24, 0x21	; 33
     dfc:	93 40       	sbci	r25, 0x03	; 3
     dfe:	f8 f0       	brcs	.+62     	; 0xe3e <turn_clockwise+0x21c>
		{
			char sensorData[60];
			lprintf("Line Detected");
     e00:	8c e4       	ldi	r24, 0x4C	; 76
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	9f 93       	push	r25
     e06:	8f 93       	push	r24
     e08:	30 dc       	rcall	.-1952   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	ba dc       	rcall	.-1676   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Front Right Sensor Line Detected | degrees moved: %d", sum);
     e14:	ff 92       	push	r15
     e16:	ef 92       	push	r14
     e18:	8e e8       	ldi	r24, 0x8E	; 142
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	9f 93       	push	r25
     e1e:	8f 93       	push	r24
     e20:	8e 01       	movw	r16, r28
     e22:	0f 5f       	subi	r16, 0xFF	; 255
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	1f 93       	push	r17
     e28:	0f 93       	push	r16
     e2a:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     e2e:	c8 01       	movw	r24, r16
     e30:	c7 dd       	rcall	.-1138   	; 0x9c0 <USART_SendString>
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	58 c0       	rjmp	.+176    	; 0xeee <turn_clockwise+0x2cc>
			return 3;
		}

		else if((sensor->cliff_right_signal > 800))
     e3e:	f8 01       	movw	r30, r16
     e40:	82 a1       	ldd	r24, Z+34	; 0x22
     e42:	93 a1       	ldd	r25, Z+35	; 0x23
     e44:	81 32       	cpi	r24, 0x21	; 33
     e46:	93 40       	sbci	r25, 0x03	; 3
     e48:	f8 f0       	brcs	.+62     	; 0xe88 <turn_clockwise+0x266>
		{
			char sensorData[60];
			lprintf("Line Detected");
     e4a:	8c e4       	ldi	r24, 0x4C	; 76
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	9f 93       	push	r25
     e50:	8f 93       	push	r24
     e52:	0b dc       	rcall	.-2026   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	95 dc       	rcall	.-1750   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Right Sensor Line Detected | distance moved: %d", sum);
     e5e:	ff 92       	push	r15
     e60:	ef 92       	push	r14
     e62:	83 ec       	ldi	r24, 0xC3	; 195
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	9f 93       	push	r25
     e68:	8f 93       	push	r24
     e6a:	8e 01       	movw	r16, r28
     e6c:	0f 5f       	subi	r16, 0xFF	; 255
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	1f 93       	push	r17
     e72:	0f 93       	push	r16
     e74:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     e78:	c8 01       	movw	r24, r16
     e7a:	a2 dd       	rcall	.-1212   	; 0x9c0 <USART_SendString>
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	33 c0       	rjmp	.+102    	; 0xeee <turn_clockwise+0x2cc>
			return 3;
		}

		else if((sensor->cliff_left_signal > 800))
     e88:	f8 01       	movw	r30, r16
     e8a:	84 8d       	ldd	r24, Z+28	; 0x1c
     e8c:	95 8d       	ldd	r25, Z+29	; 0x1d
     e8e:	81 32       	cpi	r24, 0x21	; 33
     e90:	93 40       	sbci	r25, 0x03	; 3
     e92:	20 f1       	brcs	.+72     	; 0xedc <turn_clockwise+0x2ba>
		{
			char sensorData[60];
			lprintf("Line Detected");
     e94:	8c e4       	ldi	r24, 0x4C	; 76
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9f 93       	push	r25
     e9a:	8f 93       	push	r24
     e9c:	e6 db       	rcall	.-2100   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	70 dc       	rcall	.-1824   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Left Sensor Line Detected | distance moved: %d", sum);
     ea8:	ff 92       	push	r15
     eaa:	ef 92       	push	r14
     eac:	83 ef       	ldi	r24, 0xF3	; 243
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	9f 93       	push	r25
     eb2:	8f 93       	push	r24
     eb4:	8e 01       	movw	r16, r28
     eb6:	0f 5f       	subi	r16, 0xFF	; 255
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	1f 93       	push	r17
     ebc:	0f 93       	push	r16
     ebe:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     ec2:	c8 01       	movw	r24, r16
     ec4:	7d dd       	rcall	.-1286   	; 0x9c0 <USART_SendString>
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	0e c0       	rjmp	.+28     	; 0xeee <turn_clockwise+0x2cc>
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-150, 150);
	
	if(degrees == 30)
     ed2:	e1 2c       	mov	r14, r1
     ed4:	f1 2c       	mov	r15, r1
		}		
	}
	
	else
	{
		while (sum < degrees-12) {
     ed6:	9c e0       	ldi	r25, 0x0C	; 12
     ed8:	c9 1a       	sub	r12, r25
     eda:	d1 08       	sbc	r13, r1
     edc:	ec 14       	cp	r14, r12
     ede:	fd 04       	cpc	r15, r13
     ee0:	0c f4       	brge	.+2      	; 0xee4 <turn_clockwise+0x2c2>
     ee2:	5d cf       	rjmp	.-326    	; 0xd9e <turn_clockwise+0x17c>
	}
	// sprintf(outputString, "Turned %d degrees clockwise", degrees);
	
	// USART_SendString(outputString);
	
	oi_set_wheels(0, 0); // stop
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	4d dc       	rcall	.-1894   	; 0x788 <oi_set_wheels>
}
     eee:	ec 96       	adiw	r28, 0x3c	; 60
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	08 95       	ret

00000f0c <turn_counterclockwise>:

void turn_counterclockwise(oi_t *sensor, int degrees)
{
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	ec 97       	sbiw	r28, 0x3c	; 60
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	8c 01       	movw	r16, r24
     f2e:	6b 01       	movw	r12, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(150, -150);
     f30:	6a e6       	ldi	r22, 0x6A	; 106
     f32:	7f ef       	ldi	r23, 0xFF	; 255
     f34:	86 e9       	ldi	r24, 0x96	; 150
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	27 dc       	rcall	.-1970   	; 0x788 <oi_set_wheels>
	
	//for degrees = 30
	if(degrees == 30)
     f3a:	2e e1       	ldi	r18, 0x1E	; 30
     f3c:	c2 16       	cp	r12, r18
     f3e:	d1 04       	cpc	r13, r1
     f40:	09 f0       	breq	.+2      	; 0xf44 <turn_counterclockwise+0x38>
     f42:	3c c1       	rjmp	.+632    	; 0x11bc <__stack+0xbd>
     f44:	e1 2c       	mov	r14, r1
     f46:	f1 2c       	mov	r15, r1
	{
		
	while (sum < degrees-10) 
	{
		oi_update(sensor);
     f48:	c8 01       	movw	r24, r16
     f4a:	5d dc       	rcall	.-1862   	; 0x806 <oi_update>
		sum += sensor->angle; 
     f4c:	f8 01       	movw	r30, r16
     f4e:	86 85       	ldd	r24, Z+14	; 0x0e
     f50:	97 85       	ldd	r25, Z+15	; 0x0f
     f52:	e8 0e       	add	r14, r24
     f54:	f9 1e       	adc	r15, r25
		
		if((sensor->cliff_frontleft_signal > 800))
     f56:	86 8d       	ldd	r24, Z+30	; 0x1e
     f58:	97 8d       	ldd	r25, Z+31	; 0x1f
     f5a:	81 32       	cpi	r24, 0x21	; 33
     f5c:	93 40       	sbci	r25, 0x03	; 3
     f5e:	f8 f0       	brcs	.+62     	; 0xf9e <turn_counterclockwise+0x92>
		{
			char sensorData[60];
			lprintf("Line Detected");
     f60:	8c e4       	ldi	r24, 0x4C	; 76
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	9f 93       	push	r25
     f66:	8f 93       	push	r24
     f68:	80 db       	rcall	.-2304   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0a dc       	rcall	.-2028   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Front Left Sensor Line Detected | degrees moved: %d", sum);
     f74:	ff 92       	push	r15
     f76:	ef 92       	push	r14
     f78:	8a e5       	ldi	r24, 0x5A	; 90
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	9f 93       	push	r25
     f7e:	8f 93       	push	r24
     f80:	8e 01       	movw	r16, r28
     f82:	0f 5f       	subi	r16, 0xFF	; 255
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	1f 93       	push	r17
     f88:	0f 93       	push	r16
     f8a:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     f8e:	c8 01       	movw	r24, r16
     f90:	17 dd       	rcall	.-1490   	; 0x9c0 <USART_SendString>
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	1d c1       	rjmp	.+570    	; 0x11d8 <__stack+0xd9>
			return 3;
		}
		
		else if((sensor->cliff_frontright_signal > 800))
     f9e:	f8 01       	movw	r30, r16
     fa0:	80 a1       	ldd	r24, Z+32	; 0x20
     fa2:	91 a1       	ldd	r25, Z+33	; 0x21
     fa4:	81 32       	cpi	r24, 0x21	; 33
     fa6:	93 40       	sbci	r25, 0x03	; 3
     fa8:	f8 f0       	brcs	.+62     	; 0xfe8 <turn_counterclockwise+0xdc>
		{
			char sensorData[60];
			lprintf("Line Detected");
     faa:	8c e4       	ldi	r24, 0x4C	; 76
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	9f 93       	push	r25
     fb0:	8f 93       	push	r24
     fb2:	5b db       	rcall	.-2378   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	e5 db       	rcall	.-2102   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Front Right Sensor Line Detected | degrees moved: %d", sum);
     fbe:	ff 92       	push	r15
     fc0:	ef 92       	push	r14
     fc2:	8e e8       	ldi	r24, 0x8E	; 142
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	9f 93       	push	r25
     fc8:	8f 93       	push	r24
     fca:	8e 01       	movw	r16, r28
     fcc:	0f 5f       	subi	r16, 0xFF	; 255
     fce:	1f 4f       	sbci	r17, 0xFF	; 255
     fd0:	1f 93       	push	r17
     fd2:	0f 93       	push	r16
     fd4:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
     fd8:	c8 01       	movw	r24, r16
     fda:	f2 dc       	rcall	.-1564   	; 0x9c0 <USART_SendString>
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	f8 c0       	rjmp	.+496    	; 0x11d8 <__stack+0xd9>
			return 3;
		}

		else if((sensor->cliff_right_signal > 800))
     fe8:	f8 01       	movw	r30, r16
     fea:	82 a1       	ldd	r24, Z+34	; 0x22
     fec:	93 a1       	ldd	r25, Z+35	; 0x23
     fee:	81 32       	cpi	r24, 0x21	; 33
     ff0:	93 40       	sbci	r25, 0x03	; 3
     ff2:	f8 f0       	brcs	.+62     	; 0x1032 <turn_counterclockwise+0x126>
		{
			char sensorData[60];
			lprintf("Line Detected");
     ff4:	8c e4       	ldi	r24, 0x4C	; 76
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	9f 93       	push	r25
     ffa:	8f 93       	push	r24
     ffc:	36 db       	rcall	.-2452   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	c0 db       	rcall	.-2176   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Right Sensor Line Detected | distance moved: %d", sum);
    1008:	ff 92       	push	r15
    100a:	ef 92       	push	r14
    100c:	83 ec       	ldi	r24, 0xC3	; 195
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	9f 93       	push	r25
    1012:	8f 93       	push	r24
    1014:	8e 01       	movw	r16, r28
    1016:	0f 5f       	subi	r16, 0xFF	; 255
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
    101a:	1f 93       	push	r17
    101c:	0f 93       	push	r16
    101e:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    1022:	c8 01       	movw	r24, r16
    1024:	cd dc       	rcall	.-1638   	; 0x9c0 <USART_SendString>
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	d3 c0       	rjmp	.+422    	; 0x11d8 <__stack+0xd9>
			return 3;
		}

		else if((sensor->cliff_left_signal > 800))
    1032:	f8 01       	movw	r30, r16
    1034:	84 8d       	ldd	r24, Z+28	; 0x1c
    1036:	95 8d       	ldd	r25, Z+29	; 0x1d
    1038:	81 32       	cpi	r24, 0x21	; 33
    103a:	93 40       	sbci	r25, 0x03	; 3
    103c:	f8 f0       	brcs	.+62     	; 0x107c <turn_counterclockwise+0x170>
		{
			char sensorData[60];
			lprintf("Line Detected");
    103e:	8c e4       	ldi	r24, 0x4C	; 76
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	9f 93       	push	r25
    1044:	8f 93       	push	r24
    1046:	11 db       	rcall	.-2526   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9b db       	rcall	.-2250   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Left Sensor Line Detected | distance moved: %d", sum);
    1052:	ff 92       	push	r15
    1054:	ef 92       	push	r14
    1056:	83 ef       	ldi	r24, 0xF3	; 243
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	9f 93       	push	r25
    105c:	8f 93       	push	r24
    105e:	8e 01       	movw	r16, r28
    1060:	0f 5f       	subi	r16, 0xFF	; 255
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	1f 93       	push	r17
    1066:	0f 93       	push	r16
    1068:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    106c:	c8 01       	movw	r24, r16
    106e:	a8 dc       	rcall	.-1712   	; 0x9c0 <USART_SendString>
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	ae c0       	rjmp	.+348    	; 0x11d8 <__stack+0xd9>
	
	//for degrees = 30
	if(degrees == 30)
	{
		
	while (sum < degrees-10) 
    107c:	94 e1       	ldi	r25, 0x14	; 20
    107e:	e9 16       	cp	r14, r25
    1080:	f1 04       	cpc	r15, r1
    1082:	0c f4       	brge	.+2      	; 0x1086 <turn_counterclockwise+0x17a>
    1084:	61 cf       	rjmp	.-318    	; 0xf48 <turn_counterclockwise+0x3c>
    1086:	a3 c0       	rjmp	.+326    	; 0x11ce <__stack+0xcf>
	
	else
	{	
		while (sum < degrees-10) 
		{
		oi_update(sensor);
    1088:	c8 01       	movw	r24, r16
    108a:	bd db       	rcall	.-2182   	; 0x806 <oi_update>
		sum += sensor->angle;
    108c:	f8 01       	movw	r30, r16
    108e:	86 85       	ldd	r24, Z+14	; 0x0e
    1090:	97 85       	ldd	r25, Z+15	; 0x0f
    1092:	e8 0e       	add	r14, r24
    1094:	f9 1e       	adc	r15, r25
		if((sensor->cliff_frontleft_signal > 800))
    1096:	86 8d       	ldd	r24, Z+30	; 0x1e
    1098:	97 8d       	ldd	r25, Z+31	; 0x1f
    109a:	81 32       	cpi	r24, 0x21	; 33
    109c:	93 40       	sbci	r25, 0x03	; 3
    109e:	f8 f0       	brcs	.+62     	; 0x10de <turn_counterclockwise+0x1d2>
		{
			char sensorData[60];
			lprintf("Line Detected");
    10a0:	8c e4       	ldi	r24, 0x4C	; 76
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	9f 93       	push	r25
    10a6:	8f 93       	push	r24
    10a8:	e0 da       	rcall	.-2624   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	6a db       	rcall	.-2348   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Front Left Sensor Line Detected | degrees moved: %d", sum);
    10b4:	ff 92       	push	r15
    10b6:	ef 92       	push	r14
    10b8:	8a e5       	ldi	r24, 0x5A	; 90
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	9f 93       	push	r25
    10be:	8f 93       	push	r24
    10c0:	8e 01       	movw	r16, r28
    10c2:	0f 5f       	subi	r16, 0xFF	; 255
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	1f 93       	push	r17
    10c8:	0f 93       	push	r16
    10ca:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    10ce:	c8 01       	movw	r24, r16
    10d0:	77 dc       	rcall	.-1810   	; 0x9c0 <USART_SendString>
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	7d c0       	rjmp	.+250    	; 0x11d8 <__stack+0xd9>
			return 3;
		}
		
		else if((sensor->cliff_frontright_signal > 800))
    10de:	f8 01       	movw	r30, r16
    10e0:	80 a1       	ldd	r24, Z+32	; 0x20
    10e2:	91 a1       	ldd	r25, Z+33	; 0x21
    10e4:	81 32       	cpi	r24, 0x21	; 33
    10e6:	93 40       	sbci	r25, 0x03	; 3
    10e8:	f8 f0       	brcs	.+62     	; 0x1128 <__stack+0x29>
		{
			char sensorData[60];
			lprintf("Line Detected");
    10ea:	8c e4       	ldi	r24, 0x4C	; 76
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	bb da       	rcall	.-2698   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	45 db       	rcall	.-2422   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Front Right Sensor Line Detected | degrees moved: %d", sum);
    10fe:	ff 92       	push	r15
    1100:	ef 92       	push	r14
    1102:	8e e8       	ldi	r24, 0x8E	; 142
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	9f 93       	push	r25
    1108:	8f 93       	push	r24
    110a:	8e 01       	movw	r16, r28
    110c:	0f 5f       	subi	r16, 0xFF	; 255
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	1f 93       	push	r17
    1112:	0f 93       	push	r16
    1114:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    1118:	c8 01       	movw	r24, r16
    111a:	52 dc       	rcall	.-1884   	; 0x9c0 <USART_SendString>
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	58 c0       	rjmp	.+176    	; 0x11d8 <__stack+0xd9>
			return 3;
		}

		else if((sensor->cliff_right_signal > 800))
    1128:	f8 01       	movw	r30, r16
    112a:	82 a1       	ldd	r24, Z+34	; 0x22
    112c:	93 a1       	ldd	r25, Z+35	; 0x23
    112e:	81 32       	cpi	r24, 0x21	; 33
    1130:	93 40       	sbci	r25, 0x03	; 3
    1132:	f8 f0       	brcs	.+62     	; 0x1172 <__stack+0x73>
		{
			char sensorData[60];
			lprintf("Line Detected");
    1134:	8c e4       	ldi	r24, 0x4C	; 76
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	9f 93       	push	r25
    113a:	8f 93       	push	r24
    113c:	96 da       	rcall	.-2772   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	20 db       	rcall	.-2496   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Right Sensor Line Detected | distance moved: %d", sum);
    1148:	ff 92       	push	r15
    114a:	ef 92       	push	r14
    114c:	83 ec       	ldi	r24, 0xC3	; 195
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	9f 93       	push	r25
    1152:	8f 93       	push	r24
    1154:	8e 01       	movw	r16, r28
    1156:	0f 5f       	subi	r16, 0xFF	; 255
    1158:	1f 4f       	sbci	r17, 0xFF	; 255
    115a:	1f 93       	push	r17
    115c:	0f 93       	push	r16
    115e:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    1162:	c8 01       	movw	r24, r16
    1164:	2d dc       	rcall	.-1958   	; 0x9c0 <USART_SendString>
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	33 c0       	rjmp	.+102    	; 0x11d8 <__stack+0xd9>
			return 3;
		}

		else if((sensor->cliff_left_signal > 800))
    1172:	f8 01       	movw	r30, r16
    1174:	84 8d       	ldd	r24, Z+28	; 0x1c
    1176:	95 8d       	ldd	r25, Z+29	; 0x1d
    1178:	81 32       	cpi	r24, 0x21	; 33
    117a:	93 40       	sbci	r25, 0x03	; 3
    117c:	20 f1       	brcs	.+72     	; 0x11c6 <__stack+0xc7>
		{
			char sensorData[60];
			lprintf("Line Detected");
    117e:	8c e4       	ldi	r24, 0x4C	; 76
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	9f 93       	push	r25
    1184:	8f 93       	push	r24
    1186:	71 da       	rcall	.-2846   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	fb da       	rcall	.-2570   	; 0x788 <oi_set_wheels>
			sprintf(sensorData, "Left Sensor Line Detected | distance moved: %d", sum);
    1192:	ff 92       	push	r15
    1194:	ef 92       	push	r14
    1196:	83 ef       	ldi	r24, 0xF3	; 243
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	8e 01       	movw	r16, r28
    11a0:	0f 5f       	subi	r16, 0xFF	; 255
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	1f 93       	push	r17
    11a6:	0f 93       	push	r16
    11a8:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    11ac:	c8 01       	movw	r24, r16
    11ae:	08 dc       	rcall	.-2032   	; 0x9c0 <USART_SendString>
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <__stack+0xd9>
	int sum = 0;
	char outputString[20];
	oi_set_wheels(150, -150);
	
	//for degrees = 30
	if(degrees == 30)
    11bc:	e1 2c       	mov	r14, r1
    11be:	f1 2c       	mov	r15, r1
	}
	}
	
	else
	{	
		while (sum < degrees-10) 
    11c0:	9a e0       	ldi	r25, 0x0A	; 10
    11c2:	c9 1a       	sub	r12, r25
    11c4:	d1 08       	sbc	r13, r1
    11c6:	ec 14       	cp	r14, r12
    11c8:	fd 04       	cpc	r15, r13
    11ca:	0c f4       	brge	.+2      	; 0x11ce <__stack+0xcf>
    11cc:	5d cf       	rjmp	.-326    	; 0x1088 <turn_counterclockwise+0x17c>
			USART_SendString(sensorData);
			return 3;
		}
		}
	}
	oi_set_wheels(0, 0); // stop
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	d8 da       	rcall	.-2640   	; 0x788 <oi_set_wheels>
}
    11d8:	ec 96       	adiw	r28, 0x3c	; 60
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	08 95       	ret

000011f6 <reportData>:

void reportData(oi_t *sensor)
{
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	e2 97       	sbiw	r28, 0x32	; 50
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	8c 01       	movw	r16, r24
	char senDat[50];
	oi_update(sensor);
    1210:	fa da       	rcall	.-2572   	; 0x806 <oi_update>
	
	sprintf(senDat, "Cliff Left: %d | Cliff FrontLeft: %d | Cliff FrontRight: %d | Cliff Right: %d | Wheel Drop Left: %d | Wheel Drop Middle: %d | Wheel Drop Left: %d", sensor->cliff_left_signal, sensor->cliff_frontleft_signal, sensor->cliff_frontright_signal, sensor->cliff_right_signal,sensor->wheeldrop_left, sensor->wheeldrop_caster, sensor->wheeldrop_right);
    1212:	f8 01       	movw	r30, r16
    1214:	80 81       	ld	r24, Z
    1216:	82 fb       	bst	r24, 2
    1218:	88 27       	eor	r24, r24
    121a:	80 f9       	bld	r24, 0
    121c:	1f 92       	push	r1
    121e:	8f 93       	push	r24
    1220:	80 81       	ld	r24, Z
    1222:	82 95       	swap	r24
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	1f 92       	push	r1
    1228:	8f 93       	push	r24
    122a:	80 81       	ld	r24, Z
    122c:	83 fb       	bst	r24, 3
    122e:	88 27       	eor	r24, r24
    1230:	80 f9       	bld	r24, 0
    1232:	1f 92       	push	r1
    1234:	8f 93       	push	r24
    1236:	83 a1       	ldd	r24, Z+35	; 0x23
    1238:	8f 93       	push	r24
    123a:	82 a1       	ldd	r24, Z+34	; 0x22
    123c:	8f 93       	push	r24
    123e:	81 a1       	ldd	r24, Z+33	; 0x21
    1240:	8f 93       	push	r24
    1242:	80 a1       	ldd	r24, Z+32	; 0x20
    1244:	8f 93       	push	r24
    1246:	87 8d       	ldd	r24, Z+31	; 0x1f
    1248:	8f 93       	push	r24
    124a:	86 8d       	ldd	r24, Z+30	; 0x1e
    124c:	8f 93       	push	r24
    124e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1250:	8f 93       	push	r24
    1252:	84 8d       	ldd	r24, Z+28	; 0x1c
    1254:	8f 93       	push	r24
    1256:	82 e2       	ldi	r24, 0x22	; 34
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	9f 93       	push	r25
    125c:	8f 93       	push	r24
    125e:	8e 01       	movw	r16, r28
    1260:	0f 5f       	subi	r16, 0xFF	; 255
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	1f 93       	push	r17
    1266:	0f 93       	push	r16
    1268:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
	USART_SendString(senDat);
    126c:	c8 01       	movw	r24, r16
    126e:	a8 db       	rcall	.-2224   	; 0x9c0 <USART_SendString>
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61

}
    127a:	e2 96       	adiw	r28, 0x32	; 50
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <move_backward>:
	return 0;
}


void move_backward(oi_t *sensor, int centimeters)
{
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	8c 01       	movw	r16, r24
    129e:	d6 2f       	mov	r29, r22
    12a0:	c7 2f       	mov	r28, r23
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
    12a2:	68 e3       	ldi	r22, 0x38	; 56
    12a4:	7f ef       	ldi	r23, 0xFF	; 255
    12a6:	88 e3       	ldi	r24, 0x38	; 56
    12a8:	9f ef       	ldi	r25, 0xFF	; 255
    12aa:	6e da       	rcall	.-2852   	; 0x788 <oi_set_wheels>
	while (sum < centimeters*10) {
    12ac:	ed 2e       	mov	r14, r29
    12ae:	fc 2e       	mov	r15, r28
    12b0:	ee 0c       	add	r14, r14
    12b2:	ff 1c       	adc	r15, r15
    12b4:	c7 01       	movw	r24, r14
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	e8 0e       	add	r14, r24
    12c0:	f9 1e       	adc	r15, r25
    12c2:	1e 14       	cp	r1, r14
    12c4:	1f 04       	cpc	r1, r15
    12c6:	64 f4       	brge	.+24     	; 0x12e0 <move_backward+0x50>
}


void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
    12c8:	c0 e0       	ldi	r28, 0x00	; 0
    12ca:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
		oi_update(sensor);
    12cc:	c8 01       	movw	r24, r16
    12ce:	9b da       	rcall	.-2762   	; 0x806 <oi_update>
		sum -= sensor->distance;
    12d0:	f8 01       	movw	r30, r16
    12d2:	84 85       	ldd	r24, Z+12	; 0x0c
    12d4:	95 85       	ldd	r25, Z+13	; 0x0d
    12d6:	c8 1b       	sub	r28, r24
    12d8:	d9 0b       	sbc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
    12da:	ce 15       	cp	r28, r14
    12dc:	df 05       	cpc	r29, r15
    12de:	b4 f3       	brlt	.-20     	; 0x12cc <move_backward+0x3c>
		oi_update(sensor);
		sum -= sensor->distance;
	}
	
	oi_set_wheels(0, 0); // stop	
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	4f da       	rcall	.-2914   	; 0x788 <oi_set_wheels>
	reportData(sensor);
    12ea:	c8 01       	movw	r24, r16
    12ec:	84 df       	rcall	.-248    	; 0x11f6 <reportData>
}
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	08 95       	ret

000012fc <move_forward>:
}

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
    12fc:	6f 92       	push	r6
    12fe:	7f 92       	push	r7
    1300:	8f 92       	push	r8
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	c5 55       	subi	r28, 0x55	; 85
    131e:	d1 09       	sbc	r29, r1
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	8c 01       	movw	r16, r24
    132c:	e6 2e       	mov	r14, r22
    132e:	f7 2e       	mov	r15, r23
	int sum = 0;
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
    1330:	66 e9       	ldi	r22, 0x96	; 150
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	86 e9       	ldi	r24, 0x96	; 150
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	27 da       	rcall	.-2994   	; 0x788 <oi_set_wheels>
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
    133a:	8e 2c       	mov	r8, r14
    133c:	9f 2c       	mov	r9, r15
    133e:	88 0c       	add	r8, r8
    1340:	99 1c       	adc	r9, r9
    1342:	c4 01       	movw	r24, r8
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	88 0e       	add	r8, r24
    134e:	99 1e       	adc	r9, r25

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
	int sum = 0;
    1350:	e1 2c       	mov	r14, r1
    1352:	f1 2c       	mov	r15, r1
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
	{
		oi_update(sensor);
		sum += sensor->distance;
		lprintf("%d\n", sum);
    1354:	0f 2e       	mov	r0, r31
    1356:	f4 eb       	ldi	r31, 0xB4	; 180
    1358:	6f 2e       	mov	r6, r31
    135a:	f2 e0       	ldi	r31, 0x02	; 2
    135c:	7f 2e       	mov	r7, r31
    135e:	f0 2d       	mov	r31, r0
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
    1360:	0e c2       	rjmp	.+1052   	; 0x177e <move_forward+0x482>
	{
		oi_update(sensor);
    1362:	c8 01       	movw	r24, r16
    1364:	50 da       	rcall	.-2912   	; 0x806 <oi_update>
		sum += sensor->distance;
    1366:	f8 01       	movw	r30, r16
    1368:	84 85       	ldd	r24, Z+12	; 0x0c
    136a:	95 85       	ldd	r25, Z+13	; 0x0d
    136c:	e8 0e       	add	r14, r24
    136e:	f9 1e       	adc	r15, r25
		lprintf("%d\n", sum);
    1370:	ff 92       	push	r15
    1372:	ef 92       	push	r14
    1374:	7f 92       	push	r7
    1376:	6f 92       	push	r6
    1378:	78 d9       	rcall	.-3344   	; 0x66a <lprintf>
		if(sensor->bumper_left)
    137a:	f8 01       	movw	r30, r16
    137c:	40 81       	ld	r20, Z
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	41 ff       	sbrs	r20, 1
    1388:	12 c0       	rjmp	.+36     	; 0x13ae <move_forward+0xb2>
		{
			oi_set_wheels(0, 0); // stop
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	fa d9       	rcall	.-3084   	; 0x788 <oi_set_wheels>

			move_backward(sensor,10);
    1394:	6a e0       	ldi	r22, 0x0A	; 10
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	c8 01       	movw	r24, r16
    139a:	7a df       	rcall	.-268    	; 0x1290 <move_backward>
			turn_clockwise(sensor,45);
    139c:	6d e2       	ldi	r22, 0x2D	; 45
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	c8 01       	movw	r24, r16
    13a2:	3f dc       	rcall	.-1922   	; 0xc22 <turn_clockwise>

			USART_SendString("Left Bumper Triggered"); //
    13a4:	88 eb       	ldi	r24, 0xB8	; 184
    13a6:	92 e0       	ldi	r25, 0x02	; 2
    13a8:	0b db       	rcall	.-2538   	; 0x9c0 <USART_SendString>
			return 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	14 c2       	rjmp	.+1064   	; 0x17d6 <move_forward+0x4da>
		}
		else if(sensor->bumper_right)
    13ae:	40 ff       	sbrs	r20, 0
    13b0:	30 c0       	rjmp	.+96     	; 0x1412 <move_forward+0x116>
		{
			char sensorData[60];
			oi_set_wheels(0, 0); // stop
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	e6 d9       	rcall	.-3124   	; 0x788 <oi_set_wheels>
			move_backward(sensor,10);
    13bc:	6a e0       	ldi	r22, 0x0A	; 10
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	c8 01       	movw	r24, r16
    13c2:	66 df       	rcall	.-308    	; 0x1290 <move_backward>
			turn_counterclockwise(sensor,45);
    13c4:	6d e2       	ldi	r22, 0x2D	; 45
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	c8 01       	movw	r24, r16
    13ca:	a0 dd       	rcall	.-1216   	; 0xf0c <turn_counterclockwise>
			float cent_moved = ((float) sum/10);
    13cc:	b7 01       	movw	r22, r14
    13ce:	88 27       	eor	r24, r24
    13d0:	77 fd       	sbrc	r23, 7
    13d2:	80 95       	com	r24
    13d4:	98 2f       	mov	r25, r24
    13d6:	10 d3       	rcall	.+1568   	; 0x19f8 <__floatsisf>
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e2       	ldi	r20, 0x20	; 32
    13de:	51 e4       	ldi	r21, 0x41	; 65
    13e0:	75 d2       	rcall	.+1258   	; 0x18cc <__divsf3>
			sprintf(sensorData, "Right Bumper Triggered | distance moved: %.1f centimeters", cent_moved);
    13e2:	9f 93       	push	r25
    13e4:	8f 93       	push	r24
    13e6:	7f 93       	push	r23
    13e8:	6f 93       	push	r22
    13ea:	8e ec       	ldi	r24, 0xCE	; 206
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	9f 93       	push	r25
    13f0:	8f 93       	push	r24
    13f2:	8e 01       	movw	r16, r28
    13f4:	06 5e       	subi	r16, 0xE6	; 230
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	1f 93       	push	r17
    13fa:	0f 93       	push	r16
    13fc:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    1400:	c8 01       	movw	r24, r16
    1402:	de da       	rcall	.-2628   	; 0x9c0 <USART_SendString>
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
			return 2;
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	e2 c1       	rjmp	.+964    	; 0x17d6 <move_forward+0x4da>
		}
		
		else if((sensor->cliff_frontleft_signal > 800))
    1412:	f8 01       	movw	r30, r16
    1414:	c6 8c       	ldd	r12, Z+30	; 0x1e
    1416:	d7 8c       	ldd	r13, Z+31	; 0x1f
    1418:	f1 e2       	ldi	r31, 0x21	; 33
    141a:	cf 16       	cp	r12, r31
    141c:	f3 e0       	ldi	r31, 0x03	; 3
    141e:	df 06       	cpc	r13, r31
    1420:	68 f1       	brcs	.+90     	; 0x147c <move_forward+0x180>
		{
			char sensorData[60];
			lprintf("Line Detected");
    1422:	8c e4       	ldi	r24, 0x4C	; 76
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	9f 93       	push	r25
    1428:	8f 93       	push	r24
    142a:	1f d9       	rcall	.-3522   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a9 d9       	rcall	.-3246   	; 0x788 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
    1436:	b7 01       	movw	r22, r14
    1438:	88 27       	eor	r24, r24
    143a:	77 fd       	sbrc	r23, 7
    143c:	80 95       	com	r24
    143e:	98 2f       	mov	r25, r24
    1440:	db d2       	rcall	.+1462   	; 0x19f8 <__floatsisf>
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e2       	ldi	r20, 0x20	; 32
    1448:	51 e4       	ldi	r21, 0x41	; 65
    144a:	40 d2       	rcall	.+1152   	; 0x18cc <__divsf3>
			sprintf(sensorData, "Front Left Sensor Line Detected | distance moved: %.1f cm", cent_moved);
    144c:	9f 93       	push	r25
    144e:	8f 93       	push	r24
    1450:	7f 93       	push	r23
    1452:	6f 93       	push	r22
    1454:	88 e0       	ldi	r24, 0x08	; 8
    1456:	93 e0       	ldi	r25, 0x03	; 3
    1458:	9f 93       	push	r25
    145a:	8f 93       	push	r24
    145c:	8e 01       	movw	r16, r28
    145e:	06 5e       	subi	r16, 0xE6	; 230
    1460:	1f 4f       	sbci	r17, 0xFF	; 255
    1462:	1f 93       	push	r17
    1464:	0f 93       	push	r16
    1466:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    146a:	c8 01       	movw	r24, r16
    146c:	a9 da       	rcall	.-2734   	; 0x9c0 <USART_SendString>
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
			return 3;
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	ad c1       	rjmp	.+858    	; 0x17d6 <move_forward+0x4da>
		}
		
		else if((sensor->cliff_frontright_signal > 800))
    147c:	f8 01       	movw	r30, r16
    147e:	a0 a0       	ldd	r10, Z+32	; 0x20
    1480:	b1 a0       	ldd	r11, Z+33	; 0x21
    1482:	f1 e2       	ldi	r31, 0x21	; 33
    1484:	af 16       	cp	r10, r31
    1486:	f3 e0       	ldi	r31, 0x03	; 3
    1488:	bf 06       	cpc	r11, r31
    148a:	68 f1       	brcs	.+90     	; 0x14e6 <move_forward+0x1ea>
		{
			char sensorData[60];
			lprintf("Line Detected");
    148c:	8c e4       	ldi	r24, 0x4C	; 76
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	9f 93       	push	r25
    1492:	8f 93       	push	r24
    1494:	ea d8       	rcall	.-3628   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	74 d9       	rcall	.-3352   	; 0x788 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
    14a0:	b7 01       	movw	r22, r14
    14a2:	88 27       	eor	r24, r24
    14a4:	77 fd       	sbrc	r23, 7
    14a6:	80 95       	com	r24
    14a8:	98 2f       	mov	r25, r24
    14aa:	a6 d2       	rcall	.+1356   	; 0x19f8 <__floatsisf>
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0b d2       	rcall	.+1046   	; 0x18cc <__divsf3>
			sprintf(sensorData, "Front Right Sensor Line Detected | distance moved: %.1f cm", cent_moved);
    14b6:	9f 93       	push	r25
    14b8:	8f 93       	push	r24
    14ba:	7f 93       	push	r23
    14bc:	6f 93       	push	r22
    14be:	82 e4       	ldi	r24, 0x42	; 66
    14c0:	93 e0       	ldi	r25, 0x03	; 3
    14c2:	9f 93       	push	r25
    14c4:	8f 93       	push	r24
    14c6:	8e 01       	movw	r16, r28
    14c8:	06 5e       	subi	r16, 0xE6	; 230
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	1f 93       	push	r17
    14ce:	0f 93       	push	r16
    14d0:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    14d4:	c8 01       	movw	r24, r16
    14d6:	74 da       	rcall	.-2840   	; 0x9c0 <USART_SendString>
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
			return 3;
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	78 c1       	rjmp	.+752    	; 0x17d6 <move_forward+0x4da>
		}

		else if((sensor->cliff_right_signal > 800))
    14e6:	f8 01       	movw	r30, r16
    14e8:	82 a1       	ldd	r24, Z+34	; 0x22
    14ea:	93 a1       	ldd	r25, Z+35	; 0x23
    14ec:	81 32       	cpi	r24, 0x21	; 33
    14ee:	f3 e0       	ldi	r31, 0x03	; 3
    14f0:	9f 07       	cpc	r25, r31
    14f2:	68 f1       	brcs	.+90     	; 0x154e <move_forward+0x252>
		{
			char sensorData[60];
			lprintf("Line Detected");
    14f4:	8c e4       	ldi	r24, 0x4C	; 76
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	9f 93       	push	r25
    14fa:	8f 93       	push	r24
    14fc:	b6 d8       	rcall	.-3732   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	40 d9       	rcall	.-3456   	; 0x788 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
    1508:	b7 01       	movw	r22, r14
    150a:	88 27       	eor	r24, r24
    150c:	77 fd       	sbrc	r23, 7
    150e:	80 95       	com	r24
    1510:	98 2f       	mov	r25, r24
    1512:	72 d2       	rcall	.+1252   	; 0x19f8 <__floatsisf>
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	d7 d1       	rcall	.+942    	; 0x18cc <__divsf3>
			sprintf(sensorData, "Right Sensor Line Detected | distance moved: %.1f cm", cent_moved);
    151e:	9f 93       	push	r25
    1520:	8f 93       	push	r24
    1522:	7f 93       	push	r23
    1524:	6f 93       	push	r22
    1526:	88 e4       	ldi	r24, 0x48	; 72
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	9f 93       	push	r25
    152c:	8f 93       	push	r24
    152e:	8e 01       	movw	r16, r28
    1530:	06 5e       	subi	r16, 0xE6	; 230
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	1f 93       	push	r17
    1536:	0f 93       	push	r16
    1538:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    153c:	c8 01       	movw	r24, r16
    153e:	40 da       	rcall	.-2944   	; 0x9c0 <USART_SendString>
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
			return 3;
    154a:	83 e0       	ldi	r24, 0x03	; 3
    154c:	44 c1       	rjmp	.+648    	; 0x17d6 <move_forward+0x4da>
		}

		else if((sensor->cliff_left_signal > 800))
    154e:	f8 01       	movw	r30, r16
    1550:	24 8d       	ldd	r18, Z+28	; 0x1c
    1552:	35 8d       	ldd	r19, Z+29	; 0x1d
    1554:	21 32       	cpi	r18, 0x21	; 33
    1556:	f3 e0       	ldi	r31, 0x03	; 3
    1558:	3f 07       	cpc	r19, r31
    155a:	68 f1       	brcs	.+90     	; 0x15b6 <move_forward+0x2ba>
		{
			char sensorData[60];
			lprintf("Line Detected");
    155c:	8c e4       	ldi	r24, 0x4C	; 76
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	9f 93       	push	r25
    1562:	8f 93       	push	r24
    1564:	82 d8       	rcall	.-3836   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0c d9       	rcall	.-3560   	; 0x788 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
    1570:	b7 01       	movw	r22, r14
    1572:	88 27       	eor	r24, r24
    1574:	77 fd       	sbrc	r23, 7
    1576:	80 95       	com	r24
    1578:	98 2f       	mov	r25, r24
    157a:	3e d2       	rcall	.+1148   	; 0x19f8 <__floatsisf>
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	a3 d1       	rcall	.+838    	; 0x18cc <__divsf3>
			sprintf(sensorData, "Left Sensor Line Detected | distance moved: %.1f cm", cent_moved);
    1586:	9f 93       	push	r25
    1588:	8f 93       	push	r24
    158a:	7f 93       	push	r23
    158c:	6f 93       	push	r22
    158e:	8e e0       	ldi	r24, 0x0E	; 14
    1590:	93 e0       	ldi	r25, 0x03	; 3
    1592:	9f 93       	push	r25
    1594:	8f 93       	push	r24
    1596:	8e 01       	movw	r16, r28
    1598:	06 5e       	subi	r16, 0xE6	; 230
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	1f 93       	push	r17
    159e:	0f 93       	push	r16
    15a0:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    15a4:	c8 01       	movw	r24, r16
    15a6:	0c da       	rcall	.-3048   	; 0x9c0 <USART_SendString>
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
			return 3;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	10 c1       	rjmp	.+544    	; 0x17d6 <move_forward+0x4da>
		}
								
		else if((sensor->wheeldrop_caster == 1) || (sensor->wheeldrop_left == 1) || (sensor->wheeldrop_right == 1))
    15b6:	4c 71       	andi	r20, 0x1C	; 28
    15b8:	a9 f1       	breq	.+106    	; 0x1624 <move_forward+0x328>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    15ba:	b7 01       	movw	r22, r14
    15bc:	88 27       	eor	r24, r24
    15be:	77 fd       	sbrc	r23, 7
    15c0:	80 95       	com	r24
    15c2:	98 2f       	mov	r25, r24
    15c4:	19 d2       	rcall	.+1074   	; 0x19f8 <__floatsisf>
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	7e d1       	rcall	.+764    	; 0x18cc <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Right Sensor: %d Front Right: %d Front Left%d Left: %d | distance moved: %.1f cm", (int) sensor->cliff_frontright_signal, (int) sensor->cliff_frontright_signal, (int) sensor->cliff_frontleft_signal, (int) sensor->cliff_frontleft_signal, cent_moved);
    15d0:	9f 93       	push	r25
    15d2:	8f 93       	push	r24
    15d4:	7f 93       	push	r23
    15d6:	6f 93       	push	r22
    15d8:	df 92       	push	r13
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	cf 92       	push	r12
    15e0:	bf 92       	push	r11
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	af 92       	push	r10
    15e8:	8d e7       	ldi	r24, 0x7D	; 125
    15ea:	93 e0       	ldi	r25, 0x03	; 3
    15ec:	9f 93       	push	r25
    15ee:	8f 93       	push	r24
    15f0:	8e 01       	movw	r16, r28
    15f2:	06 5e       	subi	r16, 0xE6	; 230
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	1f 93       	push	r17
    15f8:	0f 93       	push	r16
    15fa:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    15fe:	c8 01       	movw	r24, r16
    1600:	df d9       	rcall	.-3138   	; 0x9c0 <USART_SendString>
			lprintf("Cliff Edge Detected");
    1602:	83 ee       	ldi	r24, 0xE3	; 227
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	9f 93       	push	r25
    1608:	8f 93       	push	r24
    160a:	2f d8       	rcall	.-4002   	; 0x66a <lprintf>
			// move_backward(sensor,10);
			oi_set_wheels(0,0);
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	b9 d8       	rcall	.-3726   	; 0x788 <oi_set_wheels>
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
			return 4;
    1620:	84 e0       	ldi	r24, 0x04	; 4
    1622:	d9 c0       	rjmp	.+434    	; 0x17d6 <move_forward+0x4da>
		}
		
		else if (sensor->cliff_frontleft_signal < 10) 
    1624:	ea e0       	ldi	r30, 0x0A	; 10
    1626:	ce 16       	cp	r12, r30
    1628:	d1 04       	cpc	r13, r1
    162a:	40 f5       	brcc	.+80     	; 0x167c <move_forward+0x380>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    162c:	b7 01       	movw	r22, r14
    162e:	88 27       	eor	r24, r24
    1630:	77 fd       	sbrc	r23, 7
    1632:	80 95       	com	r24
    1634:	98 2f       	mov	r25, r24
    1636:	e0 d1       	rcall	.+960    	; 0x19f8 <__floatsisf>
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e2       	ldi	r20, 0x20	; 32
    163e:	51 e4       	ldi	r21, 0x41	; 65
    1640:	45 d1       	rcall	.+650    	; 0x18cc <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Front Left | distance moved: %.1f cm", cent_moved);
    1642:	9f 93       	push	r25
    1644:	8f 93       	push	r24
    1646:	7f 93       	push	r23
    1648:	6f 93       	push	r22
    164a:	87 ef       	ldi	r24, 0xF7	; 247
    164c:	93 e0       	ldi	r25, 0x03	; 3
    164e:	9f 93       	push	r25
    1650:	8f 93       	push	r24
    1652:	8e 01       	movw	r16, r28
    1654:	06 5e       	subi	r16, 0xE6	; 230
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	1f 93       	push	r17
    165a:	0f 93       	push	r16
    165c:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    1660:	c8 01       	movw	r24, r16
    1662:	ae d9       	rcall	.-3236   	; 0x9c0 <USART_SendString>
			oi_set_wheels(0,0);
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	8d d8       	rcall	.-3814   	; 0x788 <oi_set_wheels>
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
			return 5;
    1678:	85 e0       	ldi	r24, 0x05	; 5
    167a:	ad c0       	rjmp	.+346    	; 0x17d6 <move_forward+0x4da>
		}
		else if (sensor->cliff_frontright_signal < 10)
    167c:	5a e0       	ldi	r21, 0x0A	; 10
    167e:	a5 16       	cp	r10, r21
    1680:	b1 04       	cpc	r11, r1
    1682:	40 f5       	brcc	.+80     	; 0x16d4 <move_forward+0x3d8>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    1684:	b7 01       	movw	r22, r14
    1686:	88 27       	eor	r24, r24
    1688:	77 fd       	sbrc	r23, 7
    168a:	80 95       	com	r24
    168c:	98 2f       	mov	r25, r24
    168e:	b4 d1       	rcall	.+872    	; 0x19f8 <__floatsisf>
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	19 d1       	rcall	.+562    	; 0x18cc <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Front Right | distance moved: %.1f cm", cent_moved);
    169a:	9f 93       	push	r25
    169c:	8f 93       	push	r24
    169e:	7f 93       	push	r23
    16a0:	6f 93       	push	r22
    16a2:	81 e3       	ldi	r24, 0x31	; 49
    16a4:	94 e0       	ldi	r25, 0x04	; 4
    16a6:	9f 93       	push	r25
    16a8:	8f 93       	push	r24
    16aa:	8e 01       	movw	r16, r28
    16ac:	06 5e       	subi	r16, 0xE6	; 230
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	1f 93       	push	r17
    16b2:	0f 93       	push	r16
    16b4:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);
    16b8:	c8 01       	movw	r24, r16
    16ba:	82 d9       	rcall	.-3324   	; 0x9c0 <USART_SendString>
			oi_set_wheels(0,0);
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	61 d8       	rcall	.-3902   	; 0x788 <oi_set_wheels>
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
			return 6;
    16d0:	86 e0       	ldi	r24, 0x06	; 6
    16d2:	81 c0       	rjmp	.+258    	; 0x17d6 <move_forward+0x4da>
		}
		else if (sensor->cliff_left_signal < 10) 
    16d4:	2a 30       	cpi	r18, 0x0A	; 10
    16d6:	31 05       	cpc	r19, r1
    16d8:	40 f5       	brcc	.+80     	; 0x172a <move_forward+0x42e>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    16da:	b7 01       	movw	r22, r14
    16dc:	88 27       	eor	r24, r24
    16de:	77 fd       	sbrc	r23, 7
    16e0:	80 95       	com	r24
    16e2:	98 2f       	mov	r25, r24
    16e4:	89 d1       	rcall	.+786    	; 0x19f8 <__floatsisf>
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e2       	ldi	r20, 0x20	; 32
    16ec:	51 e4       	ldi	r21, 0x41	; 65
    16ee:	ee d0       	rcall	.+476    	; 0x18cc <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Left | distance moved: %.1f cm", cent_moved);		
    16f0:	9f 93       	push	r25
    16f2:	8f 93       	push	r24
    16f4:	7f 93       	push	r23
    16f6:	6f 93       	push	r22
    16f8:	8c e6       	ldi	r24, 0x6C	; 108
    16fa:	94 e0       	ldi	r25, 0x04	; 4
    16fc:	9f 93       	push	r25
    16fe:	8f 93       	push	r24
    1700:	8e 01       	movw	r16, r28
    1702:	06 5e       	subi	r16, 0xE6	; 230
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	1f 93       	push	r17
    1708:	0f 93       	push	r16
    170a:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);	
    170e:	c8 01       	movw	r24, r16
    1710:	57 d9       	rcall	.-3410   	; 0x9c0 <USART_SendString>
			oi_set_wheels(0,0);
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	36 d8       	rcall	.-3988   	; 0x788 <oi_set_wheels>
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
			return 7;
    1726:	87 e0       	ldi	r24, 0x07	; 7
    1728:	56 c0       	rjmp	.+172    	; 0x17d6 <move_forward+0x4da>
		}
		else if (sensor->cliff_right_signal < 10)
    172a:	0a 97       	sbiw	r24, 0x0a	; 10
    172c:	40 f5       	brcc	.+80     	; 0x177e <move_forward+0x482>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    172e:	b7 01       	movw	r22, r14
    1730:	88 27       	eor	r24, r24
    1732:	77 fd       	sbrc	r23, 7
    1734:	80 95       	com	r24
    1736:	98 2f       	mov	r25, r24
    1738:	5f d1       	rcall	.+702    	; 0x19f8 <__floatsisf>
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	c4 d0       	rcall	.+392    	; 0x18cc <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Right | distance moved: %.1f cm", cent_moved);
    1744:	9f 93       	push	r25
    1746:	8f 93       	push	r24
    1748:	7f 93       	push	r23
    174a:	6f 93       	push	r22
    174c:	80 ea       	ldi	r24, 0xA0	; 160
    174e:	94 e0       	ldi	r25, 0x04	; 4
    1750:	9f 93       	push	r25
    1752:	8f 93       	push	r24
    1754:	8e 01       	movw	r16, r28
    1756:	06 5e       	subi	r16, 0xE6	; 230
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	1f 93       	push	r17
    175c:	0f 93       	push	r16
    175e:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
			USART_SendString(sensorData);		
    1762:	c8 01       	movw	r24, r16
    1764:	2d d9       	rcall	.-3494   	; 0x9c0 <USART_SendString>
			oi_set_wheels(0,0);	
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0c d8       	rcall	.-4072   	; 0x788 <oi_set_wheels>
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
			return 8;
    177a:	88 e0       	ldi	r24, 0x08	; 8
    177c:	2c c0       	rjmp	.+88     	; 0x17d6 <move_forward+0x4da>
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
    177e:	e8 14       	cp	r14, r8
    1780:	f9 04       	cpc	r15, r9
    1782:	0c f4       	brge	.+2      	; 0x1786 <move_forward+0x48a>
    1784:	ee cd       	rjmp	.-1060   	; 0x1362 <move_forward+0x66>
			oi_set_wheels(0,0);	
			return 8;
		}
	}

	oi_set_wheels(0, 0); // stop
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 c4 03 	call	0x788	; 0x788 <oi_set_wheels>
	float cent_moved = ((float) sum/10);
    1792:	b7 01       	movw	r22, r14
    1794:	88 27       	eor	r24, r24
    1796:	77 fd       	sbrc	r23, 7
    1798:	80 95       	com	r24
    179a:	98 2f       	mov	r25, r24
    179c:	2d d1       	rcall	.+602    	; 0x19f8 <__floatsisf>
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	92 d0       	rcall	.+292    	; 0x18cc <__divsf3>
	sprintf(outputString, "Moved %.1f centimeters", cent_moved);
    17a8:	9f 93       	push	r25
    17aa:	8f 93       	push	r24
    17ac:	7f 93       	push	r23
    17ae:	6f 93       	push	r22
    17b0:	85 ed       	ldi	r24, 0xD5	; 213
    17b2:	94 e0       	ldi	r25, 0x04	; 4
    17b4:	9f 93       	push	r25
    17b6:	8f 93       	push	r24
    17b8:	8e 01       	movw	r16, r28
    17ba:	0f 5f       	subi	r16, 0xFF	; 255
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	1f 93       	push	r17
    17c0:	0f 93       	push	r16
    17c2:	0e 94 33 14 	call	0x2866	; 0x2866 <sprintf>
	
	USART_SendString(outputString);
    17c6:	c8 01       	movw	r24, r16
    17c8:	fb d8       	rcall	.-3594   	; 0x9c0 <USART_SendString>
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61

	return 0;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
}
    17d6:	cb 5a       	subi	r28, 0xAB	; 171
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	7f 90       	pop	r7
    17fe:	6f 90       	pop	r6
    1800:	08 95       	ret

00001802 <__subsf3>:
    1802:	50 58       	subi	r21, 0x80	; 128

00001804 <__addsf3>:
    1804:	bb 27       	eor	r27, r27
    1806:	aa 27       	eor	r26, r26
    1808:	0e d0       	rcall	.+28     	; 0x1826 <__addsf3x>
    180a:	48 c1       	rjmp	.+656    	; 0x1a9c <__fp_round>
    180c:	39 d1       	rcall	.+626    	; 0x1a80 <__fp_pscA>
    180e:	30 f0       	brcs	.+12     	; 0x181c <__addsf3+0x18>
    1810:	3e d1       	rcall	.+636    	; 0x1a8e <__fp_pscB>
    1812:	20 f0       	brcs	.+8      	; 0x181c <__addsf3+0x18>
    1814:	31 f4       	brne	.+12     	; 0x1822 <__addsf3+0x1e>
    1816:	9f 3f       	cpi	r25, 0xFF	; 255
    1818:	11 f4       	brne	.+4      	; 0x181e <__addsf3+0x1a>
    181a:	1e f4       	brtc	.+6      	; 0x1822 <__addsf3+0x1e>
    181c:	2e c1       	rjmp	.+604    	; 0x1a7a <__fp_nan>
    181e:	0e f4       	brtc	.+2      	; 0x1822 <__addsf3+0x1e>
    1820:	e0 95       	com	r30
    1822:	e7 fb       	bst	r30, 7
    1824:	24 c1       	rjmp	.+584    	; 0x1a6e <__fp_inf>

00001826 <__addsf3x>:
    1826:	e9 2f       	mov	r30, r25
    1828:	4a d1       	rcall	.+660    	; 0x1abe <__fp_split3>
    182a:	80 f3       	brcs	.-32     	; 0x180c <__addsf3+0x8>
    182c:	ba 17       	cp	r27, r26
    182e:	62 07       	cpc	r22, r18
    1830:	73 07       	cpc	r23, r19
    1832:	84 07       	cpc	r24, r20
    1834:	95 07       	cpc	r25, r21
    1836:	18 f0       	brcs	.+6      	; 0x183e <__addsf3x+0x18>
    1838:	71 f4       	brne	.+28     	; 0x1856 <__addsf3x+0x30>
    183a:	9e f5       	brtc	.+102    	; 0x18a2 <__addsf3x+0x7c>
    183c:	62 c1       	rjmp	.+708    	; 0x1b02 <__fp_zero>
    183e:	0e f4       	brtc	.+2      	; 0x1842 <__addsf3x+0x1c>
    1840:	e0 95       	com	r30
    1842:	0b 2e       	mov	r0, r27
    1844:	ba 2f       	mov	r27, r26
    1846:	a0 2d       	mov	r26, r0
    1848:	0b 01       	movw	r0, r22
    184a:	b9 01       	movw	r22, r18
    184c:	90 01       	movw	r18, r0
    184e:	0c 01       	movw	r0, r24
    1850:	ca 01       	movw	r24, r20
    1852:	a0 01       	movw	r20, r0
    1854:	11 24       	eor	r1, r1
    1856:	ff 27       	eor	r31, r31
    1858:	59 1b       	sub	r21, r25
    185a:	99 f0       	breq	.+38     	; 0x1882 <__addsf3x+0x5c>
    185c:	59 3f       	cpi	r21, 0xF9	; 249
    185e:	50 f4       	brcc	.+20     	; 0x1874 <__addsf3x+0x4e>
    1860:	50 3e       	cpi	r21, 0xE0	; 224
    1862:	68 f1       	brcs	.+90     	; 0x18be <__addsf3x+0x98>
    1864:	1a 16       	cp	r1, r26
    1866:	f0 40       	sbci	r31, 0x00	; 0
    1868:	a2 2f       	mov	r26, r18
    186a:	23 2f       	mov	r18, r19
    186c:	34 2f       	mov	r19, r20
    186e:	44 27       	eor	r20, r20
    1870:	58 5f       	subi	r21, 0xF8	; 248
    1872:	f3 cf       	rjmp	.-26     	; 0x185a <__addsf3x+0x34>
    1874:	46 95       	lsr	r20
    1876:	37 95       	ror	r19
    1878:	27 95       	ror	r18
    187a:	a7 95       	ror	r26
    187c:	f0 40       	sbci	r31, 0x00	; 0
    187e:	53 95       	inc	r21
    1880:	c9 f7       	brne	.-14     	; 0x1874 <__addsf3x+0x4e>
    1882:	7e f4       	brtc	.+30     	; 0x18a2 <__addsf3x+0x7c>
    1884:	1f 16       	cp	r1, r31
    1886:	ba 0b       	sbc	r27, r26
    1888:	62 0b       	sbc	r22, r18
    188a:	73 0b       	sbc	r23, r19
    188c:	84 0b       	sbc	r24, r20
    188e:	ba f0       	brmi	.+46     	; 0x18be <__addsf3x+0x98>
    1890:	91 50       	subi	r25, 0x01	; 1
    1892:	a1 f0       	breq	.+40     	; 0x18bc <__addsf3x+0x96>
    1894:	ff 0f       	add	r31, r31
    1896:	bb 1f       	adc	r27, r27
    1898:	66 1f       	adc	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	88 1f       	adc	r24, r24
    189e:	c2 f7       	brpl	.-16     	; 0x1890 <__addsf3x+0x6a>
    18a0:	0e c0       	rjmp	.+28     	; 0x18be <__addsf3x+0x98>
    18a2:	ba 0f       	add	r27, r26
    18a4:	62 1f       	adc	r22, r18
    18a6:	73 1f       	adc	r23, r19
    18a8:	84 1f       	adc	r24, r20
    18aa:	48 f4       	brcc	.+18     	; 0x18be <__addsf3x+0x98>
    18ac:	87 95       	ror	r24
    18ae:	77 95       	ror	r23
    18b0:	67 95       	ror	r22
    18b2:	b7 95       	ror	r27
    18b4:	f7 95       	ror	r31
    18b6:	9e 3f       	cpi	r25, 0xFE	; 254
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <__addsf3x+0x96>
    18ba:	b3 cf       	rjmp	.-154    	; 0x1822 <__addsf3+0x1e>
    18bc:	93 95       	inc	r25
    18be:	88 0f       	add	r24, r24
    18c0:	08 f0       	brcs	.+2      	; 0x18c4 <__addsf3x+0x9e>
    18c2:	99 27       	eor	r25, r25
    18c4:	ee 0f       	add	r30, r30
    18c6:	97 95       	ror	r25
    18c8:	87 95       	ror	r24
    18ca:	08 95       	ret

000018cc <__divsf3>:
    18cc:	0c d0       	rcall	.+24     	; 0x18e6 <__divsf3x>
    18ce:	e6 c0       	rjmp	.+460    	; 0x1a9c <__fp_round>
    18d0:	de d0       	rcall	.+444    	; 0x1a8e <__fp_pscB>
    18d2:	40 f0       	brcs	.+16     	; 0x18e4 <__divsf3+0x18>
    18d4:	d5 d0       	rcall	.+426    	; 0x1a80 <__fp_pscA>
    18d6:	30 f0       	brcs	.+12     	; 0x18e4 <__divsf3+0x18>
    18d8:	21 f4       	brne	.+8      	; 0x18e2 <__divsf3+0x16>
    18da:	5f 3f       	cpi	r21, 0xFF	; 255
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <__divsf3+0x18>
    18de:	c7 c0       	rjmp	.+398    	; 0x1a6e <__fp_inf>
    18e0:	51 11       	cpse	r21, r1
    18e2:	10 c1       	rjmp	.+544    	; 0x1b04 <__fp_szero>
    18e4:	ca c0       	rjmp	.+404    	; 0x1a7a <__fp_nan>

000018e6 <__divsf3x>:
    18e6:	eb d0       	rcall	.+470    	; 0x1abe <__fp_split3>
    18e8:	98 f3       	brcs	.-26     	; 0x18d0 <__divsf3+0x4>

000018ea <__divsf3_pse>:
    18ea:	99 23       	and	r25, r25
    18ec:	c9 f3       	breq	.-14     	; 0x18e0 <__divsf3+0x14>
    18ee:	55 23       	and	r21, r21
    18f0:	b1 f3       	breq	.-20     	; 0x18de <__divsf3+0x12>
    18f2:	95 1b       	sub	r25, r21
    18f4:	55 0b       	sbc	r21, r21
    18f6:	bb 27       	eor	r27, r27
    18f8:	aa 27       	eor	r26, r26
    18fa:	62 17       	cp	r22, r18
    18fc:	73 07       	cpc	r23, r19
    18fe:	84 07       	cpc	r24, r20
    1900:	38 f0       	brcs	.+14     	; 0x1910 <__divsf3_pse+0x26>
    1902:	9f 5f       	subi	r25, 0xFF	; 255
    1904:	5f 4f       	sbci	r21, 0xFF	; 255
    1906:	22 0f       	add	r18, r18
    1908:	33 1f       	adc	r19, r19
    190a:	44 1f       	adc	r20, r20
    190c:	aa 1f       	adc	r26, r26
    190e:	a9 f3       	breq	.-22     	; 0x18fa <__divsf3_pse+0x10>
    1910:	33 d0       	rcall	.+102    	; 0x1978 <__divsf3_pse+0x8e>
    1912:	0e 2e       	mov	r0, r30
    1914:	3a f0       	brmi	.+14     	; 0x1924 <__divsf3_pse+0x3a>
    1916:	e0 e8       	ldi	r30, 0x80	; 128
    1918:	30 d0       	rcall	.+96     	; 0x197a <__divsf3_pse+0x90>
    191a:	91 50       	subi	r25, 0x01	; 1
    191c:	50 40       	sbci	r21, 0x00	; 0
    191e:	e6 95       	lsr	r30
    1920:	00 1c       	adc	r0, r0
    1922:	ca f7       	brpl	.-14     	; 0x1916 <__divsf3_pse+0x2c>
    1924:	29 d0       	rcall	.+82     	; 0x1978 <__divsf3_pse+0x8e>
    1926:	fe 2f       	mov	r31, r30
    1928:	27 d0       	rcall	.+78     	; 0x1978 <__divsf3_pse+0x8e>
    192a:	66 0f       	add	r22, r22
    192c:	77 1f       	adc	r23, r23
    192e:	88 1f       	adc	r24, r24
    1930:	bb 1f       	adc	r27, r27
    1932:	26 17       	cp	r18, r22
    1934:	37 07       	cpc	r19, r23
    1936:	48 07       	cpc	r20, r24
    1938:	ab 07       	cpc	r26, r27
    193a:	b0 e8       	ldi	r27, 0x80	; 128
    193c:	09 f0       	breq	.+2      	; 0x1940 <__divsf3_pse+0x56>
    193e:	bb 0b       	sbc	r27, r27
    1940:	80 2d       	mov	r24, r0
    1942:	bf 01       	movw	r22, r30
    1944:	ff 27       	eor	r31, r31
    1946:	93 58       	subi	r25, 0x83	; 131
    1948:	5f 4f       	sbci	r21, 0xFF	; 255
    194a:	2a f0       	brmi	.+10     	; 0x1956 <__divsf3_pse+0x6c>
    194c:	9e 3f       	cpi	r25, 0xFE	; 254
    194e:	51 05       	cpc	r21, r1
    1950:	68 f0       	brcs	.+26     	; 0x196c <__divsf3_pse+0x82>
    1952:	8d c0       	rjmp	.+282    	; 0x1a6e <__fp_inf>
    1954:	d7 c0       	rjmp	.+430    	; 0x1b04 <__fp_szero>
    1956:	5f 3f       	cpi	r21, 0xFF	; 255
    1958:	ec f3       	brlt	.-6      	; 0x1954 <__divsf3_pse+0x6a>
    195a:	98 3e       	cpi	r25, 0xE8	; 232
    195c:	dc f3       	brlt	.-10     	; 0x1954 <__divsf3_pse+0x6a>
    195e:	86 95       	lsr	r24
    1960:	77 95       	ror	r23
    1962:	67 95       	ror	r22
    1964:	b7 95       	ror	r27
    1966:	f7 95       	ror	r31
    1968:	9f 5f       	subi	r25, 0xFF	; 255
    196a:	c9 f7       	brne	.-14     	; 0x195e <__divsf3_pse+0x74>
    196c:	88 0f       	add	r24, r24
    196e:	91 1d       	adc	r25, r1
    1970:	96 95       	lsr	r25
    1972:	87 95       	ror	r24
    1974:	97 f9       	bld	r25, 7
    1976:	08 95       	ret
    1978:	e1 e0       	ldi	r30, 0x01	; 1
    197a:	66 0f       	add	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	88 1f       	adc	r24, r24
    1980:	bb 1f       	adc	r27, r27
    1982:	62 17       	cp	r22, r18
    1984:	73 07       	cpc	r23, r19
    1986:	84 07       	cpc	r24, r20
    1988:	ba 07       	cpc	r27, r26
    198a:	20 f0       	brcs	.+8      	; 0x1994 <__divsf3_pse+0xaa>
    198c:	62 1b       	sub	r22, r18
    198e:	73 0b       	sbc	r23, r19
    1990:	84 0b       	sbc	r24, r20
    1992:	ba 0b       	sbc	r27, r26
    1994:	ee 1f       	adc	r30, r30
    1996:	88 f7       	brcc	.-30     	; 0x197a <__divsf3_pse+0x90>
    1998:	e0 95       	com	r30
    199a:	08 95       	ret

0000199c <__fixunssfsi>:
    199c:	98 d0       	rcall	.+304    	; 0x1ace <__fp_splitA>
    199e:	88 f0       	brcs	.+34     	; 0x19c2 <__fixunssfsi+0x26>
    19a0:	9f 57       	subi	r25, 0x7F	; 127
    19a2:	90 f0       	brcs	.+36     	; 0x19c8 <__fixunssfsi+0x2c>
    19a4:	b9 2f       	mov	r27, r25
    19a6:	99 27       	eor	r25, r25
    19a8:	b7 51       	subi	r27, 0x17	; 23
    19aa:	a0 f0       	brcs	.+40     	; 0x19d4 <__fixunssfsi+0x38>
    19ac:	d1 f0       	breq	.+52     	; 0x19e2 <__fixunssfsi+0x46>
    19ae:	66 0f       	add	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	88 1f       	adc	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	1a f0       	brmi	.+6      	; 0x19be <__fixunssfsi+0x22>
    19b8:	ba 95       	dec	r27
    19ba:	c9 f7       	brne	.-14     	; 0x19ae <__fixunssfsi+0x12>
    19bc:	12 c0       	rjmp	.+36     	; 0x19e2 <__fixunssfsi+0x46>
    19be:	b1 30       	cpi	r27, 0x01	; 1
    19c0:	81 f0       	breq	.+32     	; 0x19e2 <__fixunssfsi+0x46>
    19c2:	9f d0       	rcall	.+318    	; 0x1b02 <__fp_zero>
    19c4:	b1 e0       	ldi	r27, 0x01	; 1
    19c6:	08 95       	ret
    19c8:	9c c0       	rjmp	.+312    	; 0x1b02 <__fp_zero>
    19ca:	67 2f       	mov	r22, r23
    19cc:	78 2f       	mov	r23, r24
    19ce:	88 27       	eor	r24, r24
    19d0:	b8 5f       	subi	r27, 0xF8	; 248
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <__fixunssfsi+0x46>
    19d4:	b9 3f       	cpi	r27, 0xF9	; 249
    19d6:	cc f3       	brlt	.-14     	; 0x19ca <__fixunssfsi+0x2e>
    19d8:	86 95       	lsr	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	b3 95       	inc	r27
    19e0:	d9 f7       	brne	.-10     	; 0x19d8 <__fixunssfsi+0x3c>
    19e2:	3e f4       	brtc	.+14     	; 0x19f2 <__fixunssfsi+0x56>
    19e4:	90 95       	com	r25
    19e6:	80 95       	com	r24
    19e8:	70 95       	com	r23
    19ea:	61 95       	neg	r22
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	8f 4f       	sbci	r24, 0xFF	; 255
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	08 95       	ret

000019f4 <__floatunsisf>:
    19f4:	e8 94       	clt
    19f6:	09 c0       	rjmp	.+18     	; 0x1a0a <__floatsisf+0x12>

000019f8 <__floatsisf>:
    19f8:	97 fb       	bst	r25, 7
    19fa:	3e f4       	brtc	.+14     	; 0x1a0a <__floatsisf+0x12>
    19fc:	90 95       	com	r25
    19fe:	80 95       	com	r24
    1a00:	70 95       	com	r23
    1a02:	61 95       	neg	r22
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	8f 4f       	sbci	r24, 0xFF	; 255
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0a:	99 23       	and	r25, r25
    1a0c:	a9 f0       	breq	.+42     	; 0x1a38 <__floatsisf+0x40>
    1a0e:	f9 2f       	mov	r31, r25
    1a10:	96 e9       	ldi	r25, 0x96	; 150
    1a12:	bb 27       	eor	r27, r27
    1a14:	93 95       	inc	r25
    1a16:	f6 95       	lsr	r31
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	b7 95       	ror	r27
    1a20:	f1 11       	cpse	r31, r1
    1a22:	f8 cf       	rjmp	.-16     	; 0x1a14 <__floatsisf+0x1c>
    1a24:	fa f4       	brpl	.+62     	; 0x1a64 <__floatsisf+0x6c>
    1a26:	bb 0f       	add	r27, r27
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <__floatsisf+0x36>
    1a2a:	60 ff       	sbrs	r22, 0
    1a2c:	1b c0       	rjmp	.+54     	; 0x1a64 <__floatsisf+0x6c>
    1a2e:	6f 5f       	subi	r22, 0xFF	; 255
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	8f 4f       	sbci	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	16 c0       	rjmp	.+44     	; 0x1a64 <__floatsisf+0x6c>
    1a38:	88 23       	and	r24, r24
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <__floatsisf+0x48>
    1a3c:	96 e9       	ldi	r25, 0x96	; 150
    1a3e:	11 c0       	rjmp	.+34     	; 0x1a62 <__floatsisf+0x6a>
    1a40:	77 23       	and	r23, r23
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <__floatsisf+0x54>
    1a44:	9e e8       	ldi	r25, 0x8E	; 142
    1a46:	87 2f       	mov	r24, r23
    1a48:	76 2f       	mov	r23, r22
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <__floatsisf+0x5e>
    1a4c:	66 23       	and	r22, r22
    1a4e:	71 f0       	breq	.+28     	; 0x1a6c <__floatsisf+0x74>
    1a50:	96 e8       	ldi	r25, 0x86	; 134
    1a52:	86 2f       	mov	r24, r22
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	2a f0       	brmi	.+10     	; 0x1a64 <__floatsisf+0x6c>
    1a5a:	9a 95       	dec	r25
    1a5c:	66 0f       	add	r22, r22
    1a5e:	77 1f       	adc	r23, r23
    1a60:	88 1f       	adc	r24, r24
    1a62:	da f7       	brpl	.-10     	; 0x1a5a <__floatsisf+0x62>
    1a64:	88 0f       	add	r24, r24
    1a66:	96 95       	lsr	r25
    1a68:	87 95       	ror	r24
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret

00001a6e <__fp_inf>:
    1a6e:	97 f9       	bld	r25, 7
    1a70:	9f 67       	ori	r25, 0x7F	; 127
    1a72:	80 e8       	ldi	r24, 0x80	; 128
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	08 95       	ret

00001a7a <__fp_nan>:
    1a7a:	9f ef       	ldi	r25, 0xFF	; 255
    1a7c:	80 ec       	ldi	r24, 0xC0	; 192
    1a7e:	08 95       	ret

00001a80 <__fp_pscA>:
    1a80:	00 24       	eor	r0, r0
    1a82:	0a 94       	dec	r0
    1a84:	16 16       	cp	r1, r22
    1a86:	17 06       	cpc	r1, r23
    1a88:	18 06       	cpc	r1, r24
    1a8a:	09 06       	cpc	r0, r25
    1a8c:	08 95       	ret

00001a8e <__fp_pscB>:
    1a8e:	00 24       	eor	r0, r0
    1a90:	0a 94       	dec	r0
    1a92:	12 16       	cp	r1, r18
    1a94:	13 06       	cpc	r1, r19
    1a96:	14 06       	cpc	r1, r20
    1a98:	05 06       	cpc	r0, r21
    1a9a:	08 95       	ret

00001a9c <__fp_round>:
    1a9c:	09 2e       	mov	r0, r25
    1a9e:	03 94       	inc	r0
    1aa0:	00 0c       	add	r0, r0
    1aa2:	11 f4       	brne	.+4      	; 0x1aa8 <__fp_round+0xc>
    1aa4:	88 23       	and	r24, r24
    1aa6:	52 f0       	brmi	.+20     	; 0x1abc <__fp_round+0x20>
    1aa8:	bb 0f       	add	r27, r27
    1aaa:	40 f4       	brcc	.+16     	; 0x1abc <__fp_round+0x20>
    1aac:	bf 2b       	or	r27, r31
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <__fp_round+0x18>
    1ab0:	60 ff       	sbrs	r22, 0
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <__fp_round+0x20>
    1ab4:	6f 5f       	subi	r22, 0xFF	; 255
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	08 95       	ret

00001abe <__fp_split3>:
    1abe:	57 fd       	sbrc	r21, 7
    1ac0:	90 58       	subi	r25, 0x80	; 128
    1ac2:	44 0f       	add	r20, r20
    1ac4:	55 1f       	adc	r21, r21
    1ac6:	59 f0       	breq	.+22     	; 0x1ade <__fp_splitA+0x10>
    1ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aca:	71 f0       	breq	.+28     	; 0x1ae8 <__fp_splitA+0x1a>
    1acc:	47 95       	ror	r20

00001ace <__fp_splitA>:
    1ace:	88 0f       	add	r24, r24
    1ad0:	97 fb       	bst	r25, 7
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	61 f0       	breq	.+24     	; 0x1aee <__fp_splitA+0x20>
    1ad6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad8:	79 f0       	breq	.+30     	; 0x1af8 <__fp_splitA+0x2a>
    1ada:	87 95       	ror	r24
    1adc:	08 95       	ret
    1ade:	12 16       	cp	r1, r18
    1ae0:	13 06       	cpc	r1, r19
    1ae2:	14 06       	cpc	r1, r20
    1ae4:	55 1f       	adc	r21, r21
    1ae6:	f2 cf       	rjmp	.-28     	; 0x1acc <__fp_split3+0xe>
    1ae8:	46 95       	lsr	r20
    1aea:	f1 df       	rcall	.-30     	; 0x1ace <__fp_splitA>
    1aec:	08 c0       	rjmp	.+16     	; 0x1afe <__fp_splitA+0x30>
    1aee:	16 16       	cp	r1, r22
    1af0:	17 06       	cpc	r1, r23
    1af2:	18 06       	cpc	r1, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	f1 cf       	rjmp	.-30     	; 0x1ada <__fp_splitA+0xc>
    1af8:	86 95       	lsr	r24
    1afa:	71 05       	cpc	r23, r1
    1afc:	61 05       	cpc	r22, r1
    1afe:	08 94       	sec
    1b00:	08 95       	ret

00001b02 <__fp_zero>:
    1b02:	e8 94       	clt

00001b04 <__fp_szero>:
    1b04:	bb 27       	eor	r27, r27
    1b06:	66 27       	eor	r22, r22
    1b08:	77 27       	eor	r23, r23
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	97 f9       	bld	r25, 7
    1b0e:	08 95       	ret

00001b10 <__mulsf3>:
    1b10:	0b d0       	rcall	.+22     	; 0x1b28 <__mulsf3x>
    1b12:	c4 cf       	rjmp	.-120    	; 0x1a9c <__fp_round>
    1b14:	b5 df       	rcall	.-150    	; 0x1a80 <__fp_pscA>
    1b16:	28 f0       	brcs	.+10     	; 0x1b22 <__mulsf3+0x12>
    1b18:	ba df       	rcall	.-140    	; 0x1a8e <__fp_pscB>
    1b1a:	18 f0       	brcs	.+6      	; 0x1b22 <__mulsf3+0x12>
    1b1c:	95 23       	and	r25, r21
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <__mulsf3+0x12>
    1b20:	a6 cf       	rjmp	.-180    	; 0x1a6e <__fp_inf>
    1b22:	ab cf       	rjmp	.-170    	; 0x1a7a <__fp_nan>
    1b24:	11 24       	eor	r1, r1
    1b26:	ee cf       	rjmp	.-36     	; 0x1b04 <__fp_szero>

00001b28 <__mulsf3x>:
    1b28:	ca df       	rcall	.-108    	; 0x1abe <__fp_split3>
    1b2a:	a0 f3       	brcs	.-24     	; 0x1b14 <__mulsf3+0x4>

00001b2c <__mulsf3_pse>:
    1b2c:	95 9f       	mul	r25, r21
    1b2e:	d1 f3       	breq	.-12     	; 0x1b24 <__mulsf3+0x14>
    1b30:	95 0f       	add	r25, r21
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	55 1f       	adc	r21, r21
    1b36:	62 9f       	mul	r22, r18
    1b38:	f0 01       	movw	r30, r0
    1b3a:	72 9f       	mul	r23, r18
    1b3c:	bb 27       	eor	r27, r27
    1b3e:	f0 0d       	add	r31, r0
    1b40:	b1 1d       	adc	r27, r1
    1b42:	63 9f       	mul	r22, r19
    1b44:	aa 27       	eor	r26, r26
    1b46:	f0 0d       	add	r31, r0
    1b48:	b1 1d       	adc	r27, r1
    1b4a:	aa 1f       	adc	r26, r26
    1b4c:	64 9f       	mul	r22, r20
    1b4e:	66 27       	eor	r22, r22
    1b50:	b0 0d       	add	r27, r0
    1b52:	a1 1d       	adc	r26, r1
    1b54:	66 1f       	adc	r22, r22
    1b56:	82 9f       	mul	r24, r18
    1b58:	22 27       	eor	r18, r18
    1b5a:	b0 0d       	add	r27, r0
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	62 1f       	adc	r22, r18
    1b60:	73 9f       	mul	r23, r19
    1b62:	b0 0d       	add	r27, r0
    1b64:	a1 1d       	adc	r26, r1
    1b66:	62 1f       	adc	r22, r18
    1b68:	83 9f       	mul	r24, r19
    1b6a:	a0 0d       	add	r26, r0
    1b6c:	61 1d       	adc	r22, r1
    1b6e:	22 1f       	adc	r18, r18
    1b70:	74 9f       	mul	r23, r20
    1b72:	33 27       	eor	r19, r19
    1b74:	a0 0d       	add	r26, r0
    1b76:	61 1d       	adc	r22, r1
    1b78:	23 1f       	adc	r18, r19
    1b7a:	84 9f       	mul	r24, r20
    1b7c:	60 0d       	add	r22, r0
    1b7e:	21 1d       	adc	r18, r1
    1b80:	82 2f       	mov	r24, r18
    1b82:	76 2f       	mov	r23, r22
    1b84:	6a 2f       	mov	r22, r26
    1b86:	11 24       	eor	r1, r1
    1b88:	9f 57       	subi	r25, 0x7F	; 127
    1b8a:	50 40       	sbci	r21, 0x00	; 0
    1b8c:	8a f0       	brmi	.+34     	; 0x1bb0 <__mulsf3_pse+0x84>
    1b8e:	e1 f0       	breq	.+56     	; 0x1bc8 <__mulsf3_pse+0x9c>
    1b90:	88 23       	and	r24, r24
    1b92:	4a f0       	brmi	.+18     	; 0x1ba6 <__mulsf3_pse+0x7a>
    1b94:	ee 0f       	add	r30, r30
    1b96:	ff 1f       	adc	r31, r31
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	88 1f       	adc	r24, r24
    1ba0:	91 50       	subi	r25, 0x01	; 1
    1ba2:	50 40       	sbci	r21, 0x00	; 0
    1ba4:	a9 f7       	brne	.-22     	; 0x1b90 <__mulsf3_pse+0x64>
    1ba6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba8:	51 05       	cpc	r21, r1
    1baa:	70 f0       	brcs	.+28     	; 0x1bc8 <__mulsf3_pse+0x9c>
    1bac:	60 cf       	rjmp	.-320    	; 0x1a6e <__fp_inf>
    1bae:	aa cf       	rjmp	.-172    	; 0x1b04 <__fp_szero>
    1bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb2:	ec f3       	brlt	.-6      	; 0x1bae <__mulsf3_pse+0x82>
    1bb4:	98 3e       	cpi	r25, 0xE8	; 232
    1bb6:	dc f3       	brlt	.-10     	; 0x1bae <__mulsf3_pse+0x82>
    1bb8:	86 95       	lsr	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	b7 95       	ror	r27
    1bc0:	f7 95       	ror	r31
    1bc2:	e7 95       	ror	r30
    1bc4:	9f 5f       	subi	r25, 0xFF	; 255
    1bc6:	c1 f7       	brne	.-16     	; 0x1bb8 <__mulsf3_pse+0x8c>
    1bc8:	fe 2b       	or	r31, r30
    1bca:	88 0f       	add	r24, r24
    1bcc:	91 1d       	adc	r25, r1
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
    1bd2:	97 f9       	bld	r25, 7
    1bd4:	08 95       	ret

00001bd6 <vfprintf>:
    1bd6:	2f 92       	push	r2
    1bd8:	3f 92       	push	r3
    1bda:	4f 92       	push	r4
    1bdc:	5f 92       	push	r5
    1bde:	6f 92       	push	r6
    1be0:	7f 92       	push	r7
    1be2:	8f 92       	push	r8
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	62 97       	sbiw	r28, 0x12	; 18
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	7c 01       	movw	r14, r24
    1c0c:	1b 01       	movw	r2, r22
    1c0e:	6a 01       	movw	r12, r20
    1c10:	fc 01       	movw	r30, r24
    1c12:	17 82       	std	Z+7, r1	; 0x07
    1c14:	16 82       	std	Z+6, r1	; 0x06
    1c16:	83 81       	ldd	r24, Z+3	; 0x03
    1c18:	81 fd       	sbrc	r24, 1
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfprintf+0x4c>
    1c1c:	4e c3       	rjmp	.+1692   	; 0x22ba <vfprintf+0x6e4>
    1c1e:	65 01       	movw	r12, r10
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <vfprintf+0x56>
    1c22:	88 24       	eor	r8, r8
    1c24:	83 94       	inc	r8
    1c26:	91 2c       	mov	r9, r1
    1c28:	8c 0e       	add	r8, r28
    1c2a:	9d 1e       	adc	r9, r29
    1c2c:	f7 01       	movw	r30, r14
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	f1 01       	movw	r30, r2
    1c32:	93 fd       	sbrc	r25, 3
    1c34:	85 91       	lpm	r24, Z+
    1c36:	93 ff       	sbrs	r25, 3
    1c38:	81 91       	ld	r24, Z+
    1c3a:	1f 01       	movw	r2, r30
    1c3c:	88 23       	and	r24, r24
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <vfprintf+0x6c>
    1c40:	38 c3       	rjmp	.+1648   	; 0x22b2 <vfprintf+0x6dc>
    1c42:	85 32       	cpi	r24, 0x25	; 37
    1c44:	39 f4       	brne	.+14     	; 0x1c54 <vfprintf+0x7e>
    1c46:	93 fd       	sbrc	r25, 3
    1c48:	85 91       	lpm	r24, Z+
    1c4a:	93 ff       	sbrs	r25, 3
    1c4c:	81 91       	ld	r24, Z+
    1c4e:	1f 01       	movw	r2, r30
    1c50:	85 32       	cpi	r24, 0x25	; 37
    1c52:	29 f4       	brne	.+10     	; 0x1c5e <vfprintf+0x88>
    1c54:	b7 01       	movw	r22, r14
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	da d5       	rcall	.+2996   	; 0x280e <fputc>
    1c5a:	56 01       	movw	r10, r12
    1c5c:	e0 cf       	rjmp	.-64     	; 0x1c1e <vfprintf+0x48>
    1c5e:	71 2c       	mov	r7, r1
    1c60:	61 2c       	mov	r6, r1
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	20 32       	cpi	r18, 0x20	; 32
    1c66:	a8 f4       	brcc	.+42     	; 0x1c92 <vfprintf+0xbc>
    1c68:	8b 32       	cpi	r24, 0x2B	; 43
    1c6a:	61 f0       	breq	.+24     	; 0x1c84 <vfprintf+0xae>
    1c6c:	28 f4       	brcc	.+10     	; 0x1c78 <vfprintf+0xa2>
    1c6e:	80 32       	cpi	r24, 0x20	; 32
    1c70:	51 f0       	breq	.+20     	; 0x1c86 <vfprintf+0xb0>
    1c72:	83 32       	cpi	r24, 0x23	; 35
    1c74:	71 f4       	brne	.+28     	; 0x1c92 <vfprintf+0xbc>
    1c76:	0b c0       	rjmp	.+22     	; 0x1c8e <vfprintf+0xb8>
    1c78:	8d 32       	cpi	r24, 0x2D	; 45
    1c7a:	39 f0       	breq	.+14     	; 0x1c8a <vfprintf+0xb4>
    1c7c:	80 33       	cpi	r24, 0x30	; 48
    1c7e:	49 f4       	brne	.+18     	; 0x1c92 <vfprintf+0xbc>
    1c80:	21 60       	ori	r18, 0x01	; 1
    1c82:	28 c0       	rjmp	.+80     	; 0x1cd4 <vfprintf+0xfe>
    1c84:	22 60       	ori	r18, 0x02	; 2
    1c86:	24 60       	ori	r18, 0x04	; 4
    1c88:	25 c0       	rjmp	.+74     	; 0x1cd4 <vfprintf+0xfe>
    1c8a:	28 60       	ori	r18, 0x08	; 8
    1c8c:	23 c0       	rjmp	.+70     	; 0x1cd4 <vfprintf+0xfe>
    1c8e:	20 61       	ori	r18, 0x10	; 16
    1c90:	21 c0       	rjmp	.+66     	; 0x1cd4 <vfprintf+0xfe>
    1c92:	27 fd       	sbrc	r18, 7
    1c94:	27 c0       	rjmp	.+78     	; 0x1ce4 <vfprintf+0x10e>
    1c96:	38 2f       	mov	r19, r24
    1c98:	30 53       	subi	r19, 0x30	; 48
    1c9a:	3a 30       	cpi	r19, 0x0A	; 10
    1c9c:	78 f4       	brcc	.+30     	; 0x1cbc <vfprintf+0xe6>
    1c9e:	26 ff       	sbrs	r18, 6
    1ca0:	06 c0       	rjmp	.+12     	; 0x1cae <vfprintf+0xd8>
    1ca2:	fa e0       	ldi	r31, 0x0A	; 10
    1ca4:	7f 9e       	mul	r7, r31
    1ca6:	30 0d       	add	r19, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	73 2e       	mov	r7, r19
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <vfprintf+0xfe>
    1cae:	4a e0       	ldi	r20, 0x0A	; 10
    1cb0:	64 9e       	mul	r6, r20
    1cb2:	30 0d       	add	r19, r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	63 2e       	mov	r6, r19
    1cb8:	20 62       	ori	r18, 0x20	; 32
    1cba:	0c c0       	rjmp	.+24     	; 0x1cd4 <vfprintf+0xfe>
    1cbc:	8e 32       	cpi	r24, 0x2E	; 46
    1cbe:	21 f4       	brne	.+8      	; 0x1cc8 <vfprintf+0xf2>
    1cc0:	26 fd       	sbrc	r18, 6
    1cc2:	f7 c2       	rjmp	.+1518   	; 0x22b2 <vfprintf+0x6dc>
    1cc4:	20 64       	ori	r18, 0x40	; 64
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <vfprintf+0xfe>
    1cc8:	8c 36       	cpi	r24, 0x6C	; 108
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <vfprintf+0xfa>
    1ccc:	20 68       	ori	r18, 0x80	; 128
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <vfprintf+0xfe>
    1cd0:	88 36       	cpi	r24, 0x68	; 104
    1cd2:	41 f4       	brne	.+16     	; 0x1ce4 <vfprintf+0x10e>
    1cd4:	f1 01       	movw	r30, r2
    1cd6:	93 fd       	sbrc	r25, 3
    1cd8:	85 91       	lpm	r24, Z+
    1cda:	93 ff       	sbrs	r25, 3
    1cdc:	81 91       	ld	r24, Z+
    1cde:	1f 01       	movw	r2, r30
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	c0 cf       	rjmp	.-128    	; 0x1c64 <vfprintf+0x8e>
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	95 54       	subi	r25, 0x45	; 69
    1ce8:	93 30       	cpi	r25, 0x03	; 3
    1cea:	18 f4       	brcc	.+6      	; 0x1cf2 <vfprintf+0x11c>
    1cec:	20 61       	ori	r18, 0x10	; 16
    1cee:	80 5e       	subi	r24, 0xE0	; 224
    1cf0:	06 c0       	rjmp	.+12     	; 0x1cfe <vfprintf+0x128>
    1cf2:	98 2f       	mov	r25, r24
    1cf4:	95 56       	subi	r25, 0x65	; 101
    1cf6:	93 30       	cpi	r25, 0x03	; 3
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <vfprintf+0x126>
    1cfa:	94 c1       	rjmp	.+808    	; 0x2024 <vfprintf+0x44e>
    1cfc:	2f 7e       	andi	r18, 0xEF	; 239
    1cfe:	26 fd       	sbrc	r18, 6
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <vfprintf+0x130>
    1d02:	16 e0       	ldi	r17, 0x06	; 6
    1d04:	71 2e       	mov	r7, r17
    1d06:	bf e3       	ldi	r27, 0x3F	; 63
    1d08:	5b 2e       	mov	r5, r27
    1d0a:	52 22       	and	r5, r18
    1d0c:	85 36       	cpi	r24, 0x65	; 101
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <vfprintf+0x140>
    1d10:	f0 e4       	ldi	r31, 0x40	; 64
    1d12:	5f 2a       	or	r5, r31
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <vfprintf+0x14e>
    1d16:	86 36       	cpi	r24, 0x66	; 102
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <vfprintf+0x14a>
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	54 2a       	or	r5, r20
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <vfprintf+0x14e>
    1d20:	71 10       	cpse	r7, r1
    1d22:	7a 94       	dec	r7
    1d24:	57 fe       	sbrs	r5, 7
    1d26:	07 c0       	rjmp	.+14     	; 0x1d36 <vfprintf+0x160>
    1d28:	5b e3       	ldi	r21, 0x3B	; 59
    1d2a:	57 15       	cp	r21, r7
    1d2c:	48 f0       	brcs	.+18     	; 0x1d40 <vfprintf+0x16a>
    1d2e:	47 2c       	mov	r4, r7
    1d30:	43 94       	inc	r4
    1d32:	27 e0       	ldi	r18, 0x07	; 7
    1d34:	0d c0       	rjmp	.+26     	; 0x1d50 <vfprintf+0x17a>
    1d36:	87 e0       	ldi	r24, 0x07	; 7
    1d38:	87 15       	cp	r24, r7
    1d3a:	30 f0       	brcs	.+12     	; 0x1d48 <vfprintf+0x172>
    1d3c:	27 2d       	mov	r18, r7
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <vfprintf+0x178>
    1d40:	27 e0       	ldi	r18, 0x07	; 7
    1d42:	ac e3       	ldi	r26, 0x3C	; 60
    1d44:	4a 2e       	mov	r4, r26
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <vfprintf+0x17a>
    1d48:	27 e0       	ldi	r18, 0x07	; 7
    1d4a:	f7 e0       	ldi	r31, 0x07	; 7
    1d4c:	7f 2e       	mov	r7, r31
    1d4e:	41 2c       	mov	r4, r1
    1d50:	56 01       	movw	r10, r12
    1d52:	94 e0       	ldi	r25, 0x04	; 4
    1d54:	a9 0e       	add	r10, r25
    1d56:	b1 1c       	adc	r11, r1
    1d58:	f6 01       	movw	r30, r12
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	04 2d       	mov	r16, r4
    1d64:	a4 01       	movw	r20, r8
    1d66:	4e d4       	rcall	.+2204   	; 0x2604 <__ftoa_engine>
    1d68:	8c 01       	movw	r16, r24
    1d6a:	49 81       	ldd	r20, Y+1	; 0x01
    1d6c:	4c 87       	std	Y+12, r20	; 0x0c
    1d6e:	40 ff       	sbrs	r20, 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x1a0>
    1d72:	43 ff       	sbrs	r20, 3
    1d74:	07 c0       	rjmp	.+14     	; 0x1d84 <vfprintf+0x1ae>
    1d76:	51 fc       	sbrc	r5, 1
    1d78:	08 c0       	rjmp	.+16     	; 0x1d8a <vfprintf+0x1b4>
    1d7a:	52 fe       	sbrs	r5, 2
    1d7c:	09 c0       	rjmp	.+18     	; 0x1d90 <vfprintf+0x1ba>
    1d7e:	e0 e2       	ldi	r30, 0x20	; 32
    1d80:	de 2e       	mov	r13, r30
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <vfprintf+0x1bc>
    1d84:	7d e2       	ldi	r23, 0x2D	; 45
    1d86:	d7 2e       	mov	r13, r23
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <vfprintf+0x1bc>
    1d8a:	6b e2       	ldi	r22, 0x2B	; 43
    1d8c:	d6 2e       	mov	r13, r22
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <vfprintf+0x1bc>
    1d90:	d1 2c       	mov	r13, r1
    1d92:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d94:	8c 70       	andi	r24, 0x0C	; 12
    1d96:	89 f1       	breq	.+98     	; 0x1dfa <vfprintf+0x224>
    1d98:	dd 20       	and	r13, r13
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <vfprintf+0x1ca>
    1d9c:	84 e0       	ldi	r24, 0x04	; 4
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <vfprintf+0x1cc>
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	86 15       	cp	r24, r6
    1da4:	10 f0       	brcs	.+4      	; 0x1daa <vfprintf+0x1d4>
    1da6:	61 2c       	mov	r6, r1
    1da8:	0a c0       	rjmp	.+20     	; 0x1dbe <vfprintf+0x1e8>
    1daa:	68 1a       	sub	r6, r24
    1dac:	53 fc       	sbrc	r5, 3
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <vfprintf+0x1e8>
    1db0:	b7 01       	movw	r22, r14
    1db2:	80 e2       	ldi	r24, 0x20	; 32
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	2b d5       	rcall	.+2646   	; 0x280e <fputc>
    1db8:	6a 94       	dec	r6
    1dba:	d1 f7       	brne	.-12     	; 0x1db0 <vfprintf+0x1da>
    1dbc:	f4 cf       	rjmp	.-24     	; 0x1da6 <vfprintf+0x1d0>
    1dbe:	dd 20       	and	r13, r13
    1dc0:	21 f0       	breq	.+8      	; 0x1dca <vfprintf+0x1f4>
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	8d 2d       	mov	r24, r13
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	22 d5       	rcall	.+2628   	; 0x280e <fputc>
    1dca:	5c 85       	ldd	r21, Y+12	; 0x0c
    1dcc:	53 fd       	sbrc	r21, 3
    1dce:	03 c0       	rjmp	.+6      	; 0x1dd6 <vfprintf+0x200>
    1dd0:	00 e9       	ldi	r16, 0x90	; 144
    1dd2:	10 e0       	ldi	r17, 0x00	; 0
    1dd4:	0b c0       	rjmp	.+22     	; 0x1dec <vfprintf+0x216>
    1dd6:	0c e8       	ldi	r16, 0x8C	; 140
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	08 c0       	rjmp	.+16     	; 0x1dec <vfprintf+0x216>
    1ddc:	51 10       	cpse	r5, r1
    1dde:	80 52       	subi	r24, 0x20	; 32
    1de0:	b7 01       	movw	r22, r14
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	14 d5       	rcall	.+2600   	; 0x280e <fputc>
    1de6:	0f 5f       	subi	r16, 0xFF	; 255
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <vfprintf+0x21a>
    1dec:	80 e1       	ldi	r24, 0x10	; 16
    1dee:	58 22       	and	r5, r24
    1df0:	f8 01       	movw	r30, r16
    1df2:	84 91       	lpm	r24, Z
    1df4:	81 11       	cpse	r24, r1
    1df6:	f2 cf       	rjmp	.-28     	; 0x1ddc <vfprintf+0x206>
    1df8:	59 c2       	rjmp	.+1202   	; 0x22ac <vfprintf+0x6d6>
    1dfa:	57 fe       	sbrs	r5, 7
    1dfc:	0e c0       	rjmp	.+28     	; 0x1e1a <vfprintf+0x244>
    1dfe:	40 0e       	add	r4, r16
    1e00:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e02:	44 ff       	sbrs	r20, 4
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <vfprintf+0x238>
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	81 33       	cpi	r24, 0x31	; 49
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <vfprintf+0x238>
    1e0c:	4a 94       	dec	r4
    1e0e:	14 14       	cp	r1, r4
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <vfprintf+0x28e>
    1e12:	58 e0       	ldi	r21, 0x08	; 8
    1e14:	54 15       	cp	r21, r4
    1e16:	48 f1       	brcs	.+82     	; 0x1e6a <vfprintf+0x294>
    1e18:	2c c0       	rjmp	.+88     	; 0x1e72 <vfprintf+0x29c>
    1e1a:	56 fc       	sbrc	r5, 6
    1e1c:	2a c0       	rjmp	.+84     	; 0x1e72 <vfprintf+0x29c>
    1e1e:	87 2d       	mov	r24, r7
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	80 17       	cp	r24, r16
    1e24:	91 07       	cpc	r25, r17
    1e26:	44 f0       	brlt	.+16     	; 0x1e38 <vfprintf+0x262>
    1e28:	0c 3f       	cpi	r16, 0xFC	; 252
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	18 07       	cpc	r17, r24
    1e2e:	24 f0       	brlt	.+8      	; 0x1e38 <vfprintf+0x262>
    1e30:	90 e8       	ldi	r25, 0x80	; 128
    1e32:	59 2a       	or	r5, r25
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <vfprintf+0x262>
    1e36:	7a 94       	dec	r7
    1e38:	77 20       	and	r7, r7
    1e3a:	49 f0       	breq	.+18     	; 0x1e4e <vfprintf+0x278>
    1e3c:	e2 e0       	ldi	r30, 0x02	; 2
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	ec 0f       	add	r30, r28
    1e42:	fd 1f       	adc	r31, r29
    1e44:	e7 0d       	add	r30, r7
    1e46:	f1 1d       	adc	r31, r1
    1e48:	80 81       	ld	r24, Z
    1e4a:	80 33       	cpi	r24, 0x30	; 48
    1e4c:	a1 f3       	breq	.-24     	; 0x1e36 <vfprintf+0x260>
    1e4e:	57 fe       	sbrs	r5, 7
    1e50:	10 c0       	rjmp	.+32     	; 0x1e72 <vfprintf+0x29c>
    1e52:	47 2c       	mov	r4, r7
    1e54:	43 94       	inc	r4
    1e56:	87 2d       	mov	r24, r7
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	08 17       	cp	r16, r24
    1e5c:	19 07       	cpc	r17, r25
    1e5e:	44 f4       	brge	.+16     	; 0x1e70 <vfprintf+0x29a>
    1e60:	70 1a       	sub	r7, r16
    1e62:	07 c0       	rjmp	.+14     	; 0x1e72 <vfprintf+0x29c>
    1e64:	44 24       	eor	r4, r4
    1e66:	43 94       	inc	r4
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <vfprintf+0x29c>
    1e6a:	58 e0       	ldi	r21, 0x08	; 8
    1e6c:	45 2e       	mov	r4, r21
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <vfprintf+0x29c>
    1e70:	71 2c       	mov	r7, r1
    1e72:	57 fe       	sbrs	r5, 7
    1e74:	07 c0       	rjmp	.+14     	; 0x1e84 <vfprintf+0x2ae>
    1e76:	10 16       	cp	r1, r16
    1e78:	11 06       	cpc	r1, r17
    1e7a:	3c f4       	brge	.+14     	; 0x1e8a <vfprintf+0x2b4>
    1e7c:	98 01       	movw	r18, r16
    1e7e:	2f 5f       	subi	r18, 0xFF	; 255
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <vfprintf+0x2b8>
    1e84:	25 e0       	ldi	r18, 0x05	; 5
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <vfprintf+0x2b8>
    1e8a:	21 e0       	ldi	r18, 0x01	; 1
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	dd 20       	and	r13, r13
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <vfprintf+0x2c0>
    1e92:	2f 5f       	subi	r18, 0xFF	; 255
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	77 20       	and	r7, r7
    1e98:	31 f0       	breq	.+12     	; 0x1ea6 <vfprintf+0x2d0>
    1e9a:	47 2d       	mov	r20, r7
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	4f 5f       	subi	r20, 0xFF	; 255
    1ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea2:	24 0f       	add	r18, r20
    1ea4:	35 1f       	adc	r19, r21
    1ea6:	46 2d       	mov	r20, r6
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	24 17       	cp	r18, r20
    1eac:	35 07       	cpc	r19, r21
    1eae:	14 f4       	brge	.+4      	; 0x1eb4 <vfprintf+0x2de>
    1eb0:	62 1a       	sub	r6, r18
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <vfprintf+0x2e0>
    1eb4:	61 2c       	mov	r6, r1
    1eb6:	85 2d       	mov	r24, r5
    1eb8:	89 70       	andi	r24, 0x09	; 9
    1eba:	41 f4       	brne	.+16     	; 0x1ecc <vfprintf+0x2f6>
    1ebc:	05 c0       	rjmp	.+10     	; 0x1ec8 <vfprintf+0x2f2>
    1ebe:	b7 01       	movw	r22, r14
    1ec0:	80 e2       	ldi	r24, 0x20	; 32
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a4 d4       	rcall	.+2376   	; 0x280e <fputc>
    1ec6:	6a 94       	dec	r6
    1ec8:	61 10       	cpse	r6, r1
    1eca:	f9 cf       	rjmp	.-14     	; 0x1ebe <vfprintf+0x2e8>
    1ecc:	dd 20       	and	r13, r13
    1ece:	21 f0       	breq	.+8      	; 0x1ed8 <vfprintf+0x302>
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	8d 2d       	mov	r24, r13
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9b d4       	rcall	.+2358   	; 0x280e <fputc>
    1ed8:	53 fc       	sbrc	r5, 3
    1eda:	08 c0       	rjmp	.+16     	; 0x1eec <vfprintf+0x316>
    1edc:	05 c0       	rjmp	.+10     	; 0x1ee8 <vfprintf+0x312>
    1ede:	b7 01       	movw	r22, r14
    1ee0:	80 e3       	ldi	r24, 0x30	; 48
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	94 d4       	rcall	.+2344   	; 0x280e <fputc>
    1ee6:	6a 94       	dec	r6
    1ee8:	61 10       	cpse	r6, r1
    1eea:	f9 cf       	rjmp	.-14     	; 0x1ede <vfprintf+0x308>
    1eec:	57 fe       	sbrs	r5, 7
    1eee:	54 c0       	rjmp	.+168    	; 0x1f98 <vfprintf+0x3c2>
    1ef0:	68 01       	movw	r12, r16
    1ef2:	17 ff       	sbrs	r17, 7
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <vfprintf+0x324>
    1ef6:	c1 2c       	mov	r12, r1
    1ef8:	d1 2c       	mov	r13, r1
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	a8 01       	movw	r20, r16
    1f00:	44 19       	sub	r20, r4
    1f02:	51 09       	sbc	r21, r1
    1f04:	5e 87       	std	Y+14, r21	; 0x0e
    1f06:	4d 87       	std	Y+13, r20	; 0x0d
    1f08:	28 01       	movw	r4, r16
    1f0a:	4c 18       	sub	r4, r12
    1f0c:	5d 08       	sbc	r5, r13
    1f0e:	48 0c       	add	r4, r8
    1f10:	59 1c       	adc	r5, r9
    1f12:	87 2d       	mov	r24, r7
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	44 27       	eor	r20, r20
    1f18:	55 27       	eor	r21, r21
    1f1a:	48 1b       	sub	r20, r24
    1f1c:	59 0b       	sbc	r21, r25
    1f1e:	58 8b       	std	Y+16, r21	; 0x10
    1f20:	4f 87       	std	Y+15, r20	; 0x0f
    1f22:	5f ef       	ldi	r21, 0xFF	; 255
    1f24:	c5 16       	cp	r12, r21
    1f26:	d5 06       	cpc	r13, r21
    1f28:	41 f4       	brne	.+16     	; 0x1f3a <vfprintf+0x364>
    1f2a:	b7 01       	movw	r22, r14
    1f2c:	8e e2       	ldi	r24, 0x2E	; 46
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	2a 8b       	std	Y+18, r18	; 0x12
    1f32:	39 8b       	std	Y+17, r19	; 0x11
    1f34:	6c d4       	rcall	.+2264   	; 0x280e <fputc>
    1f36:	39 89       	ldd	r19, Y+17	; 0x11
    1f38:	2a 89       	ldd	r18, Y+18	; 0x12
    1f3a:	0c 15       	cp	r16, r12
    1f3c:	1d 05       	cpc	r17, r13
    1f3e:	54 f0       	brlt	.+20     	; 0x1f54 <vfprintf+0x37e>
    1f40:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f42:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f44:	4c 15       	cp	r20, r12
    1f46:	5d 05       	cpc	r21, r13
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <vfprintf+0x37e>
    1f4a:	f2 01       	movw	r30, r4
    1f4c:	e2 0f       	add	r30, r18
    1f4e:	f3 1f       	adc	r31, r19
    1f50:	81 81       	ldd	r24, Z+1	; 0x01
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <vfprintf+0x380>
    1f54:	80 e3       	ldi	r24, 0x30	; 48
    1f56:	51 e0       	ldi	r21, 0x01	; 1
    1f58:	c5 1a       	sub	r12, r21
    1f5a:	d1 08       	sbc	r13, r1
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f62:	58 89       	ldd	r21, Y+16	; 0x10
    1f64:	c4 16       	cp	r12, r20
    1f66:	d5 06       	cpc	r13, r21
    1f68:	44 f0       	brlt	.+16     	; 0x1f7a <vfprintf+0x3a4>
    1f6a:	b7 01       	movw	r22, r14
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	2a 8b       	std	Y+18, r18	; 0x12
    1f70:	39 8b       	std	Y+17, r19	; 0x11
    1f72:	4d d4       	rcall	.+2202   	; 0x280e <fputc>
    1f74:	2a 89       	ldd	r18, Y+18	; 0x12
    1f76:	39 89       	ldd	r19, Y+17	; 0x11
    1f78:	d4 cf       	rjmp	.-88     	; 0x1f22 <vfprintf+0x34c>
    1f7a:	c0 16       	cp	r12, r16
    1f7c:	d1 06       	cpc	r13, r17
    1f7e:	49 f4       	brne	.+18     	; 0x1f92 <vfprintf+0x3bc>
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	96 33       	cpi	r25, 0x36	; 54
    1f84:	28 f4       	brcc	.+10     	; 0x1f90 <vfprintf+0x3ba>
    1f86:	95 33       	cpi	r25, 0x35	; 53
    1f88:	21 f4       	brne	.+8      	; 0x1f92 <vfprintf+0x3bc>
    1f8a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f8c:	54 fd       	sbrc	r21, 4
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <vfprintf+0x3bc>
    1f90:	81 e3       	ldi	r24, 0x31	; 49
    1f92:	b7 01       	movw	r22, r14
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	44 c0       	rjmp	.+136    	; 0x2020 <vfprintf+0x44a>
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	81 33       	cpi	r24, 0x31	; 49
    1f9c:	19 f0       	breq	.+6      	; 0x1fa4 <vfprintf+0x3ce>
    1f9e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1fa0:	4f 7e       	andi	r20, 0xEF	; 239
    1fa2:	4c 87       	std	Y+12, r20	; 0x0c
    1fa4:	b7 01       	movw	r22, r14
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	32 d4       	rcall	.+2148   	; 0x280e <fputc>
    1faa:	71 10       	cpse	r7, r1
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <vfprintf+0x3e2>
    1fae:	54 fe       	sbrs	r5, 4
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <vfprintf+0x404>
    1fb2:	85 e4       	ldi	r24, 0x45	; 69
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	13 c0       	rjmp	.+38     	; 0x1fde <vfprintf+0x408>
    1fb8:	b7 01       	movw	r22, r14
    1fba:	8e e2       	ldi	r24, 0x2E	; 46
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	27 d4       	rcall	.+2126   	; 0x280e <fputc>
    1fc0:	42 e0       	ldi	r20, 0x02	; 2
    1fc2:	d4 2e       	mov	r13, r20
    1fc4:	f4 01       	movw	r30, r8
    1fc6:	ed 0d       	add	r30, r13
    1fc8:	f1 1d       	adc	r31, r1
    1fca:	d3 94       	inc	r13
    1fcc:	b7 01       	movw	r22, r14
    1fce:	80 81       	ld	r24, Z
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	1d d4       	rcall	.+2106   	; 0x280e <fputc>
    1fd4:	7a 94       	dec	r7
    1fd6:	b1 f7       	brne	.-20     	; 0x1fc4 <vfprintf+0x3ee>
    1fd8:	ea cf       	rjmp	.-44     	; 0x1fae <vfprintf+0x3d8>
    1fda:	85 e6       	ldi	r24, 0x65	; 101
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	b7 01       	movw	r22, r14
    1fe0:	16 d4       	rcall	.+2092   	; 0x280e <fputc>
    1fe2:	17 fd       	sbrc	r17, 7
    1fe4:	06 c0       	rjmp	.+12     	; 0x1ff2 <vfprintf+0x41c>
    1fe6:	01 15       	cp	r16, r1
    1fe8:	11 05       	cpc	r17, r1
    1fea:	41 f4       	brne	.+16     	; 0x1ffc <vfprintf+0x426>
    1fec:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fee:	54 ff       	sbrs	r21, 4
    1ff0:	05 c0       	rjmp	.+10     	; 0x1ffc <vfprintf+0x426>
    1ff2:	11 95       	neg	r17
    1ff4:	01 95       	neg	r16
    1ff6:	11 09       	sbc	r17, r1
    1ff8:	8d e2       	ldi	r24, 0x2D	; 45
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <vfprintf+0x428>
    1ffc:	8b e2       	ldi	r24, 0x2B	; 43
    1ffe:	b7 01       	movw	r22, r14
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	05 d4       	rcall	.+2058   	; 0x280e <fputc>
    2004:	80 e3       	ldi	r24, 0x30	; 48
    2006:	03 c0       	rjmp	.+6      	; 0x200e <vfprintf+0x438>
    2008:	8f 5f       	subi	r24, 0xFF	; 255
    200a:	0a 50       	subi	r16, 0x0A	; 10
    200c:	11 09       	sbc	r17, r1
    200e:	0a 30       	cpi	r16, 0x0A	; 10
    2010:	11 05       	cpc	r17, r1
    2012:	d4 f7       	brge	.-12     	; 0x2008 <vfprintf+0x432>
    2014:	b7 01       	movw	r22, r14
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	fa d3       	rcall	.+2036   	; 0x280e <fputc>
    201a:	b7 01       	movw	r22, r14
    201c:	c8 01       	movw	r24, r16
    201e:	c0 96       	adiw	r24, 0x30	; 48
    2020:	f6 d3       	rcall	.+2028   	; 0x280e <fputc>
    2022:	44 c1       	rjmp	.+648    	; 0x22ac <vfprintf+0x6d6>
    2024:	83 36       	cpi	r24, 0x63	; 99
    2026:	31 f0       	breq	.+12     	; 0x2034 <vfprintf+0x45e>
    2028:	83 37       	cpi	r24, 0x73	; 115
    202a:	81 f0       	breq	.+32     	; 0x204c <vfprintf+0x476>
    202c:	83 35       	cpi	r24, 0x53	; 83
    202e:	09 f0       	breq	.+2      	; 0x2032 <vfprintf+0x45c>
    2030:	5a c0       	rjmp	.+180    	; 0x20e6 <vfprintf+0x510>
    2032:	23 c0       	rjmp	.+70     	; 0x207a <vfprintf+0x4a4>
    2034:	56 01       	movw	r10, r12
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	a8 0e       	add	r10, r24
    203a:	b1 1c       	adc	r11, r1
    203c:	f6 01       	movw	r30, r12
    203e:	80 81       	ld	r24, Z
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	cc 24       	eor	r12, r12
    2044:	c3 94       	inc	r12
    2046:	d1 2c       	mov	r13, r1
    2048:	84 01       	movw	r16, r8
    204a:	13 c0       	rjmp	.+38     	; 0x2072 <vfprintf+0x49c>
    204c:	56 01       	movw	r10, r12
    204e:	f2 e0       	ldi	r31, 0x02	; 2
    2050:	af 0e       	add	r10, r31
    2052:	b1 1c       	adc	r11, r1
    2054:	f6 01       	movw	r30, r12
    2056:	00 81       	ld	r16, Z
    2058:	11 81       	ldd	r17, Z+1	; 0x01
    205a:	26 ff       	sbrs	r18, 6
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <vfprintf+0x48e>
    205e:	67 2d       	mov	r22, r7
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <vfprintf+0x492>
    2064:	6f ef       	ldi	r22, 0xFF	; 255
    2066:	7f ef       	ldi	r23, 0xFF	; 255
    2068:	c8 01       	movw	r24, r16
    206a:	2a 8b       	std	Y+18, r18	; 0x12
    206c:	c5 d3       	rcall	.+1930   	; 0x27f8 <strnlen>
    206e:	6c 01       	movw	r12, r24
    2070:	2a 89       	ldd	r18, Y+18	; 0x12
    2072:	9f e7       	ldi	r25, 0x7F	; 127
    2074:	59 2e       	mov	r5, r25
    2076:	52 22       	and	r5, r18
    2078:	16 c0       	rjmp	.+44     	; 0x20a6 <vfprintf+0x4d0>
    207a:	56 01       	movw	r10, r12
    207c:	f2 e0       	ldi	r31, 0x02	; 2
    207e:	af 0e       	add	r10, r31
    2080:	b1 1c       	adc	r11, r1
    2082:	f6 01       	movw	r30, r12
    2084:	00 81       	ld	r16, Z
    2086:	11 81       	ldd	r17, Z+1	; 0x01
    2088:	26 ff       	sbrs	r18, 6
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <vfprintf+0x4bc>
    208c:	67 2d       	mov	r22, r7
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x4c0>
    2092:	6f ef       	ldi	r22, 0xFF	; 255
    2094:	7f ef       	ldi	r23, 0xFF	; 255
    2096:	c8 01       	movw	r24, r16
    2098:	2a 8b       	std	Y+18, r18	; 0x12
    209a:	8c d3       	rcall	.+1816   	; 0x27b4 <strnlen_P>
    209c:	6c 01       	movw	r12, r24
    209e:	2a 89       	ldd	r18, Y+18	; 0x12
    20a0:	80 e8       	ldi	r24, 0x80	; 128
    20a2:	58 2e       	mov	r5, r24
    20a4:	52 2a       	or	r5, r18
    20a6:	53 fc       	sbrc	r5, 3
    20a8:	1a c0       	rjmp	.+52     	; 0x20de <vfprintf+0x508>
    20aa:	05 c0       	rjmp	.+10     	; 0x20b6 <vfprintf+0x4e0>
    20ac:	b7 01       	movw	r22, r14
    20ae:	80 e2       	ldi	r24, 0x20	; 32
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	ad d3       	rcall	.+1882   	; 0x280e <fputc>
    20b4:	6a 94       	dec	r6
    20b6:	86 2d       	mov	r24, r6
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	c8 16       	cp	r12, r24
    20bc:	d9 06       	cpc	r13, r25
    20be:	b0 f3       	brcs	.-20     	; 0x20ac <vfprintf+0x4d6>
    20c0:	0e c0       	rjmp	.+28     	; 0x20de <vfprintf+0x508>
    20c2:	f8 01       	movw	r30, r16
    20c4:	57 fc       	sbrc	r5, 7
    20c6:	85 91       	lpm	r24, Z+
    20c8:	57 fe       	sbrs	r5, 7
    20ca:	81 91       	ld	r24, Z+
    20cc:	8f 01       	movw	r16, r30
    20ce:	b7 01       	movw	r22, r14
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9d d3       	rcall	.+1850   	; 0x280e <fputc>
    20d4:	61 10       	cpse	r6, r1
    20d6:	6a 94       	dec	r6
    20d8:	f1 e0       	ldi	r31, 0x01	; 1
    20da:	cf 1a       	sub	r12, r31
    20dc:	d1 08       	sbc	r13, r1
    20de:	c1 14       	cp	r12, r1
    20e0:	d1 04       	cpc	r13, r1
    20e2:	79 f7       	brne	.-34     	; 0x20c2 <vfprintf+0x4ec>
    20e4:	e3 c0       	rjmp	.+454    	; 0x22ac <vfprintf+0x6d6>
    20e6:	84 36       	cpi	r24, 0x64	; 100
    20e8:	11 f0       	breq	.+4      	; 0x20ee <vfprintf+0x518>
    20ea:	89 36       	cpi	r24, 0x69	; 105
    20ec:	49 f5       	brne	.+82     	; 0x2140 <vfprintf+0x56a>
    20ee:	56 01       	movw	r10, r12
    20f0:	27 ff       	sbrs	r18, 7
    20f2:	09 c0       	rjmp	.+18     	; 0x2106 <vfprintf+0x530>
    20f4:	44 e0       	ldi	r20, 0x04	; 4
    20f6:	a4 0e       	add	r10, r20
    20f8:	b1 1c       	adc	r11, r1
    20fa:	f6 01       	movw	r30, r12
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	0a c0       	rjmp	.+20     	; 0x211a <vfprintf+0x544>
    2106:	f2 e0       	ldi	r31, 0x02	; 2
    2108:	af 0e       	add	r10, r31
    210a:	b1 1c       	adc	r11, r1
    210c:	f6 01       	movw	r30, r12
    210e:	60 81       	ld	r22, Z
    2110:	71 81       	ldd	r23, Z+1	; 0x01
    2112:	88 27       	eor	r24, r24
    2114:	77 fd       	sbrc	r23, 7
    2116:	80 95       	com	r24
    2118:	98 2f       	mov	r25, r24
    211a:	12 2f       	mov	r17, r18
    211c:	1f 76       	andi	r17, 0x6F	; 111
    211e:	97 ff       	sbrs	r25, 7
    2120:	08 c0       	rjmp	.+16     	; 0x2132 <vfprintf+0x55c>
    2122:	90 95       	com	r25
    2124:	80 95       	com	r24
    2126:	70 95       	com	r23
    2128:	61 95       	neg	r22
    212a:	7f 4f       	sbci	r23, 0xFF	; 255
    212c:	8f 4f       	sbci	r24, 0xFF	; 255
    212e:	9f 4f       	sbci	r25, 0xFF	; 255
    2130:	10 68       	ori	r17, 0x80	; 128
    2132:	2a e0       	ldi	r18, 0x0A	; 10
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	a4 01       	movw	r20, r8
    2138:	fc d3       	rcall	.+2040   	; 0x2932 <__ultoa_invert>
    213a:	d8 2e       	mov	r13, r24
    213c:	d8 18       	sub	r13, r8
    213e:	3f c0       	rjmp	.+126    	; 0x21be <vfprintf+0x5e8>
    2140:	12 2f       	mov	r17, r18
    2142:	85 37       	cpi	r24, 0x75	; 117
    2144:	21 f4       	brne	.+8      	; 0x214e <vfprintf+0x578>
    2146:	1f 7e       	andi	r17, 0xEF	; 239
    2148:	2a e0       	ldi	r18, 0x0A	; 10
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	1f c0       	rjmp	.+62     	; 0x218c <vfprintf+0x5b6>
    214e:	19 7f       	andi	r17, 0xF9	; 249
    2150:	8f 36       	cpi	r24, 0x6F	; 111
    2152:	a1 f0       	breq	.+40     	; 0x217c <vfprintf+0x5a6>
    2154:	20 f4       	brcc	.+8      	; 0x215e <vfprintf+0x588>
    2156:	88 35       	cpi	r24, 0x58	; 88
    2158:	09 f0       	breq	.+2      	; 0x215c <vfprintf+0x586>
    215a:	ab c0       	rjmp	.+342    	; 0x22b2 <vfprintf+0x6dc>
    215c:	0b c0       	rjmp	.+22     	; 0x2174 <vfprintf+0x59e>
    215e:	80 37       	cpi	r24, 0x70	; 112
    2160:	21 f0       	breq	.+8      	; 0x216a <vfprintf+0x594>
    2162:	88 37       	cpi	r24, 0x78	; 120
    2164:	09 f0       	breq	.+2      	; 0x2168 <vfprintf+0x592>
    2166:	a5 c0       	rjmp	.+330    	; 0x22b2 <vfprintf+0x6dc>
    2168:	01 c0       	rjmp	.+2      	; 0x216c <vfprintf+0x596>
    216a:	10 61       	ori	r17, 0x10	; 16
    216c:	14 ff       	sbrs	r17, 4
    216e:	09 c0       	rjmp	.+18     	; 0x2182 <vfprintf+0x5ac>
    2170:	14 60       	ori	r17, 0x04	; 4
    2172:	07 c0       	rjmp	.+14     	; 0x2182 <vfprintf+0x5ac>
    2174:	24 ff       	sbrs	r18, 4
    2176:	08 c0       	rjmp	.+16     	; 0x2188 <vfprintf+0x5b2>
    2178:	16 60       	ori	r17, 0x06	; 6
    217a:	06 c0       	rjmp	.+12     	; 0x2188 <vfprintf+0x5b2>
    217c:	28 e0       	ldi	r18, 0x08	; 8
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	05 c0       	rjmp	.+10     	; 0x218c <vfprintf+0x5b6>
    2182:	20 e1       	ldi	r18, 0x10	; 16
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	02 c0       	rjmp	.+4      	; 0x218c <vfprintf+0x5b6>
    2188:	20 e1       	ldi	r18, 0x10	; 16
    218a:	32 e0       	ldi	r19, 0x02	; 2
    218c:	56 01       	movw	r10, r12
    218e:	17 ff       	sbrs	r17, 7
    2190:	09 c0       	rjmp	.+18     	; 0x21a4 <vfprintf+0x5ce>
    2192:	f4 e0       	ldi	r31, 0x04	; 4
    2194:	af 0e       	add	r10, r31
    2196:	b1 1c       	adc	r11, r1
    2198:	f6 01       	movw	r30, r12
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	08 c0       	rjmp	.+16     	; 0x21b4 <vfprintf+0x5de>
    21a4:	f2 e0       	ldi	r31, 0x02	; 2
    21a6:	af 0e       	add	r10, r31
    21a8:	b1 1c       	adc	r11, r1
    21aa:	f6 01       	movw	r30, r12
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a4 01       	movw	r20, r8
    21b6:	bd d3       	rcall	.+1914   	; 0x2932 <__ultoa_invert>
    21b8:	d8 2e       	mov	r13, r24
    21ba:	d8 18       	sub	r13, r8
    21bc:	1f 77       	andi	r17, 0x7F	; 127
    21be:	16 ff       	sbrs	r17, 6
    21c0:	0b c0       	rjmp	.+22     	; 0x21d8 <vfprintf+0x602>
    21c2:	21 2f       	mov	r18, r17
    21c4:	2e 7f       	andi	r18, 0xFE	; 254
    21c6:	d7 14       	cp	r13, r7
    21c8:	50 f4       	brcc	.+20     	; 0x21de <vfprintf+0x608>
    21ca:	14 ff       	sbrs	r17, 4
    21cc:	0a c0       	rjmp	.+20     	; 0x21e2 <vfprintf+0x60c>
    21ce:	12 fd       	sbrc	r17, 2
    21d0:	08 c0       	rjmp	.+16     	; 0x21e2 <vfprintf+0x60c>
    21d2:	21 2f       	mov	r18, r17
    21d4:	2e 7e       	andi	r18, 0xEE	; 238
    21d6:	05 c0       	rjmp	.+10     	; 0x21e2 <vfprintf+0x60c>
    21d8:	0d 2d       	mov	r16, r13
    21da:	21 2f       	mov	r18, r17
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <vfprintf+0x60e>
    21de:	0d 2d       	mov	r16, r13
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <vfprintf+0x60e>
    21e2:	07 2d       	mov	r16, r7
    21e4:	24 ff       	sbrs	r18, 4
    21e6:	0c c0       	rjmp	.+24     	; 0x2200 <vfprintf+0x62a>
    21e8:	fe 01       	movw	r30, r28
    21ea:	ed 0d       	add	r30, r13
    21ec:	f1 1d       	adc	r31, r1
    21ee:	80 81       	ld	r24, Z
    21f0:	80 33       	cpi	r24, 0x30	; 48
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <vfprintf+0x622>
    21f4:	29 7e       	andi	r18, 0xE9	; 233
    21f6:	08 c0       	rjmp	.+16     	; 0x2208 <vfprintf+0x632>
    21f8:	22 ff       	sbrs	r18, 2
    21fa:	05 c0       	rjmp	.+10     	; 0x2206 <vfprintf+0x630>
    21fc:	0e 5f       	subi	r16, 0xFE	; 254
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <vfprintf+0x632>
    2200:	82 2f       	mov	r24, r18
    2202:	86 78       	andi	r24, 0x86	; 134
    2204:	09 f0       	breq	.+2      	; 0x2208 <vfprintf+0x632>
    2206:	0f 5f       	subi	r16, 0xFF	; 255
    2208:	23 fd       	sbrc	r18, 3
    220a:	13 c0       	rjmp	.+38     	; 0x2232 <vfprintf+0x65c>
    220c:	20 ff       	sbrs	r18, 0
    220e:	0e c0       	rjmp	.+28     	; 0x222c <vfprintf+0x656>
    2210:	7d 2c       	mov	r7, r13
    2212:	06 15       	cp	r16, r6
    2214:	58 f4       	brcc	.+22     	; 0x222c <vfprintf+0x656>
    2216:	76 0c       	add	r7, r6
    2218:	70 1a       	sub	r7, r16
    221a:	06 2d       	mov	r16, r6
    221c:	07 c0       	rjmp	.+14     	; 0x222c <vfprintf+0x656>
    221e:	b7 01       	movw	r22, r14
    2220:	80 e2       	ldi	r24, 0x20	; 32
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	2a 8b       	std	Y+18, r18	; 0x12
    2226:	f3 d2       	rcall	.+1510   	; 0x280e <fputc>
    2228:	0f 5f       	subi	r16, 0xFF	; 255
    222a:	2a 89       	ldd	r18, Y+18	; 0x12
    222c:	06 15       	cp	r16, r6
    222e:	b8 f3       	brcs	.-18     	; 0x221e <vfprintf+0x648>
    2230:	04 c0       	rjmp	.+8      	; 0x223a <vfprintf+0x664>
    2232:	06 15       	cp	r16, r6
    2234:	10 f4       	brcc	.+4      	; 0x223a <vfprintf+0x664>
    2236:	60 1a       	sub	r6, r16
    2238:	01 c0       	rjmp	.+2      	; 0x223c <vfprintf+0x666>
    223a:	61 2c       	mov	r6, r1
    223c:	24 ff       	sbrs	r18, 4
    223e:	11 c0       	rjmp	.+34     	; 0x2262 <vfprintf+0x68c>
    2240:	b7 01       	movw	r22, r14
    2242:	80 e3       	ldi	r24, 0x30	; 48
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	2a 8b       	std	Y+18, r18	; 0x12
    2248:	e2 d2       	rcall	.+1476   	; 0x280e <fputc>
    224a:	2a 89       	ldd	r18, Y+18	; 0x12
    224c:	22 ff       	sbrs	r18, 2
    224e:	1c c0       	rjmp	.+56     	; 0x2288 <vfprintf+0x6b2>
    2250:	21 ff       	sbrs	r18, 1
    2252:	03 c0       	rjmp	.+6      	; 0x225a <vfprintf+0x684>
    2254:	88 e5       	ldi	r24, 0x58	; 88
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	02 c0       	rjmp	.+4      	; 0x225e <vfprintf+0x688>
    225a:	88 e7       	ldi	r24, 0x78	; 120
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	b7 01       	movw	r22, r14
    2260:	0c c0       	rjmp	.+24     	; 0x227a <vfprintf+0x6a4>
    2262:	82 2f       	mov	r24, r18
    2264:	86 78       	andi	r24, 0x86	; 134
    2266:	81 f0       	breq	.+32     	; 0x2288 <vfprintf+0x6b2>
    2268:	21 fd       	sbrc	r18, 1
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <vfprintf+0x69a>
    226c:	80 e2       	ldi	r24, 0x20	; 32
    226e:	01 c0       	rjmp	.+2      	; 0x2272 <vfprintf+0x69c>
    2270:	8b e2       	ldi	r24, 0x2B	; 43
    2272:	27 fd       	sbrc	r18, 7
    2274:	8d e2       	ldi	r24, 0x2D	; 45
    2276:	b7 01       	movw	r22, r14
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	c9 d2       	rcall	.+1426   	; 0x280e <fputc>
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <vfprintf+0x6b2>
    227e:	b7 01       	movw	r22, r14
    2280:	80 e3       	ldi	r24, 0x30	; 48
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	c4 d2       	rcall	.+1416   	; 0x280e <fputc>
    2286:	7a 94       	dec	r7
    2288:	d7 14       	cp	r13, r7
    228a:	c8 f3       	brcs	.-14     	; 0x227e <vfprintf+0x6a8>
    228c:	da 94       	dec	r13
    228e:	f4 01       	movw	r30, r8
    2290:	ed 0d       	add	r30, r13
    2292:	f1 1d       	adc	r31, r1
    2294:	b7 01       	movw	r22, r14
    2296:	80 81       	ld	r24, Z
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	b9 d2       	rcall	.+1394   	; 0x280e <fputc>
    229c:	d1 10       	cpse	r13, r1
    229e:	f6 cf       	rjmp	.-20     	; 0x228c <vfprintf+0x6b6>
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <vfprintf+0x6d6>
    22a2:	b7 01       	movw	r22, r14
    22a4:	80 e2       	ldi	r24, 0x20	; 32
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	b2 d2       	rcall	.+1380   	; 0x280e <fputc>
    22aa:	6a 94       	dec	r6
    22ac:	61 10       	cpse	r6, r1
    22ae:	f9 cf       	rjmp	.-14     	; 0x22a2 <vfprintf+0x6cc>
    22b0:	b6 cc       	rjmp	.-1684   	; 0x1c1e <vfprintf+0x48>
    22b2:	f7 01       	movw	r30, r14
    22b4:	26 81       	ldd	r18, Z+6	; 0x06
    22b6:	37 81       	ldd	r19, Z+7	; 0x07
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <vfprintf+0x6e8>
    22ba:	2f ef       	ldi	r18, 0xFF	; 255
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	c9 01       	movw	r24, r18
    22c0:	62 96       	adiw	r28, 0x12	; 18
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	bf 90       	pop	r11
    22de:	af 90       	pop	r10
    22e0:	9f 90       	pop	r9
    22e2:	8f 90       	pop	r8
    22e4:	7f 90       	pop	r7
    22e6:	6f 90       	pop	r6
    22e8:	5f 90       	pop	r5
    22ea:	4f 90       	pop	r4
    22ec:	3f 90       	pop	r3
    22ee:	2f 90       	pop	r2
    22f0:	08 95       	ret

000022f2 <__divmodhi4>:
    22f2:	97 fb       	bst	r25, 7
    22f4:	07 2e       	mov	r0, r23
    22f6:	16 f4       	brtc	.+4      	; 0x22fc <__divmodhi4+0xa>
    22f8:	00 94       	com	r0
    22fa:	06 d0       	rcall	.+12     	; 0x2308 <__divmodhi4_neg1>
    22fc:	77 fd       	sbrc	r23, 7
    22fe:	08 d0       	rcall	.+16     	; 0x2310 <__divmodhi4_neg2>
    2300:	17 d0       	rcall	.+46     	; 0x2330 <__udivmodhi4>
    2302:	07 fc       	sbrc	r0, 7
    2304:	05 d0       	rcall	.+10     	; 0x2310 <__divmodhi4_neg2>
    2306:	3e f4       	brtc	.+14     	; 0x2316 <__divmodhi4_exit>

00002308 <__divmodhi4_neg1>:
    2308:	90 95       	com	r25
    230a:	81 95       	neg	r24
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	08 95       	ret

00002310 <__divmodhi4_neg2>:
    2310:	70 95       	com	r23
    2312:	61 95       	neg	r22
    2314:	7f 4f       	sbci	r23, 0xFF	; 255

00002316 <__divmodhi4_exit>:
    2316:	08 95       	ret

00002318 <__umulhisi3>:
    2318:	a2 9f       	mul	r26, r18
    231a:	b0 01       	movw	r22, r0
    231c:	b3 9f       	mul	r27, r19
    231e:	c0 01       	movw	r24, r0
    2320:	a3 9f       	mul	r26, r19
    2322:	01 d0       	rcall	.+2      	; 0x2326 <__umulhisi3+0xe>
    2324:	b2 9f       	mul	r27, r18
    2326:	70 0d       	add	r23, r0
    2328:	81 1d       	adc	r24, r1
    232a:	11 24       	eor	r1, r1
    232c:	91 1d       	adc	r25, r1
    232e:	08 95       	ret

00002330 <__udivmodhi4>:
    2330:	aa 1b       	sub	r26, r26
    2332:	bb 1b       	sub	r27, r27
    2334:	51 e1       	ldi	r21, 0x11	; 17
    2336:	07 c0       	rjmp	.+14     	; 0x2346 <__udivmodhi4_ep>

00002338 <__udivmodhi4_loop>:
    2338:	aa 1f       	adc	r26, r26
    233a:	bb 1f       	adc	r27, r27
    233c:	a6 17       	cp	r26, r22
    233e:	b7 07       	cpc	r27, r23
    2340:	10 f0       	brcs	.+4      	; 0x2346 <__udivmodhi4_ep>
    2342:	a6 1b       	sub	r26, r22
    2344:	b7 0b       	sbc	r27, r23

00002346 <__udivmodhi4_ep>:
    2346:	88 1f       	adc	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	5a 95       	dec	r21
    234c:	a9 f7       	brne	.-22     	; 0x2338 <__udivmodhi4_loop>
    234e:	80 95       	com	r24
    2350:	90 95       	com	r25
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	08 95       	ret

00002358 <calloc>:
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	68 9f       	mul	r22, r24
    2362:	80 01       	movw	r16, r0
    2364:	69 9f       	mul	r22, r25
    2366:	10 0d       	add	r17, r0
    2368:	78 9f       	mul	r23, r24
    236a:	10 0d       	add	r17, r0
    236c:	11 24       	eor	r1, r1
    236e:	c8 01       	movw	r24, r16
    2370:	0f d0       	rcall	.+30     	; 0x2390 <malloc>
    2372:	c8 2f       	mov	r28, r24
    2374:	d9 2f       	mov	r29, r25
    2376:	20 97       	sbiw	r28, 0x00	; 0
    2378:	29 f0       	breq	.+10     	; 0x2384 <calloc+0x2c>
    237a:	a8 01       	movw	r20, r16
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	8c 2f       	mov	r24, r28
    2382:	23 d2       	rcall	.+1094   	; 0x27ca <memset>
    2384:	ce 01       	movw	r24, r28
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	08 95       	ret

00002390 <malloc>:
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	82 30       	cpi	r24, 0x02	; 2
    239a:	91 05       	cpc	r25, r1
    239c:	10 f4       	brcc	.+4      	; 0x23a2 <malloc+0x12>
    239e:	82 e0       	ldi	r24, 0x02	; 2
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	e0 91 45 05 	lds	r30, 0x0545
    23a6:	f0 91 46 05 	lds	r31, 0x0546
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	c0 e0       	ldi	r28, 0x00	; 0
    23b0:	d0 e0       	ldi	r29, 0x00	; 0
    23b2:	23 c0       	rjmp	.+70     	; 0x23fa <malloc+0x6a>
    23b4:	40 81       	ld	r20, Z
    23b6:	51 81       	ldd	r21, Z+1	; 0x01
    23b8:	48 17       	cp	r20, r24
    23ba:	59 07       	cpc	r21, r25
    23bc:	a8 f0       	brcs	.+42     	; 0x23e8 <malloc+0x58>
    23be:	48 17       	cp	r20, r24
    23c0:	59 07       	cpc	r21, r25
    23c2:	61 f4       	brne	.+24     	; 0x23dc <malloc+0x4c>
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	20 97       	sbiw	r28, 0x00	; 0
    23ca:	19 f0       	breq	.+6      	; 0x23d2 <malloc+0x42>
    23cc:	9b 83       	std	Y+3, r25	; 0x03
    23ce:	8a 83       	std	Y+2, r24	; 0x02
    23d0:	2e c0       	rjmp	.+92     	; 0x242e <malloc+0x9e>
    23d2:	90 93 46 05 	sts	0x0546, r25
    23d6:	80 93 45 05 	sts	0x0545, r24
    23da:	29 c0       	rjmp	.+82     	; 0x242e <malloc+0x9e>
    23dc:	21 15       	cp	r18, r1
    23de:	31 05       	cpc	r19, r1
    23e0:	29 f0       	breq	.+10     	; 0x23ec <malloc+0x5c>
    23e2:	42 17       	cp	r20, r18
    23e4:	53 07       	cpc	r21, r19
    23e6:	10 f0       	brcs	.+4      	; 0x23ec <malloc+0x5c>
    23e8:	a9 01       	movw	r20, r18
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <malloc+0x60>
    23ec:	be 01       	movw	r22, r28
    23ee:	df 01       	movw	r26, r30
    23f0:	02 81       	ldd	r16, Z+2	; 0x02
    23f2:	13 81       	ldd	r17, Z+3	; 0x03
    23f4:	ef 01       	movw	r28, r30
    23f6:	9a 01       	movw	r18, r20
    23f8:	f8 01       	movw	r30, r16
    23fa:	30 97       	sbiw	r30, 0x00	; 0
    23fc:	d9 f6       	brne	.-74     	; 0x23b4 <malloc+0x24>
    23fe:	21 15       	cp	r18, r1
    2400:	31 05       	cpc	r19, r1
    2402:	09 f1       	breq	.+66     	; 0x2446 <malloc+0xb6>
    2404:	28 1b       	sub	r18, r24
    2406:	39 0b       	sbc	r19, r25
    2408:	24 30       	cpi	r18, 0x04	; 4
    240a:	31 05       	cpc	r19, r1
    240c:	90 f4       	brcc	.+36     	; 0x2432 <malloc+0xa2>
    240e:	12 96       	adiw	r26, 0x02	; 2
    2410:	8d 91       	ld	r24, X+
    2412:	9c 91       	ld	r25, X
    2414:	13 97       	sbiw	r26, 0x03	; 3
    2416:	61 15       	cp	r22, r1
    2418:	71 05       	cpc	r23, r1
    241a:	21 f0       	breq	.+8      	; 0x2424 <malloc+0x94>
    241c:	fb 01       	movw	r30, r22
    241e:	93 83       	std	Z+3, r25	; 0x03
    2420:	82 83       	std	Z+2, r24	; 0x02
    2422:	04 c0       	rjmp	.+8      	; 0x242c <malloc+0x9c>
    2424:	90 93 46 05 	sts	0x0546, r25
    2428:	80 93 45 05 	sts	0x0545, r24
    242c:	fd 01       	movw	r30, r26
    242e:	32 96       	adiw	r30, 0x02	; 2
    2430:	44 c0       	rjmp	.+136    	; 0x24ba <malloc+0x12a>
    2432:	fd 01       	movw	r30, r26
    2434:	e2 0f       	add	r30, r18
    2436:	f3 1f       	adc	r31, r19
    2438:	81 93       	st	Z+, r24
    243a:	91 93       	st	Z+, r25
    243c:	22 50       	subi	r18, 0x02	; 2
    243e:	31 09       	sbc	r19, r1
    2440:	2d 93       	st	X+, r18
    2442:	3c 93       	st	X, r19
    2444:	3a c0       	rjmp	.+116    	; 0x24ba <malloc+0x12a>
    2446:	20 91 43 05 	lds	r18, 0x0543
    244a:	30 91 44 05 	lds	r19, 0x0544
    244e:	23 2b       	or	r18, r19
    2450:	41 f4       	brne	.+16     	; 0x2462 <malloc+0xd2>
    2452:	20 91 02 01 	lds	r18, 0x0102
    2456:	30 91 03 01 	lds	r19, 0x0103
    245a:	30 93 44 05 	sts	0x0544, r19
    245e:	20 93 43 05 	sts	0x0543, r18
    2462:	20 91 00 01 	lds	r18, 0x0100
    2466:	30 91 01 01 	lds	r19, 0x0101
    246a:	21 15       	cp	r18, r1
    246c:	31 05       	cpc	r19, r1
    246e:	41 f4       	brne	.+16     	; 0x2480 <malloc+0xf0>
    2470:	2d b7       	in	r18, 0x3d	; 61
    2472:	3e b7       	in	r19, 0x3e	; 62
    2474:	40 91 04 01 	lds	r20, 0x0104
    2478:	50 91 05 01 	lds	r21, 0x0105
    247c:	24 1b       	sub	r18, r20
    247e:	35 0b       	sbc	r19, r21
    2480:	e0 91 43 05 	lds	r30, 0x0543
    2484:	f0 91 44 05 	lds	r31, 0x0544
    2488:	e2 17       	cp	r30, r18
    248a:	f3 07       	cpc	r31, r19
    248c:	a0 f4       	brcc	.+40     	; 0x24b6 <malloc+0x126>
    248e:	2e 1b       	sub	r18, r30
    2490:	3f 0b       	sbc	r19, r31
    2492:	28 17       	cp	r18, r24
    2494:	39 07       	cpc	r19, r25
    2496:	78 f0       	brcs	.+30     	; 0x24b6 <malloc+0x126>
    2498:	ac 01       	movw	r20, r24
    249a:	4e 5f       	subi	r20, 0xFE	; 254
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	24 17       	cp	r18, r20
    24a0:	35 07       	cpc	r19, r21
    24a2:	48 f0       	brcs	.+18     	; 0x24b6 <malloc+0x126>
    24a4:	4e 0f       	add	r20, r30
    24a6:	5f 1f       	adc	r21, r31
    24a8:	50 93 44 05 	sts	0x0544, r21
    24ac:	40 93 43 05 	sts	0x0543, r20
    24b0:	81 93       	st	Z+, r24
    24b2:	91 93       	st	Z+, r25
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <malloc+0x12a>
    24b6:	e0 e0       	ldi	r30, 0x00	; 0
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	cf 01       	movw	r24, r30
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	08 95       	ret

000024c6 <free>:
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <free+0x12>
    24d6:	8f c0       	rjmp	.+286    	; 0x25f6 <free+0x130>
    24d8:	dc 01       	movw	r26, r24
    24da:	12 97       	sbiw	r26, 0x02	; 2
    24dc:	13 96       	adiw	r26, 0x03	; 3
    24de:	1c 92       	st	X, r1
    24e0:	1e 92       	st	-X, r1
    24e2:	12 97       	sbiw	r26, 0x02	; 2
    24e4:	e0 90 45 05 	lds	r14, 0x0545
    24e8:	f0 90 46 05 	lds	r15, 0x0546
    24ec:	e1 14       	cp	r14, r1
    24ee:	f1 04       	cpc	r15, r1
    24f0:	89 f4       	brne	.+34     	; 0x2514 <free+0x4e>
    24f2:	2d 91       	ld	r18, X+
    24f4:	3c 91       	ld	r19, X
    24f6:	11 97       	sbiw	r26, 0x01	; 1
    24f8:	28 0f       	add	r18, r24
    24fa:	39 1f       	adc	r19, r25
    24fc:	80 91 43 05 	lds	r24, 0x0543
    2500:	90 91 44 05 	lds	r25, 0x0544
    2504:	82 17       	cp	r24, r18
    2506:	93 07       	cpc	r25, r19
    2508:	89 f5       	brne	.+98     	; 0x256c <free+0xa6>
    250a:	b0 93 44 05 	sts	0x0544, r27
    250e:	a0 93 43 05 	sts	0x0543, r26
    2512:	71 c0       	rjmp	.+226    	; 0x25f6 <free+0x130>
    2514:	e7 01       	movw	r28, r14
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	01 c0       	rjmp	.+2      	; 0x251e <free+0x58>
    251c:	ea 01       	movw	r28, r20
    251e:	ca 17       	cp	r28, r26
    2520:	db 07       	cpc	r29, r27
    2522:	38 f4       	brcc	.+14     	; 0x2532 <free+0x6c>
    2524:	4a 81       	ldd	r20, Y+2	; 0x02
    2526:	5b 81       	ldd	r21, Y+3	; 0x03
    2528:	9e 01       	movw	r18, r28
    252a:	41 15       	cp	r20, r1
    252c:	51 05       	cpc	r21, r1
    252e:	b1 f7       	brne	.-20     	; 0x251c <free+0x56>
    2530:	22 c0       	rjmp	.+68     	; 0x2576 <free+0xb0>
    2532:	bc 01       	movw	r22, r24
    2534:	62 50       	subi	r22, 0x02	; 2
    2536:	71 09       	sbc	r23, r1
    2538:	fb 01       	movw	r30, r22
    253a:	d3 83       	std	Z+3, r29	; 0x03
    253c:	c2 83       	std	Z+2, r28	; 0x02
    253e:	00 81       	ld	r16, Z
    2540:	11 81       	ldd	r17, Z+1	; 0x01
    2542:	ac 01       	movw	r20, r24
    2544:	40 0f       	add	r20, r16
    2546:	51 1f       	adc	r21, r17
    2548:	4c 17       	cp	r20, r28
    254a:	5d 07       	cpc	r21, r29
    254c:	61 f4       	brne	.+24     	; 0x2566 <free+0xa0>
    254e:	48 81       	ld	r20, Y
    2550:	59 81       	ldd	r21, Y+1	; 0x01
    2552:	40 0f       	add	r20, r16
    2554:	51 1f       	adc	r21, r17
    2556:	4e 5f       	subi	r20, 0xFE	; 254
    2558:	5f 4f       	sbci	r21, 0xFF	; 255
    255a:	51 83       	std	Z+1, r21	; 0x01
    255c:	40 83       	st	Z, r20
    255e:	4a 81       	ldd	r20, Y+2	; 0x02
    2560:	5b 81       	ldd	r21, Y+3	; 0x03
    2562:	53 83       	std	Z+3, r21	; 0x03
    2564:	42 83       	std	Z+2, r20	; 0x02
    2566:	21 15       	cp	r18, r1
    2568:	31 05       	cpc	r19, r1
    256a:	29 f4       	brne	.+10     	; 0x2576 <free+0xb0>
    256c:	b0 93 46 05 	sts	0x0546, r27
    2570:	a0 93 45 05 	sts	0x0545, r26
    2574:	40 c0       	rjmp	.+128    	; 0x25f6 <free+0x130>
    2576:	f9 01       	movw	r30, r18
    2578:	b3 83       	std	Z+3, r27	; 0x03
    257a:	a2 83       	std	Z+2, r26	; 0x02
    257c:	e9 01       	movw	r28, r18
    257e:	69 91       	ld	r22, Y+
    2580:	79 91       	ld	r23, Y+
    2582:	c6 0f       	add	r28, r22
    2584:	d7 1f       	adc	r29, r23
    2586:	ac 17       	cp	r26, r28
    2588:	bd 07       	cpc	r27, r29
    258a:	79 f4       	brne	.+30     	; 0x25aa <free+0xe4>
    258c:	dc 01       	movw	r26, r24
    258e:	5e 91       	ld	r21, -X
    2590:	4e 91       	ld	r20, -X
    2592:	46 0f       	add	r20, r22
    2594:	57 1f       	adc	r21, r23
    2596:	4e 5f       	subi	r20, 0xFE	; 254
    2598:	5f 4f       	sbci	r21, 0xFF	; 255
    259a:	51 83       	std	Z+1, r21	; 0x01
    259c:	40 83       	st	Z, r20
    259e:	12 96       	adiw	r26, 0x02	; 2
    25a0:	8d 91       	ld	r24, X+
    25a2:	9c 91       	ld	r25, X
    25a4:	13 97       	sbiw	r26, 0x03	; 3
    25a6:	93 83       	std	Z+3, r25	; 0x03
    25a8:	82 83       	std	Z+2, r24	; 0x02
    25aa:	a0 e0       	ldi	r26, 0x00	; 0
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <free+0xee>
    25b0:	d7 01       	movw	r26, r14
    25b2:	7c 01       	movw	r14, r24
    25b4:	f7 01       	movw	r30, r14
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	c9 f7       	brne	.-14     	; 0x25b0 <free+0xea>
    25be:	c7 01       	movw	r24, r14
    25c0:	02 96       	adiw	r24, 0x02	; 2
    25c2:	20 81       	ld	r18, Z
    25c4:	31 81       	ldd	r19, Z+1	; 0x01
    25c6:	82 0f       	add	r24, r18
    25c8:	93 1f       	adc	r25, r19
    25ca:	20 91 43 05 	lds	r18, 0x0543
    25ce:	30 91 44 05 	lds	r19, 0x0544
    25d2:	28 17       	cp	r18, r24
    25d4:	39 07       	cpc	r19, r25
    25d6:	79 f4       	brne	.+30     	; 0x25f6 <free+0x130>
    25d8:	10 97       	sbiw	r26, 0x00	; 0
    25da:	29 f4       	brne	.+10     	; 0x25e6 <free+0x120>
    25dc:	10 92 46 05 	sts	0x0546, r1
    25e0:	10 92 45 05 	sts	0x0545, r1
    25e4:	04 c0       	rjmp	.+8      	; 0x25ee <free+0x128>
    25e6:	13 96       	adiw	r26, 0x03	; 3
    25e8:	1c 92       	st	X, r1
    25ea:	1e 92       	st	-X, r1
    25ec:	12 97       	sbiw	r26, 0x02	; 2
    25ee:	f0 92 44 05 	sts	0x0544, r15
    25f2:	e0 92 43 05 	sts	0x0543, r14
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	08 95       	ret

00002604 <__ftoa_engine>:
    2604:	28 30       	cpi	r18, 0x08	; 8
    2606:	08 f0       	brcs	.+2      	; 0x260a <__ftoa_engine+0x6>
    2608:	27 e0       	ldi	r18, 0x07	; 7
    260a:	33 27       	eor	r19, r19
    260c:	da 01       	movw	r26, r20
    260e:	99 0f       	add	r25, r25
    2610:	31 1d       	adc	r19, r1
    2612:	87 fd       	sbrc	r24, 7
    2614:	91 60       	ori	r25, 0x01	; 1
    2616:	00 96       	adiw	r24, 0x00	; 0
    2618:	61 05       	cpc	r22, r1
    261a:	71 05       	cpc	r23, r1
    261c:	39 f4       	brne	.+14     	; 0x262c <__ftoa_engine+0x28>
    261e:	32 60       	ori	r19, 0x02	; 2
    2620:	2e 5f       	subi	r18, 0xFE	; 254
    2622:	3d 93       	st	X+, r19
    2624:	30 e3       	ldi	r19, 0x30	; 48
    2626:	2a 95       	dec	r18
    2628:	e1 f7       	brne	.-8      	; 0x2622 <__ftoa_engine+0x1e>
    262a:	08 95       	ret
    262c:	9f 3f       	cpi	r25, 0xFF	; 255
    262e:	30 f0       	brcs	.+12     	; 0x263c <__ftoa_engine+0x38>
    2630:	80 38       	cpi	r24, 0x80	; 128
    2632:	71 05       	cpc	r23, r1
    2634:	61 05       	cpc	r22, r1
    2636:	09 f0       	breq	.+2      	; 0x263a <__ftoa_engine+0x36>
    2638:	3c 5f       	subi	r19, 0xFC	; 252
    263a:	3c 5f       	subi	r19, 0xFC	; 252
    263c:	3d 93       	st	X+, r19
    263e:	91 30       	cpi	r25, 0x01	; 1
    2640:	08 f0       	brcs	.+2      	; 0x2644 <__ftoa_engine+0x40>
    2642:	80 68       	ori	r24, 0x80	; 128
    2644:	91 1d       	adc	r25, r1
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	1f 93       	push	r17
    264c:	0f 93       	push	r16
    264e:	ff 92       	push	r15
    2650:	ef 92       	push	r14
    2652:	19 2f       	mov	r17, r25
    2654:	98 7f       	andi	r25, 0xF8	; 248
    2656:	96 95       	lsr	r25
    2658:	e9 2f       	mov	r30, r25
    265a:	96 95       	lsr	r25
    265c:	96 95       	lsr	r25
    265e:	e9 0f       	add	r30, r25
    2660:	ff 27       	eor	r31, r31
    2662:	e2 51       	subi	r30, 0x12	; 18
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	99 27       	eor	r25, r25
    2668:	33 27       	eor	r19, r19
    266a:	ee 24       	eor	r14, r14
    266c:	ff 24       	eor	r15, r15
    266e:	a7 01       	movw	r20, r14
    2670:	e7 01       	movw	r28, r14
    2672:	05 90       	lpm	r0, Z+
    2674:	08 94       	sec
    2676:	07 94       	ror	r0
    2678:	28 f4       	brcc	.+10     	; 0x2684 <__ftoa_engine+0x80>
    267a:	36 0f       	add	r19, r22
    267c:	e7 1e       	adc	r14, r23
    267e:	f8 1e       	adc	r15, r24
    2680:	49 1f       	adc	r20, r25
    2682:	51 1d       	adc	r21, r1
    2684:	66 0f       	add	r22, r22
    2686:	77 1f       	adc	r23, r23
    2688:	88 1f       	adc	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	06 94       	lsr	r0
    268e:	a1 f7       	brne	.-24     	; 0x2678 <__ftoa_engine+0x74>
    2690:	05 90       	lpm	r0, Z+
    2692:	07 94       	ror	r0
    2694:	28 f4       	brcc	.+10     	; 0x26a0 <__ftoa_engine+0x9c>
    2696:	e7 0e       	add	r14, r23
    2698:	f8 1e       	adc	r15, r24
    269a:	49 1f       	adc	r20, r25
    269c:	56 1f       	adc	r21, r22
    269e:	c1 1d       	adc	r28, r1
    26a0:	77 0f       	add	r23, r23
    26a2:	88 1f       	adc	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	66 1f       	adc	r22, r22
    26a8:	06 94       	lsr	r0
    26aa:	a1 f7       	brne	.-24     	; 0x2694 <__ftoa_engine+0x90>
    26ac:	05 90       	lpm	r0, Z+
    26ae:	07 94       	ror	r0
    26b0:	28 f4       	brcc	.+10     	; 0x26bc <__ftoa_engine+0xb8>
    26b2:	f8 0e       	add	r15, r24
    26b4:	49 1f       	adc	r20, r25
    26b6:	56 1f       	adc	r21, r22
    26b8:	c7 1f       	adc	r28, r23
    26ba:	d1 1d       	adc	r29, r1
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	66 1f       	adc	r22, r22
    26c2:	77 1f       	adc	r23, r23
    26c4:	06 94       	lsr	r0
    26c6:	a1 f7       	brne	.-24     	; 0x26b0 <__ftoa_engine+0xac>
    26c8:	05 90       	lpm	r0, Z+
    26ca:	07 94       	ror	r0
    26cc:	20 f4       	brcc	.+8      	; 0x26d6 <__ftoa_engine+0xd2>
    26ce:	49 0f       	add	r20, r25
    26d0:	56 1f       	adc	r21, r22
    26d2:	c7 1f       	adc	r28, r23
    26d4:	d8 1f       	adc	r29, r24
    26d6:	99 0f       	add	r25, r25
    26d8:	66 1f       	adc	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	88 1f       	adc	r24, r24
    26de:	06 94       	lsr	r0
    26e0:	a9 f7       	brne	.-22     	; 0x26cc <__ftoa_engine+0xc8>
    26e2:	84 91       	lpm	r24, Z
    26e4:	10 95       	com	r17
    26e6:	17 70       	andi	r17, 0x07	; 7
    26e8:	41 f0       	breq	.+16     	; 0x26fa <__ftoa_engine+0xf6>
    26ea:	d6 95       	lsr	r29
    26ec:	c7 95       	ror	r28
    26ee:	57 95       	ror	r21
    26f0:	47 95       	ror	r20
    26f2:	f7 94       	ror	r15
    26f4:	e7 94       	ror	r14
    26f6:	1a 95       	dec	r17
    26f8:	c1 f7       	brne	.-16     	; 0x26ea <__ftoa_engine+0xe6>
    26fa:	e4 e9       	ldi	r30, 0x94	; 148
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	68 94       	set
    2700:	15 90       	lpm	r1, Z+
    2702:	15 91       	lpm	r17, Z+
    2704:	35 91       	lpm	r19, Z+
    2706:	65 91       	lpm	r22, Z+
    2708:	95 91       	lpm	r25, Z+
    270a:	05 90       	lpm	r0, Z+
    270c:	7f e2       	ldi	r23, 0x2F	; 47
    270e:	73 95       	inc	r23
    2710:	e1 18       	sub	r14, r1
    2712:	f1 0a       	sbc	r15, r17
    2714:	43 0b       	sbc	r20, r19
    2716:	56 0b       	sbc	r21, r22
    2718:	c9 0b       	sbc	r28, r25
    271a:	d0 09       	sbc	r29, r0
    271c:	c0 f7       	brcc	.-16     	; 0x270e <__ftoa_engine+0x10a>
    271e:	e1 0c       	add	r14, r1
    2720:	f1 1e       	adc	r15, r17
    2722:	43 1f       	adc	r20, r19
    2724:	56 1f       	adc	r21, r22
    2726:	c9 1f       	adc	r28, r25
    2728:	d0 1d       	adc	r29, r0
    272a:	7e f4       	brtc	.+30     	; 0x274a <__ftoa_engine+0x146>
    272c:	70 33       	cpi	r23, 0x30	; 48
    272e:	11 f4       	brne	.+4      	; 0x2734 <__ftoa_engine+0x130>
    2730:	8a 95       	dec	r24
    2732:	e6 cf       	rjmp	.-52     	; 0x2700 <__ftoa_engine+0xfc>
    2734:	e8 94       	clt
    2736:	01 50       	subi	r16, 0x01	; 1
    2738:	30 f0       	brcs	.+12     	; 0x2746 <__ftoa_engine+0x142>
    273a:	08 0f       	add	r16, r24
    273c:	0a f4       	brpl	.+2      	; 0x2740 <__ftoa_engine+0x13c>
    273e:	00 27       	eor	r16, r16
    2740:	02 17       	cp	r16, r18
    2742:	08 f4       	brcc	.+2      	; 0x2746 <__ftoa_engine+0x142>
    2744:	20 2f       	mov	r18, r16
    2746:	23 95       	inc	r18
    2748:	02 2f       	mov	r16, r18
    274a:	7a 33       	cpi	r23, 0x3A	; 58
    274c:	28 f0       	brcs	.+10     	; 0x2758 <__ftoa_engine+0x154>
    274e:	79 e3       	ldi	r23, 0x39	; 57
    2750:	7d 93       	st	X+, r23
    2752:	2a 95       	dec	r18
    2754:	e9 f7       	brne	.-6      	; 0x2750 <__ftoa_engine+0x14c>
    2756:	10 c0       	rjmp	.+32     	; 0x2778 <__ftoa_engine+0x174>
    2758:	7d 93       	st	X+, r23
    275a:	2a 95       	dec	r18
    275c:	89 f6       	brne	.-94     	; 0x2700 <__ftoa_engine+0xfc>
    275e:	06 94       	lsr	r0
    2760:	97 95       	ror	r25
    2762:	67 95       	ror	r22
    2764:	37 95       	ror	r19
    2766:	17 95       	ror	r17
    2768:	17 94       	ror	r1
    276a:	e1 18       	sub	r14, r1
    276c:	f1 0a       	sbc	r15, r17
    276e:	43 0b       	sbc	r20, r19
    2770:	56 0b       	sbc	r21, r22
    2772:	c9 0b       	sbc	r28, r25
    2774:	d0 09       	sbc	r29, r0
    2776:	98 f0       	brcs	.+38     	; 0x279e <__ftoa_engine+0x19a>
    2778:	23 95       	inc	r18
    277a:	7e 91       	ld	r23, -X
    277c:	73 95       	inc	r23
    277e:	7a 33       	cpi	r23, 0x3A	; 58
    2780:	08 f0       	brcs	.+2      	; 0x2784 <__ftoa_engine+0x180>
    2782:	70 e3       	ldi	r23, 0x30	; 48
    2784:	7c 93       	st	X, r23
    2786:	20 13       	cpse	r18, r16
    2788:	b8 f7       	brcc	.-18     	; 0x2778 <__ftoa_engine+0x174>
    278a:	7e 91       	ld	r23, -X
    278c:	70 61       	ori	r23, 0x10	; 16
    278e:	7d 93       	st	X+, r23
    2790:	30 f0       	brcs	.+12     	; 0x279e <__ftoa_engine+0x19a>
    2792:	83 95       	inc	r24
    2794:	71 e3       	ldi	r23, 0x31	; 49
    2796:	7d 93       	st	X+, r23
    2798:	70 e3       	ldi	r23, 0x30	; 48
    279a:	2a 95       	dec	r18
    279c:	e1 f7       	brne	.-8      	; 0x2796 <__ftoa_engine+0x192>
    279e:	11 24       	eor	r1, r1
    27a0:	ef 90       	pop	r14
    27a2:	ff 90       	pop	r15
    27a4:	0f 91       	pop	r16
    27a6:	1f 91       	pop	r17
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	99 27       	eor	r25, r25
    27ae:	87 fd       	sbrc	r24, 7
    27b0:	90 95       	com	r25
    27b2:	08 95       	ret

000027b4 <strnlen_P>:
    27b4:	fc 01       	movw	r30, r24
    27b6:	05 90       	lpm	r0, Z+
    27b8:	61 50       	subi	r22, 0x01	; 1
    27ba:	70 40       	sbci	r23, 0x00	; 0
    27bc:	01 10       	cpse	r0, r1
    27be:	d8 f7       	brcc	.-10     	; 0x27b6 <strnlen_P+0x2>
    27c0:	80 95       	com	r24
    27c2:	90 95       	com	r25
    27c4:	8e 0f       	add	r24, r30
    27c6:	9f 1f       	adc	r25, r31
    27c8:	08 95       	ret

000027ca <memset>:
    27ca:	dc 01       	movw	r26, r24
    27cc:	01 c0       	rjmp	.+2      	; 0x27d0 <memset+0x6>
    27ce:	6d 93       	st	X+, r22
    27d0:	41 50       	subi	r20, 0x01	; 1
    27d2:	50 40       	sbci	r21, 0x00	; 0
    27d4:	e0 f7       	brcc	.-8      	; 0x27ce <memset+0x4>
    27d6:	08 95       	ret

000027d8 <strcmp>:
    27d8:	fb 01       	movw	r30, r22
    27da:	dc 01       	movw	r26, r24
    27dc:	8d 91       	ld	r24, X+
    27de:	01 90       	ld	r0, Z+
    27e0:	80 19       	sub	r24, r0
    27e2:	01 10       	cpse	r0, r1
    27e4:	d9 f3       	breq	.-10     	; 0x27dc <strcmp+0x4>
    27e6:	99 0b       	sbc	r25, r25
    27e8:	08 95       	ret

000027ea <strcpy>:
    27ea:	fb 01       	movw	r30, r22
    27ec:	dc 01       	movw	r26, r24
    27ee:	01 90       	ld	r0, Z+
    27f0:	0d 92       	st	X+, r0
    27f2:	00 20       	and	r0, r0
    27f4:	e1 f7       	brne	.-8      	; 0x27ee <strcpy+0x4>
    27f6:	08 95       	ret

000027f8 <strnlen>:
    27f8:	fc 01       	movw	r30, r24
    27fa:	61 50       	subi	r22, 0x01	; 1
    27fc:	70 40       	sbci	r23, 0x00	; 0
    27fe:	01 90       	ld	r0, Z+
    2800:	01 10       	cpse	r0, r1
    2802:	d8 f7       	brcc	.-10     	; 0x27fa <strnlen+0x2>
    2804:	80 95       	com	r24
    2806:	90 95       	com	r25
    2808:	8e 0f       	add	r24, r30
    280a:	9f 1f       	adc	r25, r31
    280c:	08 95       	ret

0000280e <fputc>:
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	8c 01       	movw	r16, r24
    2818:	eb 01       	movw	r28, r22
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	81 fd       	sbrc	r24, 1
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <fputc+0x18>
    2820:	0f ef       	ldi	r16, 0xFF	; 255
    2822:	1f ef       	ldi	r17, 0xFF	; 255
    2824:	1a c0       	rjmp	.+52     	; 0x285a <fputc+0x4c>
    2826:	82 ff       	sbrs	r24, 2
    2828:	0d c0       	rjmp	.+26     	; 0x2844 <fputc+0x36>
    282a:	2e 81       	ldd	r18, Y+6	; 0x06
    282c:	3f 81       	ldd	r19, Y+7	; 0x07
    282e:	8c 81       	ldd	r24, Y+4	; 0x04
    2830:	9d 81       	ldd	r25, Y+5	; 0x05
    2832:	28 17       	cp	r18, r24
    2834:	39 07       	cpc	r19, r25
    2836:	64 f4       	brge	.+24     	; 0x2850 <fputc+0x42>
    2838:	e8 81       	ld	r30, Y
    283a:	f9 81       	ldd	r31, Y+1	; 0x01
    283c:	01 93       	st	Z+, r16
    283e:	f9 83       	std	Y+1, r31	; 0x01
    2840:	e8 83       	st	Y, r30
    2842:	06 c0       	rjmp	.+12     	; 0x2850 <fputc+0x42>
    2844:	e8 85       	ldd	r30, Y+8	; 0x08
    2846:	f9 85       	ldd	r31, Y+9	; 0x09
    2848:	80 2f       	mov	r24, r16
    284a:	09 95       	icall
    284c:	89 2b       	or	r24, r25
    284e:	41 f7       	brne	.-48     	; 0x2820 <fputc+0x12>
    2850:	8e 81       	ldd	r24, Y+6	; 0x06
    2852:	9f 81       	ldd	r25, Y+7	; 0x07
    2854:	01 96       	adiw	r24, 0x01	; 1
    2856:	9f 83       	std	Y+7, r25	; 0x07
    2858:	8e 83       	std	Y+6, r24	; 0x06
    285a:	c8 01       	movw	r24, r16
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	08 95       	ret

00002866 <sprintf>:
    2866:	0f 93       	push	r16
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	2e 97       	sbiw	r28, 0x0e	; 14
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	0d 89       	ldd	r16, Y+21	; 0x15
    2880:	1e 89       	ldd	r17, Y+22	; 0x16
    2882:	86 e0       	ldi	r24, 0x06	; 6
    2884:	8c 83       	std	Y+4, r24	; 0x04
    2886:	1a 83       	std	Y+2, r17	; 0x02
    2888:	09 83       	std	Y+1, r16	; 0x01
    288a:	8f ef       	ldi	r24, 0xFF	; 255
    288c:	9f e7       	ldi	r25, 0x7F	; 127
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	ce 01       	movw	r24, r28
    2894:	49 96       	adiw	r24, 0x19	; 25
    2896:	ac 01       	movw	r20, r24
    2898:	6f 89       	ldd	r22, Y+23	; 0x17
    289a:	78 8d       	ldd	r23, Y+24	; 0x18
    289c:	ce 01       	movw	r24, r28
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	9a d9       	rcall	.-3276   	; 0x1bd6 <vfprintf>
    28a2:	ef 81       	ldd	r30, Y+7	; 0x07
    28a4:	f8 85       	ldd	r31, Y+8	; 0x08
    28a6:	e0 0f       	add	r30, r16
    28a8:	f1 1f       	adc	r31, r17
    28aa:	10 82       	st	Z, r1
    28ac:	2e 96       	adiw	r28, 0x0e	; 14
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	08 95       	ret

000028c2 <vsnprintf>:
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	2e 97       	sbiw	r28, 0x0e	; 14
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	8c 01       	movw	r16, r24
    28dc:	ca 01       	movw	r24, r20
    28de:	46 e0       	ldi	r20, 0x06	; 6
    28e0:	4c 83       	std	Y+4, r20	; 0x04
    28e2:	1a 83       	std	Y+2, r17	; 0x02
    28e4:	09 83       	std	Y+1, r16	; 0x01
    28e6:	77 ff       	sbrs	r23, 7
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <vsnprintf+0x2c>
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	70 e8       	ldi	r23, 0x80	; 128
    28ee:	61 50       	subi	r22, 0x01	; 1
    28f0:	71 09       	sbc	r23, r1
    28f2:	7e 83       	std	Y+6, r23	; 0x06
    28f4:	6d 83       	std	Y+5, r22	; 0x05
    28f6:	a9 01       	movw	r20, r18
    28f8:	bc 01       	movw	r22, r24
    28fa:	ce 01       	movw	r24, r28
    28fc:	01 96       	adiw	r24, 0x01	; 1
    28fe:	6b d9       	rcall	.-3370   	; 0x1bd6 <vfprintf>
    2900:	4d 81       	ldd	r20, Y+5	; 0x05
    2902:	5e 81       	ldd	r21, Y+6	; 0x06
    2904:	57 fd       	sbrc	r21, 7
    2906:	0a c0       	rjmp	.+20     	; 0x291c <vsnprintf+0x5a>
    2908:	2f 81       	ldd	r18, Y+7	; 0x07
    290a:	38 85       	ldd	r19, Y+8	; 0x08
    290c:	42 17       	cp	r20, r18
    290e:	53 07       	cpc	r21, r19
    2910:	0c f4       	brge	.+2      	; 0x2914 <vsnprintf+0x52>
    2912:	9a 01       	movw	r18, r20
    2914:	f8 01       	movw	r30, r16
    2916:	e2 0f       	add	r30, r18
    2918:	f3 1f       	adc	r31, r19
    291a:	10 82       	st	Z, r1
    291c:	2e 96       	adiw	r28, 0x0e	; 14
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <__ultoa_invert>:
    2932:	fa 01       	movw	r30, r20
    2934:	aa 27       	eor	r26, r26
    2936:	28 30       	cpi	r18, 0x08	; 8
    2938:	51 f1       	breq	.+84     	; 0x298e <__ultoa_invert+0x5c>
    293a:	20 31       	cpi	r18, 0x10	; 16
    293c:	81 f1       	breq	.+96     	; 0x299e <__ultoa_invert+0x6c>
    293e:	e8 94       	clt
    2940:	6f 93       	push	r22
    2942:	6e 7f       	andi	r22, 0xFE	; 254
    2944:	6e 5f       	subi	r22, 0xFE	; 254
    2946:	7f 4f       	sbci	r23, 0xFF	; 255
    2948:	8f 4f       	sbci	r24, 0xFF	; 255
    294a:	9f 4f       	sbci	r25, 0xFF	; 255
    294c:	af 4f       	sbci	r26, 0xFF	; 255
    294e:	b1 e0       	ldi	r27, 0x01	; 1
    2950:	3e d0       	rcall	.+124    	; 0x29ce <__ultoa_invert+0x9c>
    2952:	b4 e0       	ldi	r27, 0x04	; 4
    2954:	3c d0       	rcall	.+120    	; 0x29ce <__ultoa_invert+0x9c>
    2956:	67 0f       	add	r22, r23
    2958:	78 1f       	adc	r23, r24
    295a:	89 1f       	adc	r24, r25
    295c:	9a 1f       	adc	r25, r26
    295e:	a1 1d       	adc	r26, r1
    2960:	68 0f       	add	r22, r24
    2962:	79 1f       	adc	r23, r25
    2964:	8a 1f       	adc	r24, r26
    2966:	91 1d       	adc	r25, r1
    2968:	a1 1d       	adc	r26, r1
    296a:	6a 0f       	add	r22, r26
    296c:	71 1d       	adc	r23, r1
    296e:	81 1d       	adc	r24, r1
    2970:	91 1d       	adc	r25, r1
    2972:	a1 1d       	adc	r26, r1
    2974:	20 d0       	rcall	.+64     	; 0x29b6 <__ultoa_invert+0x84>
    2976:	09 f4       	brne	.+2      	; 0x297a <__ultoa_invert+0x48>
    2978:	68 94       	set
    297a:	3f 91       	pop	r19
    297c:	2a e0       	ldi	r18, 0x0A	; 10
    297e:	26 9f       	mul	r18, r22
    2980:	11 24       	eor	r1, r1
    2982:	30 19       	sub	r19, r0
    2984:	30 5d       	subi	r19, 0xD0	; 208
    2986:	31 93       	st	Z+, r19
    2988:	de f6       	brtc	.-74     	; 0x2940 <__ultoa_invert+0xe>
    298a:	cf 01       	movw	r24, r30
    298c:	08 95       	ret
    298e:	46 2f       	mov	r20, r22
    2990:	47 70       	andi	r20, 0x07	; 7
    2992:	40 5d       	subi	r20, 0xD0	; 208
    2994:	41 93       	st	Z+, r20
    2996:	b3 e0       	ldi	r27, 0x03	; 3
    2998:	0f d0       	rcall	.+30     	; 0x29b8 <__ultoa_invert+0x86>
    299a:	c9 f7       	brne	.-14     	; 0x298e <__ultoa_invert+0x5c>
    299c:	f6 cf       	rjmp	.-20     	; 0x298a <__ultoa_invert+0x58>
    299e:	46 2f       	mov	r20, r22
    29a0:	4f 70       	andi	r20, 0x0F	; 15
    29a2:	40 5d       	subi	r20, 0xD0	; 208
    29a4:	4a 33       	cpi	r20, 0x3A	; 58
    29a6:	18 f0       	brcs	.+6      	; 0x29ae <__ultoa_invert+0x7c>
    29a8:	49 5d       	subi	r20, 0xD9	; 217
    29aa:	31 fd       	sbrc	r19, 1
    29ac:	40 52       	subi	r20, 0x20	; 32
    29ae:	41 93       	st	Z+, r20
    29b0:	02 d0       	rcall	.+4      	; 0x29b6 <__ultoa_invert+0x84>
    29b2:	a9 f7       	brne	.-22     	; 0x299e <__ultoa_invert+0x6c>
    29b4:	ea cf       	rjmp	.-44     	; 0x298a <__ultoa_invert+0x58>
    29b6:	b4 e0       	ldi	r27, 0x04	; 4
    29b8:	a6 95       	lsr	r26
    29ba:	97 95       	ror	r25
    29bc:	87 95       	ror	r24
    29be:	77 95       	ror	r23
    29c0:	67 95       	ror	r22
    29c2:	ba 95       	dec	r27
    29c4:	c9 f7       	brne	.-14     	; 0x29b8 <__ultoa_invert+0x86>
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	61 05       	cpc	r22, r1
    29ca:	71 05       	cpc	r23, r1
    29cc:	08 95       	ret
    29ce:	9b 01       	movw	r18, r22
    29d0:	ac 01       	movw	r20, r24
    29d2:	0a 2e       	mov	r0, r26
    29d4:	06 94       	lsr	r0
    29d6:	57 95       	ror	r21
    29d8:	47 95       	ror	r20
    29da:	37 95       	ror	r19
    29dc:	27 95       	ror	r18
    29de:	ba 95       	dec	r27
    29e0:	c9 f7       	brne	.-14     	; 0x29d4 <__ultoa_invert+0xa2>
    29e2:	62 0f       	add	r22, r18
    29e4:	73 1f       	adc	r23, r19
    29e6:	84 1f       	adc	r24, r20
    29e8:	95 1f       	adc	r25, r21
    29ea:	a0 1d       	adc	r26, r0
    29ec:	08 95       	ret

000029ee <_exit>:
    29ee:	f8 94       	cli

000029f0 <__stop_program>:
    29f0:	ff cf       	rjmp	.-2      	; 0x29f0 <__stop_program>
