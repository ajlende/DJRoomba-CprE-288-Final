
iRobot Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00001fe6  0000207a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008001b6  008001b6  00002130  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00002130  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa2  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005e1e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  00005e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003668  00000000  00000000  0000613d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001008  00000000  00000000  000097a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f41  00000000  00000000  0000a7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000824  00000000  00000000  0000c6f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c50  00000000  00000000  0000cf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000024ca  00000000  00000000  0000db64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000258  00000000  00000000  0001002e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	84 c4       	rjmp	.+2312   	; 0x92e <__vector_9>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c4       	rjmp	.+2374   	; 0x974 <__vector_11>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c0       	rjmp	.+396    	; 0x1ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__c.2006>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.2004>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e6 ee       	ldi	r30, 0xE6	; 230
     1a2:	ff e1       	ldi	r31, 0x1F	; 31
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a6 3b       	cpi	r26, 0xB6	; 182
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	22 e0       	ldi	r18, 0x02	; 2
     1b6:	a6 eb       	ldi	r26, 0xB6	; 182
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a1 31       	cpi	r26, 0x11	; 17
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	03 d0       	rcall	.+6      	; 0x1cc <main>
     1c6:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <main>:
	float distance;
	float width;
}object_t;

int main(void)
{
     1cc:	2f 92       	push	r2
     1ce:	3f 92       	push	r3
     1d0:	4f 92       	push	r4
     1d2:	5f 92       	push	r5
     1d4:	6f 92       	push	r6
     1d6:	7f 92       	push	r7
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	c7 56       	subi	r28, 0x67	; 103
     1f6:	d1 09       	sbc	r29, r1
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
	
	serial_init(); // Initialize the Serial Communications
     202:	14 d3       	rcall	.+1576   	; 0x82c <serial_init>
	
	ADC_init(); // Initialize the IR sensor
     204:	39 d3       	rcall	.+1650   	; 0x878 <ADC_init>
	
	ping_init(); // Initialize the Ping))) sensor
     206:	b1 d3       	rcall	.+1890   	; 0x96a <ping_init>
	
	lcd_init(); // Initialize the LCD
     208:	2f d1       	rcall	.+606    	; 0x468 <lcd_init>
	
	init_push_buttons(); // Initialize the buttons
     20a:	a8 d3       	rcall	.+1872   	; 0x95c <init_push_buttons>
	
	timer3_init(); // Initialize the servo motor
     20c:	2d d4       	rcall	.+2138   	; 0xa68 <timer3_init>
	
	oi_t *sensor_data = oi_alloc();
     20e:	f7 d1       	rcall	.+1006   	; 0x5fe <oi_alloc>
     210:	a8 96       	adiw	r28, 0x28	; 40
     212:	9f af       	std	Y+63, r25	; 0x3f
     214:	8e af       	std	Y+62, r24	; 0x3e
     216:	a8 97       	sbiw	r28, 0x28	; 40
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
     218:	dd d2       	rcall	.+1466   	; 0x7d4 <oi_init>
	int count = 0;
	char* numRecieved;
	
	char echoString[20];
	
	servo_turn(degrees);
     21a:	80 e5       	ldi	r24, 0x50	; 80
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	05 d4       	rcall	.+2058   	; 0xa2a <servo_turn>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     220:	0f 2e       	mov	r0, r31
     222:	f0 e5       	ldi	r31, 0x50	; 80
     224:	cf 2e       	mov	r12, r31
     226:	d1 2c       	mov	r13, r1
     228:	f0 2d       	mov	r31, r0
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     22a:	0f 2e       	mov	r0, r31
     22c:	f6 e0       	ldi	r31, 0x06	; 6
     22e:	8f 2e       	mov	r8, r31
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	9f 2e       	mov	r9, r31
     234:	f0 2d       	mov	r31, r0
     236:	aa 24       	eor	r10, r10
     238:	a3 94       	inc	r10
     23a:	b1 2c       	mov	r11, r1
     23c:	ac 0e       	add	r10, r28
     23e:	bd 1e       	adc	r11, r29
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     240:	0f 2e       	mov	r0, r31
     242:	f3 e0       	ldi	r31, 0x03	; 3
     244:	6f 2e       	mov	r6, r31
     246:	71 2c       	mov	r7, r1
     248:	f0 2d       	mov	r31, r0
     24a:	51 2c       	mov	r5, r1
     24c:	41 2c       	mov	r4, r1
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     24e:	3a 2c       	mov	r3, r10
     250:	2b 2c       	mov	r2, r11
	{
		
		//numRecieved = USART_RecieveString(count);
		//USART_SendString(numRecieved);
		
		serialInput = USART_Receive();	
     252:	fc d2       	rcall	.+1528   	; 0x84c <USART_Receive>
     254:	a6 96       	adiw	r28, 0x26	; 38
     256:	8f af       	std	Y+63, r24	; 0x3f
     258:	a6 97       	sbiw	r28, 0x26	; 38
		//USART_SendString(serialInput);
			
		//Big Scan
		if(serialInput == 'S')
     25a:	83 35       	cpi	r24, 0x53	; 83
     25c:	09 f0       	breq	.+2      	; 0x260 <main+0x94>
     25e:	43 c0       	rjmp	.+134    	; 0x2e6 <main+0x11a>
     260:	38 c0       	rjmp	.+112    	; 0x2d2 <main+0x106>
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	11 d3       	rcall	.+1570   	; 0x888 <ADC_read>
     266:	e8 0e       	add	r14, r24
     268:	f9 1e       	adc	r15, r25
					wait_ms(20);
     26a:	84 e1       	ldi	r24, 0x14	; 20
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	49 d3       	rcall	.+1682   	; 0x902 <wait_ms>
     270:	01 50       	subi	r16, 0x01	; 1
     272:	11 09       	sbc	r17, r1
		{
			while(degrees <= 180) {
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     274:	b1 f7       	brne	.-20     	; 0x262 <main+0x96>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     276:	97 01       	movw	r18, r14
     278:	ab ea       	ldi	r26, 0xAB	; 171
     27a:	ba ea       	ldi	r27, 0xAA	; 170
     27c:	0e 94 86 0c 	call	0x190c	; 0x190c <__umulhisi3>
     280:	96 95       	lsr	r25
     282:	87 95       	ror	r24
     284:	0d d3       	rcall	.+1562   	; 0x8a0 <calcCm>
     286:	16 2f       	mov	r17, r22
     288:	07 2f       	mov	r16, r23
     28a:	f8 2e       	mov	r15, r24
     28c:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     28e:	ae d3       	rcall	.+1884   	; 0x9ec <ping_read>
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     290:	9f 93       	push	r25
     292:	8f 93       	push	r24
     294:	7f 93       	push	r23
     296:	6f 93       	push	r22
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	df 92       	push	r13
     2a2:	cf 92       	push	r12
     2a4:	9f 92       	push	r9
     2a6:	8f 92       	push	r8
     2a8:	bf 92       	push	r11
     2aa:	af 92       	push	r10
     2ac:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
		
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
		
				USART_SendString(OutputString);
     2b0:	83 2d       	mov	r24, r3
     2b2:	92 2d       	mov	r25, r2
     2b4:	d1 d2       	rcall	.+1442   	; 0x858 <USART_SendString>
		
				degrees += 2;
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	c8 0e       	add	r12, r24
     2ba:	d1 1c       	adc	r13, r1
		
				servo_turn(degrees);
     2bc:	c6 01       	movw	r24, r12
     2be:	b5 d3       	rcall	.+1898   	; 0xa2a <servo_turn>
		//USART_SendString(serialInput);
			
		//Big Scan
		if(serialInput == 'S')
		{
			while(degrees <= 180) {
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	95 eb       	ldi	r25, 0xB5	; 181
     2cc:	c9 16       	cp	r12, r25
     2ce:	d1 04       	cpc	r13, r1
     2d0:	24 f4       	brge	.+8      	; 0x2da <main+0x10e>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     2d2:	83 01       	movw	r16, r6
     2d4:	e5 2c       	mov	r14, r5
     2d6:	f4 2c       	mov	r15, r4
     2d8:	c4 cf       	rjmp	.-120    	; 0x262 <main+0x96>
		
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     2da:	8a e5       	ldi	r24, 0x5A	; 90
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	a5 d3       	rcall	.+1866   	; 0xa2a <servo_turn>
				degrees += 2;
		
				servo_turn(degrees);

			}
			degrees = 0;
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	5f c0       	rjmp	.+190    	; 0x3a4 <main+0x1d8>
			servo_turn(90);
		}
		
		//Small Scan
		if(serialInput == 's')
     2e6:	a6 96       	adiw	r28, 0x26	; 38
     2e8:	8f ad       	ldd	r24, Y+63	; 0x3f
     2ea:	a6 97       	sbiw	r28, 0x26	; 38
     2ec:	83 37       	cpi	r24, 0x73	; 115
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x126>
     2f0:	4c c0       	rjmp	.+152    	; 0x38a <main+0x1be>
		{
			degrees = 45;
			servo_turn(degrees);
     2f2:	8d e2       	ldi	r24, 0x2D	; 45
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	99 d3       	rcall	.+1842   	; 0xa2a <servo_turn>
		}
		
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
     2f8:	0f 2e       	mov	r0, r31
     2fa:	fd e2       	ldi	r31, 0x2D	; 45
     2fc:	cf 2e       	mov	r12, r31
     2fe:	d1 2c       	mov	r13, r1
     300:	f0 2d       	mov	r31, r0
     302:	39 c0       	rjmp	.+114    	; 0x376 <main+0x1aa>
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	c0 d2       	rcall	.+1408   	; 0x888 <ADC_read>
     308:	08 0f       	add	r16, r24
     30a:	19 1f       	adc	r17, r25
					wait_ms(20);
     30c:	84 e1       	ldi	r24, 0x14	; 20
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	f8 d2       	rcall	.+1520   	; 0x902 <wait_ms>
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	e9 1a       	sub	r14, r25
     316:	f1 08       	sbc	r15, r1
			servo_turn(degrees);
			while(degrees <= 135) {
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     318:	a9 f7       	brne	.-22     	; 0x304 <main+0x138>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     31a:	98 01       	movw	r18, r16
     31c:	ab ea       	ldi	r26, 0xAB	; 171
     31e:	ba ea       	ldi	r27, 0xAA	; 170
     320:	0e 94 86 0c 	call	0x190c	; 0x190c <__umulhisi3>
     324:	96 95       	lsr	r25
     326:	87 95       	ror	r24
     328:	bb d2       	rcall	.+1398   	; 0x8a0 <calcCm>
     32a:	16 2f       	mov	r17, r22
     32c:	07 2f       	mov	r16, r23
     32e:	f8 2e       	mov	r15, r24
     330:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     332:	5c d3       	rcall	.+1720   	; 0x9ec <ping_read>
				
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	7f 93       	push	r23
     33a:	6f 93       	push	r22
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	df 92       	push	r13
     346:	cf 92       	push	r12
     348:	9f 92       	push	r9
     34a:	8f 92       	push	r8
     34c:	bf 92       	push	r11
     34e:	af 92       	push	r10
     350:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
				
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
				
				USART_SendString(OutputString);
     354:	83 2d       	mov	r24, r3
     356:	92 2d       	mov	r25, r2
     358:	7f d2       	rcall	.+1278   	; 0x858 <USART_SendString>
				
				degrees += 2;
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	c8 0e       	add	r12, r24
     35e:	d1 1c       	adc	r13, r1
				
				servo_turn(degrees);
     360:	c6 01       	movw	r24, r12
     362:	63 d3       	rcall	.+1734   	; 0xa2a <servo_turn>
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
			servo_turn(degrees);
			while(degrees <= 135) {
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	99 e8       	ldi	r25, 0x89	; 137
     370:	c9 16       	cp	r12, r25
     372:	d1 04       	cpc	r13, r1
     374:	21 f0       	breq	.+8      	; 0x37e <main+0x1b2>
	timer3_init(); // Initialize the servo motor
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     376:	73 01       	movw	r14, r6
     378:	05 2d       	mov	r16, r5
     37a:	14 2d       	mov	r17, r4
     37c:	c3 cf       	rjmp	.-122    	; 0x304 <main+0x138>
				
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     37e:	8a e5       	ldi	r24, 0x5A	; 90
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	53 d3       	rcall	.+1702   	; 0xa2a <servo_turn>
				degrees += 2;
				
				servo_turn(degrees);

			}
			degrees = 0;
     384:	c1 2c       	mov	r12, r1
     386:	d1 2c       	mov	r13, r1
     388:	1a c0       	rjmp	.+52     	; 0x3be <main+0x1f2>
			servo_turn(90);
		}
		
		if(serialInput == 'f')
     38a:	a6 96       	adiw	r28, 0x26	; 38
     38c:	8f ad       	ldd	r24, Y+63	; 0x3f
     38e:	a6 97       	sbiw	r28, 0x26	; 38
     390:	86 36       	cpi	r24, 0x66	; 102
     392:	41 f4       	brne	.+16     	; 0x3a4 <main+0x1d8>
		{
						
			//int tempDistance = atoi(numRecieved);
			
			move_forward(sensor_data, 100);
     394:	64 e6       	ldi	r22, 0x64	; 100
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	a8 96       	adiw	r28, 0x28	; 40
     39a:	8e ad       	ldd	r24, Y+62	; 0x3e
     39c:	9f ad       	ldd	r25, Y+63	; 0x3f
     39e:	a8 97       	sbiw	r28, 0x28	; 40
     3a0:	71 d4       	rcall	.+2274   	; 0xc84 <move_forward>
     3a2:	1a c0       	rjmp	.+52     	; 0x3d8 <main+0x20c>
		}
		
		if(serialInput == 'r')
     3a4:	a6 96       	adiw	r28, 0x26	; 38
     3a6:	9f ad       	ldd	r25, Y+63	; 0x3f
     3a8:	a6 97       	sbiw	r28, 0x26	; 38
     3aa:	92 37       	cpi	r25, 0x72	; 114
     3ac:	41 f4       	brne	.+16     	; 0x3be <main+0x1f2>
		{
			//int tempDegrees = atoi(numRecieved);
			turn_clockwise(sensor_data, 45);
     3ae:	6d e2       	ldi	r22, 0x2D	; 45
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	a8 96       	adiw	r28, 0x28	; 40
     3b4:	8e ad       	ldd	r24, Y+62	; 0x3e
     3b6:	9f ad       	ldd	r25, Y+63	; 0x3f
     3b8:	a8 97       	sbiw	r28, 0x28	; 40
     3ba:	9e d3       	rcall	.+1852   	; 0xaf8 <turn_clockwise>
     3bc:	4a cf       	rjmp	.-364    	; 0x252 <main+0x86>
		}
		
		if(serialInput == 'l')
     3be:	a6 96       	adiw	r28, 0x26	; 38
     3c0:	8f ad       	ldd	r24, Y+63	; 0x3f
     3c2:	a6 97       	sbiw	r28, 0x26	; 38
     3c4:	8c 36       	cpi	r24, 0x6C	; 108
     3c6:	41 f4       	brne	.+16     	; 0x3d8 <main+0x20c>
		{
			//int tempDegrees = atoi(numRecieved);
			turn_clockwise(sensor_data, 45);
     3c8:	6d e2       	ldi	r22, 0x2D	; 45
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	a8 96       	adiw	r28, 0x28	; 40
     3ce:	8e ad       	ldd	r24, Y+62	; 0x3e
     3d0:	9f ad       	ldd	r25, Y+63	; 0x3f
     3d2:	a8 97       	sbiw	r28, 0x28	; 40
     3d4:	91 d3       	rcall	.+1826   	; 0xaf8 <turn_clockwise>
     3d6:	3d cf       	rjmp	.-390    	; 0x252 <main+0x86>
		}
		// USART_SendString("Small Scan Complete");
		
		
		if(serialInput == 'Q')
     3d8:	a6 96       	adiw	r28, 0x26	; 38
     3da:	9f ad       	ldd	r25, Y+63	; 0x3f
     3dc:	a6 97       	sbiw	r28, 0x26	; 38
     3de:	91 35       	cpi	r25, 0x51	; 81
     3e0:	09 f0       	breq	.+2      	; 0x3e4 <main+0x218>
     3e2:	37 cf       	rjmp	.-402    	; 0x252 <main+0x86>
		{
			oi_free(sensor_data);
     3e4:	a8 96       	adiw	r28, 0x28	; 40
     3e6:	8e ad       	ldd	r24, Y+62	; 0x3e
     3e8:	9f ad       	ldd	r25, Y+63	; 0x3f
     3ea:	a8 97       	sbiw	r28, 0x28	; 40
     3ec:	0e d1       	rcall	.+540    	; 0x60a <oi_free>
			return;
		}
	}
     3ee:	c9 59       	subi	r28, 0x99	; 153
     3f0:	df 4f       	sbci	r29, 0xFF	; 255
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	bf 90       	pop	r11
     40e:	af 90       	pop	r10
     410:	9f 90       	pop	r9
     412:	8f 90       	pop	r8
     414:	7f 90       	pop	r7
     416:	6f 90       	pop	r6
     418:	5f 90       	pop	r5
     41a:	4f 90       	pop	r4
     41c:	3f 90       	pop	r3
     41e:	2f 90       	pop	r2
     420:	08 95       	ret

00000422 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     422:	de 9a       	sbi	0x1b, 6	; 27
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	6d d2       	rcall	.+1242   	; 0x902 <wait_ms>
     428:	de 98       	cbi	0x1b, 6	; 27
     42a:	8b b3       	in	r24, 0x1b	; 27
     42c:	80 7f       	andi	r24, 0xF0	; 240
     42e:	8b bb       	out	0x1b, r24	; 27
     430:	08 95       	ret

00000432 <lcd_command>:
     432:	cf 93       	push	r28
     434:	c8 2f       	mov	r28, r24
     436:	dc 98       	cbi	0x1b, 4	; 27
     438:	8b b3       	in	r24, 0x1b	; 27
     43a:	9c 2f       	mov	r25, r28
     43c:	92 95       	swap	r25
     43e:	9f 70       	andi	r25, 0x0F	; 15
     440:	89 2b       	or	r24, r25
     442:	8b bb       	out	0x1b, r24	; 27
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	ed df       	rcall	.-38     	; 0x422 <lcd_toggle_clear>
     448:	8b b3       	in	r24, 0x1b	; 27
     44a:	cf 70       	andi	r28, 0x0F	; 15
     44c:	c8 2b       	or	r28, r24
     44e:	cb bb       	out	0x1b, r28	; 27
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	e7 df       	rcall	.-50     	; 0x422 <lcd_toggle_clear>
     454:	dc 9a       	sbi	0x1b, 4	; 27
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <lcd_clear>:
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	ea df       	rcall	.-44     	; 0x432 <lcd_command>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	4f c2       	rjmp	.+1182   	; 0x902 <wait_ms>

00000464 <lcd_home_line1>:
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	e5 cf       	rjmp	.-54     	; 0x432 <lcd_command>

00000468 <lcd_init>:
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	8a bb       	out	0x1a, r24	; 26
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	8b bb       	out	0x1b, r24	; 27
     470:	de 9a       	sbi	0x1b, 6	; 27
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	45 d2       	rcall	.+1162   	; 0x902 <wait_ms>
     478:	de 98       	cbi	0x1b, 6	; 27
     47a:	85 e0       	ldi	r24, 0x05	; 5
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	41 d2       	rcall	.+1154   	; 0x902 <wait_ms>
     480:	de 9a       	sbi	0x1b, 6	; 27
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	3d d2       	rcall	.+1146   	; 0x902 <wait_ms>
     488:	de 98       	cbi	0x1b, 6	; 27
     48a:	de 9a       	sbi	0x1b, 6	; 27
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	38 d2       	rcall	.+1136   	; 0x902 <wait_ms>
     492:	de 98       	cbi	0x1b, 6	; 27
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	8b bb       	out	0x1b, r24	; 27
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	c3 df       	rcall	.-122    	; 0x422 <lcd_toggle_clear>
     49c:	8b b3       	in	r24, 0x1b	; 27
     49e:	8b bb       	out	0x1b, r24	; 27
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	bf df       	rcall	.-130    	; 0x422 <lcd_toggle_clear>
     4a4:	8b b3       	in	r24, 0x1b	; 27
     4a6:	8e 60       	ori	r24, 0x0E	; 14
     4a8:	8b bb       	out	0x1b, r24	; 27
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	ba df       	rcall	.-140    	; 0x422 <lcd_toggle_clear>
     4ae:	8b b3       	in	r24, 0x1b	; 27
     4b0:	8b bb       	out	0x1b, r24	; 27
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	b6 df       	rcall	.-148    	; 0x422 <lcd_toggle_clear>
     4b6:	8b b3       	in	r24, 0x1b	; 27
     4b8:	86 60       	ori	r24, 0x06	; 6
     4ba:	8b bb       	out	0x1b, r24	; 27
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	b1 df       	rcall	.-158    	; 0x422 <lcd_toggle_clear>
     4c0:	8b b3       	in	r24, 0x1b	; 27
     4c2:	8b bb       	out	0x1b, r24	; 27
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	ad df       	rcall	.-166    	; 0x422 <lcd_toggle_clear>
     4c8:	d8 9a       	sbi	0x1b, 0	; 27
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	aa df       	rcall	.-172    	; 0x422 <lcd_toggle_clear>
     4ce:	dc 9a       	sbi	0x1b, 4	; 27
     4d0:	c9 cf       	rjmp	.-110    	; 0x464 <lcd_home_line1>

000004d2 <lcd_home_line2>:
     4d2:	80 ec       	ldi	r24, 0xC0	; 192
     4d4:	ae cf       	rjmp	.-164    	; 0x432 <lcd_command>

000004d6 <lcd_home_line3>:
     4d6:	84 e9       	ldi	r24, 0x94	; 148
     4d8:	ac cf       	rjmp	.-168    	; 0x432 <lcd_command>

000004da <lcd_home_line4>:
     4da:	84 ed       	ldi	r24, 0xD4	; 212
     4dc:	aa cf       	rjmp	.-172    	; 0x432 <lcd_command>

000004de <lcd_putc>:
     4de:	cf 93       	push	r28
     4e0:	c8 2f       	mov	r28, r24
     4e2:	8b b3       	in	r24, 0x1b	; 27
     4e4:	9c 2f       	mov	r25, r28
     4e6:	92 95       	swap	r25
     4e8:	9f 70       	andi	r25, 0x0F	; 15
     4ea:	89 2b       	or	r24, r25
     4ec:	8b bb       	out	0x1b, r24	; 27
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	98 df       	rcall	.-208    	; 0x422 <lcd_toggle_clear>
     4f2:	8b b3       	in	r24, 0x1b	; 27
     4f4:	cf 70       	andi	r28, 0x0F	; 15
     4f6:	c8 2b       	or	r28, r24
     4f8:	cb bb       	out	0x1b, r28	; 27
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	92 df       	rcall	.-220    	; 0x422 <lcd_toggle_clear>
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	c1 55       	subi	r28, 0x51	; 81
     518:	d1 09       	sbc	r29, r1
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	fe 01       	movw	r30, r28
     526:	e4 5a       	subi	r30, 0xA4	; 164
     528:	ff 4f       	sbci	r31, 0xFF	; 255
     52a:	41 91       	ld	r20, Z+
     52c:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     52e:	2e 2f       	mov	r18, r30
     530:	3f 2f       	mov	r19, r31
     532:	61 e5       	ldi	r22, 0x51	; 81
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     53e:	be 01       	movw	r22, r28
     540:	6f 5f       	subi	r22, 0xFF	; 255
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	86 eb       	ldi	r24, 0xB6	; 182
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <strcmp>
     54c:	28 2f       	mov	r18, r24
     54e:	39 2f       	mov	r19, r25
     550:	23 2b       	or	r18, r19
     552:	09 f4       	brne	.+2      	; 0x556 <lprintf+0x54>
     554:	44 c0       	rjmp	.+136    	; 0x5de <lprintf+0xdc>
		return;
	
	strcpy(lastbuffer, buffer);
     556:	be 01       	movw	r22, r28
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	86 eb       	ldi	r24, 0xB6	; 182
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <strcpy>
	lcd_clear();
     564:	7a df       	rcall	.-268    	; 0x45a <lcd_clear>
     566:	cc 24       	eor	r12, r12
     568:	c3 94       	inc	r12
     56a:	d1 2c       	mov	r13, r1
     56c:	cc 0e       	add	r12, r28
     56e:	dd 1e       	adc	r13, r29
	char *str = buffer;
	int charnum = 0;
     570:	00 e0       	ldi	r16, 0x00	; 0
     572:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     574:	0f 2e       	mov	r0, r31
     576:	f4 e1       	ldi	r31, 0x14	; 20
     578:	ef 2e       	mov	r14, r31
     57a:	f1 2c       	mov	r15, r1
     57c:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     57e:	27 c0       	rjmp	.+78     	; 0x5ce <lprintf+0xcc>
		if (*str == '\n') {
     580:	8a 30       	cpi	r24, 0x0A	; 10
     582:	51 f4       	brne	.+20     	; 0x598 <lprintf+0x96>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     584:	c8 01       	movw	r24, r16
     586:	b7 01       	movw	r22, r14
     588:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__divmodhi4>
     58c:	97 01       	movw	r18, r14
     58e:	28 1b       	sub	r18, r24
     590:	39 0b       	sbc	r19, r25
     592:	02 0f       	add	r16, r18
     594:	13 1f       	adc	r17, r19
     596:	03 c0       	rjmp	.+6      	; 0x59e <lprintf+0x9c>
		} else {
			lcd_putc(*str);
     598:	a2 df       	rcall	.-188    	; 0x4de <lcd_putc>
			charnum++;
     59a:	0f 5f       	subi	r16, 0xFF	; 255
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     59e:	c8 01       	movw	r24, r16
     5a0:	b7 01       	movw	r22, r14
     5a2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__divmodhi4>
     5a6:	89 2b       	or	r24, r25
     5a8:	91 f4       	brne	.+36     	; 0x5ce <lprintf+0xcc>
			switch (charnum / LCD_WIDTH) {
     5aa:	c8 01       	movw	r24, r16
     5ac:	b7 01       	movw	r22, r14
     5ae:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__divmodhi4>
     5b2:	62 30       	cpi	r22, 0x02	; 2
     5b4:	71 05       	cpc	r23, r1
     5b6:	41 f0       	breq	.+16     	; 0x5c8 <lprintf+0xc6>
     5b8:	63 30       	cpi	r22, 0x03	; 3
     5ba:	71 05       	cpc	r23, r1
     5bc:	39 f0       	breq	.+14     	; 0x5cc <lprintf+0xca>
     5be:	61 30       	cpi	r22, 0x01	; 1
     5c0:	71 05       	cpc	r23, r1
     5c2:	29 f4       	brne	.+10     	; 0x5ce <lprintf+0xcc>
			case 1:
				lcd_home_line2();
     5c4:	86 df       	rcall	.-244    	; 0x4d2 <lcd_home_line2>
				break;
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <lprintf+0xcc>
			case 2:
				lcd_home_line3();
     5c8:	86 df       	rcall	.-244    	; 0x4d6 <lcd_home_line3>
				break;
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <lprintf+0xcc>
			case 3:
				lcd_home_line4();
     5cc:	86 df       	rcall	.-244    	; 0x4da <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     5ce:	f6 01       	movw	r30, r12
     5d0:	81 91       	ld	r24, Z+
     5d2:	6f 01       	movw	r12, r30
     5d4:	88 23       	and	r24, r24
     5d6:	19 f0       	breq	.+6      	; 0x5de <lprintf+0xdc>
     5d8:	00 35       	cpi	r16, 0x50	; 80
     5da:	11 05       	cpc	r17, r1
     5dc:	8c f2       	brlt	.-94     	; 0x580 <lprintf+0x7e>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     5de:	cf 5a       	subi	r28, 0xAF	; 175
     5e0:	df 4f       	sbci	r29, 0xFF	; 255
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	08 95       	ret

000005fe <oi_alloc>:
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
     5fe:	64 e3       	ldi	r22, 0x34	; 52
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <calloc>

0000060a <oi_free>:
     60a:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <free>
     60e:	08 95       	ret

00000610 <oi_byte_tx>:
     610:	eb e9       	ldi	r30, 0x9B	; 155
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	90 81       	ld	r25, Z
     616:	95 ff       	sbrs	r25, 5
     618:	fd cf       	rjmp	.-6      	; 0x614 <oi_byte_tx+0x4>
     61a:	80 93 9c 00 	sts	0x009C, r24
     61e:	08 95       	ret

00000620 <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	18 2f       	mov	r17, r24
     62a:	09 2f       	mov	r16, r25
     62c:	c6 2f       	mov	r28, r22
     62e:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
     630:	81 e9       	ldi	r24, 0x91	; 145
     632:	ee df       	rcall	.-36     	; 0x610 <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
     634:	80 2f       	mov	r24, r16
     636:	ec df       	rcall	.-40     	; 0x610 <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
     638:	81 2f       	mov	r24, r17
     63a:	ea df       	rcall	.-44     	; 0x610 <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
     63c:	8d 2f       	mov	r24, r29
     63e:	e8 df       	rcall	.-48     	; 0x610 <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
     640:	8c 2f       	mov	r24, r28
     642:	e6 df       	rcall	.-52     	; 0x610 <oi_byte_tx>
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	08 2f       	mov	r16, r24
     658:	16 2f       	mov	r17, r22
     65a:	d4 2f       	mov	r29, r20
     65c:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
     65e:	8b e8       	ldi	r24, 0x8B	; 139
     660:	d7 df       	rcall	.-82     	; 0x610 <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
     662:	11 23       	and	r17, r17
     664:	41 f0       	breq	.+16     	; 0x676 <oi_set_leds+0x28>
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	01 11       	cpse	r16, r1
     66c:	02 c0       	rjmp	.+4      	; 0x672 <oi_set_leds+0x24>
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	cb 01       	movw	r24, r22
     674:	02 c0       	rjmp	.+4      	; 0x67a <oi_set_leds+0x2c>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	ca df       	rcall	.-108    	; 0x610 <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
     67c:	8d 2f       	mov	r24, r29
     67e:	c8 df       	rcall	.-112    	; 0x610 <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
     680:	8c 2f       	mov	r24, r28
     682:	c6 df       	rcall	.-116    	; 0x610 <oi_byte_tx>
}
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     68e:	eb e9       	ldi	r30, 0x9B	; 155
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	88 23       	and	r24, r24
     696:	ec f7       	brge	.-6      	; 0x692 <oi_byte_rx+0x4>

	return UDR1;
     698:	80 91 9c 00 	lds	r24, 0x009C
}
     69c:	08 95       	ret

0000069e <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     6ac:	80 91 9b 00 	lds	r24, 0x009B
     6b0:	88 23       	and	r24, r24
     6b2:	44 f4       	brge	.+16     	; 0x6c4 <oi_update+0x26>
		i = UDR1;
     6b4:	ac e9       	ldi	r26, 0x9C	; 156
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     6b8:	eb e9       	ldi	r30, 0x9B	; 155
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     6bc:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     6be:	80 81       	ld	r24, Z
     6c0:	88 23       	and	r24, r24
     6c2:	e4 f3       	brlt	.-8      	; 0x6bc <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     6c4:	8e e8       	ldi	r24, 0x8E	; 142
     6c6:	a4 df       	rcall	.-184    	; 0x610 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     6c8:	86 e0       	ldi	r24, 0x06	; 6
     6ca:	a2 df       	rcall	.-188    	; 0x610 <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     6cc:	87 01       	movw	r16, r14
     6ce:	0c 5c       	subi	r16, 0xCC	; 204
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
     6d2:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     6d4:	dc df       	rcall	.-72     	; 0x68e <oi_byte_rx>
     6d6:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     6d8:	c0 17       	cp	r28, r16
     6da:	d1 07       	cpc	r29, r17
     6dc:	d9 f7       	brne	.-10     	; 0x6d4 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     6de:	f7 01       	movw	r30, r14
     6e0:	94 85       	ldd	r25, Z+12	; 0x0c
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	25 85       	ldd	r18, Z+13	; 0x0d
     6e6:	82 0f       	add	r24, r18
     6e8:	91 1d       	adc	r25, r1
     6ea:	95 87       	std	Z+13, r25	; 0x0d
     6ec:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     6ee:	96 85       	ldd	r25, Z+14	; 0x0e
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	27 85       	ldd	r18, Z+15	; 0x0f
     6f4:	82 0f       	add	r24, r18
     6f6:	91 1d       	adc	r25, r1
     6f8:	97 87       	std	Z+15, r25	; 0x0f
     6fa:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     6fc:	91 89       	ldd	r25, Z+17	; 0x11
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	22 89       	ldd	r18, Z+18	; 0x12
     702:	82 0f       	add	r24, r18
     704:	91 1d       	adc	r25, r1
     706:	92 8b       	std	Z+18, r25	; 0x12
     708:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     70a:	93 89       	ldd	r25, Z+19	; 0x13
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	24 89       	ldd	r18, Z+20	; 0x14
     710:	82 0f       	add	r24, r18
     712:	91 1d       	adc	r25, r1
     714:	94 8b       	std	Z+20, r25	; 0x14
     716:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     718:	96 89       	ldd	r25, Z+22	; 0x16
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	27 89       	ldd	r18, Z+23	; 0x17
     71e:	82 0f       	add	r24, r18
     720:	91 1d       	adc	r25, r1
     722:	97 8b       	std	Z+23, r25	; 0x17
     724:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     726:	90 8d       	ldd	r25, Z+24	; 0x18
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	21 8d       	ldd	r18, Z+25	; 0x19
     72c:	82 0f       	add	r24, r18
     72e:	91 1d       	adc	r25, r1
     730:	91 8f       	std	Z+25, r25	; 0x19
     732:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     734:	92 8d       	ldd	r25, Z+26	; 0x1a
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	23 8d       	ldd	r18, Z+27	; 0x1b
     73a:	82 0f       	add	r24, r18
     73c:	91 1d       	adc	r25, r1
     73e:	93 8f       	std	Z+27, r25	; 0x1b
     740:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     742:	94 8d       	ldd	r25, Z+28	; 0x1c
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	25 8d       	ldd	r18, Z+29	; 0x1d
     748:	82 0f       	add	r24, r18
     74a:	91 1d       	adc	r25, r1
     74c:	95 8f       	std	Z+29, r25	; 0x1d
     74e:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     750:	96 8d       	ldd	r25, Z+30	; 0x1e
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	27 8d       	ldd	r18, Z+31	; 0x1f
     756:	82 0f       	add	r24, r18
     758:	91 1d       	adc	r25, r1
     75a:	97 8f       	std	Z+31, r25	; 0x1f
     75c:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     75e:	90 a1       	ldd	r25, Z+32	; 0x20
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	21 a1       	ldd	r18, Z+33	; 0x21
     764:	82 0f       	add	r24, r18
     766:	91 1d       	adc	r25, r1
     768:	91 a3       	std	Z+33, r25	; 0x21
     76a:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     76c:	92 a1       	ldd	r25, Z+34	; 0x22
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	23 a1       	ldd	r18, Z+35	; 0x23
     772:	82 0f       	add	r24, r18
     774:	91 1d       	adc	r25, r1
     776:	93 a3       	std	Z+35, r25	; 0x23
     778:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     77a:	42 a5       	ldd	r20, Z+42	; 0x2a
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	31 a5       	ldd	r19, Z+41	; 0x29
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	24 0f       	add	r18, r20
     784:	35 1f       	adc	r19, r21
     786:	36 a3       	std	Z+38, r19	; 0x26
     788:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     78a:	90 a9       	ldd	r25, Z+48	; 0x30
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	84 0f       	add	r24, r20
     790:	95 1f       	adc	r25, r21
     792:	95 a7       	std	Z+45, r25	; 0x2d
     794:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     796:	92 a9       	ldd	r25, Z+50	; 0x32
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	23 a9       	ldd	r18, Z+51	; 0x33
     79c:	82 0f       	add	r24, r18
     79e:	91 1d       	adc	r25, r1
     7a0:	97 a7       	std	Z+47, r25	; 0x2f
     7a2:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     7a4:	94 a9       	ldd	r25, Z+52	; 0x34
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	25 a9       	ldd	r18, Z+53	; 0x35
     7aa:	82 0f       	add	r24, r18
     7ac:	91 1d       	adc	r25, r1
     7ae:	91 ab       	std	Z+49, r25	; 0x31
     7b0:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     7b2:	96 a9       	ldd	r25, Z+54	; 0x36
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	27 a9       	ldd	r18, Z+55	; 0x37
     7b8:	82 0f       	add	r24, r18
     7ba:	91 1d       	adc	r25, r1
     7bc:	93 ab       	std	Z+51, r25	; 0x33
     7be:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     7c0:	83 e2       	ldi	r24, 0x23	; 35
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	9e d0       	rcall	.+316    	; 0x902 <wait_ms>
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	08 95       	ret

000007d4 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     7de:	09 e9       	ldi	r16, 0x99	; 153
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	80 e1       	ldi	r24, 0x10	; 16
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     7e8:	88 e1       	ldi	r24, 0x18	; 24
     7ea:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     7ee:	86 e0       	ldi	r24, 0x06	; 6
     7f0:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     7f4:	80 e8       	ldi	r24, 0x80	; 128
     7f6:	0c df       	rcall	.-488    	; 0x610 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     7f8:	81 e8       	ldi	r24, 0x81	; 129
     7fa:	0a df       	rcall	.-492    	; 0x610 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     7fc:	88 e0       	ldi	r24, 0x08	; 8
     7fe:	08 df       	rcall	.-496    	; 0x610 <oi_byte_tx>
	wait_ms(100);
     800:	84 e6       	ldi	r24, 0x64	; 100
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	7e d0       	rcall	.+252    	; 0x902 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     806:	81 e2       	ldi	r24, 0x21	; 33
     808:	f8 01       	movw	r30, r16
     80a:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     80c:	84 e8       	ldi	r24, 0x84	; 132
     80e:	00 df       	rcall	.-512    	; 0x610 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     810:	2f ef       	ldi	r18, 0xFF	; 255
     812:	47 e0       	ldi	r20, 0x07	; 7
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	1a df       	rcall	.-460    	; 0x64e <oi_set_leds>
	
	oi_update(self);
     81a:	ce 01       	movw	r24, r28
     81c:	40 df       	rcall	.-384    	; 0x69e <oi_update>
	oi_update(self); // call twice to clear distance/angle
     81e:	ce 01       	movw	r24, r28
     820:	3e df       	rcall	.-388    	; 0x69e <oi_update>
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <serial_init>:
	}
	
	//return string
	return receivedVars;
	
}
     82c:	10 92 90 00 	sts	0x0090, r1
     830:	83 e3       	ldi	r24, 0x33	; 51
     832:	89 b9       	out	0x09, r24	; 9
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	8b b9       	out	0x0b, r24	; 11
     838:	8e e0       	ldi	r24, 0x0E	; 14
     83a:	80 93 95 00 	sts	0x0095, r24
     83e:	88 e1       	ldi	r24, 0x18	; 24
     840:	8a b9       	out	0x0a, r24	; 10
     842:	08 95       	ret

00000844 <USART_Transmit>:
     844:	5d 9b       	sbis	0x0b, 5	; 11
     846:	fe cf       	rjmp	.-4      	; 0x844 <USART_Transmit>
     848:	8c b9       	out	0x0c, r24	; 12
     84a:	08 95       	ret

0000084c <USART_Receive>:
     84c:	5f 9b       	sbis	0x0b, 7	; 11
     84e:	02 c0       	rjmp	.+4      	; 0x854 <USART_Receive+0x8>
     850:	8c b1       	in	r24, 0x0c	; 12
     852:	08 95       	ret
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret

00000858 <USART_SendString>:


void USART_SendString(char SentString[])
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	c8 2f       	mov	r28, r24
     85e:	d9 2f       	mov	r29, r25
	char flag = 1;
	int i = 0;
	while(flag)
	{
		if(SentString[i])
     860:	89 91       	ld	r24, Y+
     862:	88 23       	and	r24, r24
     864:	11 f0       	breq	.+4      	; 0x86a <USART_SendString+0x12>
		{
			USART_Transmit(SentString[i]);
     866:	ee df       	rcall	.-36     	; 0x844 <USART_Transmit>
     868:	fb cf       	rjmp	.-10     	; 0x860 <USART_SendString+0x8>
		}
		else
		{
			flag = 0;
			USART_Transmit(10);
     86a:	8a e0       	ldi	r24, 0x0A	; 10
     86c:	eb df       	rcall	.-42     	; 0x844 <USART_Transmit>
			USART_Transmit(13);
     86e:	8d e0       	ldi	r24, 0x0D	; 13
     870:	e9 df       	rcall	.-46     	; 0x844 <USART_Transmit>
		}
		i++;
	}
	
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <ADC_init>:
			return n+1;
		}
	}
	
	return 0;
}
     878:	37 9a       	sbi	0x06, 7	; 6
     87a:	86 b1       	in	r24, 0x06	; 6
     87c:	87 60       	ori	r24, 0x07	; 7
     87e:	86 b9       	out	0x06, r24	; 6
     880:	87 b1       	in	r24, 0x07	; 7
     882:	80 6c       	ori	r24, 0xC0	; 192
     884:	87 b9       	out	0x07, r24	; 7
     886:	08 95       	ret

00000888 <ADC_read>:
     888:	97 b1       	in	r25, 0x07	; 7
     88a:	8f 71       	andi	r24, 0x1F	; 31
     88c:	98 2b       	or	r25, r24
     88e:	97 b9       	out	0x07, r25	; 7
     890:	36 9a       	sbi	0x06, 6	; 6
     892:	36 99       	sbic	0x06, 6	; 6
     894:	fe cf       	rjmp	.-4      	; 0x892 <ADC_read+0xa>
     896:	24 b1       	in	r18, 0x04	; 4
     898:	35 b1       	in	r19, 0x05	; 5
     89a:	82 2f       	mov	r24, r18
     89c:	93 2f       	mov	r25, r19
     89e:	08 95       	ret

000008a0 <calcCm>:
     8a0:	bc 01       	movw	r22, r24
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	a0 d3       	rcall	.+1856   	; 0xfe8 <__floatunsisf>
     8a8:	2a e9       	ldi	r18, 0x9A	; 154
     8aa:	39 e9       	ldi	r19, 0x99	; 153
     8ac:	49 e7       	ldi	r20, 0x79	; 121
     8ae:	50 e4       	ldi	r21, 0x40	; 64
     8b0:	29 d4       	rcall	.+2130   	; 0x1104 <__mulsf3>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 ea       	ldi	r20, 0xA0	; 160
     8b8:	50 e4       	ldi	r21, 0x40	; 64
     8ba:	9e d2       	rcall	.+1340   	; 0xdf8 <__addsf3>
     8bc:	9b 01       	movw	r18, r22
     8be:	ac 01       	movw	r20, r24
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 eb       	ldi	r23, 0xB0	; 176
     8c4:	83 e3       	ldi	r24, 0x33	; 51
     8c6:	97 e4       	ldi	r25, 0x47	; 71
     8c8:	fb c2       	rjmp	.+1526   	; 0xec0 <__divsf3>

000008ca <timer2_start>:
     8ca:	10 92 0c 02 	sts	0x020C, r1
     8ce:	10 92 0b 02 	sts	0x020B, r1
     8d2:	81 11       	cpse	r24, r1
     8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <timer2_start+0x18>
     8d6:	8b e0       	ldi	r24, 0x0B	; 11
     8d8:	85 bd       	out	0x25, r24	; 37
     8da:	87 b7       	in	r24, 0x37	; 55
     8dc:	80 68       	ori	r24, 0x80	; 128
     8de:	87 bf       	out	0x37, r24	; 55
     8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <timer2_start+0x26>
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	29 f4       	brne	.+10     	; 0x8f0 <timer2_start+0x26>
     8e6:	89 e0       	ldi	r24, 0x09	; 9
     8e8:	85 bd       	out	0x25, r24	; 37
     8ea:	87 b7       	in	r24, 0x37	; 55
     8ec:	80 68       	ori	r24, 0x80	; 128
     8ee:	87 bf       	out	0x37, r24	; 55
     8f0:	78 94       	sei
     8f2:	08 95       	ret

000008f4 <timer2_stop>:
     8f4:	87 b7       	in	r24, 0x37	; 55
     8f6:	8f 77       	andi	r24, 0x7F	; 127
     8f8:	87 bf       	out	0x37, r24	; 55
     8fa:	85 b5       	in	r24, 0x25	; 37
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	85 bd       	out	0x25, r24	; 37
     900:	08 95       	ret

00000902 <wait_ms>:
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
     908:	8a ef       	ldi	r24, 0xFA	; 250
     90a:	83 bd       	out	0x23, r24	; 35
     90c:	10 92 0c 02 	sts	0x020C, r1
     910:	10 92 0b 02 	sts	0x020B, r1
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	d9 df       	rcall	.-78     	; 0x8ca <timer2_start>
     918:	20 91 0b 02 	lds	r18, 0x020B
     91c:	30 91 0c 02 	lds	r19, 0x020C
     920:	2c 17       	cp	r18, r28
     922:	3d 07       	cpc	r19, r29
     924:	c8 f3       	brcs	.-14     	; 0x918 <wait_ms+0x16>
     926:	e6 df       	rcall	.-52     	; 0x8f4 <timer2_stop>
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <__vector_9>:
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	80 91 0b 02 	lds	r24, 0x020B
     940:	90 91 0c 02 	lds	r25, 0x020C
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	90 93 0c 02 	sts	0x020C, r25
     94a:	80 93 0b 02 	sts	0x020B, r24
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	0f 90       	pop	r0
     958:	1f 90       	pop	r1
     95a:	18 95       	reti

0000095c <init_push_buttons>:
     95c:	84 b3       	in	r24, 0x14	; 20
     95e:	80 7c       	andi	r24, 0xC0	; 192
     960:	84 bb       	out	0x14, r24	; 20
     962:	85 b3       	in	r24, 0x15	; 21
     964:	8f 63       	ori	r24, 0x3F	; 63
     966:	85 bb       	out	0x15, r24	; 21
     968:	08 95       	ret

0000096a <ping_init>:
     96a:	1f bc       	out	0x2f, r1	; 47
     96c:	84 ec       	ldi	r24, 0xC4	; 196
     96e:	8e bd       	out	0x2e, r24	; 46
     970:	17 be       	out	0x37, r1	; 55
     972:	08 95       	ret

00000974 <__vector_11>:
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	86 b5       	in	r24, 0x26	; 38
     988:	97 b5       	in	r25, 0x27	; 39
     98a:	90 93 0a 02 	sts	0x020A, r25
     98e:	80 93 09 02 	sts	0x0209, r24
     992:	20 91 07 02 	lds	r18, 0x0207
     996:	30 91 08 02 	lds	r19, 0x0208
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	23 2b       	or	r18, r19
     9a0:	11 f0       	breq	.+4      	; 0x9a6 <__vector_11+0x32>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	90 93 08 02 	sts	0x0208, r25
     9aa:	80 93 07 02 	sts	0x0207, r24
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	3f 91       	pop	r19
     9b4:	2f 91       	pop	r18
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <send_pulse>:
     9c0:	8c 9a       	sbi	0x11, 4	; 17
     9c2:	94 9a       	sbi	0x12, 4	; 18
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	9c df       	rcall	.-200    	; 0x902 <wait_ms>
     9ca:	94 98       	cbi	0x12, 4	; 18
     9cc:	8c 98       	cbi	0x11, 4	; 17
     9ce:	08 95       	ret

000009d0 <time2dist>:
     9d0:	bc 01       	movw	r22, r24
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	08 d3       	rcall	.+1552   	; 0xfe8 <__floatunsisf>
     9d8:	22 ef       	ldi	r18, 0xF2	; 242
     9da:	32 ed       	ldi	r19, 0xD2	; 210
     9dc:	4d e8       	ldi	r20, 0x8D	; 141
     9de:	5e e3       	ldi	r21, 0x3E	; 62
     9e0:	91 d3       	rcall	.+1826   	; 0x1104 <__mulsf3>
     9e2:	20 e5       	ldi	r18, 0x50	; 80
     9e4:	3d e8       	ldi	r19, 0x8D	; 141
     9e6:	4f ef       	ldi	r20, 0xFF	; 255
     9e8:	51 e4       	ldi	r21, 0x41	; 65
     9ea:	05 c2       	rjmp	.+1034   	; 0xdf6 <__subsf3>

000009ec <ping_read>:
     9ec:	e9 df       	rcall	.-46     	; 0x9c0 <send_pulse>
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	87 bf       	out	0x37, r24	; 55
     9f2:	80 91 07 02 	lds	r24, 0x0207
     9f6:	90 91 08 02 	lds	r25, 0x0208
     9fa:	89 2b       	or	r24, r25
     9fc:	d1 f7       	brne	.-12     	; 0x9f2 <ping_read+0x6>
     9fe:	84 e8       	ldi	r24, 0x84	; 132
     a00:	8e bd       	out	0x2e, r24	; 46
     a02:	20 91 09 02 	lds	r18, 0x0209
     a06:	30 91 0a 02 	lds	r19, 0x020A
     a0a:	80 91 07 02 	lds	r24, 0x0207
     a0e:	90 91 08 02 	lds	r25, 0x0208
     a12:	89 2b       	or	r24, r25
     a14:	d1 f3       	breq	.-12     	; 0xa0a <ping_read+0x1e>
     a16:	84 ec       	ldi	r24, 0xC4	; 196
     a18:	8e bd       	out	0x2e, r24	; 46
     a1a:	80 91 09 02 	lds	r24, 0x0209
     a1e:	90 91 0a 02 	lds	r25, 0x020A
     a22:	17 be       	out	0x37, r1	; 55
     a24:	82 1b       	sub	r24, r18
     a26:	93 0b       	sbc	r25, r19
     a28:	d3 cf       	rjmp	.-90     	; 0x9d0 <time2dist>

00000a2a <servo_turn>:
     a2a:	bc 01       	movw	r22, r24
     a2c:	88 27       	eor	r24, r24
     a2e:	77 fd       	sbrc	r23, 7
     a30:	80 95       	com	r24
     a32:	98 2f       	mov	r25, r24
     a34:	db d2       	rcall	.+1462   	; 0xfec <__floatsisf>
     a36:	2b e3       	ldi	r18, 0x3B	; 59
     a38:	3a ea       	ldi	r19, 0xAA	; 170
     a3a:	4a e1       	ldi	r20, 0x1A	; 26
     a3c:	5c e3       	ldi	r21, 0x3C	; 60
     a3e:	62 d3       	rcall	.+1732   	; 0x1104 <__mulsf3>
     a40:	28 e4       	ldi	r18, 0x48	; 72
     a42:	31 ee       	ldi	r19, 0xE1	; 225
     a44:	4a ef       	ldi	r20, 0xFA	; 250
     a46:	5e e3       	ldi	r21, 0x3E	; 62
     a48:	d7 d1       	rcall	.+942    	; 0xdf8 <__addsf3>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	4a e7       	ldi	r20, 0x7A	; 122
     a50:	53 e4       	ldi	r21, 0x43	; 67
     a52:	58 d3       	rcall	.+1712   	; 0x1104 <__mulsf3>
     a54:	9d d2       	rcall	.+1338   	; 0xf90 <__fixunssfsi>
     a56:	61 50       	subi	r22, 0x01	; 1
     a58:	71 09       	sbc	r23, r1
     a5a:	70 93 85 00 	sts	0x0085, r23
     a5e:	60 93 84 00 	sts	0x0084, r22
     a62:	84 e1       	ldi	r24, 0x14	; 20
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	4d cf       	rjmp	.-358    	; 0x902 <wait_ms>

00000a68 <timer3_init>:
     a68:	83 ec       	ldi	r24, 0xC3	; 195
     a6a:	99 e0       	ldi	r25, 0x09	; 9
     a6c:	90 93 87 00 	sts	0x0087, r25
     a70:	80 93 86 00 	sts	0x0086, r24
     a74:	80 e5       	ldi	r24, 0x50	; 80
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	90 93 85 00 	sts	0x0085, r25
     a7c:	80 93 84 00 	sts	0x0084, r24
     a80:	83 e2       	ldi	r24, 0x23	; 35
     a82:	80 93 8b 00 	sts	0x008B, r24
     a86:	8b e1       	ldi	r24, 0x1B	; 27
     a88:	80 93 8a 00 	sts	0x008A, r24
     a8c:	14 9a       	sbi	0x02, 4	; 2
     a8e:	08 95       	ret

00000a90 <move_backward>:

}


void move_backward(oi_t *sensor, int centimeters)
{
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	8c 01       	movw	r16, r24
     a9e:	d6 2f       	mov	r29, r22
     aa0:	c7 2f       	mov	r28, r23
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
     aa2:	68 e3       	ldi	r22, 0x38	; 56
     aa4:	7f ef       	ldi	r23, 0xFF	; 255
     aa6:	88 e3       	ldi	r24, 0x38	; 56
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	ba dd       	rcall	.-1164   	; 0x620 <oi_set_wheels>
	while (sum < centimeters*10) {
     aac:	ed 2e       	mov	r14, r29
     aae:	fc 2e       	mov	r15, r28
     ab0:	ee 0c       	add	r14, r14
     ab2:	ff 1c       	adc	r15, r15
     ab4:	c7 01       	movw	r24, r14
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	e8 0e       	add	r14, r24
     ac0:	f9 1e       	adc	r15, r25
     ac2:	1e 14       	cp	r1, r14
     ac4:	1f 04       	cpc	r1, r15
     ac6:	64 f4       	brge	.+24     	; 0xae0 <move_backward+0x50>
}


void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     ac8:	c0 e0       	ldi	r28, 0x00	; 0
     aca:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
		oi_update(sensor);
     acc:	c8 01       	movw	r24, r16
     ace:	e7 dd       	rcall	.-1074   	; 0x69e <oi_update>
		sum -= sensor->distance;
     ad0:	f8 01       	movw	r30, r16
     ad2:	84 85       	ldd	r24, Z+12	; 0x0c
     ad4:	95 85       	ldd	r25, Z+13	; 0x0d
     ad6:	c8 1b       	sub	r28, r24
     ad8:	d9 0b       	sbc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
     ada:	ce 15       	cp	r28, r14
     adc:	df 05       	cpc	r29, r15
     ade:	b4 f3       	brlt	.-20     	; 0xacc <move_backward+0x3c>
		oi_update(sensor);
		sum -= sensor->distance;
	}

	oi_set_wheels(0, 0); // stop
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	9b dd       	rcall	.-1226   	; 0x620 <oi_set_wheels>
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret

00000af8 <turn_clockwise>:

void turn_clockwise(oi_t *sensor, int degrees)
{
     af8:	6f 92       	push	r6
     afa:	7f 92       	push	r7
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	64 97       	sbiw	r28, 0x14	; 20
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	6c 01       	movw	r12, r24
     b26:	7b 01       	movw	r14, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-200, 200);
     b28:	68 ec       	ldi	r22, 0xC8	; 200
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	88 e3       	ldi	r24, 0x38	; 56
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	77 dd       	rcall	.-1298   	; 0x620 <oi_set_wheels>
	while (sum < degrees-12) {
     b32:	47 01       	movw	r8, r14
     b34:	8c e0       	ldi	r24, 0x0C	; 12
     b36:	88 1a       	sub	r8, r24
     b38:	91 08       	sbc	r9, r1
     b3a:	18 14       	cp	r1, r8
     b3c:	19 04       	cpc	r1, r9
     b3e:	2c f5       	brge	.+74     	; 0xb8a <turn_clockwise+0x92>
	oi_set_wheels(0, 0); // stop
}

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     b40:	00 e0       	ldi	r16, 0x00	; 0
     b42:	10 e0       	ldi	r17, 0x00	; 0
	oi_set_wheels(-200, 200);
	while (sum < degrees-12) {
		oi_update(sensor);
		sum -= sensor->angle;
		
		sprintf(outputString, "Turned %f degrees clockwise", degrees);
     b44:	0f 2e       	mov	r0, r31
     b46:	f3 e1       	ldi	r31, 0x13	; 19
     b48:	6f 2e       	mov	r6, r31
     b4a:	f1 e0       	ldi	r31, 0x01	; 1
     b4c:	7f 2e       	mov	r7, r31
     b4e:	f0 2d       	mov	r31, r0
     b50:	aa 24       	eor	r10, r10
     b52:	a3 94       	inc	r10
     b54:	b1 2c       	mov	r11, r1
     b56:	ac 0e       	add	r10, r28
     b58:	bd 1e       	adc	r11, r29
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-200, 200);
	while (sum < degrees-12) {
		oi_update(sensor);
     b5a:	c6 01       	movw	r24, r12
     b5c:	a0 dd       	rcall	.-1216   	; 0x69e <oi_update>
		sum -= sensor->angle;
     b5e:	f6 01       	movw	r30, r12
     b60:	86 85       	ldd	r24, Z+14	; 0x0e
     b62:	97 85       	ldd	r25, Z+15	; 0x0f
     b64:	08 1b       	sub	r16, r24
     b66:	19 0b       	sbc	r17, r25
		
		sprintf(outputString, "Turned %f degrees clockwise", degrees);
     b68:	ff 92       	push	r15
     b6a:	ef 92       	push	r14
     b6c:	7f 92       	push	r7
     b6e:	6f 92       	push	r6
     b70:	bf 92       	push	r11
     b72:	af 92       	push	r10
     b74:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <sprintf>
void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-200, 200);
	while (sum < degrees-12) {
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	08 15       	cp	r16, r8
     b86:	19 05       	cpc	r17, r9
     b88:	44 f3       	brlt	.-48     	; 0xb5a <turn_clockwise+0x62>
		sprintf(outputString, "Turned %f degrees clockwise", degrees);
		
		//USART_SendString(outputString);

	}
	oi_set_wheels(0, 0); // stop
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	46 dd       	rcall	.-1396   	; 0x620 <oi_set_wheels>
}
     b94:	64 96       	adiw	r28, 0x14	; 20
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	bf 90       	pop	r11
     bb2:	af 90       	pop	r10
     bb4:	9f 90       	pop	r9
     bb6:	8f 90       	pop	r8
     bb8:	7f 90       	pop	r7
     bba:	6f 90       	pop	r6
     bbc:	08 95       	ret

00000bbe <turn_counterclockwise>:

void turn_counterclockwise(oi_t *sensor, int degrees)
{
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	64 97       	sbiw	r28, 0x14	; 20
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	6c 01       	movw	r12, r24
     bec:	7b 01       	movw	r14, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(200, -200);
     bee:	68 e3       	ldi	r22, 0x38	; 56
     bf0:	7f ef       	ldi	r23, 0xFF	; 255
     bf2:	88 ec       	ldi	r24, 0xC8	; 200
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	14 dd       	rcall	.-1496   	; 0x620 <oi_set_wheels>
	while (sum < degrees-12) {
     bf8:	47 01       	movw	r8, r14
     bfa:	8c e0       	ldi	r24, 0x0C	; 12
     bfc:	88 1a       	sub	r8, r24
     bfe:	91 08       	sbc	r9, r1
     c00:	18 14       	cp	r1, r8
     c02:	19 04       	cpc	r1, r9
     c04:	2c f5       	brge	.+74     	; 0xc50 <turn_counterclockwise+0x92>
	oi_set_wheels(0, 0); // stop
}

void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     c06:	00 e0       	ldi	r16, 0x00	; 0
     c08:	10 e0       	ldi	r17, 0x00	; 0
	oi_set_wheels(200, -200);
	while (sum < degrees-12) {
		oi_update(sensor);
		sum += sensor->angle; //maybe
		
		sprintf(outputString, "Turned %f degrees counterclockwise", degrees);
     c0a:	0f 2e       	mov	r0, r31
     c0c:	ff e2       	ldi	r31, 0x2F	; 47
     c0e:	6f 2e       	mov	r6, r31
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	7f 2e       	mov	r7, r31
     c14:	f0 2d       	mov	r31, r0
     c16:	aa 24       	eor	r10, r10
     c18:	a3 94       	inc	r10
     c1a:	b1 2c       	mov	r11, r1
     c1c:	ac 0e       	add	r10, r28
     c1e:	bd 1e       	adc	r11, r29
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(200, -200);
	while (sum < degrees-12) {
		oi_update(sensor);
     c20:	c6 01       	movw	r24, r12
     c22:	3d dd       	rcall	.-1414   	; 0x69e <oi_update>
		sum += sensor->angle; //maybe
     c24:	f6 01       	movw	r30, r12
     c26:	86 85       	ldd	r24, Z+14	; 0x0e
     c28:	97 85       	ldd	r25, Z+15	; 0x0f
     c2a:	08 0f       	add	r16, r24
     c2c:	19 1f       	adc	r17, r25
		
		sprintf(outputString, "Turned %f degrees counterclockwise", degrees);
     c2e:	ff 92       	push	r15
     c30:	ef 92       	push	r14
     c32:	7f 92       	push	r7
     c34:	6f 92       	push	r6
     c36:	bf 92       	push	r11
     c38:	af 92       	push	r10
     c3a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <sprintf>
void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(200, -200);
	while (sum < degrees-12) {
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	08 15       	cp	r16, r8
     c4c:	19 05       	cpc	r17, r9
     c4e:	44 f3       	brlt	.-48     	; 0xc20 <turn_counterclockwise+0x62>
		sprintf(outputString, "Turned %f degrees counterclockwise", degrees);
		
		//USART_SendString(outputString);

	}
	oi_set_wheels(0, 0); // stop
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	e3 dc       	rcall	.-1594   	; 0x620 <oi_set_wheels>
}
     c5a:	64 96       	adiw	r28, 0x14	; 20
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	9f 90       	pop	r9
     c7c:	8f 90       	pop	r8
     c7e:	7f 90       	pop	r7
     c80:	6f 90       	pop	r6
     c82:	08 95       	ret

00000c84 <move_forward>:
}

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	64 97       	sbiw	r28, 0x14	; 20
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	8c 01       	movw	r16, r24
     ca2:	e6 2e       	mov	r14, r22
     ca4:	f7 2e       	mov	r15, r23
	int sum = 0;
	int dist = 0;
	int new_dist = 0;
	char outputString[20];
	oi_set_wheels(150, 150); // move forward
     ca6:	66 e9       	ldi	r22, 0x96	; 150
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	86 e9       	ldi	r24, 0x96	; 150
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	b8 dc       	rcall	.-1680   	; 0x620 <oi_set_wheels>

	while (sum < centimeters*10)
     cb0:	8e 2d       	mov	r24, r14
     cb2:	9f 2d       	mov	r25, r15
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	9c 01       	movw	r18, r24
     cba:	22 0f       	add	r18, r18
     cbc:	33 1f       	adc	r19, r19
     cbe:	22 0f       	add	r18, r18
     cc0:	33 1f       	adc	r19, r19
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	18 16       	cp	r1, r24
     cc8:	19 06       	cpc	r1, r25
     cca:	0c f0       	brlt	.+2      	; 0xcce <move_forward+0x4a>
     ccc:	6b c0       	rjmp	.+214    	; 0xda4 <move_forward+0x120>
	{
		oi_update(sensor);
     cce:	c8 01       	movw	r24, r16
     cd0:	e6 dc       	rcall	.-1588   	; 0x69e <oi_update>
		sum += sensor->distance;

		if(sensor->bumper_left)
     cd2:	f8 01       	movw	r30, r16
     cd4:	40 81       	ld	r20, Z
     cd6:	41 ff       	sbrs	r20, 1
     cd8:	12 c0       	rjmp	.+36     	; 0xcfe <move_forward+0x7a>
		{
			oi_set_wheels(0, 0); // stop
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9e dc       	rcall	.-1732   	; 0x620 <oi_set_wheels>

			move_backward(sensor,10);
     ce4:	6a e0       	ldi	r22, 0x0A	; 10
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	c8 01       	movw	r24, r16
     cea:	d2 de       	rcall	.-604    	; 0xa90 <move_backward>
			turn_clockwise(sensor,45);
     cec:	6d e2       	ldi	r22, 0x2D	; 45
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	c8 01       	movw	r24, r16
     cf2:	02 df       	rcall	.-508    	; 0xaf8 <turn_clockwise>

			USART_SendString("Left Bumper Triggered"); //
     cf4:	82 e5       	ldi	r24, 0x52	; 82
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	af dd       	rcall	.-1186   	; 0x858 <USART_SendString>
			return 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	6f c0       	rjmp	.+222    	; 0xddc <move_forward+0x158>
		}
		else if(sensor->bumper_right)
     cfe:	40 ff       	sbrs	r20, 0
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <move_forward+0xa2>
		{
			oi_set_wheels(0, 0); // stop
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	8a dc       	rcall	.-1772   	; 0x620 <oi_set_wheels>

			move_backward(sensor,10);
     d0c:	6a e0       	ldi	r22, 0x0A	; 10
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	c8 01       	movw	r24, r16
     d12:	be de       	rcall	.-644    	; 0xa90 <move_backward>
			turn_counterclockwise(sensor,45);
     d14:	6d e2       	ldi	r22, 0x2D	; 45
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	c8 01       	movw	r24, r16
     d1a:	51 df       	rcall	.-350    	; 0xbbe <turn_counterclockwise>

			USART_SendString("Right Bumper Triggered");
     d1c:	88 e6       	ldi	r24, 0x68	; 104
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9b dd       	rcall	.-1226   	; 0x858 <USART_SendString>
			return 2;
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	5b c0       	rjmp	.+182    	; 0xddc <move_forward+0x158>
		}
		if((sensor->cliff_frontleft_signal > 550) || (sensor->cliff_frontright_signal > 450))
     d26:	f8 01       	movw	r30, r16
     d28:	86 8d       	ldd	r24, Z+30	; 0x1e
     d2a:	97 8d       	ldd	r25, Z+31	; 0x1f
     d2c:	87 32       	cpi	r24, 0x27	; 39
     d2e:	f2 e0       	ldi	r31, 0x02	; 2
     d30:	9f 07       	cpc	r25, r31
     d32:	38 f4       	brcc	.+14     	; 0xd42 <move_forward+0xbe>
     d34:	f8 01       	movw	r30, r16
     d36:	20 a1       	ldd	r18, Z+32	; 0x20
     d38:	31 a1       	ldd	r19, Z+33	; 0x21
     d3a:	23 3c       	cpi	r18, 0xC3	; 195
     d3c:	f1 e0       	ldi	r31, 0x01	; 1
     d3e:	3f 07       	cpc	r19, r31
     d40:	88 f0       	brcs	.+34     	; 0xd64 <move_forward+0xe0>
		{
			lprintf("Line Detected");
     d42:	8f e7       	ldi	r24, 0x7F	; 127
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	db db       	rcall	.-2122   	; 0x502 <lprintf>
			oi_set_wheels(0,0);
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	65 dc       	rcall	.-1846   	; 0x620 <oi_set_wheels>
			USART_SendString("Line Detected");
     d56:	8f e7       	ldi	r24, 0x7F	; 127
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	7e dd       	rcall	.-1284   	; 0x858 <USART_SendString>
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
			return 3;
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	3c c0       	rjmp	.+120    	; 0xddc <move_forward+0x158>
		}
		else if((sensor->wheeldrop_caster == 1) || (sensor->wheeldrop_left == 1) || (sensor->wheeldrop_right == 1) || (sensor->cliff_frontleft_signal < 10) || (sensor->cliff_frontright_signal < 10)|| (sensor->cliff_left_signal < 10) || (sensor->cliff_right_signal < 10))
     d64:	4c 71       	andi	r20, 0x1C	; 28
     d66:	71 f4       	brne	.+28     	; 0xd84 <move_forward+0x100>
     d68:	0a 97       	sbiw	r24, 0x0a	; 10
     d6a:	60 f0       	brcs	.+24     	; 0xd84 <move_forward+0x100>
     d6c:	2a 30       	cpi	r18, 0x0A	; 10
     d6e:	31 05       	cpc	r19, r1
     d70:	48 f0       	brcs	.+18     	; 0xd84 <move_forward+0x100>
     d72:	f8 01       	movw	r30, r16
     d74:	84 8d       	ldd	r24, Z+28	; 0x1c
     d76:	95 8d       	ldd	r25, Z+29	; 0x1d
     d78:	0a 97       	sbiw	r24, 0x0a	; 10
     d7a:	20 f0       	brcs	.+8      	; 0xd84 <move_forward+0x100>
     d7c:	82 a1       	ldd	r24, Z+34	; 0x22
     d7e:	93 a1       	ldd	r25, Z+35	; 0x23
     d80:	0a 97       	sbiw	r24, 0x0a	; 10
     d82:	58 f5       	brcc	.+86     	; 0xdda <move_forward+0x156>
		{
			lprintf("Cliff Edge Detected");
     d84:	8d e8       	ldi	r24, 0x8D	; 141
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	9f 93       	push	r25
     d8a:	8f 93       	push	r24
     d8c:	ba db       	rcall	.-2188   	; 0x502 <lprintf>
			move_backward(sensor,10);
     d8e:	6a e0       	ldi	r22, 0x0A	; 10
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	c8 01       	movw	r24, r16
     d94:	7d de       	rcall	.-774    	; 0xa90 <move_backward>

			USART_SendString("Cliff Edge Detected");
     d96:	8d e8       	ldi	r24, 0x8D	; 141
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	5e dd       	rcall	.-1348   	; 0x858 <USART_SendString>
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
			return 4;
     da0:	84 e0       	ldi	r24, 0x04	; 4
     da2:	1c c0       	rjmp	.+56     	; 0xddc <move_forward+0x158>
		}
		return 0;
	}

	oi_set_wheels(0, 0); // stop
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	39 dc       	rcall	.-1934   	; 0x620 <oi_set_wheels>
	
	sprintf(outputString, "Moved %f centimeters", sum);
     dae:	1f 92       	push	r1
     db0:	1f 92       	push	r1
     db2:	81 ea       	ldi	r24, 0xA1	; 161
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	8e 01       	movw	r16, r28
     dbc:	0f 5f       	subi	r16, 0xFF	; 255
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	1f 93       	push	r17
     dc2:	0f 93       	push	r16
     dc4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <sprintf>
	
	USART_SendString(outputString);
     dc8:	c8 01       	movw	r24, r16
     dca:	46 dd       	rcall	.-1396   	; 0x858 <USART_SendString>

}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <move_forward+0x158>
			move_backward(sensor,10);

			USART_SendString("Cliff Edge Detected");
			return 4;
		}
		return 0;
     dda:	80 e0       	ldi	r24, 0x00	; 0
	
	sprintf(outputString, "Moved %f centimeters", sum);
	
	USART_SendString(outputString);

}
     ddc:	64 96       	adiw	r28, 0x14	; 20
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	08 95       	ret

00000df6 <__subsf3>:
     df6:	50 58       	subi	r21, 0x80	; 128

00000df8 <__addsf3>:
     df8:	bb 27       	eor	r27, r27
     dfa:	aa 27       	eor	r26, r26
     dfc:	0e d0       	rcall	.+28     	; 0xe1a <__addsf3x>
     dfe:	48 c1       	rjmp	.+656    	; 0x1090 <__fp_round>
     e00:	39 d1       	rcall	.+626    	; 0x1074 <__fp_pscA>
     e02:	30 f0       	brcs	.+12     	; 0xe10 <__addsf3+0x18>
     e04:	3e d1       	rcall	.+636    	; 0x1082 <__fp_pscB>
     e06:	20 f0       	brcs	.+8      	; 0xe10 <__addsf3+0x18>
     e08:	31 f4       	brne	.+12     	; 0xe16 <__addsf3+0x1e>
     e0a:	9f 3f       	cpi	r25, 0xFF	; 255
     e0c:	11 f4       	brne	.+4      	; 0xe12 <__addsf3+0x1a>
     e0e:	1e f4       	brtc	.+6      	; 0xe16 <__addsf3+0x1e>
     e10:	2e c1       	rjmp	.+604    	; 0x106e <__fp_nan>
     e12:	0e f4       	brtc	.+2      	; 0xe16 <__addsf3+0x1e>
     e14:	e0 95       	com	r30
     e16:	e7 fb       	bst	r30, 7
     e18:	24 c1       	rjmp	.+584    	; 0x1062 <__fp_inf>

00000e1a <__addsf3x>:
     e1a:	e9 2f       	mov	r30, r25
     e1c:	4a d1       	rcall	.+660    	; 0x10b2 <__fp_split3>
     e1e:	80 f3       	brcs	.-32     	; 0xe00 <__addsf3+0x8>
     e20:	ba 17       	cp	r27, r26
     e22:	62 07       	cpc	r22, r18
     e24:	73 07       	cpc	r23, r19
     e26:	84 07       	cpc	r24, r20
     e28:	95 07       	cpc	r25, r21
     e2a:	18 f0       	brcs	.+6      	; 0xe32 <__addsf3x+0x18>
     e2c:	71 f4       	brne	.+28     	; 0xe4a <__addsf3x+0x30>
     e2e:	9e f5       	brtc	.+102    	; 0xe96 <__addsf3x+0x7c>
     e30:	62 c1       	rjmp	.+708    	; 0x10f6 <__fp_zero>
     e32:	0e f4       	brtc	.+2      	; 0xe36 <__addsf3x+0x1c>
     e34:	e0 95       	com	r30
     e36:	0b 2e       	mov	r0, r27
     e38:	ba 2f       	mov	r27, r26
     e3a:	a0 2d       	mov	r26, r0
     e3c:	0b 01       	movw	r0, r22
     e3e:	b9 01       	movw	r22, r18
     e40:	90 01       	movw	r18, r0
     e42:	0c 01       	movw	r0, r24
     e44:	ca 01       	movw	r24, r20
     e46:	a0 01       	movw	r20, r0
     e48:	11 24       	eor	r1, r1
     e4a:	ff 27       	eor	r31, r31
     e4c:	59 1b       	sub	r21, r25
     e4e:	99 f0       	breq	.+38     	; 0xe76 <__addsf3x+0x5c>
     e50:	59 3f       	cpi	r21, 0xF9	; 249
     e52:	50 f4       	brcc	.+20     	; 0xe68 <__addsf3x+0x4e>
     e54:	50 3e       	cpi	r21, 0xE0	; 224
     e56:	68 f1       	brcs	.+90     	; 0xeb2 <__addsf3x+0x98>
     e58:	1a 16       	cp	r1, r26
     e5a:	f0 40       	sbci	r31, 0x00	; 0
     e5c:	a2 2f       	mov	r26, r18
     e5e:	23 2f       	mov	r18, r19
     e60:	34 2f       	mov	r19, r20
     e62:	44 27       	eor	r20, r20
     e64:	58 5f       	subi	r21, 0xF8	; 248
     e66:	f3 cf       	rjmp	.-26     	; 0xe4e <__addsf3x+0x34>
     e68:	46 95       	lsr	r20
     e6a:	37 95       	ror	r19
     e6c:	27 95       	ror	r18
     e6e:	a7 95       	ror	r26
     e70:	f0 40       	sbci	r31, 0x00	; 0
     e72:	53 95       	inc	r21
     e74:	c9 f7       	brne	.-14     	; 0xe68 <__addsf3x+0x4e>
     e76:	7e f4       	brtc	.+30     	; 0xe96 <__addsf3x+0x7c>
     e78:	1f 16       	cp	r1, r31
     e7a:	ba 0b       	sbc	r27, r26
     e7c:	62 0b       	sbc	r22, r18
     e7e:	73 0b       	sbc	r23, r19
     e80:	84 0b       	sbc	r24, r20
     e82:	ba f0       	brmi	.+46     	; 0xeb2 <__addsf3x+0x98>
     e84:	91 50       	subi	r25, 0x01	; 1
     e86:	a1 f0       	breq	.+40     	; 0xeb0 <__addsf3x+0x96>
     e88:	ff 0f       	add	r31, r31
     e8a:	bb 1f       	adc	r27, r27
     e8c:	66 1f       	adc	r22, r22
     e8e:	77 1f       	adc	r23, r23
     e90:	88 1f       	adc	r24, r24
     e92:	c2 f7       	brpl	.-16     	; 0xe84 <__addsf3x+0x6a>
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <__addsf3x+0x98>
     e96:	ba 0f       	add	r27, r26
     e98:	62 1f       	adc	r22, r18
     e9a:	73 1f       	adc	r23, r19
     e9c:	84 1f       	adc	r24, r20
     e9e:	48 f4       	brcc	.+18     	; 0xeb2 <__addsf3x+0x98>
     ea0:	87 95       	ror	r24
     ea2:	77 95       	ror	r23
     ea4:	67 95       	ror	r22
     ea6:	b7 95       	ror	r27
     ea8:	f7 95       	ror	r31
     eaa:	9e 3f       	cpi	r25, 0xFE	; 254
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <__addsf3x+0x96>
     eae:	b3 cf       	rjmp	.-154    	; 0xe16 <__addsf3+0x1e>
     eb0:	93 95       	inc	r25
     eb2:	88 0f       	add	r24, r24
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <__addsf3x+0x9e>
     eb6:	99 27       	eor	r25, r25
     eb8:	ee 0f       	add	r30, r30
     eba:	97 95       	ror	r25
     ebc:	87 95       	ror	r24
     ebe:	08 95       	ret

00000ec0 <__divsf3>:
     ec0:	0c d0       	rcall	.+24     	; 0xeda <__divsf3x>
     ec2:	e6 c0       	rjmp	.+460    	; 0x1090 <__fp_round>
     ec4:	de d0       	rcall	.+444    	; 0x1082 <__fp_pscB>
     ec6:	40 f0       	brcs	.+16     	; 0xed8 <__divsf3+0x18>
     ec8:	d5 d0       	rcall	.+426    	; 0x1074 <__fp_pscA>
     eca:	30 f0       	brcs	.+12     	; 0xed8 <__divsf3+0x18>
     ecc:	21 f4       	brne	.+8      	; 0xed6 <__divsf3+0x16>
     ece:	5f 3f       	cpi	r21, 0xFF	; 255
     ed0:	19 f0       	breq	.+6      	; 0xed8 <__divsf3+0x18>
     ed2:	c7 c0       	rjmp	.+398    	; 0x1062 <__fp_inf>
     ed4:	51 11       	cpse	r21, r1
     ed6:	10 c1       	rjmp	.+544    	; 0x10f8 <__fp_szero>
     ed8:	ca c0       	rjmp	.+404    	; 0x106e <__fp_nan>

00000eda <__divsf3x>:
     eda:	eb d0       	rcall	.+470    	; 0x10b2 <__fp_split3>
     edc:	98 f3       	brcs	.-26     	; 0xec4 <__divsf3+0x4>

00000ede <__divsf3_pse>:
     ede:	99 23       	and	r25, r25
     ee0:	c9 f3       	breq	.-14     	; 0xed4 <__divsf3+0x14>
     ee2:	55 23       	and	r21, r21
     ee4:	b1 f3       	breq	.-20     	; 0xed2 <__divsf3+0x12>
     ee6:	95 1b       	sub	r25, r21
     ee8:	55 0b       	sbc	r21, r21
     eea:	bb 27       	eor	r27, r27
     eec:	aa 27       	eor	r26, r26
     eee:	62 17       	cp	r22, r18
     ef0:	73 07       	cpc	r23, r19
     ef2:	84 07       	cpc	r24, r20
     ef4:	38 f0       	brcs	.+14     	; 0xf04 <__divsf3_pse+0x26>
     ef6:	9f 5f       	subi	r25, 0xFF	; 255
     ef8:	5f 4f       	sbci	r21, 0xFF	; 255
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	44 1f       	adc	r20, r20
     f00:	aa 1f       	adc	r26, r26
     f02:	a9 f3       	breq	.-22     	; 0xeee <__divsf3_pse+0x10>
     f04:	33 d0       	rcall	.+102    	; 0xf6c <__divsf3_pse+0x8e>
     f06:	0e 2e       	mov	r0, r30
     f08:	3a f0       	brmi	.+14     	; 0xf18 <__divsf3_pse+0x3a>
     f0a:	e0 e8       	ldi	r30, 0x80	; 128
     f0c:	30 d0       	rcall	.+96     	; 0xf6e <__divsf3_pse+0x90>
     f0e:	91 50       	subi	r25, 0x01	; 1
     f10:	50 40       	sbci	r21, 0x00	; 0
     f12:	e6 95       	lsr	r30
     f14:	00 1c       	adc	r0, r0
     f16:	ca f7       	brpl	.-14     	; 0xf0a <__divsf3_pse+0x2c>
     f18:	29 d0       	rcall	.+82     	; 0xf6c <__divsf3_pse+0x8e>
     f1a:	fe 2f       	mov	r31, r30
     f1c:	27 d0       	rcall	.+78     	; 0xf6c <__divsf3_pse+0x8e>
     f1e:	66 0f       	add	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	bb 1f       	adc	r27, r27
     f26:	26 17       	cp	r18, r22
     f28:	37 07       	cpc	r19, r23
     f2a:	48 07       	cpc	r20, r24
     f2c:	ab 07       	cpc	r26, r27
     f2e:	b0 e8       	ldi	r27, 0x80	; 128
     f30:	09 f0       	breq	.+2      	; 0xf34 <__divsf3_pse+0x56>
     f32:	bb 0b       	sbc	r27, r27
     f34:	80 2d       	mov	r24, r0
     f36:	bf 01       	movw	r22, r30
     f38:	ff 27       	eor	r31, r31
     f3a:	93 58       	subi	r25, 0x83	; 131
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	2a f0       	brmi	.+10     	; 0xf4a <__divsf3_pse+0x6c>
     f40:	9e 3f       	cpi	r25, 0xFE	; 254
     f42:	51 05       	cpc	r21, r1
     f44:	68 f0       	brcs	.+26     	; 0xf60 <__divsf3_pse+0x82>
     f46:	8d c0       	rjmp	.+282    	; 0x1062 <__fp_inf>
     f48:	d7 c0       	rjmp	.+430    	; 0x10f8 <__fp_szero>
     f4a:	5f 3f       	cpi	r21, 0xFF	; 255
     f4c:	ec f3       	brlt	.-6      	; 0xf48 <__divsf3_pse+0x6a>
     f4e:	98 3e       	cpi	r25, 0xE8	; 232
     f50:	dc f3       	brlt	.-10     	; 0xf48 <__divsf3_pse+0x6a>
     f52:	86 95       	lsr	r24
     f54:	77 95       	ror	r23
     f56:	67 95       	ror	r22
     f58:	b7 95       	ror	r27
     f5a:	f7 95       	ror	r31
     f5c:	9f 5f       	subi	r25, 0xFF	; 255
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__divsf3_pse+0x74>
     f60:	88 0f       	add	r24, r24
     f62:	91 1d       	adc	r25, r1
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	97 f9       	bld	r25, 7
     f6a:	08 95       	ret
     f6c:	e1 e0       	ldi	r30, 0x01	; 1
     f6e:	66 0f       	add	r22, r22
     f70:	77 1f       	adc	r23, r23
     f72:	88 1f       	adc	r24, r24
     f74:	bb 1f       	adc	r27, r27
     f76:	62 17       	cp	r22, r18
     f78:	73 07       	cpc	r23, r19
     f7a:	84 07       	cpc	r24, r20
     f7c:	ba 07       	cpc	r27, r26
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <__divsf3_pse+0xaa>
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	84 0b       	sbc	r24, r20
     f86:	ba 0b       	sbc	r27, r26
     f88:	ee 1f       	adc	r30, r30
     f8a:	88 f7       	brcc	.-30     	; 0xf6e <__divsf3_pse+0x90>
     f8c:	e0 95       	com	r30
     f8e:	08 95       	ret

00000f90 <__fixunssfsi>:
     f90:	98 d0       	rcall	.+304    	; 0x10c2 <__fp_splitA>
     f92:	88 f0       	brcs	.+34     	; 0xfb6 <__fixunssfsi+0x26>
     f94:	9f 57       	subi	r25, 0x7F	; 127
     f96:	90 f0       	brcs	.+36     	; 0xfbc <__fixunssfsi+0x2c>
     f98:	b9 2f       	mov	r27, r25
     f9a:	99 27       	eor	r25, r25
     f9c:	b7 51       	subi	r27, 0x17	; 23
     f9e:	a0 f0       	brcs	.+40     	; 0xfc8 <__fixunssfsi+0x38>
     fa0:	d1 f0       	breq	.+52     	; 0xfd6 <__fixunssfsi+0x46>
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	1a f0       	brmi	.+6      	; 0xfb2 <__fixunssfsi+0x22>
     fac:	ba 95       	dec	r27
     fae:	c9 f7       	brne	.-14     	; 0xfa2 <__fixunssfsi+0x12>
     fb0:	12 c0       	rjmp	.+36     	; 0xfd6 <__fixunssfsi+0x46>
     fb2:	b1 30       	cpi	r27, 0x01	; 1
     fb4:	81 f0       	breq	.+32     	; 0xfd6 <__fixunssfsi+0x46>
     fb6:	9f d0       	rcall	.+318    	; 0x10f6 <__fp_zero>
     fb8:	b1 e0       	ldi	r27, 0x01	; 1
     fba:	08 95       	ret
     fbc:	9c c0       	rjmp	.+312    	; 0x10f6 <__fp_zero>
     fbe:	67 2f       	mov	r22, r23
     fc0:	78 2f       	mov	r23, r24
     fc2:	88 27       	eor	r24, r24
     fc4:	b8 5f       	subi	r27, 0xF8	; 248
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <__fixunssfsi+0x46>
     fc8:	b9 3f       	cpi	r27, 0xF9	; 249
     fca:	cc f3       	brlt	.-14     	; 0xfbe <__fixunssfsi+0x2e>
     fcc:	86 95       	lsr	r24
     fce:	77 95       	ror	r23
     fd0:	67 95       	ror	r22
     fd2:	b3 95       	inc	r27
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <__fixunssfsi+0x3c>
     fd6:	3e f4       	brtc	.+14     	; 0xfe6 <__fixunssfsi+0x56>
     fd8:	90 95       	com	r25
     fda:	80 95       	com	r24
     fdc:	70 95       	com	r23
     fde:	61 95       	neg	r22
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	08 95       	ret

00000fe8 <__floatunsisf>:
     fe8:	e8 94       	clt
     fea:	09 c0       	rjmp	.+18     	; 0xffe <__floatsisf+0x12>

00000fec <__floatsisf>:
     fec:	97 fb       	bst	r25, 7
     fee:	3e f4       	brtc	.+14     	; 0xffe <__floatsisf+0x12>
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	99 23       	and	r25, r25
    1000:	a9 f0       	breq	.+42     	; 0x102c <__floatsisf+0x40>
    1002:	f9 2f       	mov	r31, r25
    1004:	96 e9       	ldi	r25, 0x96	; 150
    1006:	bb 27       	eor	r27, r27
    1008:	93 95       	inc	r25
    100a:	f6 95       	lsr	r31
    100c:	87 95       	ror	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	f1 11       	cpse	r31, r1
    1016:	f8 cf       	rjmp	.-16     	; 0x1008 <__floatsisf+0x1c>
    1018:	fa f4       	brpl	.+62     	; 0x1058 <__floatsisf+0x6c>
    101a:	bb 0f       	add	r27, r27
    101c:	11 f4       	brne	.+4      	; 0x1022 <__floatsisf+0x36>
    101e:	60 ff       	sbrs	r22, 0
    1020:	1b c0       	rjmp	.+54     	; 0x1058 <__floatsisf+0x6c>
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <__floatsisf+0x6c>
    102c:	88 23       	and	r24, r24
    102e:	11 f0       	breq	.+4      	; 0x1034 <__floatsisf+0x48>
    1030:	96 e9       	ldi	r25, 0x96	; 150
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <__floatsisf+0x6a>
    1034:	77 23       	and	r23, r23
    1036:	21 f0       	breq	.+8      	; 0x1040 <__floatsisf+0x54>
    1038:	9e e8       	ldi	r25, 0x8E	; 142
    103a:	87 2f       	mov	r24, r23
    103c:	76 2f       	mov	r23, r22
    103e:	05 c0       	rjmp	.+10     	; 0x104a <__floatsisf+0x5e>
    1040:	66 23       	and	r22, r22
    1042:	71 f0       	breq	.+28     	; 0x1060 <__floatsisf+0x74>
    1044:	96 e8       	ldi	r25, 0x86	; 134
    1046:	86 2f       	mov	r24, r22
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	2a f0       	brmi	.+10     	; 0x1058 <__floatsisf+0x6c>
    104e:	9a 95       	dec	r25
    1050:	66 0f       	add	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	da f7       	brpl	.-10     	; 0x104e <__floatsisf+0x62>
    1058:	88 0f       	add	r24, r24
    105a:	96 95       	lsr	r25
    105c:	87 95       	ror	r24
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret

00001062 <__fp_inf>:
    1062:	97 f9       	bld	r25, 7
    1064:	9f 67       	ori	r25, 0x7F	; 127
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	08 95       	ret

0000106e <__fp_nan>:
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	80 ec       	ldi	r24, 0xC0	; 192
    1072:	08 95       	ret

00001074 <__fp_pscA>:
    1074:	00 24       	eor	r0, r0
    1076:	0a 94       	dec	r0
    1078:	16 16       	cp	r1, r22
    107a:	17 06       	cpc	r1, r23
    107c:	18 06       	cpc	r1, r24
    107e:	09 06       	cpc	r0, r25
    1080:	08 95       	ret

00001082 <__fp_pscB>:
    1082:	00 24       	eor	r0, r0
    1084:	0a 94       	dec	r0
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	14 06       	cpc	r1, r20
    108c:	05 06       	cpc	r0, r21
    108e:	08 95       	ret

00001090 <__fp_round>:
    1090:	09 2e       	mov	r0, r25
    1092:	03 94       	inc	r0
    1094:	00 0c       	add	r0, r0
    1096:	11 f4       	brne	.+4      	; 0x109c <__fp_round+0xc>
    1098:	88 23       	and	r24, r24
    109a:	52 f0       	brmi	.+20     	; 0x10b0 <__fp_round+0x20>
    109c:	bb 0f       	add	r27, r27
    109e:	40 f4       	brcc	.+16     	; 0x10b0 <__fp_round+0x20>
    10a0:	bf 2b       	or	r27, r31
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <__fp_round+0x18>
    10a4:	60 ff       	sbrs	r22, 0
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <__fp_round+0x20>
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	08 95       	ret

000010b2 <__fp_split3>:
    10b2:	57 fd       	sbrc	r21, 7
    10b4:	90 58       	subi	r25, 0x80	; 128
    10b6:	44 0f       	add	r20, r20
    10b8:	55 1f       	adc	r21, r21
    10ba:	59 f0       	breq	.+22     	; 0x10d2 <__fp_splitA+0x10>
    10bc:	5f 3f       	cpi	r21, 0xFF	; 255
    10be:	71 f0       	breq	.+28     	; 0x10dc <__fp_splitA+0x1a>
    10c0:	47 95       	ror	r20

000010c2 <__fp_splitA>:
    10c2:	88 0f       	add	r24, r24
    10c4:	97 fb       	bst	r25, 7
    10c6:	99 1f       	adc	r25, r25
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <__fp_splitA+0x20>
    10ca:	9f 3f       	cpi	r25, 0xFF	; 255
    10cc:	79 f0       	breq	.+30     	; 0x10ec <__fp_splitA+0x2a>
    10ce:	87 95       	ror	r24
    10d0:	08 95       	ret
    10d2:	12 16       	cp	r1, r18
    10d4:	13 06       	cpc	r1, r19
    10d6:	14 06       	cpc	r1, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	f2 cf       	rjmp	.-28     	; 0x10c0 <__fp_split3+0xe>
    10dc:	46 95       	lsr	r20
    10de:	f1 df       	rcall	.-30     	; 0x10c2 <__fp_splitA>
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <__fp_splitA+0x30>
    10e2:	16 16       	cp	r1, r22
    10e4:	17 06       	cpc	r1, r23
    10e6:	18 06       	cpc	r1, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	f1 cf       	rjmp	.-30     	; 0x10ce <__fp_splitA+0xc>
    10ec:	86 95       	lsr	r24
    10ee:	71 05       	cpc	r23, r1
    10f0:	61 05       	cpc	r22, r1
    10f2:	08 94       	sec
    10f4:	08 95       	ret

000010f6 <__fp_zero>:
    10f6:	e8 94       	clt

000010f8 <__fp_szero>:
    10f8:	bb 27       	eor	r27, r27
    10fa:	66 27       	eor	r22, r22
    10fc:	77 27       	eor	r23, r23
    10fe:	cb 01       	movw	r24, r22
    1100:	97 f9       	bld	r25, 7
    1102:	08 95       	ret

00001104 <__mulsf3>:
    1104:	0b d0       	rcall	.+22     	; 0x111c <__mulsf3x>
    1106:	c4 cf       	rjmp	.-120    	; 0x1090 <__fp_round>
    1108:	b5 df       	rcall	.-150    	; 0x1074 <__fp_pscA>
    110a:	28 f0       	brcs	.+10     	; 0x1116 <__mulsf3+0x12>
    110c:	ba df       	rcall	.-140    	; 0x1082 <__fp_pscB>
    110e:	18 f0       	brcs	.+6      	; 0x1116 <__mulsf3+0x12>
    1110:	95 23       	and	r25, r21
    1112:	09 f0       	breq	.+2      	; 0x1116 <__mulsf3+0x12>
    1114:	a6 cf       	rjmp	.-180    	; 0x1062 <__fp_inf>
    1116:	ab cf       	rjmp	.-170    	; 0x106e <__fp_nan>
    1118:	11 24       	eor	r1, r1
    111a:	ee cf       	rjmp	.-36     	; 0x10f8 <__fp_szero>

0000111c <__mulsf3x>:
    111c:	ca df       	rcall	.-108    	; 0x10b2 <__fp_split3>
    111e:	a0 f3       	brcs	.-24     	; 0x1108 <__mulsf3+0x4>

00001120 <__mulsf3_pse>:
    1120:	95 9f       	mul	r25, r21
    1122:	d1 f3       	breq	.-12     	; 0x1118 <__mulsf3+0x14>
    1124:	95 0f       	add	r25, r21
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	55 1f       	adc	r21, r21
    112a:	62 9f       	mul	r22, r18
    112c:	f0 01       	movw	r30, r0
    112e:	72 9f       	mul	r23, r18
    1130:	bb 27       	eor	r27, r27
    1132:	f0 0d       	add	r31, r0
    1134:	b1 1d       	adc	r27, r1
    1136:	63 9f       	mul	r22, r19
    1138:	aa 27       	eor	r26, r26
    113a:	f0 0d       	add	r31, r0
    113c:	b1 1d       	adc	r27, r1
    113e:	aa 1f       	adc	r26, r26
    1140:	64 9f       	mul	r22, r20
    1142:	66 27       	eor	r22, r22
    1144:	b0 0d       	add	r27, r0
    1146:	a1 1d       	adc	r26, r1
    1148:	66 1f       	adc	r22, r22
    114a:	82 9f       	mul	r24, r18
    114c:	22 27       	eor	r18, r18
    114e:	b0 0d       	add	r27, r0
    1150:	a1 1d       	adc	r26, r1
    1152:	62 1f       	adc	r22, r18
    1154:	73 9f       	mul	r23, r19
    1156:	b0 0d       	add	r27, r0
    1158:	a1 1d       	adc	r26, r1
    115a:	62 1f       	adc	r22, r18
    115c:	83 9f       	mul	r24, r19
    115e:	a0 0d       	add	r26, r0
    1160:	61 1d       	adc	r22, r1
    1162:	22 1f       	adc	r18, r18
    1164:	74 9f       	mul	r23, r20
    1166:	33 27       	eor	r19, r19
    1168:	a0 0d       	add	r26, r0
    116a:	61 1d       	adc	r22, r1
    116c:	23 1f       	adc	r18, r19
    116e:	84 9f       	mul	r24, r20
    1170:	60 0d       	add	r22, r0
    1172:	21 1d       	adc	r18, r1
    1174:	82 2f       	mov	r24, r18
    1176:	76 2f       	mov	r23, r22
    1178:	6a 2f       	mov	r22, r26
    117a:	11 24       	eor	r1, r1
    117c:	9f 57       	subi	r25, 0x7F	; 127
    117e:	50 40       	sbci	r21, 0x00	; 0
    1180:	8a f0       	brmi	.+34     	; 0x11a4 <__mulsf3_pse+0x84>
    1182:	e1 f0       	breq	.+56     	; 0x11bc <__mulsf3_pse+0x9c>
    1184:	88 23       	and	r24, r24
    1186:	4a f0       	brmi	.+18     	; 0x119a <__mulsf3_pse+0x7a>
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	bb 1f       	adc	r27, r27
    118e:	66 1f       	adc	r22, r22
    1190:	77 1f       	adc	r23, r23
    1192:	88 1f       	adc	r24, r24
    1194:	91 50       	subi	r25, 0x01	; 1
    1196:	50 40       	sbci	r21, 0x00	; 0
    1198:	a9 f7       	brne	.-22     	; 0x1184 <__mulsf3_pse+0x64>
    119a:	9e 3f       	cpi	r25, 0xFE	; 254
    119c:	51 05       	cpc	r21, r1
    119e:	70 f0       	brcs	.+28     	; 0x11bc <__mulsf3_pse+0x9c>
    11a0:	60 cf       	rjmp	.-320    	; 0x1062 <__fp_inf>
    11a2:	aa cf       	rjmp	.-172    	; 0x10f8 <__fp_szero>
    11a4:	5f 3f       	cpi	r21, 0xFF	; 255
    11a6:	ec f3       	brlt	.-6      	; 0x11a2 <__mulsf3_pse+0x82>
    11a8:	98 3e       	cpi	r25, 0xE8	; 232
    11aa:	dc f3       	brlt	.-10     	; 0x11a2 <__mulsf3_pse+0x82>
    11ac:	86 95       	lsr	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	b7 95       	ror	r27
    11b4:	f7 95       	ror	r31
    11b6:	e7 95       	ror	r30
    11b8:	9f 5f       	subi	r25, 0xFF	; 255
    11ba:	c1 f7       	brne	.-16     	; 0x11ac <__mulsf3_pse+0x8c>
    11bc:	fe 2b       	or	r31, r30
    11be:	88 0f       	add	r24, r24
    11c0:	91 1d       	adc	r25, r1
    11c2:	96 95       	lsr	r25
    11c4:	87 95       	ror	r24
    11c6:	97 f9       	bld	r25, 7
    11c8:	08 95       	ret

000011ca <vfprintf>:
    11ca:	2f 92       	push	r2
    11cc:	3f 92       	push	r3
    11ce:	4f 92       	push	r4
    11d0:	5f 92       	push	r5
    11d2:	6f 92       	push	r6
    11d4:	7f 92       	push	r7
    11d6:	8f 92       	push	r8
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	62 97       	sbiw	r28, 0x12	; 18
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	7c 01       	movw	r14, r24
    1200:	1b 01       	movw	r2, r22
    1202:	6a 01       	movw	r12, r20
    1204:	fc 01       	movw	r30, r24
    1206:	17 82       	std	Z+7, r1	; 0x07
    1208:	16 82       	std	Z+6, r1	; 0x06
    120a:	83 81       	ldd	r24, Z+3	; 0x03
    120c:	81 fd       	sbrc	r24, 1
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <vfprintf+0x4c>
    1210:	4e c3       	rjmp	.+1692   	; 0x18ae <vfprintf+0x6e4>
    1212:	65 01       	movw	r12, r10
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <vfprintf+0x56>
    1216:	88 24       	eor	r8, r8
    1218:	83 94       	inc	r8
    121a:	91 2c       	mov	r9, r1
    121c:	8c 0e       	add	r8, r28
    121e:	9d 1e       	adc	r9, r29
    1220:	f7 01       	movw	r30, r14
    1222:	93 81       	ldd	r25, Z+3	; 0x03
    1224:	f1 01       	movw	r30, r2
    1226:	93 fd       	sbrc	r25, 3
    1228:	85 91       	lpm	r24, Z+
    122a:	93 ff       	sbrs	r25, 3
    122c:	81 91       	ld	r24, Z+
    122e:	1f 01       	movw	r2, r30
    1230:	88 23       	and	r24, r24
    1232:	09 f4       	brne	.+2      	; 0x1236 <vfprintf+0x6c>
    1234:	38 c3       	rjmp	.+1648   	; 0x18a6 <vfprintf+0x6dc>
    1236:	85 32       	cpi	r24, 0x25	; 37
    1238:	39 f4       	brne	.+14     	; 0x1248 <vfprintf+0x7e>
    123a:	93 fd       	sbrc	r25, 3
    123c:	85 91       	lpm	r24, Z+
    123e:	93 ff       	sbrs	r25, 3
    1240:	81 91       	ld	r24, Z+
    1242:	1f 01       	movw	r2, r30
    1244:	85 32       	cpi	r24, 0x25	; 37
    1246:	29 f4       	brne	.+10     	; 0x1252 <vfprintf+0x88>
    1248:	b7 01       	movw	r22, r14
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	da d5       	rcall	.+2996   	; 0x1e02 <fputc>
    124e:	56 01       	movw	r10, r12
    1250:	e0 cf       	rjmp	.-64     	; 0x1212 <vfprintf+0x48>
    1252:	71 2c       	mov	r7, r1
    1254:	61 2c       	mov	r6, r1
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	20 32       	cpi	r18, 0x20	; 32
    125a:	a8 f4       	brcc	.+42     	; 0x1286 <vfprintf+0xbc>
    125c:	8b 32       	cpi	r24, 0x2B	; 43
    125e:	61 f0       	breq	.+24     	; 0x1278 <vfprintf+0xae>
    1260:	28 f4       	brcc	.+10     	; 0x126c <vfprintf+0xa2>
    1262:	80 32       	cpi	r24, 0x20	; 32
    1264:	51 f0       	breq	.+20     	; 0x127a <vfprintf+0xb0>
    1266:	83 32       	cpi	r24, 0x23	; 35
    1268:	71 f4       	brne	.+28     	; 0x1286 <vfprintf+0xbc>
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <vfprintf+0xb8>
    126c:	8d 32       	cpi	r24, 0x2D	; 45
    126e:	39 f0       	breq	.+14     	; 0x127e <vfprintf+0xb4>
    1270:	80 33       	cpi	r24, 0x30	; 48
    1272:	49 f4       	brne	.+18     	; 0x1286 <vfprintf+0xbc>
    1274:	21 60       	ori	r18, 0x01	; 1
    1276:	28 c0       	rjmp	.+80     	; 0x12c8 <vfprintf+0xfe>
    1278:	22 60       	ori	r18, 0x02	; 2
    127a:	24 60       	ori	r18, 0x04	; 4
    127c:	25 c0       	rjmp	.+74     	; 0x12c8 <vfprintf+0xfe>
    127e:	28 60       	ori	r18, 0x08	; 8
    1280:	23 c0       	rjmp	.+70     	; 0x12c8 <vfprintf+0xfe>
    1282:	20 61       	ori	r18, 0x10	; 16
    1284:	21 c0       	rjmp	.+66     	; 0x12c8 <vfprintf+0xfe>
    1286:	27 fd       	sbrc	r18, 7
    1288:	27 c0       	rjmp	.+78     	; 0x12d8 <vfprintf+0x10e>
    128a:	38 2f       	mov	r19, r24
    128c:	30 53       	subi	r19, 0x30	; 48
    128e:	3a 30       	cpi	r19, 0x0A	; 10
    1290:	78 f4       	brcc	.+30     	; 0x12b0 <vfprintf+0xe6>
    1292:	26 ff       	sbrs	r18, 6
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <vfprintf+0xd8>
    1296:	fa e0       	ldi	r31, 0x0A	; 10
    1298:	7f 9e       	mul	r7, r31
    129a:	30 0d       	add	r19, r0
    129c:	11 24       	eor	r1, r1
    129e:	73 2e       	mov	r7, r19
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <vfprintf+0xfe>
    12a2:	4a e0       	ldi	r20, 0x0A	; 10
    12a4:	64 9e       	mul	r6, r20
    12a6:	30 0d       	add	r19, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	63 2e       	mov	r6, r19
    12ac:	20 62       	ori	r18, 0x20	; 32
    12ae:	0c c0       	rjmp	.+24     	; 0x12c8 <vfprintf+0xfe>
    12b0:	8e 32       	cpi	r24, 0x2E	; 46
    12b2:	21 f4       	brne	.+8      	; 0x12bc <vfprintf+0xf2>
    12b4:	26 fd       	sbrc	r18, 6
    12b6:	f7 c2       	rjmp	.+1518   	; 0x18a6 <vfprintf+0x6dc>
    12b8:	20 64       	ori	r18, 0x40	; 64
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <vfprintf+0xfe>
    12bc:	8c 36       	cpi	r24, 0x6C	; 108
    12be:	11 f4       	brne	.+4      	; 0x12c4 <vfprintf+0xfa>
    12c0:	20 68       	ori	r18, 0x80	; 128
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <vfprintf+0xfe>
    12c4:	88 36       	cpi	r24, 0x68	; 104
    12c6:	41 f4       	brne	.+16     	; 0x12d8 <vfprintf+0x10e>
    12c8:	f1 01       	movw	r30, r2
    12ca:	93 fd       	sbrc	r25, 3
    12cc:	85 91       	lpm	r24, Z+
    12ce:	93 ff       	sbrs	r25, 3
    12d0:	81 91       	ld	r24, Z+
    12d2:	1f 01       	movw	r2, r30
    12d4:	81 11       	cpse	r24, r1
    12d6:	c0 cf       	rjmp	.-128    	; 0x1258 <vfprintf+0x8e>
    12d8:	98 2f       	mov	r25, r24
    12da:	95 54       	subi	r25, 0x45	; 69
    12dc:	93 30       	cpi	r25, 0x03	; 3
    12de:	18 f4       	brcc	.+6      	; 0x12e6 <vfprintf+0x11c>
    12e0:	20 61       	ori	r18, 0x10	; 16
    12e2:	80 5e       	subi	r24, 0xE0	; 224
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <vfprintf+0x128>
    12e6:	98 2f       	mov	r25, r24
    12e8:	95 56       	subi	r25, 0x65	; 101
    12ea:	93 30       	cpi	r25, 0x03	; 3
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <vfprintf+0x126>
    12ee:	94 c1       	rjmp	.+808    	; 0x1618 <vfprintf+0x44e>
    12f0:	2f 7e       	andi	r18, 0xEF	; 239
    12f2:	26 fd       	sbrc	r18, 6
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <vfprintf+0x130>
    12f6:	16 e0       	ldi	r17, 0x06	; 6
    12f8:	71 2e       	mov	r7, r17
    12fa:	bf e3       	ldi	r27, 0x3F	; 63
    12fc:	5b 2e       	mov	r5, r27
    12fe:	52 22       	and	r5, r18
    1300:	85 36       	cpi	r24, 0x65	; 101
    1302:	19 f4       	brne	.+6      	; 0x130a <vfprintf+0x140>
    1304:	f0 e4       	ldi	r31, 0x40	; 64
    1306:	5f 2a       	or	r5, r31
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <vfprintf+0x14e>
    130a:	86 36       	cpi	r24, 0x66	; 102
    130c:	19 f4       	brne	.+6      	; 0x1314 <vfprintf+0x14a>
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	54 2a       	or	r5, r20
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <vfprintf+0x14e>
    1314:	71 10       	cpse	r7, r1
    1316:	7a 94       	dec	r7
    1318:	57 fe       	sbrs	r5, 7
    131a:	07 c0       	rjmp	.+14     	; 0x132a <vfprintf+0x160>
    131c:	5b e3       	ldi	r21, 0x3B	; 59
    131e:	57 15       	cp	r21, r7
    1320:	48 f0       	brcs	.+18     	; 0x1334 <vfprintf+0x16a>
    1322:	47 2c       	mov	r4, r7
    1324:	43 94       	inc	r4
    1326:	27 e0       	ldi	r18, 0x07	; 7
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <vfprintf+0x17a>
    132a:	87 e0       	ldi	r24, 0x07	; 7
    132c:	87 15       	cp	r24, r7
    132e:	30 f0       	brcs	.+12     	; 0x133c <vfprintf+0x172>
    1330:	27 2d       	mov	r18, r7
    1332:	07 c0       	rjmp	.+14     	; 0x1342 <vfprintf+0x178>
    1334:	27 e0       	ldi	r18, 0x07	; 7
    1336:	ac e3       	ldi	r26, 0x3C	; 60
    1338:	4a 2e       	mov	r4, r26
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <vfprintf+0x17a>
    133c:	27 e0       	ldi	r18, 0x07	; 7
    133e:	f7 e0       	ldi	r31, 0x07	; 7
    1340:	7f 2e       	mov	r7, r31
    1342:	41 2c       	mov	r4, r1
    1344:	56 01       	movw	r10, r12
    1346:	94 e0       	ldi	r25, 0x04	; 4
    1348:	a9 0e       	add	r10, r25
    134a:	b1 1c       	adc	r11, r1
    134c:	f6 01       	movw	r30, r12
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	04 2d       	mov	r16, r4
    1358:	a4 01       	movw	r20, r8
    135a:	4e d4       	rcall	.+2204   	; 0x1bf8 <__ftoa_engine>
    135c:	8c 01       	movw	r16, r24
    135e:	49 81       	ldd	r20, Y+1	; 0x01
    1360:	4c 87       	std	Y+12, r20	; 0x0c
    1362:	40 ff       	sbrs	r20, 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <vfprintf+0x1a0>
    1366:	43 ff       	sbrs	r20, 3
    1368:	07 c0       	rjmp	.+14     	; 0x1378 <vfprintf+0x1ae>
    136a:	51 fc       	sbrc	r5, 1
    136c:	08 c0       	rjmp	.+16     	; 0x137e <vfprintf+0x1b4>
    136e:	52 fe       	sbrs	r5, 2
    1370:	09 c0       	rjmp	.+18     	; 0x1384 <vfprintf+0x1ba>
    1372:	e0 e2       	ldi	r30, 0x20	; 32
    1374:	de 2e       	mov	r13, r30
    1376:	07 c0       	rjmp	.+14     	; 0x1386 <vfprintf+0x1bc>
    1378:	7d e2       	ldi	r23, 0x2D	; 45
    137a:	d7 2e       	mov	r13, r23
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <vfprintf+0x1bc>
    137e:	6b e2       	ldi	r22, 0x2B	; 43
    1380:	d6 2e       	mov	r13, r22
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <vfprintf+0x1bc>
    1384:	d1 2c       	mov	r13, r1
    1386:	8c 85       	ldd	r24, Y+12	; 0x0c
    1388:	8c 70       	andi	r24, 0x0C	; 12
    138a:	89 f1       	breq	.+98     	; 0x13ee <vfprintf+0x224>
    138c:	dd 20       	and	r13, r13
    138e:	11 f0       	breq	.+4      	; 0x1394 <vfprintf+0x1ca>
    1390:	84 e0       	ldi	r24, 0x04	; 4
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <vfprintf+0x1cc>
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	86 15       	cp	r24, r6
    1398:	10 f0       	brcs	.+4      	; 0x139e <vfprintf+0x1d4>
    139a:	61 2c       	mov	r6, r1
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <vfprintf+0x1e8>
    139e:	68 1a       	sub	r6, r24
    13a0:	53 fc       	sbrc	r5, 3
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <vfprintf+0x1e8>
    13a4:	b7 01       	movw	r22, r14
    13a6:	80 e2       	ldi	r24, 0x20	; 32
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	2b d5       	rcall	.+2646   	; 0x1e02 <fputc>
    13ac:	6a 94       	dec	r6
    13ae:	d1 f7       	brne	.-12     	; 0x13a4 <vfprintf+0x1da>
    13b0:	f4 cf       	rjmp	.-24     	; 0x139a <vfprintf+0x1d0>
    13b2:	dd 20       	and	r13, r13
    13b4:	21 f0       	breq	.+8      	; 0x13be <vfprintf+0x1f4>
    13b6:	b7 01       	movw	r22, r14
    13b8:	8d 2d       	mov	r24, r13
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	22 d5       	rcall	.+2628   	; 0x1e02 <fputc>
    13be:	5c 85       	ldd	r21, Y+12	; 0x0c
    13c0:	53 fd       	sbrc	r21, 3
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <vfprintf+0x200>
    13c4:	00 e9       	ldi	r16, 0x90	; 144
    13c6:	10 e0       	ldi	r17, 0x00	; 0
    13c8:	0b c0       	rjmp	.+22     	; 0x13e0 <vfprintf+0x216>
    13ca:	0c e8       	ldi	r16, 0x8C	; 140
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <vfprintf+0x216>
    13d0:	51 10       	cpse	r5, r1
    13d2:	80 52       	subi	r24, 0x20	; 32
    13d4:	b7 01       	movw	r22, r14
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	14 d5       	rcall	.+2600   	; 0x1e02 <fputc>
    13da:	0f 5f       	subi	r16, 0xFF	; 255
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <vfprintf+0x21a>
    13e0:	80 e1       	ldi	r24, 0x10	; 16
    13e2:	58 22       	and	r5, r24
    13e4:	f8 01       	movw	r30, r16
    13e6:	84 91       	lpm	r24, Z
    13e8:	81 11       	cpse	r24, r1
    13ea:	f2 cf       	rjmp	.-28     	; 0x13d0 <vfprintf+0x206>
    13ec:	59 c2       	rjmp	.+1202   	; 0x18a0 <vfprintf+0x6d6>
    13ee:	57 fe       	sbrs	r5, 7
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <vfprintf+0x244>
    13f2:	40 0e       	add	r4, r16
    13f4:	4c 85       	ldd	r20, Y+12	; 0x0c
    13f6:	44 ff       	sbrs	r20, 4
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <vfprintf+0x238>
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	81 33       	cpi	r24, 0x31	; 49
    13fe:	09 f4       	brne	.+2      	; 0x1402 <vfprintf+0x238>
    1400:	4a 94       	dec	r4
    1402:	14 14       	cp	r1, r4
    1404:	4c f5       	brge	.+82     	; 0x1458 <vfprintf+0x28e>
    1406:	58 e0       	ldi	r21, 0x08	; 8
    1408:	54 15       	cp	r21, r4
    140a:	48 f1       	brcs	.+82     	; 0x145e <vfprintf+0x294>
    140c:	2c c0       	rjmp	.+88     	; 0x1466 <vfprintf+0x29c>
    140e:	56 fc       	sbrc	r5, 6
    1410:	2a c0       	rjmp	.+84     	; 0x1466 <vfprintf+0x29c>
    1412:	87 2d       	mov	r24, r7
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	80 17       	cp	r24, r16
    1418:	91 07       	cpc	r25, r17
    141a:	44 f0       	brlt	.+16     	; 0x142c <vfprintf+0x262>
    141c:	0c 3f       	cpi	r16, 0xFC	; 252
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	18 07       	cpc	r17, r24
    1422:	24 f0       	brlt	.+8      	; 0x142c <vfprintf+0x262>
    1424:	90 e8       	ldi	r25, 0x80	; 128
    1426:	59 2a       	or	r5, r25
    1428:	01 c0       	rjmp	.+2      	; 0x142c <vfprintf+0x262>
    142a:	7a 94       	dec	r7
    142c:	77 20       	and	r7, r7
    142e:	49 f0       	breq	.+18     	; 0x1442 <vfprintf+0x278>
    1430:	e2 e0       	ldi	r30, 0x02	; 2
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	ec 0f       	add	r30, r28
    1436:	fd 1f       	adc	r31, r29
    1438:	e7 0d       	add	r30, r7
    143a:	f1 1d       	adc	r31, r1
    143c:	80 81       	ld	r24, Z
    143e:	80 33       	cpi	r24, 0x30	; 48
    1440:	a1 f3       	breq	.-24     	; 0x142a <vfprintf+0x260>
    1442:	57 fe       	sbrs	r5, 7
    1444:	10 c0       	rjmp	.+32     	; 0x1466 <vfprintf+0x29c>
    1446:	47 2c       	mov	r4, r7
    1448:	43 94       	inc	r4
    144a:	87 2d       	mov	r24, r7
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	08 17       	cp	r16, r24
    1450:	19 07       	cpc	r17, r25
    1452:	44 f4       	brge	.+16     	; 0x1464 <vfprintf+0x29a>
    1454:	70 1a       	sub	r7, r16
    1456:	07 c0       	rjmp	.+14     	; 0x1466 <vfprintf+0x29c>
    1458:	44 24       	eor	r4, r4
    145a:	43 94       	inc	r4
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <vfprintf+0x29c>
    145e:	58 e0       	ldi	r21, 0x08	; 8
    1460:	45 2e       	mov	r4, r21
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <vfprintf+0x29c>
    1464:	71 2c       	mov	r7, r1
    1466:	57 fe       	sbrs	r5, 7
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <vfprintf+0x2ae>
    146a:	10 16       	cp	r1, r16
    146c:	11 06       	cpc	r1, r17
    146e:	3c f4       	brge	.+14     	; 0x147e <vfprintf+0x2b4>
    1470:	98 01       	movw	r18, r16
    1472:	2f 5f       	subi	r18, 0xFF	; 255
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <vfprintf+0x2b8>
    1478:	25 e0       	ldi	r18, 0x05	; 5
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <vfprintf+0x2b8>
    147e:	21 e0       	ldi	r18, 0x01	; 1
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	dd 20       	and	r13, r13
    1484:	11 f0       	breq	.+4      	; 0x148a <vfprintf+0x2c0>
    1486:	2f 5f       	subi	r18, 0xFF	; 255
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	77 20       	and	r7, r7
    148c:	31 f0       	breq	.+12     	; 0x149a <vfprintf+0x2d0>
    148e:	47 2d       	mov	r20, r7
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	4f 5f       	subi	r20, 0xFF	; 255
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	24 0f       	add	r18, r20
    1498:	35 1f       	adc	r19, r21
    149a:	46 2d       	mov	r20, r6
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	24 17       	cp	r18, r20
    14a0:	35 07       	cpc	r19, r21
    14a2:	14 f4       	brge	.+4      	; 0x14a8 <vfprintf+0x2de>
    14a4:	62 1a       	sub	r6, r18
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <vfprintf+0x2e0>
    14a8:	61 2c       	mov	r6, r1
    14aa:	85 2d       	mov	r24, r5
    14ac:	89 70       	andi	r24, 0x09	; 9
    14ae:	41 f4       	brne	.+16     	; 0x14c0 <vfprintf+0x2f6>
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <vfprintf+0x2f2>
    14b2:	b7 01       	movw	r22, r14
    14b4:	80 e2       	ldi	r24, 0x20	; 32
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a4 d4       	rcall	.+2376   	; 0x1e02 <fputc>
    14ba:	6a 94       	dec	r6
    14bc:	61 10       	cpse	r6, r1
    14be:	f9 cf       	rjmp	.-14     	; 0x14b2 <vfprintf+0x2e8>
    14c0:	dd 20       	and	r13, r13
    14c2:	21 f0       	breq	.+8      	; 0x14cc <vfprintf+0x302>
    14c4:	b7 01       	movw	r22, r14
    14c6:	8d 2d       	mov	r24, r13
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9b d4       	rcall	.+2358   	; 0x1e02 <fputc>
    14cc:	53 fc       	sbrc	r5, 3
    14ce:	08 c0       	rjmp	.+16     	; 0x14e0 <vfprintf+0x316>
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <vfprintf+0x312>
    14d2:	b7 01       	movw	r22, r14
    14d4:	80 e3       	ldi	r24, 0x30	; 48
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	94 d4       	rcall	.+2344   	; 0x1e02 <fputc>
    14da:	6a 94       	dec	r6
    14dc:	61 10       	cpse	r6, r1
    14de:	f9 cf       	rjmp	.-14     	; 0x14d2 <vfprintf+0x308>
    14e0:	57 fe       	sbrs	r5, 7
    14e2:	54 c0       	rjmp	.+168    	; 0x158c <vfprintf+0x3c2>
    14e4:	68 01       	movw	r12, r16
    14e6:	17 ff       	sbrs	r17, 7
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <vfprintf+0x324>
    14ea:	c1 2c       	mov	r12, r1
    14ec:	d1 2c       	mov	r13, r1
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	a8 01       	movw	r20, r16
    14f4:	44 19       	sub	r20, r4
    14f6:	51 09       	sbc	r21, r1
    14f8:	5e 87       	std	Y+14, r21	; 0x0e
    14fa:	4d 87       	std	Y+13, r20	; 0x0d
    14fc:	28 01       	movw	r4, r16
    14fe:	4c 18       	sub	r4, r12
    1500:	5d 08       	sbc	r5, r13
    1502:	48 0c       	add	r4, r8
    1504:	59 1c       	adc	r5, r9
    1506:	87 2d       	mov	r24, r7
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	44 27       	eor	r20, r20
    150c:	55 27       	eor	r21, r21
    150e:	48 1b       	sub	r20, r24
    1510:	59 0b       	sbc	r21, r25
    1512:	58 8b       	std	Y+16, r21	; 0x10
    1514:	4f 87       	std	Y+15, r20	; 0x0f
    1516:	5f ef       	ldi	r21, 0xFF	; 255
    1518:	c5 16       	cp	r12, r21
    151a:	d5 06       	cpc	r13, r21
    151c:	41 f4       	brne	.+16     	; 0x152e <vfprintf+0x364>
    151e:	b7 01       	movw	r22, r14
    1520:	8e e2       	ldi	r24, 0x2E	; 46
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	2a 8b       	std	Y+18, r18	; 0x12
    1526:	39 8b       	std	Y+17, r19	; 0x11
    1528:	6c d4       	rcall	.+2264   	; 0x1e02 <fputc>
    152a:	39 89       	ldd	r19, Y+17	; 0x11
    152c:	2a 89       	ldd	r18, Y+18	; 0x12
    152e:	0c 15       	cp	r16, r12
    1530:	1d 05       	cpc	r17, r13
    1532:	54 f0       	brlt	.+20     	; 0x1548 <vfprintf+0x37e>
    1534:	4d 85       	ldd	r20, Y+13	; 0x0d
    1536:	5e 85       	ldd	r21, Y+14	; 0x0e
    1538:	4c 15       	cp	r20, r12
    153a:	5d 05       	cpc	r21, r13
    153c:	2c f4       	brge	.+10     	; 0x1548 <vfprintf+0x37e>
    153e:	f2 01       	movw	r30, r4
    1540:	e2 0f       	add	r30, r18
    1542:	f3 1f       	adc	r31, r19
    1544:	81 81       	ldd	r24, Z+1	; 0x01
    1546:	01 c0       	rjmp	.+2      	; 0x154a <vfprintf+0x380>
    1548:	80 e3       	ldi	r24, 0x30	; 48
    154a:	51 e0       	ldi	r21, 0x01	; 1
    154c:	c5 1a       	sub	r12, r21
    154e:	d1 08       	sbc	r13, r1
    1550:	2f 5f       	subi	r18, 0xFF	; 255
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	4f 85       	ldd	r20, Y+15	; 0x0f
    1556:	58 89       	ldd	r21, Y+16	; 0x10
    1558:	c4 16       	cp	r12, r20
    155a:	d5 06       	cpc	r13, r21
    155c:	44 f0       	brlt	.+16     	; 0x156e <vfprintf+0x3a4>
    155e:	b7 01       	movw	r22, r14
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	2a 8b       	std	Y+18, r18	; 0x12
    1564:	39 8b       	std	Y+17, r19	; 0x11
    1566:	4d d4       	rcall	.+2202   	; 0x1e02 <fputc>
    1568:	2a 89       	ldd	r18, Y+18	; 0x12
    156a:	39 89       	ldd	r19, Y+17	; 0x11
    156c:	d4 cf       	rjmp	.-88     	; 0x1516 <vfprintf+0x34c>
    156e:	c0 16       	cp	r12, r16
    1570:	d1 06       	cpc	r13, r17
    1572:	49 f4       	brne	.+18     	; 0x1586 <vfprintf+0x3bc>
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	96 33       	cpi	r25, 0x36	; 54
    1578:	28 f4       	brcc	.+10     	; 0x1584 <vfprintf+0x3ba>
    157a:	95 33       	cpi	r25, 0x35	; 53
    157c:	21 f4       	brne	.+8      	; 0x1586 <vfprintf+0x3bc>
    157e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1580:	54 fd       	sbrc	r21, 4
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <vfprintf+0x3bc>
    1584:	81 e3       	ldi	r24, 0x31	; 49
    1586:	b7 01       	movw	r22, r14
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	44 c0       	rjmp	.+136    	; 0x1614 <vfprintf+0x44a>
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	81 33       	cpi	r24, 0x31	; 49
    1590:	19 f0       	breq	.+6      	; 0x1598 <vfprintf+0x3ce>
    1592:	4c 85       	ldd	r20, Y+12	; 0x0c
    1594:	4f 7e       	andi	r20, 0xEF	; 239
    1596:	4c 87       	std	Y+12, r20	; 0x0c
    1598:	b7 01       	movw	r22, r14
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	32 d4       	rcall	.+2148   	; 0x1e02 <fputc>
    159e:	71 10       	cpse	r7, r1
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <vfprintf+0x3e2>
    15a2:	54 fe       	sbrs	r5, 4
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <vfprintf+0x404>
    15a6:	85 e4       	ldi	r24, 0x45	; 69
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	13 c0       	rjmp	.+38     	; 0x15d2 <vfprintf+0x408>
    15ac:	b7 01       	movw	r22, r14
    15ae:	8e e2       	ldi	r24, 0x2E	; 46
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	27 d4       	rcall	.+2126   	; 0x1e02 <fputc>
    15b4:	42 e0       	ldi	r20, 0x02	; 2
    15b6:	d4 2e       	mov	r13, r20
    15b8:	f4 01       	movw	r30, r8
    15ba:	ed 0d       	add	r30, r13
    15bc:	f1 1d       	adc	r31, r1
    15be:	d3 94       	inc	r13
    15c0:	b7 01       	movw	r22, r14
    15c2:	80 81       	ld	r24, Z
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	1d d4       	rcall	.+2106   	; 0x1e02 <fputc>
    15c8:	7a 94       	dec	r7
    15ca:	b1 f7       	brne	.-20     	; 0x15b8 <vfprintf+0x3ee>
    15cc:	ea cf       	rjmp	.-44     	; 0x15a2 <vfprintf+0x3d8>
    15ce:	85 e6       	ldi	r24, 0x65	; 101
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	b7 01       	movw	r22, r14
    15d4:	16 d4       	rcall	.+2092   	; 0x1e02 <fputc>
    15d6:	17 fd       	sbrc	r17, 7
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <vfprintf+0x41c>
    15da:	01 15       	cp	r16, r1
    15dc:	11 05       	cpc	r17, r1
    15de:	41 f4       	brne	.+16     	; 0x15f0 <vfprintf+0x426>
    15e0:	5c 85       	ldd	r21, Y+12	; 0x0c
    15e2:	54 ff       	sbrs	r21, 4
    15e4:	05 c0       	rjmp	.+10     	; 0x15f0 <vfprintf+0x426>
    15e6:	11 95       	neg	r17
    15e8:	01 95       	neg	r16
    15ea:	11 09       	sbc	r17, r1
    15ec:	8d e2       	ldi	r24, 0x2D	; 45
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <vfprintf+0x428>
    15f0:	8b e2       	ldi	r24, 0x2B	; 43
    15f2:	b7 01       	movw	r22, r14
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	05 d4       	rcall	.+2058   	; 0x1e02 <fputc>
    15f8:	80 e3       	ldi	r24, 0x30	; 48
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <vfprintf+0x438>
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	0a 50       	subi	r16, 0x0A	; 10
    1600:	11 09       	sbc	r17, r1
    1602:	0a 30       	cpi	r16, 0x0A	; 10
    1604:	11 05       	cpc	r17, r1
    1606:	d4 f7       	brge	.-12     	; 0x15fc <vfprintf+0x432>
    1608:	b7 01       	movw	r22, r14
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	fa d3       	rcall	.+2036   	; 0x1e02 <fputc>
    160e:	b7 01       	movw	r22, r14
    1610:	c8 01       	movw	r24, r16
    1612:	c0 96       	adiw	r24, 0x30	; 48
    1614:	f6 d3       	rcall	.+2028   	; 0x1e02 <fputc>
    1616:	44 c1       	rjmp	.+648    	; 0x18a0 <vfprintf+0x6d6>
    1618:	83 36       	cpi	r24, 0x63	; 99
    161a:	31 f0       	breq	.+12     	; 0x1628 <vfprintf+0x45e>
    161c:	83 37       	cpi	r24, 0x73	; 115
    161e:	81 f0       	breq	.+32     	; 0x1640 <vfprintf+0x476>
    1620:	83 35       	cpi	r24, 0x53	; 83
    1622:	09 f0       	breq	.+2      	; 0x1626 <vfprintf+0x45c>
    1624:	5a c0       	rjmp	.+180    	; 0x16da <vfprintf+0x510>
    1626:	23 c0       	rjmp	.+70     	; 0x166e <vfprintf+0x4a4>
    1628:	56 01       	movw	r10, r12
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	a8 0e       	add	r10, r24
    162e:	b1 1c       	adc	r11, r1
    1630:	f6 01       	movw	r30, r12
    1632:	80 81       	ld	r24, Z
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	cc 24       	eor	r12, r12
    1638:	c3 94       	inc	r12
    163a:	d1 2c       	mov	r13, r1
    163c:	84 01       	movw	r16, r8
    163e:	13 c0       	rjmp	.+38     	; 0x1666 <vfprintf+0x49c>
    1640:	56 01       	movw	r10, r12
    1642:	f2 e0       	ldi	r31, 0x02	; 2
    1644:	af 0e       	add	r10, r31
    1646:	b1 1c       	adc	r11, r1
    1648:	f6 01       	movw	r30, r12
    164a:	00 81       	ld	r16, Z
    164c:	11 81       	ldd	r17, Z+1	; 0x01
    164e:	26 ff       	sbrs	r18, 6
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <vfprintf+0x48e>
    1652:	67 2d       	mov	r22, r7
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	02 c0       	rjmp	.+4      	; 0x165c <vfprintf+0x492>
    1658:	6f ef       	ldi	r22, 0xFF	; 255
    165a:	7f ef       	ldi	r23, 0xFF	; 255
    165c:	c8 01       	movw	r24, r16
    165e:	2a 8b       	std	Y+18, r18	; 0x12
    1660:	c5 d3       	rcall	.+1930   	; 0x1dec <strnlen>
    1662:	6c 01       	movw	r12, r24
    1664:	2a 89       	ldd	r18, Y+18	; 0x12
    1666:	9f e7       	ldi	r25, 0x7F	; 127
    1668:	59 2e       	mov	r5, r25
    166a:	52 22       	and	r5, r18
    166c:	16 c0       	rjmp	.+44     	; 0x169a <vfprintf+0x4d0>
    166e:	56 01       	movw	r10, r12
    1670:	f2 e0       	ldi	r31, 0x02	; 2
    1672:	af 0e       	add	r10, r31
    1674:	b1 1c       	adc	r11, r1
    1676:	f6 01       	movw	r30, r12
    1678:	00 81       	ld	r16, Z
    167a:	11 81       	ldd	r17, Z+1	; 0x01
    167c:	26 ff       	sbrs	r18, 6
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <vfprintf+0x4bc>
    1680:	67 2d       	mov	r22, r7
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	02 c0       	rjmp	.+4      	; 0x168a <vfprintf+0x4c0>
    1686:	6f ef       	ldi	r22, 0xFF	; 255
    1688:	7f ef       	ldi	r23, 0xFF	; 255
    168a:	c8 01       	movw	r24, r16
    168c:	2a 8b       	std	Y+18, r18	; 0x12
    168e:	8c d3       	rcall	.+1816   	; 0x1da8 <strnlen_P>
    1690:	6c 01       	movw	r12, r24
    1692:	2a 89       	ldd	r18, Y+18	; 0x12
    1694:	80 e8       	ldi	r24, 0x80	; 128
    1696:	58 2e       	mov	r5, r24
    1698:	52 2a       	or	r5, r18
    169a:	53 fc       	sbrc	r5, 3
    169c:	1a c0       	rjmp	.+52     	; 0x16d2 <vfprintf+0x508>
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <vfprintf+0x4e0>
    16a0:	b7 01       	movw	r22, r14
    16a2:	80 e2       	ldi	r24, 0x20	; 32
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	ad d3       	rcall	.+1882   	; 0x1e02 <fputc>
    16a8:	6a 94       	dec	r6
    16aa:	86 2d       	mov	r24, r6
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	c8 16       	cp	r12, r24
    16b0:	d9 06       	cpc	r13, r25
    16b2:	b0 f3       	brcs	.-20     	; 0x16a0 <vfprintf+0x4d6>
    16b4:	0e c0       	rjmp	.+28     	; 0x16d2 <vfprintf+0x508>
    16b6:	f8 01       	movw	r30, r16
    16b8:	57 fc       	sbrc	r5, 7
    16ba:	85 91       	lpm	r24, Z+
    16bc:	57 fe       	sbrs	r5, 7
    16be:	81 91       	ld	r24, Z+
    16c0:	8f 01       	movw	r16, r30
    16c2:	b7 01       	movw	r22, r14
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9d d3       	rcall	.+1850   	; 0x1e02 <fputc>
    16c8:	61 10       	cpse	r6, r1
    16ca:	6a 94       	dec	r6
    16cc:	f1 e0       	ldi	r31, 0x01	; 1
    16ce:	cf 1a       	sub	r12, r31
    16d0:	d1 08       	sbc	r13, r1
    16d2:	c1 14       	cp	r12, r1
    16d4:	d1 04       	cpc	r13, r1
    16d6:	79 f7       	brne	.-34     	; 0x16b6 <vfprintf+0x4ec>
    16d8:	e3 c0       	rjmp	.+454    	; 0x18a0 <vfprintf+0x6d6>
    16da:	84 36       	cpi	r24, 0x64	; 100
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <vfprintf+0x518>
    16de:	89 36       	cpi	r24, 0x69	; 105
    16e0:	49 f5       	brne	.+82     	; 0x1734 <vfprintf+0x56a>
    16e2:	56 01       	movw	r10, r12
    16e4:	27 ff       	sbrs	r18, 7
    16e6:	09 c0       	rjmp	.+18     	; 0x16fa <vfprintf+0x530>
    16e8:	44 e0       	ldi	r20, 0x04	; 4
    16ea:	a4 0e       	add	r10, r20
    16ec:	b1 1c       	adc	r11, r1
    16ee:	f6 01       	movw	r30, r12
    16f0:	60 81       	ld	r22, Z
    16f2:	71 81       	ldd	r23, Z+1	; 0x01
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	93 81       	ldd	r25, Z+3	; 0x03
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <vfprintf+0x544>
    16fa:	f2 e0       	ldi	r31, 0x02	; 2
    16fc:	af 0e       	add	r10, r31
    16fe:	b1 1c       	adc	r11, r1
    1700:	f6 01       	movw	r30, r12
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	88 27       	eor	r24, r24
    1708:	77 fd       	sbrc	r23, 7
    170a:	80 95       	com	r24
    170c:	98 2f       	mov	r25, r24
    170e:	12 2f       	mov	r17, r18
    1710:	1f 76       	andi	r17, 0x6F	; 111
    1712:	97 ff       	sbrs	r25, 7
    1714:	08 c0       	rjmp	.+16     	; 0x1726 <vfprintf+0x55c>
    1716:	90 95       	com	r25
    1718:	80 95       	com	r24
    171a:	70 95       	com	r23
    171c:	61 95       	neg	r22
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	8f 4f       	sbci	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	10 68       	ori	r17, 0x80	; 128
    1726:	2a e0       	ldi	r18, 0x0A	; 10
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	a4 01       	movw	r20, r8
    172c:	fc d3       	rcall	.+2040   	; 0x1f26 <__ultoa_invert>
    172e:	d8 2e       	mov	r13, r24
    1730:	d8 18       	sub	r13, r8
    1732:	3f c0       	rjmp	.+126    	; 0x17b2 <vfprintf+0x5e8>
    1734:	12 2f       	mov	r17, r18
    1736:	85 37       	cpi	r24, 0x75	; 117
    1738:	21 f4       	brne	.+8      	; 0x1742 <vfprintf+0x578>
    173a:	1f 7e       	andi	r17, 0xEF	; 239
    173c:	2a e0       	ldi	r18, 0x0A	; 10
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	1f c0       	rjmp	.+62     	; 0x1780 <vfprintf+0x5b6>
    1742:	19 7f       	andi	r17, 0xF9	; 249
    1744:	8f 36       	cpi	r24, 0x6F	; 111
    1746:	a1 f0       	breq	.+40     	; 0x1770 <vfprintf+0x5a6>
    1748:	20 f4       	brcc	.+8      	; 0x1752 <vfprintf+0x588>
    174a:	88 35       	cpi	r24, 0x58	; 88
    174c:	09 f0       	breq	.+2      	; 0x1750 <vfprintf+0x586>
    174e:	ab c0       	rjmp	.+342    	; 0x18a6 <vfprintf+0x6dc>
    1750:	0b c0       	rjmp	.+22     	; 0x1768 <vfprintf+0x59e>
    1752:	80 37       	cpi	r24, 0x70	; 112
    1754:	21 f0       	breq	.+8      	; 0x175e <vfprintf+0x594>
    1756:	88 37       	cpi	r24, 0x78	; 120
    1758:	09 f0       	breq	.+2      	; 0x175c <vfprintf+0x592>
    175a:	a5 c0       	rjmp	.+330    	; 0x18a6 <vfprintf+0x6dc>
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <vfprintf+0x596>
    175e:	10 61       	ori	r17, 0x10	; 16
    1760:	14 ff       	sbrs	r17, 4
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <vfprintf+0x5ac>
    1764:	14 60       	ori	r17, 0x04	; 4
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <vfprintf+0x5ac>
    1768:	24 ff       	sbrs	r18, 4
    176a:	08 c0       	rjmp	.+16     	; 0x177c <vfprintf+0x5b2>
    176c:	16 60       	ori	r17, 0x06	; 6
    176e:	06 c0       	rjmp	.+12     	; 0x177c <vfprintf+0x5b2>
    1770:	28 e0       	ldi	r18, 0x08	; 8
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <vfprintf+0x5b6>
    1776:	20 e1       	ldi	r18, 0x10	; 16
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <vfprintf+0x5b6>
    177c:	20 e1       	ldi	r18, 0x10	; 16
    177e:	32 e0       	ldi	r19, 0x02	; 2
    1780:	56 01       	movw	r10, r12
    1782:	17 ff       	sbrs	r17, 7
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <vfprintf+0x5ce>
    1786:	f4 e0       	ldi	r31, 0x04	; 4
    1788:	af 0e       	add	r10, r31
    178a:	b1 1c       	adc	r11, r1
    178c:	f6 01       	movw	r30, r12
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <vfprintf+0x5de>
    1798:	f2 e0       	ldi	r31, 0x02	; 2
    179a:	af 0e       	add	r10, r31
    179c:	b1 1c       	adc	r11, r1
    179e:	f6 01       	movw	r30, r12
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a4 01       	movw	r20, r8
    17aa:	bd d3       	rcall	.+1914   	; 0x1f26 <__ultoa_invert>
    17ac:	d8 2e       	mov	r13, r24
    17ae:	d8 18       	sub	r13, r8
    17b0:	1f 77       	andi	r17, 0x7F	; 127
    17b2:	16 ff       	sbrs	r17, 6
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <vfprintf+0x602>
    17b6:	21 2f       	mov	r18, r17
    17b8:	2e 7f       	andi	r18, 0xFE	; 254
    17ba:	d7 14       	cp	r13, r7
    17bc:	50 f4       	brcc	.+20     	; 0x17d2 <vfprintf+0x608>
    17be:	14 ff       	sbrs	r17, 4
    17c0:	0a c0       	rjmp	.+20     	; 0x17d6 <vfprintf+0x60c>
    17c2:	12 fd       	sbrc	r17, 2
    17c4:	08 c0       	rjmp	.+16     	; 0x17d6 <vfprintf+0x60c>
    17c6:	21 2f       	mov	r18, r17
    17c8:	2e 7e       	andi	r18, 0xEE	; 238
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <vfprintf+0x60c>
    17cc:	0d 2d       	mov	r16, r13
    17ce:	21 2f       	mov	r18, r17
    17d0:	03 c0       	rjmp	.+6      	; 0x17d8 <vfprintf+0x60e>
    17d2:	0d 2d       	mov	r16, r13
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <vfprintf+0x60e>
    17d6:	07 2d       	mov	r16, r7
    17d8:	24 ff       	sbrs	r18, 4
    17da:	0c c0       	rjmp	.+24     	; 0x17f4 <vfprintf+0x62a>
    17dc:	fe 01       	movw	r30, r28
    17de:	ed 0d       	add	r30, r13
    17e0:	f1 1d       	adc	r31, r1
    17e2:	80 81       	ld	r24, Z
    17e4:	80 33       	cpi	r24, 0x30	; 48
    17e6:	11 f4       	brne	.+4      	; 0x17ec <vfprintf+0x622>
    17e8:	29 7e       	andi	r18, 0xE9	; 233
    17ea:	08 c0       	rjmp	.+16     	; 0x17fc <vfprintf+0x632>
    17ec:	22 ff       	sbrs	r18, 2
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <vfprintf+0x630>
    17f0:	0e 5f       	subi	r16, 0xFE	; 254
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <vfprintf+0x632>
    17f4:	82 2f       	mov	r24, r18
    17f6:	86 78       	andi	r24, 0x86	; 134
    17f8:	09 f0       	breq	.+2      	; 0x17fc <vfprintf+0x632>
    17fa:	0f 5f       	subi	r16, 0xFF	; 255
    17fc:	23 fd       	sbrc	r18, 3
    17fe:	13 c0       	rjmp	.+38     	; 0x1826 <vfprintf+0x65c>
    1800:	20 ff       	sbrs	r18, 0
    1802:	0e c0       	rjmp	.+28     	; 0x1820 <vfprintf+0x656>
    1804:	7d 2c       	mov	r7, r13
    1806:	06 15       	cp	r16, r6
    1808:	58 f4       	brcc	.+22     	; 0x1820 <vfprintf+0x656>
    180a:	76 0c       	add	r7, r6
    180c:	70 1a       	sub	r7, r16
    180e:	06 2d       	mov	r16, r6
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <vfprintf+0x656>
    1812:	b7 01       	movw	r22, r14
    1814:	80 e2       	ldi	r24, 0x20	; 32
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	2a 8b       	std	Y+18, r18	; 0x12
    181a:	f3 d2       	rcall	.+1510   	; 0x1e02 <fputc>
    181c:	0f 5f       	subi	r16, 0xFF	; 255
    181e:	2a 89       	ldd	r18, Y+18	; 0x12
    1820:	06 15       	cp	r16, r6
    1822:	b8 f3       	brcs	.-18     	; 0x1812 <vfprintf+0x648>
    1824:	04 c0       	rjmp	.+8      	; 0x182e <vfprintf+0x664>
    1826:	06 15       	cp	r16, r6
    1828:	10 f4       	brcc	.+4      	; 0x182e <vfprintf+0x664>
    182a:	60 1a       	sub	r6, r16
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <vfprintf+0x666>
    182e:	61 2c       	mov	r6, r1
    1830:	24 ff       	sbrs	r18, 4
    1832:	11 c0       	rjmp	.+34     	; 0x1856 <vfprintf+0x68c>
    1834:	b7 01       	movw	r22, r14
    1836:	80 e3       	ldi	r24, 0x30	; 48
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	2a 8b       	std	Y+18, r18	; 0x12
    183c:	e2 d2       	rcall	.+1476   	; 0x1e02 <fputc>
    183e:	2a 89       	ldd	r18, Y+18	; 0x12
    1840:	22 ff       	sbrs	r18, 2
    1842:	1c c0       	rjmp	.+56     	; 0x187c <vfprintf+0x6b2>
    1844:	21 ff       	sbrs	r18, 1
    1846:	03 c0       	rjmp	.+6      	; 0x184e <vfprintf+0x684>
    1848:	88 e5       	ldi	r24, 0x58	; 88
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <vfprintf+0x688>
    184e:	88 e7       	ldi	r24, 0x78	; 120
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	b7 01       	movw	r22, r14
    1854:	0c c0       	rjmp	.+24     	; 0x186e <vfprintf+0x6a4>
    1856:	82 2f       	mov	r24, r18
    1858:	86 78       	andi	r24, 0x86	; 134
    185a:	81 f0       	breq	.+32     	; 0x187c <vfprintf+0x6b2>
    185c:	21 fd       	sbrc	r18, 1
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <vfprintf+0x69a>
    1860:	80 e2       	ldi	r24, 0x20	; 32
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <vfprintf+0x69c>
    1864:	8b e2       	ldi	r24, 0x2B	; 43
    1866:	27 fd       	sbrc	r18, 7
    1868:	8d e2       	ldi	r24, 0x2D	; 45
    186a:	b7 01       	movw	r22, r14
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	c9 d2       	rcall	.+1426   	; 0x1e02 <fputc>
    1870:	05 c0       	rjmp	.+10     	; 0x187c <vfprintf+0x6b2>
    1872:	b7 01       	movw	r22, r14
    1874:	80 e3       	ldi	r24, 0x30	; 48
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	c4 d2       	rcall	.+1416   	; 0x1e02 <fputc>
    187a:	7a 94       	dec	r7
    187c:	d7 14       	cp	r13, r7
    187e:	c8 f3       	brcs	.-14     	; 0x1872 <vfprintf+0x6a8>
    1880:	da 94       	dec	r13
    1882:	f4 01       	movw	r30, r8
    1884:	ed 0d       	add	r30, r13
    1886:	f1 1d       	adc	r31, r1
    1888:	b7 01       	movw	r22, r14
    188a:	80 81       	ld	r24, Z
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	b9 d2       	rcall	.+1394   	; 0x1e02 <fputc>
    1890:	d1 10       	cpse	r13, r1
    1892:	f6 cf       	rjmp	.-20     	; 0x1880 <vfprintf+0x6b6>
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <vfprintf+0x6d6>
    1896:	b7 01       	movw	r22, r14
    1898:	80 e2       	ldi	r24, 0x20	; 32
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	b2 d2       	rcall	.+1380   	; 0x1e02 <fputc>
    189e:	6a 94       	dec	r6
    18a0:	61 10       	cpse	r6, r1
    18a2:	f9 cf       	rjmp	.-14     	; 0x1896 <vfprintf+0x6cc>
    18a4:	b6 cc       	rjmp	.-1684   	; 0x1212 <vfprintf+0x48>
    18a6:	f7 01       	movw	r30, r14
    18a8:	26 81       	ldd	r18, Z+6	; 0x06
    18aa:	37 81       	ldd	r19, Z+7	; 0x07
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <vfprintf+0x6e8>
    18ae:	2f ef       	ldi	r18, 0xFF	; 255
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	c9 01       	movw	r24, r18
    18b4:	62 96       	adiw	r28, 0x12	; 18
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	9f 90       	pop	r9
    18d6:	8f 90       	pop	r8
    18d8:	7f 90       	pop	r7
    18da:	6f 90       	pop	r6
    18dc:	5f 90       	pop	r5
    18de:	4f 90       	pop	r4
    18e0:	3f 90       	pop	r3
    18e2:	2f 90       	pop	r2
    18e4:	08 95       	ret

000018e6 <__divmodhi4>:
    18e6:	97 fb       	bst	r25, 7
    18e8:	07 2e       	mov	r0, r23
    18ea:	16 f4       	brtc	.+4      	; 0x18f0 <__divmodhi4+0xa>
    18ec:	00 94       	com	r0
    18ee:	06 d0       	rcall	.+12     	; 0x18fc <__divmodhi4_neg1>
    18f0:	77 fd       	sbrc	r23, 7
    18f2:	08 d0       	rcall	.+16     	; 0x1904 <__divmodhi4_neg2>
    18f4:	17 d0       	rcall	.+46     	; 0x1924 <__udivmodhi4>
    18f6:	07 fc       	sbrc	r0, 7
    18f8:	05 d0       	rcall	.+10     	; 0x1904 <__divmodhi4_neg2>
    18fa:	3e f4       	brtc	.+14     	; 0x190a <__divmodhi4_exit>

000018fc <__divmodhi4_neg1>:
    18fc:	90 95       	com	r25
    18fe:	81 95       	neg	r24
    1900:	9f 4f       	sbci	r25, 0xFF	; 255
    1902:	08 95       	ret

00001904 <__divmodhi4_neg2>:
    1904:	70 95       	com	r23
    1906:	61 95       	neg	r22
    1908:	7f 4f       	sbci	r23, 0xFF	; 255

0000190a <__divmodhi4_exit>:
    190a:	08 95       	ret

0000190c <__umulhisi3>:
    190c:	a2 9f       	mul	r26, r18
    190e:	b0 01       	movw	r22, r0
    1910:	b3 9f       	mul	r27, r19
    1912:	c0 01       	movw	r24, r0
    1914:	a3 9f       	mul	r26, r19
    1916:	01 d0       	rcall	.+2      	; 0x191a <__umulhisi3+0xe>
    1918:	b2 9f       	mul	r27, r18
    191a:	70 0d       	add	r23, r0
    191c:	81 1d       	adc	r24, r1
    191e:	11 24       	eor	r1, r1
    1920:	91 1d       	adc	r25, r1
    1922:	08 95       	ret

00001924 <__udivmodhi4>:
    1924:	aa 1b       	sub	r26, r26
    1926:	bb 1b       	sub	r27, r27
    1928:	51 e1       	ldi	r21, 0x11	; 17
    192a:	07 c0       	rjmp	.+14     	; 0x193a <__udivmodhi4_ep>

0000192c <__udivmodhi4_loop>:
    192c:	aa 1f       	adc	r26, r26
    192e:	bb 1f       	adc	r27, r27
    1930:	a6 17       	cp	r26, r22
    1932:	b7 07       	cpc	r27, r23
    1934:	10 f0       	brcs	.+4      	; 0x193a <__udivmodhi4_ep>
    1936:	a6 1b       	sub	r26, r22
    1938:	b7 0b       	sbc	r27, r23

0000193a <__udivmodhi4_ep>:
    193a:	88 1f       	adc	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	5a 95       	dec	r21
    1940:	a9 f7       	brne	.-22     	; 0x192c <__udivmodhi4_loop>
    1942:	80 95       	com	r24
    1944:	90 95       	com	r25
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	08 95       	ret

0000194c <calloc>:
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	68 9f       	mul	r22, r24
    1956:	80 01       	movw	r16, r0
    1958:	69 9f       	mul	r22, r25
    195a:	10 0d       	add	r17, r0
    195c:	78 9f       	mul	r23, r24
    195e:	10 0d       	add	r17, r0
    1960:	11 24       	eor	r1, r1
    1962:	c8 01       	movw	r24, r16
    1964:	0f d0       	rcall	.+30     	; 0x1984 <malloc>
    1966:	c8 2f       	mov	r28, r24
    1968:	d9 2f       	mov	r29, r25
    196a:	20 97       	sbiw	r28, 0x00	; 0
    196c:	29 f0       	breq	.+10     	; 0x1978 <calloc+0x2c>
    196e:	a8 01       	movw	r20, r16
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	8c 2f       	mov	r24, r28
    1976:	23 d2       	rcall	.+1094   	; 0x1dbe <memset>
    1978:	ce 01       	movw	r24, r28
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <malloc>:
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	91 05       	cpc	r25, r1
    1990:	10 f4       	brcc	.+4      	; 0x1996 <malloc+0x12>
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	e0 91 0f 02 	lds	r30, 0x020F
    199a:	f0 91 10 02 	lds	r31, 0x0210
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	c0 e0       	ldi	r28, 0x00	; 0
    19a4:	d0 e0       	ldi	r29, 0x00	; 0
    19a6:	23 c0       	rjmp	.+70     	; 0x19ee <malloc+0x6a>
    19a8:	40 81       	ld	r20, Z
    19aa:	51 81       	ldd	r21, Z+1	; 0x01
    19ac:	48 17       	cp	r20, r24
    19ae:	59 07       	cpc	r21, r25
    19b0:	a8 f0       	brcs	.+42     	; 0x19dc <malloc+0x58>
    19b2:	48 17       	cp	r20, r24
    19b4:	59 07       	cpc	r21, r25
    19b6:	61 f4       	brne	.+24     	; 0x19d0 <malloc+0x4c>
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	20 97       	sbiw	r28, 0x00	; 0
    19be:	19 f0       	breq	.+6      	; 0x19c6 <malloc+0x42>
    19c0:	9b 83       	std	Y+3, r25	; 0x03
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	2e c0       	rjmp	.+92     	; 0x1a22 <malloc+0x9e>
    19c6:	90 93 10 02 	sts	0x0210, r25
    19ca:	80 93 0f 02 	sts	0x020F, r24
    19ce:	29 c0       	rjmp	.+82     	; 0x1a22 <malloc+0x9e>
    19d0:	21 15       	cp	r18, r1
    19d2:	31 05       	cpc	r19, r1
    19d4:	29 f0       	breq	.+10     	; 0x19e0 <malloc+0x5c>
    19d6:	42 17       	cp	r20, r18
    19d8:	53 07       	cpc	r21, r19
    19da:	10 f0       	brcs	.+4      	; 0x19e0 <malloc+0x5c>
    19dc:	a9 01       	movw	r20, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <malloc+0x60>
    19e0:	be 01       	movw	r22, r28
    19e2:	df 01       	movw	r26, r30
    19e4:	02 81       	ldd	r16, Z+2	; 0x02
    19e6:	13 81       	ldd	r17, Z+3	; 0x03
    19e8:	ef 01       	movw	r28, r30
    19ea:	9a 01       	movw	r18, r20
    19ec:	f8 01       	movw	r30, r16
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	d9 f6       	brne	.-74     	; 0x19a8 <malloc+0x24>
    19f2:	21 15       	cp	r18, r1
    19f4:	31 05       	cpc	r19, r1
    19f6:	09 f1       	breq	.+66     	; 0x1a3a <malloc+0xb6>
    19f8:	28 1b       	sub	r18, r24
    19fa:	39 0b       	sbc	r19, r25
    19fc:	24 30       	cpi	r18, 0x04	; 4
    19fe:	31 05       	cpc	r19, r1
    1a00:	90 f4       	brcc	.+36     	; 0x1a26 <malloc+0xa2>
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	8d 91       	ld	r24, X+
    1a06:	9c 91       	ld	r25, X
    1a08:	13 97       	sbiw	r26, 0x03	; 3
    1a0a:	61 15       	cp	r22, r1
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	21 f0       	breq	.+8      	; 0x1a18 <malloc+0x94>
    1a10:	fb 01       	movw	r30, r22
    1a12:	93 83       	std	Z+3, r25	; 0x03
    1a14:	82 83       	std	Z+2, r24	; 0x02
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <malloc+0x9c>
    1a18:	90 93 10 02 	sts	0x0210, r25
    1a1c:	80 93 0f 02 	sts	0x020F, r24
    1a20:	fd 01       	movw	r30, r26
    1a22:	32 96       	adiw	r30, 0x02	; 2
    1a24:	44 c0       	rjmp	.+136    	; 0x1aae <malloc+0x12a>
    1a26:	fd 01       	movw	r30, r26
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f3 1f       	adc	r31, r19
    1a2c:	81 93       	st	Z+, r24
    1a2e:	91 93       	st	Z+, r25
    1a30:	22 50       	subi	r18, 0x02	; 2
    1a32:	31 09       	sbc	r19, r1
    1a34:	2d 93       	st	X+, r18
    1a36:	3c 93       	st	X, r19
    1a38:	3a c0       	rjmp	.+116    	; 0x1aae <malloc+0x12a>
    1a3a:	20 91 0d 02 	lds	r18, 0x020D
    1a3e:	30 91 0e 02 	lds	r19, 0x020E
    1a42:	23 2b       	or	r18, r19
    1a44:	41 f4       	brne	.+16     	; 0x1a56 <malloc+0xd2>
    1a46:	20 91 02 01 	lds	r18, 0x0102
    1a4a:	30 91 03 01 	lds	r19, 0x0103
    1a4e:	30 93 0e 02 	sts	0x020E, r19
    1a52:	20 93 0d 02 	sts	0x020D, r18
    1a56:	20 91 00 01 	lds	r18, 0x0100
    1a5a:	30 91 01 01 	lds	r19, 0x0101
    1a5e:	21 15       	cp	r18, r1
    1a60:	31 05       	cpc	r19, r1
    1a62:	41 f4       	brne	.+16     	; 0x1a74 <malloc+0xf0>
    1a64:	2d b7       	in	r18, 0x3d	; 61
    1a66:	3e b7       	in	r19, 0x3e	; 62
    1a68:	40 91 04 01 	lds	r20, 0x0104
    1a6c:	50 91 05 01 	lds	r21, 0x0105
    1a70:	24 1b       	sub	r18, r20
    1a72:	35 0b       	sbc	r19, r21
    1a74:	e0 91 0d 02 	lds	r30, 0x020D
    1a78:	f0 91 0e 02 	lds	r31, 0x020E
    1a7c:	e2 17       	cp	r30, r18
    1a7e:	f3 07       	cpc	r31, r19
    1a80:	a0 f4       	brcc	.+40     	; 0x1aaa <malloc+0x126>
    1a82:	2e 1b       	sub	r18, r30
    1a84:	3f 0b       	sbc	r19, r31
    1a86:	28 17       	cp	r18, r24
    1a88:	39 07       	cpc	r19, r25
    1a8a:	78 f0       	brcs	.+30     	; 0x1aaa <malloc+0x126>
    1a8c:	ac 01       	movw	r20, r24
    1a8e:	4e 5f       	subi	r20, 0xFE	; 254
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	24 17       	cp	r18, r20
    1a94:	35 07       	cpc	r19, r21
    1a96:	48 f0       	brcs	.+18     	; 0x1aaa <malloc+0x126>
    1a98:	4e 0f       	add	r20, r30
    1a9a:	5f 1f       	adc	r21, r31
    1a9c:	50 93 0e 02 	sts	0x020E, r21
    1aa0:	40 93 0d 02 	sts	0x020D, r20
    1aa4:	81 93       	st	Z+, r24
    1aa6:	91 93       	st	Z+, r25
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <malloc+0x12a>
    1aaa:	e0 e0       	ldi	r30, 0x00	; 0
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	cf 01       	movw	r24, r30
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	08 95       	ret

00001aba <free>:
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <free+0x12>
    1aca:	8f c0       	rjmp	.+286    	; 0x1bea <free+0x130>
    1acc:	dc 01       	movw	r26, r24
    1ace:	12 97       	sbiw	r26, 0x02	; 2
    1ad0:	13 96       	adiw	r26, 0x03	; 3
    1ad2:	1c 92       	st	X, r1
    1ad4:	1e 92       	st	-X, r1
    1ad6:	12 97       	sbiw	r26, 0x02	; 2
    1ad8:	e0 90 0f 02 	lds	r14, 0x020F
    1adc:	f0 90 10 02 	lds	r15, 0x0210
    1ae0:	e1 14       	cp	r14, r1
    1ae2:	f1 04       	cpc	r15, r1
    1ae4:	89 f4       	brne	.+34     	; 0x1b08 <free+0x4e>
    1ae6:	2d 91       	ld	r18, X+
    1ae8:	3c 91       	ld	r19, X
    1aea:	11 97       	sbiw	r26, 0x01	; 1
    1aec:	28 0f       	add	r18, r24
    1aee:	39 1f       	adc	r19, r25
    1af0:	80 91 0d 02 	lds	r24, 0x020D
    1af4:	90 91 0e 02 	lds	r25, 0x020E
    1af8:	82 17       	cp	r24, r18
    1afa:	93 07       	cpc	r25, r19
    1afc:	89 f5       	brne	.+98     	; 0x1b60 <free+0xa6>
    1afe:	b0 93 0e 02 	sts	0x020E, r27
    1b02:	a0 93 0d 02 	sts	0x020D, r26
    1b06:	71 c0       	rjmp	.+226    	; 0x1bea <free+0x130>
    1b08:	e7 01       	movw	r28, r14
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <free+0x58>
    1b10:	ea 01       	movw	r28, r20
    1b12:	ca 17       	cp	r28, r26
    1b14:	db 07       	cpc	r29, r27
    1b16:	38 f4       	brcc	.+14     	; 0x1b26 <free+0x6c>
    1b18:	4a 81       	ldd	r20, Y+2	; 0x02
    1b1a:	5b 81       	ldd	r21, Y+3	; 0x03
    1b1c:	9e 01       	movw	r18, r28
    1b1e:	41 15       	cp	r20, r1
    1b20:	51 05       	cpc	r21, r1
    1b22:	b1 f7       	brne	.-20     	; 0x1b10 <free+0x56>
    1b24:	22 c0       	rjmp	.+68     	; 0x1b6a <free+0xb0>
    1b26:	bc 01       	movw	r22, r24
    1b28:	62 50       	subi	r22, 0x02	; 2
    1b2a:	71 09       	sbc	r23, r1
    1b2c:	fb 01       	movw	r30, r22
    1b2e:	d3 83       	std	Z+3, r29	; 0x03
    1b30:	c2 83       	std	Z+2, r28	; 0x02
    1b32:	00 81       	ld	r16, Z
    1b34:	11 81       	ldd	r17, Z+1	; 0x01
    1b36:	ac 01       	movw	r20, r24
    1b38:	40 0f       	add	r20, r16
    1b3a:	51 1f       	adc	r21, r17
    1b3c:	4c 17       	cp	r20, r28
    1b3e:	5d 07       	cpc	r21, r29
    1b40:	61 f4       	brne	.+24     	; 0x1b5a <free+0xa0>
    1b42:	48 81       	ld	r20, Y
    1b44:	59 81       	ldd	r21, Y+1	; 0x01
    1b46:	40 0f       	add	r20, r16
    1b48:	51 1f       	adc	r21, r17
    1b4a:	4e 5f       	subi	r20, 0xFE	; 254
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	51 83       	std	Z+1, r21	; 0x01
    1b50:	40 83       	st	Z, r20
    1b52:	4a 81       	ldd	r20, Y+2	; 0x02
    1b54:	5b 81       	ldd	r21, Y+3	; 0x03
    1b56:	53 83       	std	Z+3, r21	; 0x03
    1b58:	42 83       	std	Z+2, r20	; 0x02
    1b5a:	21 15       	cp	r18, r1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	29 f4       	brne	.+10     	; 0x1b6a <free+0xb0>
    1b60:	b0 93 10 02 	sts	0x0210, r27
    1b64:	a0 93 0f 02 	sts	0x020F, r26
    1b68:	40 c0       	rjmp	.+128    	; 0x1bea <free+0x130>
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	b3 83       	std	Z+3, r27	; 0x03
    1b6e:	a2 83       	std	Z+2, r26	; 0x02
    1b70:	e9 01       	movw	r28, r18
    1b72:	69 91       	ld	r22, Y+
    1b74:	79 91       	ld	r23, Y+
    1b76:	c6 0f       	add	r28, r22
    1b78:	d7 1f       	adc	r29, r23
    1b7a:	ac 17       	cp	r26, r28
    1b7c:	bd 07       	cpc	r27, r29
    1b7e:	79 f4       	brne	.+30     	; 0x1b9e <free+0xe4>
    1b80:	dc 01       	movw	r26, r24
    1b82:	5e 91       	ld	r21, -X
    1b84:	4e 91       	ld	r20, -X
    1b86:	46 0f       	add	r20, r22
    1b88:	57 1f       	adc	r21, r23
    1b8a:	4e 5f       	subi	r20, 0xFE	; 254
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	51 83       	std	Z+1, r21	; 0x01
    1b90:	40 83       	st	Z, r20
    1b92:	12 96       	adiw	r26, 0x02	; 2
    1b94:	8d 91       	ld	r24, X+
    1b96:	9c 91       	ld	r25, X
    1b98:	13 97       	sbiw	r26, 0x03	; 3
    1b9a:	93 83       	std	Z+3, r25	; 0x03
    1b9c:	82 83       	std	Z+2, r24	; 0x02
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <free+0xee>
    1ba4:	d7 01       	movw	r26, r14
    1ba6:	7c 01       	movw	r14, r24
    1ba8:	f7 01       	movw	r30, r14
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	c9 f7       	brne	.-14     	; 0x1ba4 <free+0xea>
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	02 96       	adiw	r24, 0x02	; 2
    1bb6:	20 81       	ld	r18, Z
    1bb8:	31 81       	ldd	r19, Z+1	; 0x01
    1bba:	82 0f       	add	r24, r18
    1bbc:	93 1f       	adc	r25, r19
    1bbe:	20 91 0d 02 	lds	r18, 0x020D
    1bc2:	30 91 0e 02 	lds	r19, 0x020E
    1bc6:	28 17       	cp	r18, r24
    1bc8:	39 07       	cpc	r19, r25
    1bca:	79 f4       	brne	.+30     	; 0x1bea <free+0x130>
    1bcc:	10 97       	sbiw	r26, 0x00	; 0
    1bce:	29 f4       	brne	.+10     	; 0x1bda <free+0x120>
    1bd0:	10 92 10 02 	sts	0x0210, r1
    1bd4:	10 92 0f 02 	sts	0x020F, r1
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <free+0x128>
    1bda:	13 96       	adiw	r26, 0x03	; 3
    1bdc:	1c 92       	st	X, r1
    1bde:	1e 92       	st	-X, r1
    1be0:	12 97       	sbiw	r26, 0x02	; 2
    1be2:	f0 92 0e 02 	sts	0x020E, r15
    1be6:	e0 92 0d 02 	sts	0x020D, r14
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	08 95       	ret

00001bf8 <__ftoa_engine>:
    1bf8:	28 30       	cpi	r18, 0x08	; 8
    1bfa:	08 f0       	brcs	.+2      	; 0x1bfe <__ftoa_engine+0x6>
    1bfc:	27 e0       	ldi	r18, 0x07	; 7
    1bfe:	33 27       	eor	r19, r19
    1c00:	da 01       	movw	r26, r20
    1c02:	99 0f       	add	r25, r25
    1c04:	31 1d       	adc	r19, r1
    1c06:	87 fd       	sbrc	r24, 7
    1c08:	91 60       	ori	r25, 0x01	; 1
    1c0a:	00 96       	adiw	r24, 0x00	; 0
    1c0c:	61 05       	cpc	r22, r1
    1c0e:	71 05       	cpc	r23, r1
    1c10:	39 f4       	brne	.+14     	; 0x1c20 <__ftoa_engine+0x28>
    1c12:	32 60       	ori	r19, 0x02	; 2
    1c14:	2e 5f       	subi	r18, 0xFE	; 254
    1c16:	3d 93       	st	X+, r19
    1c18:	30 e3       	ldi	r19, 0x30	; 48
    1c1a:	2a 95       	dec	r18
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <__ftoa_engine+0x1e>
    1c1e:	08 95       	ret
    1c20:	9f 3f       	cpi	r25, 0xFF	; 255
    1c22:	30 f0       	brcs	.+12     	; 0x1c30 <__ftoa_engine+0x38>
    1c24:	80 38       	cpi	r24, 0x80	; 128
    1c26:	71 05       	cpc	r23, r1
    1c28:	61 05       	cpc	r22, r1
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <__ftoa_engine+0x36>
    1c2c:	3c 5f       	subi	r19, 0xFC	; 252
    1c2e:	3c 5f       	subi	r19, 0xFC	; 252
    1c30:	3d 93       	st	X+, r19
    1c32:	91 30       	cpi	r25, 0x01	; 1
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <__ftoa_engine+0x40>
    1c36:	80 68       	ori	r24, 0x80	; 128
    1c38:	91 1d       	adc	r25, r1
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	1f 93       	push	r17
    1c40:	0f 93       	push	r16
    1c42:	ff 92       	push	r15
    1c44:	ef 92       	push	r14
    1c46:	19 2f       	mov	r17, r25
    1c48:	98 7f       	andi	r25, 0xF8	; 248
    1c4a:	96 95       	lsr	r25
    1c4c:	e9 2f       	mov	r30, r25
    1c4e:	96 95       	lsr	r25
    1c50:	96 95       	lsr	r25
    1c52:	e9 0f       	add	r30, r25
    1c54:	ff 27       	eor	r31, r31
    1c56:	e2 51       	subi	r30, 0x12	; 18
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	99 27       	eor	r25, r25
    1c5c:	33 27       	eor	r19, r19
    1c5e:	ee 24       	eor	r14, r14
    1c60:	ff 24       	eor	r15, r15
    1c62:	a7 01       	movw	r20, r14
    1c64:	e7 01       	movw	r28, r14
    1c66:	05 90       	lpm	r0, Z+
    1c68:	08 94       	sec
    1c6a:	07 94       	ror	r0
    1c6c:	28 f4       	brcc	.+10     	; 0x1c78 <__ftoa_engine+0x80>
    1c6e:	36 0f       	add	r19, r22
    1c70:	e7 1e       	adc	r14, r23
    1c72:	f8 1e       	adc	r15, r24
    1c74:	49 1f       	adc	r20, r25
    1c76:	51 1d       	adc	r21, r1
    1c78:	66 0f       	add	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	06 94       	lsr	r0
    1c82:	a1 f7       	brne	.-24     	; 0x1c6c <__ftoa_engine+0x74>
    1c84:	05 90       	lpm	r0, Z+
    1c86:	07 94       	ror	r0
    1c88:	28 f4       	brcc	.+10     	; 0x1c94 <__ftoa_engine+0x9c>
    1c8a:	e7 0e       	add	r14, r23
    1c8c:	f8 1e       	adc	r15, r24
    1c8e:	49 1f       	adc	r20, r25
    1c90:	56 1f       	adc	r21, r22
    1c92:	c1 1d       	adc	r28, r1
    1c94:	77 0f       	add	r23, r23
    1c96:	88 1f       	adc	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	66 1f       	adc	r22, r22
    1c9c:	06 94       	lsr	r0
    1c9e:	a1 f7       	brne	.-24     	; 0x1c88 <__ftoa_engine+0x90>
    1ca0:	05 90       	lpm	r0, Z+
    1ca2:	07 94       	ror	r0
    1ca4:	28 f4       	brcc	.+10     	; 0x1cb0 <__ftoa_engine+0xb8>
    1ca6:	f8 0e       	add	r15, r24
    1ca8:	49 1f       	adc	r20, r25
    1caa:	56 1f       	adc	r21, r22
    1cac:	c7 1f       	adc	r28, r23
    1cae:	d1 1d       	adc	r29, r1
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	66 1f       	adc	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	06 94       	lsr	r0
    1cba:	a1 f7       	brne	.-24     	; 0x1ca4 <__ftoa_engine+0xac>
    1cbc:	05 90       	lpm	r0, Z+
    1cbe:	07 94       	ror	r0
    1cc0:	20 f4       	brcc	.+8      	; 0x1cca <__ftoa_engine+0xd2>
    1cc2:	49 0f       	add	r20, r25
    1cc4:	56 1f       	adc	r21, r22
    1cc6:	c7 1f       	adc	r28, r23
    1cc8:	d8 1f       	adc	r29, r24
    1cca:	99 0f       	add	r25, r25
    1ccc:	66 1f       	adc	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	06 94       	lsr	r0
    1cd4:	a9 f7       	brne	.-22     	; 0x1cc0 <__ftoa_engine+0xc8>
    1cd6:	84 91       	lpm	r24, Z
    1cd8:	10 95       	com	r17
    1cda:	17 70       	andi	r17, 0x07	; 7
    1cdc:	41 f0       	breq	.+16     	; 0x1cee <__ftoa_engine+0xf6>
    1cde:	d6 95       	lsr	r29
    1ce0:	c7 95       	ror	r28
    1ce2:	57 95       	ror	r21
    1ce4:	47 95       	ror	r20
    1ce6:	f7 94       	ror	r15
    1ce8:	e7 94       	ror	r14
    1cea:	1a 95       	dec	r17
    1cec:	c1 f7       	brne	.-16     	; 0x1cde <__ftoa_engine+0xe6>
    1cee:	e4 e9       	ldi	r30, 0x94	; 148
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	68 94       	set
    1cf4:	15 90       	lpm	r1, Z+
    1cf6:	15 91       	lpm	r17, Z+
    1cf8:	35 91       	lpm	r19, Z+
    1cfa:	65 91       	lpm	r22, Z+
    1cfc:	95 91       	lpm	r25, Z+
    1cfe:	05 90       	lpm	r0, Z+
    1d00:	7f e2       	ldi	r23, 0x2F	; 47
    1d02:	73 95       	inc	r23
    1d04:	e1 18       	sub	r14, r1
    1d06:	f1 0a       	sbc	r15, r17
    1d08:	43 0b       	sbc	r20, r19
    1d0a:	56 0b       	sbc	r21, r22
    1d0c:	c9 0b       	sbc	r28, r25
    1d0e:	d0 09       	sbc	r29, r0
    1d10:	c0 f7       	brcc	.-16     	; 0x1d02 <__ftoa_engine+0x10a>
    1d12:	e1 0c       	add	r14, r1
    1d14:	f1 1e       	adc	r15, r17
    1d16:	43 1f       	adc	r20, r19
    1d18:	56 1f       	adc	r21, r22
    1d1a:	c9 1f       	adc	r28, r25
    1d1c:	d0 1d       	adc	r29, r0
    1d1e:	7e f4       	brtc	.+30     	; 0x1d3e <__ftoa_engine+0x146>
    1d20:	70 33       	cpi	r23, 0x30	; 48
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <__ftoa_engine+0x130>
    1d24:	8a 95       	dec	r24
    1d26:	e6 cf       	rjmp	.-52     	; 0x1cf4 <__ftoa_engine+0xfc>
    1d28:	e8 94       	clt
    1d2a:	01 50       	subi	r16, 0x01	; 1
    1d2c:	30 f0       	brcs	.+12     	; 0x1d3a <__ftoa_engine+0x142>
    1d2e:	08 0f       	add	r16, r24
    1d30:	0a f4       	brpl	.+2      	; 0x1d34 <__ftoa_engine+0x13c>
    1d32:	00 27       	eor	r16, r16
    1d34:	02 17       	cp	r16, r18
    1d36:	08 f4       	brcc	.+2      	; 0x1d3a <__ftoa_engine+0x142>
    1d38:	20 2f       	mov	r18, r16
    1d3a:	23 95       	inc	r18
    1d3c:	02 2f       	mov	r16, r18
    1d3e:	7a 33       	cpi	r23, 0x3A	; 58
    1d40:	28 f0       	brcs	.+10     	; 0x1d4c <__ftoa_engine+0x154>
    1d42:	79 e3       	ldi	r23, 0x39	; 57
    1d44:	7d 93       	st	X+, r23
    1d46:	2a 95       	dec	r18
    1d48:	e9 f7       	brne	.-6      	; 0x1d44 <__ftoa_engine+0x14c>
    1d4a:	10 c0       	rjmp	.+32     	; 0x1d6c <__ftoa_engine+0x174>
    1d4c:	7d 93       	st	X+, r23
    1d4e:	2a 95       	dec	r18
    1d50:	89 f6       	brne	.-94     	; 0x1cf4 <__ftoa_engine+0xfc>
    1d52:	06 94       	lsr	r0
    1d54:	97 95       	ror	r25
    1d56:	67 95       	ror	r22
    1d58:	37 95       	ror	r19
    1d5a:	17 95       	ror	r17
    1d5c:	17 94       	ror	r1
    1d5e:	e1 18       	sub	r14, r1
    1d60:	f1 0a       	sbc	r15, r17
    1d62:	43 0b       	sbc	r20, r19
    1d64:	56 0b       	sbc	r21, r22
    1d66:	c9 0b       	sbc	r28, r25
    1d68:	d0 09       	sbc	r29, r0
    1d6a:	98 f0       	brcs	.+38     	; 0x1d92 <__ftoa_engine+0x19a>
    1d6c:	23 95       	inc	r18
    1d6e:	7e 91       	ld	r23, -X
    1d70:	73 95       	inc	r23
    1d72:	7a 33       	cpi	r23, 0x3A	; 58
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <__ftoa_engine+0x180>
    1d76:	70 e3       	ldi	r23, 0x30	; 48
    1d78:	7c 93       	st	X, r23
    1d7a:	20 13       	cpse	r18, r16
    1d7c:	b8 f7       	brcc	.-18     	; 0x1d6c <__ftoa_engine+0x174>
    1d7e:	7e 91       	ld	r23, -X
    1d80:	70 61       	ori	r23, 0x10	; 16
    1d82:	7d 93       	st	X+, r23
    1d84:	30 f0       	brcs	.+12     	; 0x1d92 <__ftoa_engine+0x19a>
    1d86:	83 95       	inc	r24
    1d88:	71 e3       	ldi	r23, 0x31	; 49
    1d8a:	7d 93       	st	X+, r23
    1d8c:	70 e3       	ldi	r23, 0x30	; 48
    1d8e:	2a 95       	dec	r18
    1d90:	e1 f7       	brne	.-8      	; 0x1d8a <__ftoa_engine+0x192>
    1d92:	11 24       	eor	r1, r1
    1d94:	ef 90       	pop	r14
    1d96:	ff 90       	pop	r15
    1d98:	0f 91       	pop	r16
    1d9a:	1f 91       	pop	r17
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	99 27       	eor	r25, r25
    1da2:	87 fd       	sbrc	r24, 7
    1da4:	90 95       	com	r25
    1da6:	08 95       	ret

00001da8 <strnlen_P>:
    1da8:	fc 01       	movw	r30, r24
    1daa:	05 90       	lpm	r0, Z+
    1dac:	61 50       	subi	r22, 0x01	; 1
    1dae:	70 40       	sbci	r23, 0x00	; 0
    1db0:	01 10       	cpse	r0, r1
    1db2:	d8 f7       	brcc	.-10     	; 0x1daa <strnlen_P+0x2>
    1db4:	80 95       	com	r24
    1db6:	90 95       	com	r25
    1db8:	8e 0f       	add	r24, r30
    1dba:	9f 1f       	adc	r25, r31
    1dbc:	08 95       	ret

00001dbe <memset>:
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <memset+0x6>
    1dc2:	6d 93       	st	X+, r22
    1dc4:	41 50       	subi	r20, 0x01	; 1
    1dc6:	50 40       	sbci	r21, 0x00	; 0
    1dc8:	e0 f7       	brcc	.-8      	; 0x1dc2 <memset+0x4>
    1dca:	08 95       	ret

00001dcc <strcmp>:
    1dcc:	fb 01       	movw	r30, r22
    1dce:	dc 01       	movw	r26, r24
    1dd0:	8d 91       	ld	r24, X+
    1dd2:	01 90       	ld	r0, Z+
    1dd4:	80 19       	sub	r24, r0
    1dd6:	01 10       	cpse	r0, r1
    1dd8:	d9 f3       	breq	.-10     	; 0x1dd0 <strcmp+0x4>
    1dda:	99 0b       	sbc	r25, r25
    1ddc:	08 95       	ret

00001dde <strcpy>:
    1dde:	fb 01       	movw	r30, r22
    1de0:	dc 01       	movw	r26, r24
    1de2:	01 90       	ld	r0, Z+
    1de4:	0d 92       	st	X+, r0
    1de6:	00 20       	and	r0, r0
    1de8:	e1 f7       	brne	.-8      	; 0x1de2 <strcpy+0x4>
    1dea:	08 95       	ret

00001dec <strnlen>:
    1dec:	fc 01       	movw	r30, r24
    1dee:	61 50       	subi	r22, 0x01	; 1
    1df0:	70 40       	sbci	r23, 0x00	; 0
    1df2:	01 90       	ld	r0, Z+
    1df4:	01 10       	cpse	r0, r1
    1df6:	d8 f7       	brcc	.-10     	; 0x1dee <strnlen+0x2>
    1df8:	80 95       	com	r24
    1dfa:	90 95       	com	r25
    1dfc:	8e 0f       	add	r24, r30
    1dfe:	9f 1f       	adc	r25, r31
    1e00:	08 95       	ret

00001e02 <fputc>:
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	8c 01       	movw	r16, r24
    1e0c:	eb 01       	movw	r28, r22
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	81 fd       	sbrc	r24, 1
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <fputc+0x18>
    1e14:	0f ef       	ldi	r16, 0xFF	; 255
    1e16:	1f ef       	ldi	r17, 0xFF	; 255
    1e18:	1a c0       	rjmp	.+52     	; 0x1e4e <fputc+0x4c>
    1e1a:	82 ff       	sbrs	r24, 2
    1e1c:	0d c0       	rjmp	.+26     	; 0x1e38 <fputc+0x36>
    1e1e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e20:	3f 81       	ldd	r19, Y+7	; 0x07
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	9d 81       	ldd	r25, Y+5	; 0x05
    1e26:	28 17       	cp	r18, r24
    1e28:	39 07       	cpc	r19, r25
    1e2a:	64 f4       	brge	.+24     	; 0x1e44 <fputc+0x42>
    1e2c:	e8 81       	ld	r30, Y
    1e2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e30:	01 93       	st	Z+, r16
    1e32:	f9 83       	std	Y+1, r31	; 0x01
    1e34:	e8 83       	st	Y, r30
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <fputc+0x42>
    1e38:	e8 85       	ldd	r30, Y+8	; 0x08
    1e3a:	f9 85       	ldd	r31, Y+9	; 0x09
    1e3c:	80 2f       	mov	r24, r16
    1e3e:	09 95       	icall
    1e40:	89 2b       	or	r24, r25
    1e42:	41 f7       	brne	.-48     	; 0x1e14 <fputc+0x12>
    1e44:	8e 81       	ldd	r24, Y+6	; 0x06
    1e46:	9f 81       	ldd	r25, Y+7	; 0x07
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	9f 83       	std	Y+7, r25	; 0x07
    1e4c:	8e 83       	std	Y+6, r24	; 0x06
    1e4e:	c8 01       	movw	r24, r16
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	08 95       	ret

00001e5a <sprintf>:
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	2e 97       	sbiw	r28, 0x0e	; 14
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	0d 89       	ldd	r16, Y+21	; 0x15
    1e74:	1e 89       	ldd	r17, Y+22	; 0x16
    1e76:	86 e0       	ldi	r24, 0x06	; 6
    1e78:	8c 83       	std	Y+4, r24	; 0x04
    1e7a:	1a 83       	std	Y+2, r17	; 0x02
    1e7c:	09 83       	std	Y+1, r16	; 0x01
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	9f e7       	ldi	r25, 0x7F	; 127
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	ce 01       	movw	r24, r28
    1e88:	49 96       	adiw	r24, 0x19	; 25
    1e8a:	ac 01       	movw	r20, r24
    1e8c:	6f 89       	ldd	r22, Y+23	; 0x17
    1e8e:	78 8d       	ldd	r23, Y+24	; 0x18
    1e90:	ce 01       	movw	r24, r28
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	9a d9       	rcall	.-3276   	; 0x11ca <vfprintf>
    1e96:	ef 81       	ldd	r30, Y+7	; 0x07
    1e98:	f8 85       	ldd	r31, Y+8	; 0x08
    1e9a:	e0 0f       	add	r30, r16
    1e9c:	f1 1f       	adc	r31, r17
    1e9e:	10 82       	st	Z, r1
    1ea0:	2e 96       	adiw	r28, 0x0e	; 14
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	08 95       	ret

00001eb6 <vsnprintf>:
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	8c 01       	movw	r16, r24
    1ed0:	ca 01       	movw	r24, r20
    1ed2:	46 e0       	ldi	r20, 0x06	; 6
    1ed4:	4c 83       	std	Y+4, r20	; 0x04
    1ed6:	1a 83       	std	Y+2, r17	; 0x02
    1ed8:	09 83       	std	Y+1, r16	; 0x01
    1eda:	77 ff       	sbrs	r23, 7
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <vsnprintf+0x2c>
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	70 e8       	ldi	r23, 0x80	; 128
    1ee2:	61 50       	subi	r22, 0x01	; 1
    1ee4:	71 09       	sbc	r23, r1
    1ee6:	7e 83       	std	Y+6, r23	; 0x06
    1ee8:	6d 83       	std	Y+5, r22	; 0x05
    1eea:	a9 01       	movw	r20, r18
    1eec:	bc 01       	movw	r22, r24
    1eee:	ce 01       	movw	r24, r28
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	6b d9       	rcall	.-3370   	; 0x11ca <vfprintf>
    1ef4:	4d 81       	ldd	r20, Y+5	; 0x05
    1ef6:	5e 81       	ldd	r21, Y+6	; 0x06
    1ef8:	57 fd       	sbrc	r21, 7
    1efa:	0a c0       	rjmp	.+20     	; 0x1f10 <vsnprintf+0x5a>
    1efc:	2f 81       	ldd	r18, Y+7	; 0x07
    1efe:	38 85       	ldd	r19, Y+8	; 0x08
    1f00:	42 17       	cp	r20, r18
    1f02:	53 07       	cpc	r21, r19
    1f04:	0c f4       	brge	.+2      	; 0x1f08 <vsnprintf+0x52>
    1f06:	9a 01       	movw	r18, r20
    1f08:	f8 01       	movw	r30, r16
    1f0a:	e2 0f       	add	r30, r18
    1f0c:	f3 1f       	adc	r31, r19
    1f0e:	10 82       	st	Z, r1
    1f10:	2e 96       	adiw	r28, 0x0e	; 14
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	08 95       	ret

00001f26 <__ultoa_invert>:
    1f26:	fa 01       	movw	r30, r20
    1f28:	aa 27       	eor	r26, r26
    1f2a:	28 30       	cpi	r18, 0x08	; 8
    1f2c:	51 f1       	breq	.+84     	; 0x1f82 <__ultoa_invert+0x5c>
    1f2e:	20 31       	cpi	r18, 0x10	; 16
    1f30:	81 f1       	breq	.+96     	; 0x1f92 <__ultoa_invert+0x6c>
    1f32:	e8 94       	clt
    1f34:	6f 93       	push	r22
    1f36:	6e 7f       	andi	r22, 0xFE	; 254
    1f38:	6e 5f       	subi	r22, 0xFE	; 254
    1f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f40:	af 4f       	sbci	r26, 0xFF	; 255
    1f42:	b1 e0       	ldi	r27, 0x01	; 1
    1f44:	3e d0       	rcall	.+124    	; 0x1fc2 <__ultoa_invert+0x9c>
    1f46:	b4 e0       	ldi	r27, 0x04	; 4
    1f48:	3c d0       	rcall	.+120    	; 0x1fc2 <__ultoa_invert+0x9c>
    1f4a:	67 0f       	add	r22, r23
    1f4c:	78 1f       	adc	r23, r24
    1f4e:	89 1f       	adc	r24, r25
    1f50:	9a 1f       	adc	r25, r26
    1f52:	a1 1d       	adc	r26, r1
    1f54:	68 0f       	add	r22, r24
    1f56:	79 1f       	adc	r23, r25
    1f58:	8a 1f       	adc	r24, r26
    1f5a:	91 1d       	adc	r25, r1
    1f5c:	a1 1d       	adc	r26, r1
    1f5e:	6a 0f       	add	r22, r26
    1f60:	71 1d       	adc	r23, r1
    1f62:	81 1d       	adc	r24, r1
    1f64:	91 1d       	adc	r25, r1
    1f66:	a1 1d       	adc	r26, r1
    1f68:	20 d0       	rcall	.+64     	; 0x1faa <__ultoa_invert+0x84>
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <__ultoa_invert+0x48>
    1f6c:	68 94       	set
    1f6e:	3f 91       	pop	r19
    1f70:	2a e0       	ldi	r18, 0x0A	; 10
    1f72:	26 9f       	mul	r18, r22
    1f74:	11 24       	eor	r1, r1
    1f76:	30 19       	sub	r19, r0
    1f78:	30 5d       	subi	r19, 0xD0	; 208
    1f7a:	31 93       	st	Z+, r19
    1f7c:	de f6       	brtc	.-74     	; 0x1f34 <__ultoa_invert+0xe>
    1f7e:	cf 01       	movw	r24, r30
    1f80:	08 95       	ret
    1f82:	46 2f       	mov	r20, r22
    1f84:	47 70       	andi	r20, 0x07	; 7
    1f86:	40 5d       	subi	r20, 0xD0	; 208
    1f88:	41 93       	st	Z+, r20
    1f8a:	b3 e0       	ldi	r27, 0x03	; 3
    1f8c:	0f d0       	rcall	.+30     	; 0x1fac <__ultoa_invert+0x86>
    1f8e:	c9 f7       	brne	.-14     	; 0x1f82 <__ultoa_invert+0x5c>
    1f90:	f6 cf       	rjmp	.-20     	; 0x1f7e <__ultoa_invert+0x58>
    1f92:	46 2f       	mov	r20, r22
    1f94:	4f 70       	andi	r20, 0x0F	; 15
    1f96:	40 5d       	subi	r20, 0xD0	; 208
    1f98:	4a 33       	cpi	r20, 0x3A	; 58
    1f9a:	18 f0       	brcs	.+6      	; 0x1fa2 <__ultoa_invert+0x7c>
    1f9c:	49 5d       	subi	r20, 0xD9	; 217
    1f9e:	31 fd       	sbrc	r19, 1
    1fa0:	40 52       	subi	r20, 0x20	; 32
    1fa2:	41 93       	st	Z+, r20
    1fa4:	02 d0       	rcall	.+4      	; 0x1faa <__ultoa_invert+0x84>
    1fa6:	a9 f7       	brne	.-22     	; 0x1f92 <__ultoa_invert+0x6c>
    1fa8:	ea cf       	rjmp	.-44     	; 0x1f7e <__ultoa_invert+0x58>
    1faa:	b4 e0       	ldi	r27, 0x04	; 4
    1fac:	a6 95       	lsr	r26
    1fae:	97 95       	ror	r25
    1fb0:	87 95       	ror	r24
    1fb2:	77 95       	ror	r23
    1fb4:	67 95       	ror	r22
    1fb6:	ba 95       	dec	r27
    1fb8:	c9 f7       	brne	.-14     	; 0x1fac <__ultoa_invert+0x86>
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	61 05       	cpc	r22, r1
    1fbe:	71 05       	cpc	r23, r1
    1fc0:	08 95       	ret
    1fc2:	9b 01       	movw	r18, r22
    1fc4:	ac 01       	movw	r20, r24
    1fc6:	0a 2e       	mov	r0, r26
    1fc8:	06 94       	lsr	r0
    1fca:	57 95       	ror	r21
    1fcc:	47 95       	ror	r20
    1fce:	37 95       	ror	r19
    1fd0:	27 95       	ror	r18
    1fd2:	ba 95       	dec	r27
    1fd4:	c9 f7       	brne	.-14     	; 0x1fc8 <__ultoa_invert+0xa2>
    1fd6:	62 0f       	add	r22, r18
    1fd8:	73 1f       	adc	r23, r19
    1fda:	84 1f       	adc	r24, r20
    1fdc:	95 1f       	adc	r25, r21
    1fde:	a0 1d       	adc	r26, r0
    1fe0:	08 95       	ret

00001fe2 <_exit>:
    1fe2:	f8 94       	cli

00001fe4 <__stop_program>:
    1fe4:	ff cf       	rjmp	.-2      	; 0x1fe4 <__stop_program>
