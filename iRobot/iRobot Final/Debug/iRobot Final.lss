
iRobot Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d8  00800100  000023ca  0000245e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008003d8  008003d8  00002736  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00002738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa2  00000000  00000000  00005984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006426  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00006455  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d0a  00000000  00000000  0000675d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000106c  00000000  00000000  0000a467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000214f  00000000  00000000  0000b4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000844  00000000  00000000  0000d624  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c81  00000000  00000000  0000de68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000027a9  00000000  00000000  0000eae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000288  00000000  00000000  00011292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	4c c5       	rjmp	.+2712   	; 0xabe <__vector_9>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6b c5       	rjmp	.+2774   	; 0xb04 <__vector_11>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c0       	rjmp	.+396    	; 0x1ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__c.2006>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.2004>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	13 e0       	ldi	r17, 0x03	; 3
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	ea ec       	ldi	r30, 0xCA	; 202
     1a2:	f3 e2       	ldi	r31, 0x23	; 35
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a8 3d       	cpi	r26, 0xD8	; 216
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	24 e0       	ldi	r18, 0x04	; 4
     1b6:	a8 ed       	ldi	r26, 0xD8	; 216
     1b8:	b3 e0       	ldi	r27, 0x03	; 3
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a3 33       	cpi	r26, 0x33	; 51
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	03 d0       	rcall	.+6      	; 0x1cc <main>
     1c6:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <main>:
	float distance;
	float width;
}object_t;

int main(void)
{
     1cc:	2f 92       	push	r2
     1ce:	3f 92       	push	r3
     1d0:	4f 92       	push	r4
     1d2:	5f 92       	push	r5
     1d4:	6f 92       	push	r6
     1d6:	7f 92       	push	r7
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	c1 59       	subi	r28, 0x91	; 145
     1f6:	d1 09       	sbc	r29, r1
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
	
	serial_init(); // Initialize the Serial Communications
     202:	c8 d3       	rcall	.+1936   	; 0x994 <serial_init>
	
	ADC_init(); // Initialize the IR sensor
     204:	f3 d3       	rcall	.+2022   	; 0x9ec <ADC_init>
	
	ping_init(); // Initialize the Ping))) sensor
     206:	79 d4       	rcall	.+2290   	; 0xafa <ping_init>
	
	lcd_init(); // Initialize the LCD
     208:	e3 d1       	rcall	.+966    	; 0x5d0 <lcd_init>
	
	init_push_buttons(); // Initialize the buttons
     20a:	70 d4       	rcall	.+2272   	; 0xaec <init_push_buttons>
	
	timer3_init(); // Initialize the servo motor
     20c:	f5 d4       	rcall	.+2538   	; 0xbf8 <timer3_init>
	
	song_init();
     20e:	17 d4       	rcall	.+2094   	; 0xa3e <song_init>
	
	oi_t *sensor_data = oi_alloc();
     210:	aa d2       	rcall	.+1364   	; 0x766 <oi_alloc>
     212:	c0 57       	subi	r28, 0x70	; 112
     214:	df 4f       	sbci	r29, 0xFF	; 255
     216:	99 83       	std	Y+1, r25	; 0x01
     218:	88 83       	st	Y, r24
     21a:	c0 59       	subi	r28, 0x90	; 144
     21c:	d0 40       	sbci	r29, 0x00	; 0
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
     21e:	8e d3       	rcall	.+1820   	; 0x93c <oi_init>
	int count = 0;
	char* numRecieved;
	
	char echoString[20];
	
	servo_turn(degrees);
     220:	80 e5       	ldi	r24, 0x50	; 80
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	ca d4       	rcall	.+2452   	; 0xbba <servo_turn>
	
	char OutputString[100];
 
	song_init();
     226:	0b d4       	rcall	.+2070   	; 0xa3e <song_init>
	oi_byte_tx(141);
     228:	8d e8       	ldi	r24, 0x8D	; 141
     22a:	a6 d2       	rcall	.+1356   	; 0x778 <oi_byte_tx>
	oi_byte_tx(1);
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	a4 d2       	rcall	.+1352   	; 0x778 <oi_byte_tx>
	song_init();
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     230:	0f 2e       	mov	r0, r31
     232:	f0 e5       	ldi	r31, 0x50	; 80
     234:	cf 2e       	mov	r12, r31
     236:	d1 2c       	mov	r13, r1
     238:	f0 2d       	mov	r31, r0
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     23a:	0f 2e       	mov	r0, r31
     23c:	f6 e0       	ldi	r31, 0x06	; 6
     23e:	2f 2e       	mov	r2, r31
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	3f 2e       	mov	r3, r31
     244:	f0 2d       	mov	r31, r0
     246:	44 24       	eor	r4, r4
     248:	43 94       	inc	r4
     24a:	51 2c       	mov	r5, r1
     24c:	4c 0e       	add	r4, r28
     24e:	5d 1e       	adc	r5, r29
	song_init();
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     250:	0f 2e       	mov	r0, r31
     252:	f3 e0       	ldi	r31, 0x03	; 3
     254:	6f 2e       	mov	r6, r31
     256:	71 2c       	mov	r7, r1
     258:	f0 2d       	mov	r31, r0
     25a:	91 2c       	mov	r9, r1
     25c:	a1 2c       	mov	r10, r1
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     25e:	b4 2c       	mov	r11, r4
     260:	85 2c       	mov	r8, r5
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-47) * 10;
			//lprintf("actual %d\n", actualnumber);
			turn_clockwise(sensor_data, actualnumber);
			actualnumber -= 10;
			sprintf(turnMessage,"Turned right %d degrees", actualnumber);
     262:	ce 01       	movw	r24, r28
     264:	8b 59       	subi	r24, 0x9B	; 155
     266:	9f 4f       	sbci	r25, 0xFF	; 255
     268:	c3 57       	subi	r28, 0x73	; 115
     26a:	df 4f       	sbci	r29, 0xFF	; 255
     26c:	99 83       	std	Y+1, r25	; 0x01
     26e:	88 83       	st	Y, r24
     270:	cd 58       	subi	r28, 0x8D	; 141
     272:	d0 40       	sbci	r29, 0x00	; 0
		lprintf("Left: %d\nRight: %d", sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal);
		*/
		//numRecieved = USART_RecieveString(count);
		//USART_SendString(numRecieved);
		
		serialInput = USART_Receive();
     274:	9f d3       	rcall	.+1854   	; 0x9b4 <USART_Receive>
     276:	c1 57       	subi	r28, 0x71	; 113
     278:	df 4f       	sbci	r29, 0xFF	; 255
     27a:	88 83       	st	Y, r24
     27c:	cf 58       	subi	r28, 0x8F	; 143
     27e:	d0 40       	sbci	r29, 0x00	; 0
		//if (serialInput) {
		//	USART_SendString(serialInput);
		//}
		
		//Big Scan
		if(serialInput == 'S')
     280:	83 35       	cpi	r24, 0x53	; 83
     282:	09 f0       	breq	.+2      	; 0x286 <main+0xba>
     284:	43 c0       	rjmp	.+134    	; 0x30c <main+0x140>
     286:	38 c0       	rjmp	.+112    	; 0x2f8 <main+0x12c>
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	b8 d3       	rcall	.+1904   	; 0x9fc <ADC_read>
     28c:	e8 0e       	add	r14, r24
     28e:	f9 1e       	adc	r15, r25
					wait_ms(20);
     290:	84 e1       	ldi	r24, 0x14	; 20
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	fe d3       	rcall	.+2044   	; 0xa92 <wait_ms>
     296:	01 50       	subi	r16, 0x01	; 1
     298:	11 09       	sbc	r17, r1
		{
			while(degrees <= 180) {
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     29a:	b1 f7       	brne	.-20     	; 0x288 <main+0xbc>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     29c:	97 01       	movw	r18, r14
     29e:	ab ea       	ldi	r26, 0xAB	; 171
     2a0:	ba ea       	ldi	r27, 0xAA	; 170
     2a2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__umulhisi3>
     2a6:	96 95       	lsr	r25
     2a8:	87 95       	ror	r24
     2aa:	b4 d3       	rcall	.+1896   	; 0xa14 <calcCm>
     2ac:	16 2f       	mov	r17, r22
     2ae:	07 2f       	mov	r16, r23
     2b0:	f8 2e       	mov	r15, r24
     2b2:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     2b4:	63 d4       	rcall	.+2246   	; 0xb7c <ping_read>
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	7f 93       	push	r23
     2bc:	6f 93       	push	r22
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	df 92       	push	r13
     2c8:	cf 92       	push	r12
     2ca:	3f 92       	push	r3
     2cc:	2f 92       	push	r2
     2ce:	5f 92       	push	r5
     2d0:	4f 92       	push	r4
     2d2:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
		
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
		
				USART_SendString(OutputString);
     2d6:	8b 2d       	mov	r24, r11
     2d8:	98 2d       	mov	r25, r8
     2da:	72 d3       	rcall	.+1764   	; 0x9c0 <USART_SendString>
		
				degrees += 2;
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	c9 0e       	add	r12, r25
     2e0:	d1 1c       	adc	r13, r1
		
				servo_turn(degrees);
     2e2:	c6 01       	movw	r24, r12
     2e4:	6a d4       	rcall	.+2260   	; 0xbba <servo_turn>
		//}
		
		//Big Scan
		if(serialInput == 'S')
		{
			while(degrees <= 180) {
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	95 eb       	ldi	r25, 0xB5	; 181
     2f2:	c9 16       	cp	r12, r25
     2f4:	d1 04       	cpc	r13, r1
     2f6:	24 f4       	brge	.+8      	; 0x300 <main+0x134>
	song_init();
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     2f8:	83 01       	movw	r16, r6
     2fa:	e9 2c       	mov	r14, r9
     2fc:	fa 2c       	mov	r15, r10
     2fe:	c4 cf       	rjmp	.-120    	; 0x288 <main+0xbc>
		
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     300:	8a e5       	ldi	r24, 0x5A	; 90
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	5a d4       	rcall	.+2228   	; 0xbba <servo_turn>
				degrees += 2;
		
				servo_turn(degrees);

			}
			degrees = 0;
     306:	c1 2c       	mov	r12, r1
     308:	d1 2c       	mov	r13, r1
     30a:	74 c0       	rjmp	.+232    	; 0x3f4 <main+0x228>
			servo_turn(90);
		}
		
		//Small Scan
		if(serialInput == 's')
     30c:	c1 57       	subi	r28, 0x71	; 113
     30e:	df 4f       	sbci	r29, 0xFF	; 255
     310:	28 81       	ld	r18, Y
     312:	cf 58       	subi	r28, 0x8F	; 143
     314:	d0 40       	sbci	r29, 0x00	; 0
     316:	23 37       	cpi	r18, 0x73	; 115
     318:	09 f0       	breq	.+2      	; 0x31c <main+0x150>
     31a:	4c c0       	rjmp	.+152    	; 0x3b4 <main+0x1e8>
		{
			degrees = 45;
			servo_turn(degrees);
     31c:	8d e2       	ldi	r24, 0x2D	; 45
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	4c d4       	rcall	.+2200   	; 0xbba <servo_turn>
		}
		
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
     322:	0f 2e       	mov	r0, r31
     324:	fd e2       	ldi	r31, 0x2D	; 45
     326:	cf 2e       	mov	r12, r31
     328:	d1 2c       	mov	r13, r1
     32a:	f0 2d       	mov	r31, r0
     32c:	39 c0       	rjmp	.+114    	; 0x3a0 <main+0x1d4>
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	65 d3       	rcall	.+1738   	; 0x9fc <ADC_read>
     332:	08 0f       	add	r16, r24
     334:	19 1f       	adc	r17, r25
					wait_ms(20);
     336:	84 e1       	ldi	r24, 0x14	; 20
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	ab d3       	rcall	.+1878   	; 0xa92 <wait_ms>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	e8 1a       	sub	r14, r24
     340:	f1 08       	sbc	r15, r1
			servo_turn(degrees);
			while(degrees <= 135) {
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     342:	a9 f7       	brne	.-22     	; 0x32e <main+0x162>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     344:	98 01       	movw	r18, r16
     346:	ab ea       	ldi	r26, 0xAB	; 171
     348:	ba ea       	ldi	r27, 0xAA	; 170
     34a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__umulhisi3>
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	60 d3       	rcall	.+1728   	; 0xa14 <calcCm>
     354:	16 2f       	mov	r17, r22
     356:	07 2f       	mov	r16, r23
     358:	f8 2e       	mov	r15, r24
     35a:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     35c:	0f d4       	rcall	.+2078   	; 0xb7c <ping_read>
				
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     35e:	9f 93       	push	r25
     360:	8f 93       	push	r24
     362:	7f 93       	push	r23
     364:	6f 93       	push	r22
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	df 92       	push	r13
     370:	cf 92       	push	r12
     372:	3f 92       	push	r3
     374:	2f 92       	push	r2
     376:	5f 92       	push	r5
     378:	4f 92       	push	r4
     37a:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
				
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
				
				USART_SendString(OutputString);
     37e:	8b 2d       	mov	r24, r11
     380:	98 2d       	mov	r25, r8
     382:	1e d3       	rcall	.+1596   	; 0x9c0 <USART_SendString>
				
				degrees += 2;
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	c9 0e       	add	r12, r25
     388:	d1 1c       	adc	r13, r1
				
				servo_turn(degrees);
     38a:	c6 01       	movw	r24, r12
     38c:	16 d4       	rcall	.+2092   	; 0xbba <servo_turn>
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
			servo_turn(degrees);
			while(degrees <= 135) {
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	de bf       	out	0x3e, r29	; 62
     394:	0f be       	out	0x3f, r0	; 63
     396:	cd bf       	out	0x3d, r28	; 61
     398:	99 e8       	ldi	r25, 0x89	; 137
     39a:	c9 16       	cp	r12, r25
     39c:	d1 04       	cpc	r13, r1
     39e:	21 f0       	breq	.+8      	; 0x3a8 <main+0x1dc>
	song_init();
	
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
	
	int degrees = 80;
     3a0:	73 01       	movw	r14, r6
     3a2:	09 2d       	mov	r16, r9
     3a4:	1a 2d       	mov	r17, r10
     3a6:	c3 cf       	rjmp	.-122    	; 0x32e <main+0x162>
				
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     3a8:	8a e5       	ldi	r24, 0x5A	; 90
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	06 d4       	rcall	.+2060   	; 0xbba <servo_turn>
				degrees += 2;
				
				servo_turn(degrees);

			}
			degrees = 0;
     3ae:	c1 2c       	mov	r12, r1
     3b0:	d1 2c       	mov	r13, r1
     3b2:	60 c0       	rjmp	.+192    	; 0x474 <main+0x2a8>
			servo_turn(90);
		}
		
		if(serialInput == 'f')
     3b4:	c1 57       	subi	r28, 0x71	; 113
     3b6:	df 4f       	sbci	r29, 0xFF	; 255
     3b8:	28 81       	ld	r18, Y
     3ba:	cf 58       	subi	r28, 0x8F	; 143
     3bc:	d0 40       	sbci	r29, 0x00	; 0
     3be:	26 36       	cpi	r18, 0x66	; 102
     3c0:	c9 f4       	brne	.+50     	; 0x3f4 <main+0x228>
		{
						
			//int tempDistance = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     3c2:	f8 d2       	rcall	.+1520   	; 0x9b4 <USART_Receive>
		if(serialInput == 'f')
		{
						
			//int tempDistance = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
     3c4:	88 23       	and	r24, r24
     3c6:	e9 f3       	breq	.-6      	; 0x3c2 <main+0x1f6>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-48) * 10;
     3c8:	28 2f       	mov	r18, r24
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	b9 01       	movw	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	77 1f       	adc	r23, r23
     3d6:	66 0f       	add	r22, r22
     3d8:	77 1f       	adc	r23, r23
     3da:	26 0f       	add	r18, r22
     3dc:	37 1f       	adc	r19, r23
     3de:	b9 01       	movw	r22, r18
     3e0:	60 5e       	subi	r22, 0xE0	; 224
     3e2:	71 40       	sbci	r23, 0x01	; 1
			move_forward(sensor_data, actualnumber);
     3e4:	c0 57       	subi	r28, 0x70	; 112
     3e6:	df 4f       	sbci	r29, 0xFF	; 255
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	c0 59       	subi	r28, 0x90	; 144
     3ee:	d0 40       	sbci	r29, 0x00	; 0
     3f0:	02 d5       	rcall	.+2564   	; 0xdf6 <move_forward>
     3f2:	80 c0       	rjmp	.+256    	; 0x4f4 <main+0x328>
		}
		
		if(serialInput == 'r')
     3f4:	c1 57       	subi	r28, 0x71	; 113
     3f6:	df 4f       	sbci	r29, 0xFF	; 255
     3f8:	88 81       	ld	r24, Y
     3fa:	cf 58       	subi	r28, 0x8F	; 143
     3fc:	d0 40       	sbci	r29, 0x00	; 0
     3fe:	82 37       	cpi	r24, 0x72	; 114
     400:	c9 f5       	brne	.+114    	; 0x474 <main+0x2a8>
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];			
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     402:	d8 d2       	rcall	.+1456   	; 0x9b4 <USART_Receive>
		if(serialInput == 'r')
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];			
			char nextletter = 0;
			while(nextletter == 0)
     404:	88 23       	and	r24, r24
     406:	e9 f3       	breq	.-6      	; 0x402 <main+0x236>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-47) * 10;
     408:	28 2f       	mov	r18, r24
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	89 01       	movw	r16, r18
     412:	00 0f       	add	r16, r16
     414:	11 1f       	adc	r17, r17
     416:	00 0f       	add	r16, r16
     418:	11 1f       	adc	r17, r17
     41a:	02 0f       	add	r16, r18
     41c:	13 1f       	adc	r17, r19
     41e:	b8 01       	movw	r22, r16
     420:	66 5d       	subi	r22, 0xD6	; 214
     422:	71 40       	sbci	r23, 0x01	; 1
			//lprintf("actual %d\n", actualnumber);
			turn_clockwise(sensor_data, actualnumber);
     424:	c0 57       	subi	r28, 0x70	; 112
     426:	df 4f       	sbci	r29, 0xFF	; 255
     428:	88 81       	ld	r24, Y
     42a:	99 81       	ldd	r25, Y+1	; 0x01
     42c:	c0 59       	subi	r28, 0x90	; 144
     42e:	d0 40       	sbci	r29, 0x00	; 0
     430:	f7 d3       	rcall	.+2030   	; 0xc20 <turn_clockwise>
			actualnumber -= 10;
     432:	00 5e       	subi	r16, 0xE0	; 224
     434:	11 40       	sbci	r17, 0x01	; 1
			sprintf(turnMessage,"Turned right %d degrees", actualnumber);
     436:	1f 93       	push	r17
     438:	0f 93       	push	r16
     43a:	83 e1       	ldi	r24, 0x13	; 19
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	c2 57       	subi	r28, 0x72	; 114
     444:	df 4f       	sbci	r29, 0xFF	; 255
     446:	88 81       	ld	r24, Y
     448:	ce 58       	subi	r28, 0x8E	; 142
     44a:	d0 40       	sbci	r29, 0x00	; 0
     44c:	8f 93       	push	r24
     44e:	c3 57       	subi	r28, 0x73	; 115
     450:	df 4f       	sbci	r29, 0xFF	; 255
     452:	98 81       	ld	r25, Y
     454:	cd 58       	subi	r28, 0x8D	; 141
     456:	d0 40       	sbci	r29, 0x00	; 0
     458:	9f 93       	push	r25
     45a:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(turnMessage);
     45e:	ce 01       	movw	r24, r28
     460:	8b 59       	subi	r24, 0x9B	; 155
     462:	9f 4f       	sbci	r25, 0xFF	; 255
     464:	ad d2       	rcall	.+1370   	; 0x9c0 <USART_SendString>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	51 c0       	rjmp	.+162    	; 0x516 <main+0x34a>
		}
		
		if(serialInput == 'l')
     474:	c1 57       	subi	r28, 0x71	; 113
     476:	df 4f       	sbci	r29, 0xFF	; 255
     478:	28 81       	ld	r18, Y
     47a:	cf 58       	subi	r28, 0x8F	; 143
     47c:	d0 40       	sbci	r29, 0x00	; 0
     47e:	2c 36       	cpi	r18, 0x6C	; 108
     480:	c9 f5       	brne	.+114    	; 0x4f4 <main+0x328>
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];	
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     482:	98 d2       	rcall	.+1328   	; 0x9b4 <USART_Receive>
		if(serialInput == 'l')
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];	
			char nextletter = 0;
			while(nextletter == 0)
     484:	88 23       	and	r24, r24
     486:	e9 f3       	breq	.-6      	; 0x482 <main+0x2b6>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-47) * 10;
     488:	28 2f       	mov	r18, r24
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	89 01       	movw	r16, r18
     492:	00 0f       	add	r16, r16
     494:	11 1f       	adc	r17, r17
     496:	00 0f       	add	r16, r16
     498:	11 1f       	adc	r17, r17
     49a:	02 0f       	add	r16, r18
     49c:	13 1f       	adc	r17, r19
     49e:	b8 01       	movw	r22, r16
     4a0:	66 5d       	subi	r22, 0xD6	; 214
     4a2:	71 40       	sbci	r23, 0x01	; 1
			turn_counterclockwise(sensor_data, actualnumber);
     4a4:	c0 57       	subi	r28, 0x70	; 112
     4a6:	df 4f       	sbci	r29, 0xFF	; 255
     4a8:	88 81       	ld	r24, Y
     4aa:	99 81       	ldd	r25, Y+1	; 0x01
     4ac:	c0 59       	subi	r28, 0x90	; 144
     4ae:	d0 40       	sbci	r29, 0x00	; 0
     4b0:	f4 d3       	rcall	.+2024   	; 0xc9a <turn_counterclockwise>
			actualnumber -= 10;
     4b2:	00 5e       	subi	r16, 0xE0	; 224
     4b4:	11 40       	sbci	r17, 0x01	; 1
			sprintf(turnMessage,"Turned left %d degrees", actualnumber);
     4b6:	1f 93       	push	r17
     4b8:	0f 93       	push	r16
     4ba:	8b e2       	ldi	r24, 0x2B	; 43
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	9f 93       	push	r25
     4c0:	8f 93       	push	r24
     4c2:	c2 57       	subi	r28, 0x72	; 114
     4c4:	df 4f       	sbci	r29, 0xFF	; 255
     4c6:	88 81       	ld	r24, Y
     4c8:	ce 58       	subi	r28, 0x8E	; 142
     4ca:	d0 40       	sbci	r29, 0x00	; 0
     4cc:	8f 93       	push	r24
     4ce:	c3 57       	subi	r28, 0x73	; 115
     4d0:	df 4f       	sbci	r29, 0xFF	; 255
     4d2:	98 81       	ld	r25, Y
     4d4:	cd 58       	subi	r28, 0x8D	; 141
     4d6:	d0 40       	sbci	r29, 0x00	; 0
     4d8:	9f 93       	push	r25
     4da:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(turnMessage);			
     4de:	ce 01       	movw	r24, r28
     4e0:	8b 59       	subi	r24, 0x9B	; 155
     4e2:	9f 4f       	sbci	r25, 0xFF	; 255
     4e4:	6d d2       	rcall	.+1242   	; 0x9c0 <USART_SendString>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	c0 ce       	rjmp	.-640    	; 0x274 <main+0xa8>
		}
		// USART_SendString("Small Scan Complete");
		
		if(serialInput == 'c' || serialInput == '!') {
     4f4:	c1 57       	subi	r28, 0x71	; 113
     4f6:	df 4f       	sbci	r29, 0xFF	; 255
     4f8:	28 81       	ld	r18, Y
     4fa:	cf 58       	subi	r28, 0x8F	; 143
     4fc:	d0 40       	sbci	r29, 0x00	; 0
     4fe:	23 36       	cpi	r18, 0x63	; 99
     500:	11 f0       	breq	.+4      	; 0x506 <main+0x33a>
     502:	21 32       	cpi	r18, 0x21	; 33
     504:	41 f4       	brne	.+16     	; 0x516 <main+0x34a>
			USART_Flush();
     506:	6c d2       	rcall	.+1240   	; 0x9e0 <USART_Flush>
			lprintf("Flushed!\n");
     508:	82 e4       	ldi	r24, 0x42	; 66
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	ac d0       	rcall	.+344    	; 0x66a <lprintf>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
		}
		
		if(serialInput == 'b')
     516:	c1 57       	subi	r28, 0x71	; 113
     518:	df 4f       	sbci	r29, 0xFF	; 255
     51a:	88 81       	ld	r24, Y
     51c:	cf 58       	subi	r28, 0x8F	; 143
     51e:	d0 40       	sbci	r29, 0x00	; 0
     520:	82 36       	cpi	r24, 0x62	; 98
     522:	51 f4       	brne	.+20     	; 0x538 <main+0x36c>
		{
			move_backward(sensor_data, 5);
     524:	65 e0       	ldi	r22, 0x05	; 5
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	c0 57       	subi	r28, 0x70	; 112
     52a:	df 4f       	sbci	r29, 0xFF	; 255
     52c:	88 81       	ld	r24, Y
     52e:	99 81       	ldd	r25, Y+1	; 0x01
     530:	c0 59       	subi	r28, 0x90	; 144
     532:	d0 40       	sbci	r29, 0x00	; 0
     534:	2a d4       	rcall	.+2132   	; 0xd8a <move_backward>
     536:	9e ce       	rjmp	.-708    	; 0x274 <main+0xa8>
				
		if(serialInput == 'd')
		{
			void reportData(sensor_data);
		}
		if(serialInput == 'Q')
     538:	c1 57       	subi	r28, 0x71	; 113
     53a:	df 4f       	sbci	r29, 0xFF	; 255
     53c:	98 81       	ld	r25, Y
     53e:	cf 58       	subi	r28, 0x8F	; 143
     540:	d0 40       	sbci	r29, 0x00	; 0
     542:	91 35       	cpi	r25, 0x51	; 81
     544:	09 f0       	breq	.+2      	; 0x548 <main+0x37c>
     546:	96 ce       	rjmp	.-724    	; 0x274 <main+0xa8>
		{
			oi_free(sensor_data);
     548:	c0 57       	subi	r28, 0x70	; 112
     54a:	df 4f       	sbci	r29, 0xFF	; 255
     54c:	88 81       	ld	r24, Y
     54e:	99 81       	ldd	r25, Y+1	; 0x01
     550:	c0 59       	subi	r28, 0x90	; 144
     552:	d0 40       	sbci	r29, 0x00	; 0
     554:	0e d1       	rcall	.+540    	; 0x772 <oi_free>
			return;
		}
	}
     556:	cf 56       	subi	r28, 0x6F	; 111
     558:	df 4f       	sbci	r29, 0xFF	; 255
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	5f 90       	pop	r5
     582:	4f 90       	pop	r4
     584:	3f 90       	pop	r3
     586:	2f 90       	pop	r2
     588:	08 95       	ret

0000058a <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     58a:	de 9a       	sbi	0x1b, 6	; 27
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	81 d2       	rcall	.+1282   	; 0xa92 <wait_ms>
     590:	de 98       	cbi	0x1b, 6	; 27
     592:	8b b3       	in	r24, 0x1b	; 27
     594:	80 7f       	andi	r24, 0xF0	; 240
     596:	8b bb       	out	0x1b, r24	; 27
     598:	08 95       	ret

0000059a <lcd_command>:
     59a:	cf 93       	push	r28
     59c:	c8 2f       	mov	r28, r24
     59e:	dc 98       	cbi	0x1b, 4	; 27
     5a0:	8b b3       	in	r24, 0x1b	; 27
     5a2:	9c 2f       	mov	r25, r28
     5a4:	92 95       	swap	r25
     5a6:	9f 70       	andi	r25, 0x0F	; 15
     5a8:	89 2b       	or	r24, r25
     5aa:	8b bb       	out	0x1b, r24	; 27
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	ed df       	rcall	.-38     	; 0x58a <lcd_toggle_clear>
     5b0:	8b b3       	in	r24, 0x1b	; 27
     5b2:	cf 70       	andi	r28, 0x0F	; 15
     5b4:	c8 2b       	or	r28, r24
     5b6:	cb bb       	out	0x1b, r28	; 27
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	e7 df       	rcall	.-50     	; 0x58a <lcd_toggle_clear>
     5bc:	dc 9a       	sbi	0x1b, 4	; 27
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <lcd_clear>:
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	ea df       	rcall	.-44     	; 0x59a <lcd_command>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	63 c2       	rjmp	.+1222   	; 0xa92 <wait_ms>

000005cc <lcd_home_line1>:
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	e5 cf       	rjmp	.-54     	; 0x59a <lcd_command>

000005d0 <lcd_init>:
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	8a bb       	out	0x1a, r24	; 26
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	8b bb       	out	0x1b, r24	; 27
     5d8:	de 9a       	sbi	0x1b, 6	; 27
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	59 d2       	rcall	.+1202   	; 0xa92 <wait_ms>
     5e0:	de 98       	cbi	0x1b, 6	; 27
     5e2:	85 e0       	ldi	r24, 0x05	; 5
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	55 d2       	rcall	.+1194   	; 0xa92 <wait_ms>
     5e8:	de 9a       	sbi	0x1b, 6	; 27
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	51 d2       	rcall	.+1186   	; 0xa92 <wait_ms>
     5f0:	de 98       	cbi	0x1b, 6	; 27
     5f2:	de 9a       	sbi	0x1b, 6	; 27
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	4c d2       	rcall	.+1176   	; 0xa92 <wait_ms>
     5fa:	de 98       	cbi	0x1b, 6	; 27
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	8b bb       	out	0x1b, r24	; 27
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	c3 df       	rcall	.-122    	; 0x58a <lcd_toggle_clear>
     604:	8b b3       	in	r24, 0x1b	; 27
     606:	8b bb       	out	0x1b, r24	; 27
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	bf df       	rcall	.-130    	; 0x58a <lcd_toggle_clear>
     60c:	8b b3       	in	r24, 0x1b	; 27
     60e:	8e 60       	ori	r24, 0x0E	; 14
     610:	8b bb       	out	0x1b, r24	; 27
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	ba df       	rcall	.-140    	; 0x58a <lcd_toggle_clear>
     616:	8b b3       	in	r24, 0x1b	; 27
     618:	8b bb       	out	0x1b, r24	; 27
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	b6 df       	rcall	.-148    	; 0x58a <lcd_toggle_clear>
     61e:	8b b3       	in	r24, 0x1b	; 27
     620:	86 60       	ori	r24, 0x06	; 6
     622:	8b bb       	out	0x1b, r24	; 27
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	b1 df       	rcall	.-158    	; 0x58a <lcd_toggle_clear>
     628:	8b b3       	in	r24, 0x1b	; 27
     62a:	8b bb       	out	0x1b, r24	; 27
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	ad df       	rcall	.-166    	; 0x58a <lcd_toggle_clear>
     630:	d8 9a       	sbi	0x1b, 0	; 27
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	aa df       	rcall	.-172    	; 0x58a <lcd_toggle_clear>
     636:	dc 9a       	sbi	0x1b, 4	; 27
     638:	c9 cf       	rjmp	.-110    	; 0x5cc <lcd_home_line1>

0000063a <lcd_home_line2>:
     63a:	80 ec       	ldi	r24, 0xC0	; 192
     63c:	ae cf       	rjmp	.-164    	; 0x59a <lcd_command>

0000063e <lcd_home_line3>:
     63e:	84 e9       	ldi	r24, 0x94	; 148
     640:	ac cf       	rjmp	.-168    	; 0x59a <lcd_command>

00000642 <lcd_home_line4>:
     642:	84 ed       	ldi	r24, 0xD4	; 212
     644:	aa cf       	rjmp	.-172    	; 0x59a <lcd_command>

00000646 <lcd_putc>:
     646:	cf 93       	push	r28
     648:	c8 2f       	mov	r28, r24
     64a:	8b b3       	in	r24, 0x1b	; 27
     64c:	9c 2f       	mov	r25, r28
     64e:	92 95       	swap	r25
     650:	9f 70       	andi	r25, 0x0F	; 15
     652:	89 2b       	or	r24, r25
     654:	8b bb       	out	0x1b, r24	; 27
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	98 df       	rcall	.-208    	; 0x58a <lcd_toggle_clear>
     65a:	8b b3       	in	r24, 0x1b	; 27
     65c:	cf 70       	andi	r28, 0x0F	; 15
     65e:	c8 2b       	or	r28, r24
     660:	cb bb       	out	0x1b, r28	; 27
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	92 df       	rcall	.-220    	; 0x58a <lcd_toggle_clear>
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	c1 55       	subi	r28, 0x51	; 81
     680:	d1 09       	sbc	r29, r1
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	fe 01       	movw	r30, r28
     68e:	e4 5a       	subi	r30, 0xA4	; 164
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	41 91       	ld	r20, Z+
     694:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     696:	2e 2f       	mov	r18, r30
     698:	3f 2f       	mov	r19, r31
     69a:	61 e5       	ldi	r22, 0x51	; 81
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	ce 01       	movw	r24, r28
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	0e 94 4d 11 	call	0x229a	; 0x229a <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     6a6:	be 01       	movw	r22, r28
     6a8:	6f 5f       	subi	r22, 0xFF	; 255
     6aa:	7f 4f       	sbci	r23, 0xFF	; 255
     6ac:	88 ed       	ldi	r24, 0xD8	; 216
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <strcmp>
     6b4:	28 2f       	mov	r18, r24
     6b6:	39 2f       	mov	r19, r25
     6b8:	23 2b       	or	r18, r19
     6ba:	09 f4       	brne	.+2      	; 0x6be <lprintf+0x54>
     6bc:	44 c0       	rjmp	.+136    	; 0x746 <lprintf+0xdc>
		return;
	
	strcpy(lastbuffer, buffer);
     6be:	be 01       	movw	r22, r28
     6c0:	6f 5f       	subi	r22, 0xFF	; 255
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	88 ed       	ldi	r24, 0xD8	; 216
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <strcpy>
	lcd_clear();
     6cc:	7a df       	rcall	.-268    	; 0x5c2 <lcd_clear>
     6ce:	cc 24       	eor	r12, r12
     6d0:	c3 94       	inc	r12
     6d2:	d1 2c       	mov	r13, r1
     6d4:	cc 0e       	add	r12, r28
     6d6:	dd 1e       	adc	r13, r29
	char *str = buffer;
	int charnum = 0;
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     6dc:	0f 2e       	mov	r0, r31
     6de:	f4 e1       	ldi	r31, 0x14	; 20
     6e0:	ef 2e       	mov	r14, r31
     6e2:	f1 2c       	mov	r15, r1
     6e4:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     6e6:	27 c0       	rjmp	.+78     	; 0x736 <lprintf+0xcc>
		if (*str == '\n') {
     6e8:	8a 30       	cpi	r24, 0x0A	; 10
     6ea:	51 f4       	brne	.+20     	; 0x700 <lprintf+0x96>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     6ec:	c8 01       	movw	r24, r16
     6ee:	b7 01       	movw	r22, r14
     6f0:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__divmodhi4>
     6f4:	97 01       	movw	r18, r14
     6f6:	28 1b       	sub	r18, r24
     6f8:	39 0b       	sbc	r19, r25
     6fa:	02 0f       	add	r16, r18
     6fc:	13 1f       	adc	r17, r19
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <lprintf+0x9c>
		} else {
			lcd_putc(*str);
     700:	a2 df       	rcall	.-188    	; 0x646 <lcd_putc>
			charnum++;
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     706:	c8 01       	movw	r24, r16
     708:	b7 01       	movw	r22, r14
     70a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__divmodhi4>
     70e:	89 2b       	or	r24, r25
     710:	91 f4       	brne	.+36     	; 0x736 <lprintf+0xcc>
			switch (charnum / LCD_WIDTH) {
     712:	c8 01       	movw	r24, r16
     714:	b7 01       	movw	r22, r14
     716:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__divmodhi4>
     71a:	62 30       	cpi	r22, 0x02	; 2
     71c:	71 05       	cpc	r23, r1
     71e:	41 f0       	breq	.+16     	; 0x730 <lprintf+0xc6>
     720:	63 30       	cpi	r22, 0x03	; 3
     722:	71 05       	cpc	r23, r1
     724:	39 f0       	breq	.+14     	; 0x734 <lprintf+0xca>
     726:	61 30       	cpi	r22, 0x01	; 1
     728:	71 05       	cpc	r23, r1
     72a:	29 f4       	brne	.+10     	; 0x736 <lprintf+0xcc>
			case 1:
				lcd_home_line2();
     72c:	86 df       	rcall	.-244    	; 0x63a <lcd_home_line2>
				break;
     72e:	03 c0       	rjmp	.+6      	; 0x736 <lprintf+0xcc>
			case 2:
				lcd_home_line3();
     730:	86 df       	rcall	.-244    	; 0x63e <lcd_home_line3>
				break;
     732:	01 c0       	rjmp	.+2      	; 0x736 <lprintf+0xcc>
			case 3:
				lcd_home_line4();
     734:	86 df       	rcall	.-244    	; 0x642 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     736:	f6 01       	movw	r30, r12
     738:	81 91       	ld	r24, Z+
     73a:	6f 01       	movw	r12, r30
     73c:	88 23       	and	r24, r24
     73e:	19 f0       	breq	.+6      	; 0x746 <lprintf+0xdc>
     740:	00 35       	cpi	r16, 0x50	; 80
     742:	11 05       	cpc	r17, r1
     744:	8c f2       	brlt	.-94     	; 0x6e8 <lprintf+0x7e>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     746:	cf 5a       	subi	r28, 0xAF	; 175
     748:	df 4f       	sbci	r29, 0xFF	; 255
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	08 95       	ret

00000766 <oi_alloc>:
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
     766:	64 e3       	ldi	r22, 0x34	; 52
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <calloc>

00000772 <oi_free>:
     772:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <free>
     776:	08 95       	ret

00000778 <oi_byte_tx>:
     778:	eb e9       	ldi	r30, 0x9B	; 155
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	90 81       	ld	r25, Z
     77e:	95 ff       	sbrs	r25, 5
     780:	fd cf       	rjmp	.-6      	; 0x77c <oi_byte_tx+0x4>
     782:	80 93 9c 00 	sts	0x009C, r24
     786:	08 95       	ret

00000788 <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	18 2f       	mov	r17, r24
     792:	09 2f       	mov	r16, r25
     794:	c6 2f       	mov	r28, r22
     796:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
     798:	81 e9       	ldi	r24, 0x91	; 145
     79a:	ee df       	rcall	.-36     	; 0x778 <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
     79c:	80 2f       	mov	r24, r16
     79e:	ec df       	rcall	.-40     	; 0x778 <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
     7a0:	81 2f       	mov	r24, r17
     7a2:	ea df       	rcall	.-44     	; 0x778 <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
     7a4:	8d 2f       	mov	r24, r29
     7a6:	e8 df       	rcall	.-48     	; 0x778 <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
     7a8:	8c 2f       	mov	r24, r28
     7aa:	e6 df       	rcall	.-52     	; 0x778 <oi_byte_tx>
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	08 95       	ret

000007b6 <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	08 2f       	mov	r16, r24
     7c0:	16 2f       	mov	r17, r22
     7c2:	d4 2f       	mov	r29, r20
     7c4:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
     7c6:	8b e8       	ldi	r24, 0x8B	; 139
     7c8:	d7 df       	rcall	.-82     	; 0x778 <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
     7ca:	11 23       	and	r17, r17
     7cc:	41 f0       	breq	.+16     	; 0x7de <oi_set_leds+0x28>
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	01 11       	cpse	r16, r1
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <oi_set_leds+0x24>
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	cb 01       	movw	r24, r22
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <oi_set_leds+0x2c>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	ca df       	rcall	.-108    	; 0x778 <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
     7e4:	8d 2f       	mov	r24, r29
     7e6:	c8 df       	rcall	.-112    	; 0x778 <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
     7e8:	8c 2f       	mov	r24, r28
     7ea:	c6 df       	rcall	.-116    	; 0x778 <oi_byte_tx>
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     7f6:	eb e9       	ldi	r30, 0x9B	; 155
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	88 23       	and	r24, r24
     7fe:	ec f7       	brge	.-6      	; 0x7fa <oi_byte_rx+0x4>

	return UDR1;
     800:	80 91 9c 00 	lds	r24, 0x009C
}
     804:	08 95       	ret

00000806 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     814:	80 91 9b 00 	lds	r24, 0x009B
     818:	88 23       	and	r24, r24
     81a:	44 f4       	brge	.+16     	; 0x82c <oi_update+0x26>
		i = UDR1;
     81c:	ac e9       	ldi	r26, 0x9C	; 156
     81e:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     820:	eb e9       	ldi	r30, 0x9B	; 155
     822:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     824:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     826:	80 81       	ld	r24, Z
     828:	88 23       	and	r24, r24
     82a:	e4 f3       	brlt	.-8      	; 0x824 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     82c:	8e e8       	ldi	r24, 0x8E	; 142
     82e:	a4 df       	rcall	.-184    	; 0x778 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     830:	86 e0       	ldi	r24, 0x06	; 6
     832:	a2 df       	rcall	.-188    	; 0x778 <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     834:	87 01       	movw	r16, r14
     836:	0c 5c       	subi	r16, 0xCC	; 204
     838:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
     83a:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     83c:	dc df       	rcall	.-72     	; 0x7f6 <oi_byte_rx>
     83e:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     840:	c0 17       	cp	r28, r16
     842:	d1 07       	cpc	r29, r17
     844:	d9 f7       	brne	.-10     	; 0x83c <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     846:	f7 01       	movw	r30, r14
     848:	94 85       	ldd	r25, Z+12	; 0x0c
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	25 85       	ldd	r18, Z+13	; 0x0d
     84e:	82 0f       	add	r24, r18
     850:	91 1d       	adc	r25, r1
     852:	95 87       	std	Z+13, r25	; 0x0d
     854:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     856:	96 85       	ldd	r25, Z+14	; 0x0e
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	27 85       	ldd	r18, Z+15	; 0x0f
     85c:	82 0f       	add	r24, r18
     85e:	91 1d       	adc	r25, r1
     860:	97 87       	std	Z+15, r25	; 0x0f
     862:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     864:	91 89       	ldd	r25, Z+17	; 0x11
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	22 89       	ldd	r18, Z+18	; 0x12
     86a:	82 0f       	add	r24, r18
     86c:	91 1d       	adc	r25, r1
     86e:	92 8b       	std	Z+18, r25	; 0x12
     870:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     872:	93 89       	ldd	r25, Z+19	; 0x13
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	24 89       	ldd	r18, Z+20	; 0x14
     878:	82 0f       	add	r24, r18
     87a:	91 1d       	adc	r25, r1
     87c:	94 8b       	std	Z+20, r25	; 0x14
     87e:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     880:	96 89       	ldd	r25, Z+22	; 0x16
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	27 89       	ldd	r18, Z+23	; 0x17
     886:	82 0f       	add	r24, r18
     888:	91 1d       	adc	r25, r1
     88a:	97 8b       	std	Z+23, r25	; 0x17
     88c:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     88e:	90 8d       	ldd	r25, Z+24	; 0x18
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	21 8d       	ldd	r18, Z+25	; 0x19
     894:	82 0f       	add	r24, r18
     896:	91 1d       	adc	r25, r1
     898:	91 8f       	std	Z+25, r25	; 0x19
     89a:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     89c:	92 8d       	ldd	r25, Z+26	; 0x1a
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	23 8d       	ldd	r18, Z+27	; 0x1b
     8a2:	82 0f       	add	r24, r18
     8a4:	91 1d       	adc	r25, r1
     8a6:	93 8f       	std	Z+27, r25	; 0x1b
     8a8:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     8aa:	94 8d       	ldd	r25, Z+28	; 0x1c
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	25 8d       	ldd	r18, Z+29	; 0x1d
     8b0:	82 0f       	add	r24, r18
     8b2:	91 1d       	adc	r25, r1
     8b4:	95 8f       	std	Z+29, r25	; 0x1d
     8b6:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     8b8:	96 8d       	ldd	r25, Z+30	; 0x1e
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	27 8d       	ldd	r18, Z+31	; 0x1f
     8be:	82 0f       	add	r24, r18
     8c0:	91 1d       	adc	r25, r1
     8c2:	97 8f       	std	Z+31, r25	; 0x1f
     8c4:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     8c6:	90 a1       	ldd	r25, Z+32	; 0x20
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	21 a1       	ldd	r18, Z+33	; 0x21
     8cc:	82 0f       	add	r24, r18
     8ce:	91 1d       	adc	r25, r1
     8d0:	91 a3       	std	Z+33, r25	; 0x21
     8d2:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     8d4:	92 a1       	ldd	r25, Z+34	; 0x22
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	23 a1       	ldd	r18, Z+35	; 0x23
     8da:	82 0f       	add	r24, r18
     8dc:	91 1d       	adc	r25, r1
     8de:	93 a3       	std	Z+35, r25	; 0x23
     8e0:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     8e2:	42 a5       	ldd	r20, Z+42	; 0x2a
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	31 a5       	ldd	r19, Z+41	; 0x29
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	24 0f       	add	r18, r20
     8ec:	35 1f       	adc	r19, r21
     8ee:	36 a3       	std	Z+38, r19	; 0x26
     8f0:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     8f2:	90 a9       	ldd	r25, Z+48	; 0x30
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	84 0f       	add	r24, r20
     8f8:	95 1f       	adc	r25, r21
     8fa:	95 a7       	std	Z+45, r25	; 0x2d
     8fc:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     8fe:	92 a9       	ldd	r25, Z+50	; 0x32
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	23 a9       	ldd	r18, Z+51	; 0x33
     904:	82 0f       	add	r24, r18
     906:	91 1d       	adc	r25, r1
     908:	97 a7       	std	Z+47, r25	; 0x2f
     90a:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     90c:	94 a9       	ldd	r25, Z+52	; 0x34
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	25 a9       	ldd	r18, Z+53	; 0x35
     912:	82 0f       	add	r24, r18
     914:	91 1d       	adc	r25, r1
     916:	91 ab       	std	Z+49, r25	; 0x31
     918:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     91a:	96 a9       	ldd	r25, Z+54	; 0x36
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	27 a9       	ldd	r18, Z+55	; 0x37
     920:	82 0f       	add	r24, r18
     922:	91 1d       	adc	r25, r1
     924:	93 ab       	std	Z+51, r25	; 0x33
     926:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     928:	83 e2       	ldi	r24, 0x23	; 35
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	b2 d0       	rcall	.+356    	; 0xa92 <wait_ms>
}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	08 95       	ret

0000093c <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     946:	09 e9       	ldi	r16, 0x99	; 153
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	80 e1       	ldi	r24, 0x10	; 16
     94c:	f8 01       	movw	r30, r16
     94e:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     950:	88 e1       	ldi	r24, 0x18	; 24
     952:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     956:	86 e0       	ldi	r24, 0x06	; 6
     958:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     95c:	80 e8       	ldi	r24, 0x80	; 128
     95e:	0c df       	rcall	.-488    	; 0x778 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     960:	81 e8       	ldi	r24, 0x81	; 129
     962:	0a df       	rcall	.-492    	; 0x778 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     964:	88 e0       	ldi	r24, 0x08	; 8
     966:	08 df       	rcall	.-496    	; 0x778 <oi_byte_tx>
	wait_ms(100);
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	92 d0       	rcall	.+292    	; 0xa92 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     96e:	81 e2       	ldi	r24, 0x21	; 33
     970:	f8 01       	movw	r30, r16
     972:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     974:	84 e8       	ldi	r24, 0x84	; 132
     976:	00 df       	rcall	.-512    	; 0x778 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     978:	2f ef       	ldi	r18, 0xFF	; 255
     97a:	47 e0       	ldi	r20, 0x07	; 7
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	1a df       	rcall	.-460    	; 0x7b6 <oi_set_leds>
	
	oi_update(self);
     982:	ce 01       	movw	r24, r28
     984:	40 df       	rcall	.-384    	; 0x806 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     986:	ce 01       	movw	r24, r28
     988:	3e df       	rcall	.-388    	; 0x806 <oi_update>
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <serial_init>:
	}
	
	//return string
	return receivedVars;
	
}
     994:	10 92 90 00 	sts	0x0090, r1
     998:	81 e2       	ldi	r24, 0x21	; 33
     99a:	89 b9       	out	0x09, r24	; 9
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	8b b9       	out	0x0b, r24	; 11
     9a0:	8e e0       	ldi	r24, 0x0E	; 14
     9a2:	80 93 95 00 	sts	0x0095, r24
     9a6:	88 e1       	ldi	r24, 0x18	; 24
     9a8:	8a b9       	out	0x0a, r24	; 10
     9aa:	08 95       	ret

000009ac <USART_Transmit>:
     9ac:	5d 9b       	sbis	0x0b, 5	; 11
     9ae:	fe cf       	rjmp	.-4      	; 0x9ac <USART_Transmit>
     9b0:	8c b9       	out	0x0c, r24	; 12
     9b2:	08 95       	ret

000009b4 <USART_Receive>:
     9b4:	5f 9b       	sbis	0x0b, 7	; 11
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <USART_Receive+0x8>
     9b8:	8c b1       	in	r24, 0x0c	; 12
     9ba:	08 95       	ret
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret

000009c0 <USART_SendString>:


void USART_SendString(char SentString[])
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	c8 2f       	mov	r28, r24
     9c6:	d9 2f       	mov	r29, r25
	char flag = 1;
	int i = 0;
	while(flag)
	{
		if(SentString[i])
     9c8:	89 91       	ld	r24, Y+
     9ca:	88 23       	and	r24, r24
     9cc:	11 f0       	breq	.+4      	; 0x9d2 <USART_SendString+0x12>
		{
			USART_Transmit(SentString[i]);
     9ce:	ee df       	rcall	.-36     	; 0x9ac <USART_Transmit>
     9d0:	fb cf       	rjmp	.-10     	; 0x9c8 <USART_SendString+0x8>
		}
		else
		{
			flag = 0;
			USART_Transmit(10);
     9d2:	8a e0       	ldi	r24, 0x0A	; 10
     9d4:	eb df       	rcall	.-42     	; 0x9ac <USART_Transmit>
			USART_Transmit(13);
     9d6:	8d e0       	ldi	r24, 0x0D	; 13
     9d8:	e9 df       	rcall	.-46     	; 0x9ac <USART_Transmit>
		}
		i++;
	}
	
}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <USART_Flush>:

void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC) )
     9e0:	5f 9b       	sbis	0x0b, 7	; 11
     9e2:	03 c0       	rjmp	.+6      	; 0x9ea <USART_Flush+0xa>
	{
		dummy = UDR0;
     9e4:	8c b1       	in	r24, 0x0c	; 12
}

void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC) )
     9e6:	5f 99       	sbic	0x0b, 7	; 11
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <USART_Flush+0x4>
     9ea:	08 95       	ret

000009ec <ADC_init>:
			return n+1;
		}
	}
	
	return 0;
}
     9ec:	37 9a       	sbi	0x06, 7	; 6
     9ee:	86 b1       	in	r24, 0x06	; 6
     9f0:	87 60       	ori	r24, 0x07	; 7
     9f2:	86 b9       	out	0x06, r24	; 6
     9f4:	87 b1       	in	r24, 0x07	; 7
     9f6:	80 6c       	ori	r24, 0xC0	; 192
     9f8:	87 b9       	out	0x07, r24	; 7
     9fa:	08 95       	ret

000009fc <ADC_read>:
     9fc:	97 b1       	in	r25, 0x07	; 7
     9fe:	8f 71       	andi	r24, 0x1F	; 31
     a00:	98 2b       	or	r25, r24
     a02:	97 b9       	out	0x07, r25	; 7
     a04:	36 9a       	sbi	0x06, 6	; 6
     a06:	36 99       	sbic	0x06, 6	; 6
     a08:	fe cf       	rjmp	.-4      	; 0xa06 <ADC_read+0xa>
     a0a:	24 b1       	in	r18, 0x04	; 4
     a0c:	35 b1       	in	r19, 0x05	; 5
     a0e:	82 2f       	mov	r24, r18
     a10:	93 2f       	mov	r25, r19
     a12:	08 95       	ret

00000a14 <calcCm>:
     a14:	bc 01       	movw	r22, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	d8 d4       	rcall	.+2480   	; 0x13cc <__floatunsisf>
     a1c:	2a e9       	ldi	r18, 0x9A	; 154
     a1e:	39 e9       	ldi	r19, 0x99	; 153
     a20:	49 e7       	ldi	r20, 0x79	; 121
     a22:	50 e4       	ldi	r21, 0x40	; 64
     a24:	61 d5       	rcall	.+2754   	; 0x14e8 <__mulsf3>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 ea       	ldi	r20, 0xA0	; 160
     a2c:	50 e4       	ldi	r21, 0x40	; 64
     a2e:	d6 d3       	rcall	.+1964   	; 0x11dc <__addsf3>
     a30:	9b 01       	movw	r18, r22
     a32:	ac 01       	movw	r20, r24
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 eb       	ldi	r23, 0xB0	; 176
     a38:	83 e3       	ldi	r24, 0x33	; 51
     a3a:	97 e4       	ldi	r25, 0x47	; 71
     a3c:	33 c4       	rjmp	.+2150   	; 0x12a4 <__divsf3>

00000a3e <song_init>:
     a3e:	8c e8       	ldi	r24, 0x8C	; 140
     a40:	9b de       	rcall	.-714    	; 0x778 <oi_byte_tx>
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	99 de       	rcall	.-718    	; 0x778 <oi_byte_tx>
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	97 de       	rcall	.-722    	; 0x778 <oi_byte_tx>
     a4a:	87 e3       	ldi	r24, 0x37	; 55
     a4c:	95 de       	rcall	.-726    	; 0x778 <oi_byte_tx>
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	93 de       	rcall	.-730    	; 0x778 <oi_byte_tx>
     a52:	8a e3       	ldi	r24, 0x3A	; 58
     a54:	91 de       	rcall	.-734    	; 0x778 <oi_byte_tx>
     a56:	80 e4       	ldi	r24, 0x40	; 64
     a58:	8f ce       	rjmp	.-738    	; 0x778 <oi_byte_tx>

00000a5a <timer2_start>:
     a5a:	10 92 2e 04 	sts	0x042E, r1
     a5e:	10 92 2d 04 	sts	0x042D, r1
     a62:	81 11       	cpse	r24, r1
     a64:	06 c0       	rjmp	.+12     	; 0xa72 <timer2_start+0x18>
     a66:	8b e0       	ldi	r24, 0x0B	; 11
     a68:	85 bd       	out	0x25, r24	; 37
     a6a:	87 b7       	in	r24, 0x37	; 55
     a6c:	80 68       	ori	r24, 0x80	; 128
     a6e:	87 bf       	out	0x37, r24	; 55
     a70:	07 c0       	rjmp	.+14     	; 0xa80 <timer2_start+0x26>
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	29 f4       	brne	.+10     	; 0xa80 <timer2_start+0x26>
     a76:	89 e0       	ldi	r24, 0x09	; 9
     a78:	85 bd       	out	0x25, r24	; 37
     a7a:	87 b7       	in	r24, 0x37	; 55
     a7c:	80 68       	ori	r24, 0x80	; 128
     a7e:	87 bf       	out	0x37, r24	; 55
     a80:	78 94       	sei
     a82:	08 95       	ret

00000a84 <timer2_stop>:
     a84:	87 b7       	in	r24, 0x37	; 55
     a86:	8f 77       	andi	r24, 0x7F	; 127
     a88:	87 bf       	out	0x37, r24	; 55
     a8a:	85 b5       	in	r24, 0x25	; 37
     a8c:	8f 77       	andi	r24, 0x7F	; 127
     a8e:	85 bd       	out	0x25, r24	; 37
     a90:	08 95       	ret

00000a92 <wait_ms>:
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ec 01       	movw	r28, r24
     a98:	8a ef       	ldi	r24, 0xFA	; 250
     a9a:	83 bd       	out	0x23, r24	; 35
     a9c:	10 92 2e 04 	sts	0x042E, r1
     aa0:	10 92 2d 04 	sts	0x042D, r1
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	d9 df       	rcall	.-78     	; 0xa5a <timer2_start>
     aa8:	20 91 2d 04 	lds	r18, 0x042D
     aac:	30 91 2e 04 	lds	r19, 0x042E
     ab0:	2c 17       	cp	r18, r28
     ab2:	3d 07       	cpc	r19, r29
     ab4:	c8 f3       	brcs	.-14     	; 0xaa8 <wait_ms+0x16>
     ab6:	e6 df       	rcall	.-52     	; 0xa84 <timer2_stop>
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <__vector_9>:
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	80 91 2d 04 	lds	r24, 0x042D
     ad0:	90 91 2e 04 	lds	r25, 0x042E
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	90 93 2e 04 	sts	0x042E, r25
     ada:	80 93 2d 04 	sts	0x042D, r24
     ade:	9f 91       	pop	r25
     ae0:	8f 91       	pop	r24
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <init_push_buttons>:
     aec:	84 b3       	in	r24, 0x14	; 20
     aee:	80 7c       	andi	r24, 0xC0	; 192
     af0:	84 bb       	out	0x14, r24	; 20
     af2:	85 b3       	in	r24, 0x15	; 21
     af4:	8f 63       	ori	r24, 0x3F	; 63
     af6:	85 bb       	out	0x15, r24	; 21
     af8:	08 95       	ret

00000afa <ping_init>:
     afa:	1f bc       	out	0x2f, r1	; 47
     afc:	84 ec       	ldi	r24, 0xC4	; 196
     afe:	8e bd       	out	0x2e, r24	; 46
     b00:	17 be       	out	0x37, r1	; 55
     b02:	08 95       	ret

00000b04 <__vector_11>:
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	0f 92       	push	r0
     b0c:	11 24       	eor	r1, r1
     b0e:	2f 93       	push	r18
     b10:	3f 93       	push	r19
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
     b16:	86 b5       	in	r24, 0x26	; 38
     b18:	97 b5       	in	r25, 0x27	; 39
     b1a:	90 93 2c 04 	sts	0x042C, r25
     b1e:	80 93 2b 04 	sts	0x042B, r24
     b22:	20 91 29 04 	lds	r18, 0x0429
     b26:	30 91 2a 04 	lds	r19, 0x042A
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	23 2b       	or	r18, r19
     b30:	11 f0       	breq	.+4      	; 0xb36 <__vector_11+0x32>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 2a 04 	sts	0x042A, r25
     b3a:	80 93 29 04 	sts	0x0429, r24
     b3e:	9f 91       	pop	r25
     b40:	8f 91       	pop	r24
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	0f 90       	pop	r0
     b4c:	1f 90       	pop	r1
     b4e:	18 95       	reti

00000b50 <send_pulse>:
     b50:	8c 9a       	sbi	0x11, 4	; 17
     b52:	94 9a       	sbi	0x12, 4	; 18
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9c df       	rcall	.-200    	; 0xa92 <wait_ms>
     b5a:	94 98       	cbi	0x12, 4	; 18
     b5c:	8c 98       	cbi	0x11, 4	; 17
     b5e:	08 95       	ret

00000b60 <time2dist>:
     b60:	bc 01       	movw	r22, r24
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	32 d4       	rcall	.+2148   	; 0x13cc <__floatunsisf>
     b68:	22 ef       	ldi	r18, 0xF2	; 242
     b6a:	32 ed       	ldi	r19, 0xD2	; 210
     b6c:	4d e8       	ldi	r20, 0x8D	; 141
     b6e:	5e e3       	ldi	r21, 0x3E	; 62
     b70:	bb d4       	rcall	.+2422   	; 0x14e8 <__mulsf3>
     b72:	20 e5       	ldi	r18, 0x50	; 80
     b74:	3d e8       	ldi	r19, 0x8D	; 141
     b76:	4f ef       	ldi	r20, 0xFF	; 255
     b78:	51 e4       	ldi	r21, 0x41	; 65
     b7a:	2f c3       	rjmp	.+1630   	; 0x11da <__subsf3>

00000b7c <ping_read>:
     b7c:	e9 df       	rcall	.-46     	; 0xb50 <send_pulse>
     b7e:	80 e2       	ldi	r24, 0x20	; 32
     b80:	87 bf       	out	0x37, r24	; 55
     b82:	80 91 29 04 	lds	r24, 0x0429
     b86:	90 91 2a 04 	lds	r25, 0x042A
     b8a:	89 2b       	or	r24, r25
     b8c:	d1 f7       	brne	.-12     	; 0xb82 <ping_read+0x6>
     b8e:	84 e8       	ldi	r24, 0x84	; 132
     b90:	8e bd       	out	0x2e, r24	; 46
     b92:	20 91 2b 04 	lds	r18, 0x042B
     b96:	30 91 2c 04 	lds	r19, 0x042C
     b9a:	80 91 29 04 	lds	r24, 0x0429
     b9e:	90 91 2a 04 	lds	r25, 0x042A
     ba2:	89 2b       	or	r24, r25
     ba4:	d1 f3       	breq	.-12     	; 0xb9a <ping_read+0x1e>
     ba6:	84 ec       	ldi	r24, 0xC4	; 196
     ba8:	8e bd       	out	0x2e, r24	; 46
     baa:	80 91 2b 04 	lds	r24, 0x042B
     bae:	90 91 2c 04 	lds	r25, 0x042C
     bb2:	17 be       	out	0x37, r1	; 55
     bb4:	82 1b       	sub	r24, r18
     bb6:	93 0b       	sbc	r25, r19
     bb8:	d3 cf       	rjmp	.-90     	; 0xb60 <time2dist>

00000bba <servo_turn>:
     bba:	bc 01       	movw	r22, r24
     bbc:	88 27       	eor	r24, r24
     bbe:	77 fd       	sbrc	r23, 7
     bc0:	80 95       	com	r24
     bc2:	98 2f       	mov	r25, r24
     bc4:	05 d4       	rcall	.+2058   	; 0x13d0 <__floatsisf>
     bc6:	2b e3       	ldi	r18, 0x3B	; 59
     bc8:	3a ea       	ldi	r19, 0xAA	; 170
     bca:	4a e1       	ldi	r20, 0x1A	; 26
     bcc:	5c e3       	ldi	r21, 0x3C	; 60
     bce:	8c d4       	rcall	.+2328   	; 0x14e8 <__mulsf3>
     bd0:	28 e4       	ldi	r18, 0x48	; 72
     bd2:	31 ee       	ldi	r19, 0xE1	; 225
     bd4:	4a ef       	ldi	r20, 0xFA	; 250
     bd6:	5e e3       	ldi	r21, 0x3E	; 62
     bd8:	01 d3       	rcall	.+1538   	; 0x11dc <__addsf3>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	4a e7       	ldi	r20, 0x7A	; 122
     be0:	53 e4       	ldi	r21, 0x43	; 67
     be2:	82 d4       	rcall	.+2308   	; 0x14e8 <__mulsf3>
     be4:	c7 d3       	rcall	.+1934   	; 0x1374 <__fixunssfsi>
     be6:	61 50       	subi	r22, 0x01	; 1
     be8:	71 09       	sbc	r23, r1
     bea:	70 93 85 00 	sts	0x0085, r23
     bee:	60 93 84 00 	sts	0x0084, r22
     bf2:	84 e1       	ldi	r24, 0x14	; 20
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	4d cf       	rjmp	.-358    	; 0xa92 <wait_ms>

00000bf8 <timer3_init>:
     bf8:	83 ec       	ldi	r24, 0xC3	; 195
     bfa:	99 e0       	ldi	r25, 0x09	; 9
     bfc:	90 93 87 00 	sts	0x0087, r25
     c00:	80 93 86 00 	sts	0x0086, r24
     c04:	80 e5       	ldi	r24, 0x50	; 80
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	90 93 85 00 	sts	0x0085, r25
     c0c:	80 93 84 00 	sts	0x0084, r24
     c10:	83 e2       	ldi	r24, 0x23	; 35
     c12:	80 93 8b 00 	sts	0x008B, r24
     c16:	8b e1       	ldi	r24, 0x1B	; 27
     c18:	80 93 8a 00 	sts	0x008A, r24
     c1c:	14 9a       	sbi	0x02, 4	; 2
     c1e:	08 95       	ret

00000c20 <turn_clockwise>:
	oi_set_wheels(0, 0); // stop	
	reportData(sensor);
}

void turn_clockwise(oi_t *sensor, int degrees)
{
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	8c 01       	movw	r16, r24
     c2e:	7b 01       	movw	r14, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-150, 150);
     c30:	66 e9       	ldi	r22, 0x96	; 150
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	8a e6       	ldi	r24, 0x6A	; 106
     c36:	9f ef       	ldi	r25, 0xFF	; 255
     c38:	a7 dd       	rcall	.-1202   	; 0x788 <oi_set_wheels>
	
	if(degrees == 30)
     c3a:	8e e1       	ldi	r24, 0x1E	; 30
     c3c:	e8 16       	cp	r14, r24
     c3e:	f1 04       	cpc	r15, r1
     c40:	39 f0       	breq	.+14     	; 0xc50 <turn_clockwise+0x30>
		}		
	}
	
	else
	{
		while (sum < degrees-12) {
     c42:	ec e0       	ldi	r30, 0x0C	; 12
     c44:	ee 1a       	sub	r14, r30
     c46:	f1 08       	sbc	r15, r1
     c48:	1e 14       	cp	r1, r14
     c4a:	1f 04       	cpc	r1, r15
     c4c:	74 f0       	brlt	.+28     	; 0xc6a <turn_clockwise+0x4a>
     c4e:	19 c0       	rjmp	.+50     	; 0xc82 <turn_clockwise+0x62>
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-150, 150);
	
	if(degrees == 30)
     c50:	c0 e0       	ldi	r28, 0x00	; 0
     c52:	d0 e0       	ldi	r29, 0x00	; 0
	{
		while (sum < degrees-10) {
			oi_update(sensor);
     c54:	c8 01       	movw	r24, r16
     c56:	d7 dd       	rcall	.-1106   	; 0x806 <oi_update>
			sum -= sensor->angle;
     c58:	f8 01       	movw	r30, r16
     c5a:	86 85       	ldd	r24, Z+14	; 0x0e
     c5c:	97 85       	ldd	r25, Z+15	; 0x0f
     c5e:	c8 1b       	sub	r28, r24
     c60:	d9 0b       	sbc	r29, r25
	char outputString[20];
	oi_set_wheels(-150, 150);
	
	if(degrees == 30)
	{
		while (sum < degrees-10) {
     c62:	c4 31       	cpi	r28, 0x14	; 20
     c64:	d1 05       	cpc	r29, r1
     c66:	b4 f3       	brlt	.-20     	; 0xc54 <turn_clockwise+0x34>
     c68:	0c c0       	rjmp	.+24     	; 0xc82 <turn_clockwise+0x62>
		}		
	}
	
	else
	{
		while (sum < degrees-12) {
     c6a:	c0 e0       	ldi	r28, 0x00	; 0
     c6c:	d0 e0       	ldi	r29, 0x00	; 0
			oi_update(sensor);
     c6e:	c8 01       	movw	r24, r16
     c70:	ca dd       	rcall	.-1132   	; 0x806 <oi_update>
			sum -= sensor->angle;
     c72:	f8 01       	movw	r30, r16
     c74:	86 85       	ldd	r24, Z+14	; 0x0e
     c76:	97 85       	ldd	r25, Z+15	; 0x0f
     c78:	c8 1b       	sub	r28, r24
     c7a:	d9 0b       	sbc	r29, r25
		}		
	}
	
	else
	{
		while (sum < degrees-12) {
     c7c:	ce 15       	cp	r28, r14
     c7e:	df 05       	cpc	r29, r15
     c80:	b4 f3       	brlt	.-20     	; 0xc6e <turn_clockwise+0x4e>
	}
	// sprintf(outputString, "Turned %d degrees clockwise", degrees);
	
	// USART_SendString(outputString);
	
	oi_set_wheels(0, 0); // stop
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	7e dd       	rcall	.-1284   	; 0x788 <oi_set_wheels>
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	08 95       	ret

00000c9a <turn_counterclockwise>:

void turn_counterclockwise(oi_t *sensor, int degrees)
{
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	8c 01       	movw	r16, r24
     ca8:	7b 01       	movw	r14, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(150, -150);
     caa:	6a e6       	ldi	r22, 0x6A	; 106
     cac:	7f ef       	ldi	r23, 0xFF	; 255
     cae:	86 e9       	ldi	r24, 0x96	; 150
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	6a dd       	rcall	.-1324   	; 0x788 <oi_set_wheels>
	
	while (sum < degrees-12) {
     cb4:	8c e0       	ldi	r24, 0x0C	; 12
     cb6:	e8 1a       	sub	r14, r24
     cb8:	f1 08       	sbc	r15, r1
     cba:	1e 14       	cp	r1, r14
     cbc:	1f 04       	cpc	r1, r15
     cbe:	64 f4       	brge	.+24     	; 0xcd8 <turn_counterclockwise+0x3e>
	oi_set_wheels(0, 0); // stop
}

void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     cc0:	c0 e0       	ldi	r28, 0x00	; 0
     cc2:	d0 e0       	ldi	r29, 0x00	; 0
	char outputString[20];
	oi_set_wheels(150, -150);
	
	while (sum < degrees-12) {
		oi_update(sensor);
     cc4:	c8 01       	movw	r24, r16
     cc6:	9f dd       	rcall	.-1218   	; 0x806 <oi_update>
		sum += sensor->angle; //maybe
     cc8:	f8 01       	movw	r30, r16
     cca:	86 85       	ldd	r24, Z+14	; 0x0e
     ccc:	97 85       	ldd	r25, Z+15	; 0x0f
     cce:	c8 0f       	add	r28, r24
     cd0:	d9 1f       	adc	r29, r25
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(150, -150);
	
	while (sum < degrees-12) {
     cd2:	ce 15       	cp	r28, r14
     cd4:	df 05       	cpc	r29, r15
     cd6:	b4 f3       	brlt	.-20     	; 0xcc4 <turn_counterclockwise+0x2a>
		// sprintf(outputString, "Turned %f degrees counterclockwise", degrees);
		
		//USART_SendString(outputString);

	}
	oi_set_wheels(0, 0); // stop
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	53 dd       	rcall	.-1370   	; 0x788 <oi_set_wheels>
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	08 95       	ret

00000cf0 <reportData>:

void reportData(oi_t *sensor)
{
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	e2 97       	sbiw	r28, 0x32	; 50
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	8c 01       	movw	r16, r24
	char senDat[50];
	oi_update(sensor);
     d0a:	7d dd       	rcall	.-1286   	; 0x806 <oi_update>
	
	sprintf(senDat, "Cliff Left: %d | Cliff FrontLeft: %d | Cliff FrontRight: %d | Cliff Right: %d | Wheel Drop Left: %d | Wheel Drop Middle: %d | Wheel Drop Left: %d", sensor->cliff_left_signal, sensor->cliff_frontleft_signal, sensor->cliff_frontright_signal, sensor->cliff_right_signal,sensor->wheeldrop_left, sensor->wheeldrop_caster, sensor->wheeldrop_right);
     d0c:	f8 01       	movw	r30, r16
     d0e:	80 81       	ld	r24, Z
     d10:	82 fb       	bst	r24, 2
     d12:	88 27       	eor	r24, r24
     d14:	80 f9       	bld	r24, 0
     d16:	1f 92       	push	r1
     d18:	8f 93       	push	r24
     d1a:	80 81       	ld	r24, Z
     d1c:	82 95       	swap	r24
     d1e:	81 70       	andi	r24, 0x01	; 1
     d20:	1f 92       	push	r1
     d22:	8f 93       	push	r24
     d24:	80 81       	ld	r24, Z
     d26:	83 fb       	bst	r24, 3
     d28:	88 27       	eor	r24, r24
     d2a:	80 f9       	bld	r24, 0
     d2c:	1f 92       	push	r1
     d2e:	8f 93       	push	r24
     d30:	83 a1       	ldd	r24, Z+35	; 0x23
     d32:	8f 93       	push	r24
     d34:	82 a1       	ldd	r24, Z+34	; 0x22
     d36:	8f 93       	push	r24
     d38:	81 a1       	ldd	r24, Z+33	; 0x21
     d3a:	8f 93       	push	r24
     d3c:	80 a1       	ldd	r24, Z+32	; 0x20
     d3e:	8f 93       	push	r24
     d40:	87 8d       	ldd	r24, Z+31	; 0x1f
     d42:	8f 93       	push	r24
     d44:	86 8d       	ldd	r24, Z+30	; 0x1e
     d46:	8f 93       	push	r24
     d48:	85 8d       	ldd	r24, Z+29	; 0x1d
     d4a:	8f 93       	push	r24
     d4c:	84 8d       	ldd	r24, Z+28	; 0x1c
     d4e:	8f 93       	push	r24
     d50:	8c e4       	ldi	r24, 0x4C	; 76
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	8e 01       	movw	r16, r28
     d5a:	0f 5f       	subi	r16, 0xFF	; 255
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	1f 93       	push	r17
     d60:	0f 93       	push	r16
     d62:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
	USART_SendString(senDat);
     d66:	c8 01       	movw	r24, r16
     d68:	2b de       	rcall	.-938    	; 0x9c0 <USART_SendString>
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61

}
     d74:	e2 96       	adiw	r28, 0x32	; 50
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	08 95       	ret

00000d8a <move_backward>:
	return 0;
}


void move_backward(oi_t *sensor, int centimeters)
{
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	8c 01       	movw	r16, r24
     d98:	d6 2f       	mov	r29, r22
     d9a:	c7 2f       	mov	r28, r23
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
     d9c:	68 e3       	ldi	r22, 0x38	; 56
     d9e:	7f ef       	ldi	r23, 0xFF	; 255
     da0:	88 e3       	ldi	r24, 0x38	; 56
     da2:	9f ef       	ldi	r25, 0xFF	; 255
     da4:	f1 dc       	rcall	.-1566   	; 0x788 <oi_set_wheels>
	while (sum < centimeters*10) {
     da6:	ed 2e       	mov	r14, r29
     da8:	fc 2e       	mov	r15, r28
     daa:	ee 0c       	add	r14, r14
     dac:	ff 1c       	adc	r15, r15
     dae:	c7 01       	movw	r24, r14
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	e8 0e       	add	r14, r24
     dba:	f9 1e       	adc	r15, r25
     dbc:	1e 14       	cp	r1, r14
     dbe:	1f 04       	cpc	r1, r15
     dc0:	64 f4       	brge	.+24     	; 0xdda <move_backward+0x50>
}


void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     dc2:	c0 e0       	ldi	r28, 0x00	; 0
     dc4:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
		oi_update(sensor);
     dc6:	c8 01       	movw	r24, r16
     dc8:	1e dd       	rcall	.-1476   	; 0x806 <oi_update>
		sum -= sensor->distance;
     dca:	f8 01       	movw	r30, r16
     dcc:	84 85       	ldd	r24, Z+12	; 0x0c
     dce:	95 85       	ldd	r25, Z+13	; 0x0d
     dd0:	c8 1b       	sub	r28, r24
     dd2:	d9 0b       	sbc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
     dd4:	ce 15       	cp	r28, r14
     dd6:	df 05       	cpc	r29, r15
     dd8:	b4 f3       	brlt	.-20     	; 0xdc6 <move_backward+0x3c>
		oi_update(sensor);
		sum -= sensor->distance;
	}
	
	oi_set_wheels(0, 0); // stop	
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	d2 dc       	rcall	.-1628   	; 0x788 <oi_set_wheels>
	reportData(sensor);
     de4:	c8 01       	movw	r24, r16
     de6:	84 df       	rcall	.-248    	; 0xcf0 <reportData>
}
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	08 95       	ret

00000df6 <move_forward>:
}

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
     df6:	6f 92       	push	r6
     df8:	7f 92       	push	r7
     dfa:	8f 92       	push	r8
     dfc:	9f 92       	push	r9
     dfe:	af 92       	push	r10
     e00:	bf 92       	push	r11
     e02:	cf 92       	push	r12
     e04:	df 92       	push	r13
     e06:	ef 92       	push	r14
     e08:	ff 92       	push	r15
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	c5 55       	subi	r28, 0x55	; 85
     e18:	d1 09       	sbc	r29, r1
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	8c 01       	movw	r16, r24
     e26:	e6 2e       	mov	r14, r22
     e28:	f7 2e       	mov	r15, r23
	int sum = 0;
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
     e2a:	66 e9       	ldi	r22, 0x96	; 150
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	86 e9       	ldi	r24, 0x96	; 150
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	aa dc       	rcall	.-1708   	; 0x788 <oi_set_wheels>
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
     e34:	8e 2c       	mov	r8, r14
     e36:	9f 2c       	mov	r9, r15
     e38:	88 0c       	add	r8, r8
     e3a:	99 1c       	adc	r9, r9
     e3c:	c4 01       	movw	r24, r8
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	88 0e       	add	r8, r24
     e48:	99 1e       	adc	r9, r25

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     e4a:	e1 2c       	mov	r14, r1
     e4c:	f1 2c       	mov	r15, r1
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
	{
		oi_update(sensor);
		sum += sensor->distance;
		lprintf("%d\n", sum);
     e4e:	0f 2e       	mov	r0, r31
     e50:	fe ed       	ldi	r31, 0xDE	; 222
     e52:	6f 2e       	mov	r6, r31
     e54:	f1 e0       	ldi	r31, 0x01	; 1
     e56:	7f 2e       	mov	r7, r31
     e58:	f0 2d       	mov	r31, r0
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
     e5a:	7e c1       	rjmp	.+764    	; 0x1158 <__stack+0x59>
	{
		oi_update(sensor);
     e5c:	c8 01       	movw	r24, r16
     e5e:	d3 dc       	rcall	.-1626   	; 0x806 <oi_update>
		sum += sensor->distance;
     e60:	f8 01       	movw	r30, r16
     e62:	84 85       	ldd	r24, Z+12	; 0x0c
     e64:	95 85       	ldd	r25, Z+13	; 0x0d
     e66:	e8 0e       	add	r14, r24
     e68:	f9 1e       	adc	r15, r25
		lprintf("%d\n", sum);
     e6a:	ff 92       	push	r15
     e6c:	ef 92       	push	r14
     e6e:	7f 92       	push	r7
     e70:	6f 92       	push	r6
     e72:	fb db       	rcall	.-2058   	; 0x66a <lprintf>
		if(sensor->bumper_left)
     e74:	f8 01       	movw	r30, r16
     e76:	80 81       	ld	r24, Z
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	81 ff       	sbrs	r24, 1
     e82:	12 c0       	rjmp	.+36     	; 0xea8 <move_forward+0xb2>
		{
			oi_set_wheels(0, 0); // stop
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	7d dc       	rcall	.-1798   	; 0x788 <oi_set_wheels>

			move_backward(sensor,10);
     e8e:	6a e0       	ldi	r22, 0x0A	; 10
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	c8 01       	movw	r24, r16
     e94:	7a df       	rcall	.-268    	; 0xd8a <move_backward>
			turn_clockwise(sensor,45);
     e96:	6d e2       	ldi	r22, 0x2D	; 45
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	c8 01       	movw	r24, r16
     e9c:	c1 de       	rcall	.-638    	; 0xc20 <turn_clockwise>

			USART_SendString("Left Bumper Triggered"); //
     e9e:	82 ee       	ldi	r24, 0xE2	; 226
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	8e dd       	rcall	.-1252   	; 0x9c0 <USART_SendString>
			return 1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	83 c1       	rjmp	.+774    	; 0x11ae <__stack+0xaf>
		}
		else if(sensor->bumper_right)
     ea8:	80 ff       	sbrs	r24, 0
     eaa:	30 c0       	rjmp	.+96     	; 0xf0c <move_forward+0x116>
		{
			char sensorData[60];
			oi_set_wheels(0, 0); // stop
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	69 dc       	rcall	.-1838   	; 0x788 <oi_set_wheels>
			move_backward(sensor,10);
     eb6:	6a e0       	ldi	r22, 0x0A	; 10
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	c8 01       	movw	r24, r16
     ebc:	66 df       	rcall	.-308    	; 0xd8a <move_backward>
			turn_counterclockwise(sensor,45);
     ebe:	6d e2       	ldi	r22, 0x2D	; 45
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	c8 01       	movw	r24, r16
     ec4:	ea de       	rcall	.-556    	; 0xc9a <turn_counterclockwise>
			float cent_moved = ((float) sum/10);
     ec6:	b7 01       	movw	r22, r14
     ec8:	88 27       	eor	r24, r24
     eca:	77 fd       	sbrc	r23, 7
     ecc:	80 95       	com	r24
     ece:	98 2f       	mov	r25, r24
     ed0:	7f d2       	rcall	.+1278   	; 0x13d0 <__floatsisf>
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	e4 d1       	rcall	.+968    	; 0x12a4 <__divsf3>
			sprintf(sensorData, "Right Bumper Triggered | distance moved: %.1f centimeters", cent_moved);
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	7f 93       	push	r23
     ee2:	6f 93       	push	r22
     ee4:	88 ef       	ldi	r24, 0xF8	; 248
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	9f 93       	push	r25
     eea:	8f 93       	push	r24
     eec:	8e 01       	movw	r16, r28
     eee:	06 5e       	subi	r16, 0xE6	; 230
     ef0:	1f 4f       	sbci	r17, 0xFF	; 255
     ef2:	1f 93       	push	r17
     ef4:	0f 93       	push	r16
     ef6:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(sensorData);
     efa:	c8 01       	movw	r24, r16
     efc:	61 dd       	rcall	.-1342   	; 0x9c0 <USART_SendString>
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
			return 2;
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	51 c1       	rjmp	.+674    	; 0x11ae <__stack+0xaf>
		}
		
		if((sensor->cliff_frontleft_signal > 800) || (sensor->cliff_frontright_signal > 800))
     f0c:	f8 01       	movw	r30, r16
     f0e:	c6 8c       	ldd	r12, Z+30	; 0x1e
     f10:	d7 8c       	ldd	r13, Z+31	; 0x1f
     f12:	f1 e2       	ldi	r31, 0x21	; 33
     f14:	cf 16       	cp	r12, r31
     f16:	f3 e0       	ldi	r31, 0x03	; 3
     f18:	df 06       	cpc	r13, r31
     f1a:	40 f4       	brcc	.+16     	; 0xf2c <move_forward+0x136>
     f1c:	f8 01       	movw	r30, r16
     f1e:	a0 a0       	ldd	r10, Z+32	; 0x20
     f20:	b1 a0       	ldd	r11, Z+33	; 0x21
     f22:	f1 e2       	ldi	r31, 0x21	; 33
     f24:	af 16       	cp	r10, r31
     f26:	f3 e0       	ldi	r31, 0x03	; 3
     f28:	bf 06       	cpc	r11, r31
     f2a:	68 f1       	brcs	.+90     	; 0xf86 <move_forward+0x190>
		{
			char sensorData[60];
			lprintf("Line Detected");
     f2c:	82 e3       	ldi	r24, 0x32	; 50
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	9a db       	rcall	.-2252   	; 0x66a <lprintf>
			oi_set_wheels(0,0);
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	24 dc       	rcall	.-1976   	; 0x788 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
     f40:	b7 01       	movw	r22, r14
     f42:	88 27       	eor	r24, r24
     f44:	77 fd       	sbrc	r23, 7
     f46:	80 95       	com	r24
     f48:	98 2f       	mov	r25, r24
     f4a:	42 d2       	rcall	.+1156   	; 0x13d0 <__floatsisf>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e2       	ldi	r20, 0x20	; 32
     f52:	51 e4       	ldi	r21, 0x41	; 65
     f54:	a7 d1       	rcall	.+846    	; 0x12a4 <__divsf3>
			sprintf(sensorData, "Line Detected | distance moved: %.1f cm", cent_moved);
     f56:	9f 93       	push	r25
     f58:	8f 93       	push	r24
     f5a:	7f 93       	push	r23
     f5c:	6f 93       	push	r22
     f5e:	80 e4       	ldi	r24, 0x40	; 64
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	9f 93       	push	r25
     f64:	8f 93       	push	r24
     f66:	8e 01       	movw	r16, r28
     f68:	06 5e       	subi	r16, 0xE6	; 230
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	1f 93       	push	r17
     f6e:	0f 93       	push	r16
     f70:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(sensorData);
     f74:	c8 01       	movw	r24, r16
     f76:	24 dd       	rcall	.-1464   	; 0x9c0 <USART_SendString>
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
			return 3;
     f82:	83 e0       	ldi	r24, 0x03	; 3
     f84:	14 c1       	rjmp	.+552    	; 0x11ae <__stack+0xaf>
		}
		else if((sensor->wheeldrop_caster == 1) || (sensor->wheeldrop_left == 1) || (sensor->wheeldrop_right == 1))
     f86:	8c 71       	andi	r24, 0x1C	; 28
     f88:	a9 f1       	breq	.+106    	; 0xff4 <move_forward+0x1fe>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
     f8a:	b7 01       	movw	r22, r14
     f8c:	88 27       	eor	r24, r24
     f8e:	77 fd       	sbrc	r23, 7
     f90:	80 95       	com	r24
     f92:	98 2f       	mov	r25, r24
     f94:	1d d2       	rcall	.+1082   	; 0x13d0 <__floatsisf>
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e2       	ldi	r20, 0x20	; 32
     f9c:	51 e4       	ldi	r21, 0x41	; 65
     f9e:	82 d1       	rcall	.+772    	; 0x12a4 <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Right Sensor: %d Front Right: %d Front Left%d Left: %d | distance moved: %.1f cm", (int) sensor->cliff_frontright_signal, (int) sensor->cliff_frontright_signal, (int) sensor->cliff_frontleft_signal, (int) sensor->cliff_frontleft_signal, cent_moved);
     fa0:	9f 93       	push	r25
     fa2:	8f 93       	push	r24
     fa4:	7f 93       	push	r23
     fa6:	6f 93       	push	r22
     fa8:	df 92       	push	r13
     faa:	cf 92       	push	r12
     fac:	df 92       	push	r13
     fae:	cf 92       	push	r12
     fb0:	bf 92       	push	r11
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	af 92       	push	r10
     fb8:	88 e6       	ldi	r24, 0x68	; 104
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	9f 93       	push	r25
     fbe:	8f 93       	push	r24
     fc0:	8e 01       	movw	r16, r28
     fc2:	06 5e       	subi	r16, 0xE6	; 230
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	1f 93       	push	r17
     fc8:	0f 93       	push	r16
     fca:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(sensorData);
     fce:	c8 01       	movw	r24, r16
     fd0:	f7 dc       	rcall	.-1554   	; 0x9c0 <USART_SendString>
			lprintf("Cliff Edge Detected");
     fd2:	8e ec       	ldi	r24, 0xCE	; 206
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	47 db       	rcall	.-2418   	; 0x66a <lprintf>
			// move_backward(sensor,10);
			oi_set_wheels(0,0);
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	d1 db       	rcall	.-2142   	; 0x788 <oi_set_wheels>
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
			return 4;
     ff0:	84 e0       	ldi	r24, 0x04	; 4
     ff2:	dd c0       	rjmp	.+442    	; 0x11ae <__stack+0xaf>
		}
		
		else if (sensor->cliff_frontleft_signal < 10) 
     ff4:	fa e0       	ldi	r31, 0x0A	; 10
     ff6:	cf 16       	cp	r12, r31
     ff8:	d1 04       	cpc	r13, r1
     ffa:	40 f5       	brcc	.+80     	; 0x104c <move_forward+0x256>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
     ffc:	b7 01       	movw	r22, r14
     ffe:	88 27       	eor	r24, r24
    1000:	77 fd       	sbrc	r23, 7
    1002:	80 95       	com	r24
    1004:	98 2f       	mov	r25, r24
    1006:	e4 d1       	rcall	.+968    	; 0x13d0 <__floatsisf>
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	49 d1       	rcall	.+658    	; 0x12a4 <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Front Left | distance moved: %.1f cm", cent_moved);
    1012:	9f 93       	push	r25
    1014:	8f 93       	push	r24
    1016:	7f 93       	push	r23
    1018:	6f 93       	push	r22
    101a:	82 ee       	ldi	r24, 0xE2	; 226
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	9f 93       	push	r25
    1020:	8f 93       	push	r24
    1022:	8e 01       	movw	r16, r28
    1024:	06 5e       	subi	r16, 0xE6	; 230
    1026:	1f 4f       	sbci	r17, 0xFF	; 255
    1028:	1f 93       	push	r17
    102a:	0f 93       	push	r16
    102c:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(sensorData);
    1030:	c8 01       	movw	r24, r16
    1032:	c6 dc       	rcall	.-1652   	; 0x9c0 <USART_SendString>
			oi_set_wheels(0,0);
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a5 db       	rcall	.-2230   	; 0x788 <oi_set_wheels>
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
			return 5;
    1048:	85 e0       	ldi	r24, 0x05	; 5
    104a:	b1 c0       	rjmp	.+354    	; 0x11ae <__stack+0xaf>
		}
		else if (sensor->cliff_frontright_signal < 10)
    104c:	9a e0       	ldi	r25, 0x0A	; 10
    104e:	a9 16       	cp	r10, r25
    1050:	b1 04       	cpc	r11, r1
    1052:	40 f5       	brcc	.+80     	; 0x10a4 <move_forward+0x2ae>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    1054:	b7 01       	movw	r22, r14
    1056:	88 27       	eor	r24, r24
    1058:	77 fd       	sbrc	r23, 7
    105a:	80 95       	com	r24
    105c:	98 2f       	mov	r25, r24
    105e:	b8 d1       	rcall	.+880    	; 0x13d0 <__floatsisf>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	1d d1       	rcall	.+570    	; 0x12a4 <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Front Right | distance moved: %.1f cm", cent_moved);
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	7f 93       	push	r23
    1070:	6f 93       	push	r22
    1072:	8c e1       	ldi	r24, 0x1C	; 28
    1074:	93 e0       	ldi	r25, 0x03	; 3
    1076:	9f 93       	push	r25
    1078:	8f 93       	push	r24
    107a:	8e 01       	movw	r16, r28
    107c:	06 5e       	subi	r16, 0xE6	; 230
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	1f 93       	push	r17
    1082:	0f 93       	push	r16
    1084:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(sensorData);
    1088:	c8 01       	movw	r24, r16
    108a:	9a dc       	rcall	.-1740   	; 0x9c0 <USART_SendString>
			oi_set_wheels(0,0);
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	79 db       	rcall	.-2318   	; 0x788 <oi_set_wheels>
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
			return 6;
    10a0:	86 e0       	ldi	r24, 0x06	; 6
    10a2:	85 c0       	rjmp	.+266    	; 0x11ae <__stack+0xaf>
		}
		else if (sensor->cliff_left_signal < 10) 
    10a4:	f8 01       	movw	r30, r16
    10a6:	84 8d       	ldd	r24, Z+28	; 0x1c
    10a8:	95 8d       	ldd	r25, Z+29	; 0x1d
    10aa:	0a 97       	sbiw	r24, 0x0a	; 10
    10ac:	40 f5       	brcc	.+80     	; 0x10fe <move_forward+0x308>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    10ae:	b7 01       	movw	r22, r14
    10b0:	88 27       	eor	r24, r24
    10b2:	77 fd       	sbrc	r23, 7
    10b4:	80 95       	com	r24
    10b6:	98 2f       	mov	r25, r24
    10b8:	8b d1       	rcall	.+790    	; 0x13d0 <__floatsisf>
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e2       	ldi	r20, 0x20	; 32
    10c0:	51 e4       	ldi	r21, 0x41	; 65
    10c2:	f0 d0       	rcall	.+480    	; 0x12a4 <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Left | distance moved: %.1f cm", cent_moved);		
    10c4:	9f 93       	push	r25
    10c6:	8f 93       	push	r24
    10c8:	7f 93       	push	r23
    10ca:	6f 93       	push	r22
    10cc:	87 e5       	ldi	r24, 0x57	; 87
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	8e 01       	movw	r16, r28
    10d6:	06 5e       	subi	r16, 0xE6	; 230
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	1f 93       	push	r17
    10dc:	0f 93       	push	r16
    10de:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(sensorData);	
    10e2:	c8 01       	movw	r24, r16
    10e4:	6d dc       	rcall	.-1830   	; 0x9c0 <USART_SendString>
			oi_set_wheels(0,0);
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	4c db       	rcall	.-2408   	; 0x788 <oi_set_wheels>
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
			return 7;
    10fa:	87 e0       	ldi	r24, 0x07	; 7
    10fc:	58 c0       	rjmp	.+176    	; 0x11ae <__stack+0xaf>
		}
		else if (sensor->cliff_right_signal < 10)
    10fe:	f8 01       	movw	r30, r16
    1100:	82 a1       	ldd	r24, Z+34	; 0x22
    1102:	93 a1       	ldd	r25, Z+35	; 0x23
    1104:	0a 97       	sbiw	r24, 0x0a	; 10
    1106:	40 f5       	brcc	.+80     	; 0x1158 <__stack+0x59>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    1108:	b7 01       	movw	r22, r14
    110a:	88 27       	eor	r24, r24
    110c:	77 fd       	sbrc	r23, 7
    110e:	80 95       	com	r24
    1110:	98 2f       	mov	r25, r24
    1112:	5e d1       	rcall	.+700    	; 0x13d0 <__floatsisf>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	c3 d0       	rcall	.+390    	; 0x12a4 <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Right | distance moved: %.1f cm", cent_moved);
    111e:	9f 93       	push	r25
    1120:	8f 93       	push	r24
    1122:	7f 93       	push	r23
    1124:	6f 93       	push	r22
    1126:	8b e8       	ldi	r24, 0x8B	; 139
    1128:	93 e0       	ldi	r25, 0x03	; 3
    112a:	9f 93       	push	r25
    112c:	8f 93       	push	r24
    112e:	8e 01       	movw	r16, r28
    1130:	06 5e       	subi	r16, 0xE6	; 230
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	1f 93       	push	r17
    1136:	0f 93       	push	r16
    1138:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
			USART_SendString(sensorData);		
    113c:	c8 01       	movw	r24, r16
    113e:	40 dc       	rcall	.-1920   	; 0x9c0 <USART_SendString>
			oi_set_wheels(0,0);	
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	1f db       	rcall	.-2498   	; 0x788 <oi_set_wheels>
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
			return 8;
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	2b c0       	rjmp	.+86     	; 0x11ae <__stack+0xaf>
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
    1158:	e8 14       	cp	r14, r8
    115a:	f9 04       	cpc	r15, r9
    115c:	0c f4       	brge	.+2      	; 0x1160 <__stack+0x61>
    115e:	7e ce       	rjmp	.-772    	; 0xe5c <move_forward+0x66>
			oi_set_wheels(0,0);	
			return 8;
		}
	}

	oi_set_wheels(0, 0); // stop
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0f db       	rcall	.-2530   	; 0x788 <oi_set_wheels>
	float cent_moved = ((float) sum/10);
    116a:	b7 01       	movw	r22, r14
    116c:	88 27       	eor	r24, r24
    116e:	77 fd       	sbrc	r23, 7
    1170:	80 95       	com	r24
    1172:	98 2f       	mov	r25, r24
    1174:	2d d1       	rcall	.+602    	; 0x13d0 <__floatsisf>
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	92 d0       	rcall	.+292    	; 0x12a4 <__divsf3>
	sprintf(outputString, "Moved %.1f centimeters", cent_moved);
    1180:	9f 93       	push	r25
    1182:	8f 93       	push	r24
    1184:	7f 93       	push	r23
    1186:	6f 93       	push	r22
    1188:	80 ec       	ldi	r24, 0xC0	; 192
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	9f 93       	push	r25
    118e:	8f 93       	push	r24
    1190:	8e 01       	movw	r16, r28
    1192:	0f 5f       	subi	r16, 0xFF	; 255
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	1f 93       	push	r17
    1198:	0f 93       	push	r16
    119a:	0e 94 1f 11 	call	0x223e	; 0x223e <sprintf>
	
	USART_SendString(outputString);
    119e:	c8 01       	movw	r24, r16
    11a0:	0f dc       	rcall	.-2018   	; 0x9c0 <USART_SendString>
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61

	return 0;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
}
    11ae:	cb 5a       	subi	r28, 0xAB	; 171
    11b0:	df 4f       	sbci	r29, 0xFF	; 255
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	6f 90       	pop	r6
    11d8:	08 95       	ret

000011da <__subsf3>:
    11da:	50 58       	subi	r21, 0x80	; 128

000011dc <__addsf3>:
    11dc:	bb 27       	eor	r27, r27
    11de:	aa 27       	eor	r26, r26
    11e0:	0e d0       	rcall	.+28     	; 0x11fe <__addsf3x>
    11e2:	48 c1       	rjmp	.+656    	; 0x1474 <__fp_round>
    11e4:	39 d1       	rcall	.+626    	; 0x1458 <__fp_pscA>
    11e6:	30 f0       	brcs	.+12     	; 0x11f4 <__addsf3+0x18>
    11e8:	3e d1       	rcall	.+636    	; 0x1466 <__fp_pscB>
    11ea:	20 f0       	brcs	.+8      	; 0x11f4 <__addsf3+0x18>
    11ec:	31 f4       	brne	.+12     	; 0x11fa <__addsf3+0x1e>
    11ee:	9f 3f       	cpi	r25, 0xFF	; 255
    11f0:	11 f4       	brne	.+4      	; 0x11f6 <__addsf3+0x1a>
    11f2:	1e f4       	brtc	.+6      	; 0x11fa <__addsf3+0x1e>
    11f4:	2e c1       	rjmp	.+604    	; 0x1452 <__fp_nan>
    11f6:	0e f4       	brtc	.+2      	; 0x11fa <__addsf3+0x1e>
    11f8:	e0 95       	com	r30
    11fa:	e7 fb       	bst	r30, 7
    11fc:	24 c1       	rjmp	.+584    	; 0x1446 <__fp_inf>

000011fe <__addsf3x>:
    11fe:	e9 2f       	mov	r30, r25
    1200:	4a d1       	rcall	.+660    	; 0x1496 <__fp_split3>
    1202:	80 f3       	brcs	.-32     	; 0x11e4 <__addsf3+0x8>
    1204:	ba 17       	cp	r27, r26
    1206:	62 07       	cpc	r22, r18
    1208:	73 07       	cpc	r23, r19
    120a:	84 07       	cpc	r24, r20
    120c:	95 07       	cpc	r25, r21
    120e:	18 f0       	brcs	.+6      	; 0x1216 <__addsf3x+0x18>
    1210:	71 f4       	brne	.+28     	; 0x122e <__addsf3x+0x30>
    1212:	9e f5       	brtc	.+102    	; 0x127a <__addsf3x+0x7c>
    1214:	62 c1       	rjmp	.+708    	; 0x14da <__fp_zero>
    1216:	0e f4       	brtc	.+2      	; 0x121a <__addsf3x+0x1c>
    1218:	e0 95       	com	r30
    121a:	0b 2e       	mov	r0, r27
    121c:	ba 2f       	mov	r27, r26
    121e:	a0 2d       	mov	r26, r0
    1220:	0b 01       	movw	r0, r22
    1222:	b9 01       	movw	r22, r18
    1224:	90 01       	movw	r18, r0
    1226:	0c 01       	movw	r0, r24
    1228:	ca 01       	movw	r24, r20
    122a:	a0 01       	movw	r20, r0
    122c:	11 24       	eor	r1, r1
    122e:	ff 27       	eor	r31, r31
    1230:	59 1b       	sub	r21, r25
    1232:	99 f0       	breq	.+38     	; 0x125a <__addsf3x+0x5c>
    1234:	59 3f       	cpi	r21, 0xF9	; 249
    1236:	50 f4       	brcc	.+20     	; 0x124c <__addsf3x+0x4e>
    1238:	50 3e       	cpi	r21, 0xE0	; 224
    123a:	68 f1       	brcs	.+90     	; 0x1296 <__addsf3x+0x98>
    123c:	1a 16       	cp	r1, r26
    123e:	f0 40       	sbci	r31, 0x00	; 0
    1240:	a2 2f       	mov	r26, r18
    1242:	23 2f       	mov	r18, r19
    1244:	34 2f       	mov	r19, r20
    1246:	44 27       	eor	r20, r20
    1248:	58 5f       	subi	r21, 0xF8	; 248
    124a:	f3 cf       	rjmp	.-26     	; 0x1232 <__addsf3x+0x34>
    124c:	46 95       	lsr	r20
    124e:	37 95       	ror	r19
    1250:	27 95       	ror	r18
    1252:	a7 95       	ror	r26
    1254:	f0 40       	sbci	r31, 0x00	; 0
    1256:	53 95       	inc	r21
    1258:	c9 f7       	brne	.-14     	; 0x124c <__addsf3x+0x4e>
    125a:	7e f4       	brtc	.+30     	; 0x127a <__addsf3x+0x7c>
    125c:	1f 16       	cp	r1, r31
    125e:	ba 0b       	sbc	r27, r26
    1260:	62 0b       	sbc	r22, r18
    1262:	73 0b       	sbc	r23, r19
    1264:	84 0b       	sbc	r24, r20
    1266:	ba f0       	brmi	.+46     	; 0x1296 <__addsf3x+0x98>
    1268:	91 50       	subi	r25, 0x01	; 1
    126a:	a1 f0       	breq	.+40     	; 0x1294 <__addsf3x+0x96>
    126c:	ff 0f       	add	r31, r31
    126e:	bb 1f       	adc	r27, r27
    1270:	66 1f       	adc	r22, r22
    1272:	77 1f       	adc	r23, r23
    1274:	88 1f       	adc	r24, r24
    1276:	c2 f7       	brpl	.-16     	; 0x1268 <__addsf3x+0x6a>
    1278:	0e c0       	rjmp	.+28     	; 0x1296 <__addsf3x+0x98>
    127a:	ba 0f       	add	r27, r26
    127c:	62 1f       	adc	r22, r18
    127e:	73 1f       	adc	r23, r19
    1280:	84 1f       	adc	r24, r20
    1282:	48 f4       	brcc	.+18     	; 0x1296 <__addsf3x+0x98>
    1284:	87 95       	ror	r24
    1286:	77 95       	ror	r23
    1288:	67 95       	ror	r22
    128a:	b7 95       	ror	r27
    128c:	f7 95       	ror	r31
    128e:	9e 3f       	cpi	r25, 0xFE	; 254
    1290:	08 f0       	brcs	.+2      	; 0x1294 <__addsf3x+0x96>
    1292:	b3 cf       	rjmp	.-154    	; 0x11fa <__addsf3+0x1e>
    1294:	93 95       	inc	r25
    1296:	88 0f       	add	r24, r24
    1298:	08 f0       	brcs	.+2      	; 0x129c <__addsf3x+0x9e>
    129a:	99 27       	eor	r25, r25
    129c:	ee 0f       	add	r30, r30
    129e:	97 95       	ror	r25
    12a0:	87 95       	ror	r24
    12a2:	08 95       	ret

000012a4 <__divsf3>:
    12a4:	0c d0       	rcall	.+24     	; 0x12be <__divsf3x>
    12a6:	e6 c0       	rjmp	.+460    	; 0x1474 <__fp_round>
    12a8:	de d0       	rcall	.+444    	; 0x1466 <__fp_pscB>
    12aa:	40 f0       	brcs	.+16     	; 0x12bc <__divsf3+0x18>
    12ac:	d5 d0       	rcall	.+426    	; 0x1458 <__fp_pscA>
    12ae:	30 f0       	brcs	.+12     	; 0x12bc <__divsf3+0x18>
    12b0:	21 f4       	brne	.+8      	; 0x12ba <__divsf3+0x16>
    12b2:	5f 3f       	cpi	r21, 0xFF	; 255
    12b4:	19 f0       	breq	.+6      	; 0x12bc <__divsf3+0x18>
    12b6:	c7 c0       	rjmp	.+398    	; 0x1446 <__fp_inf>
    12b8:	51 11       	cpse	r21, r1
    12ba:	10 c1       	rjmp	.+544    	; 0x14dc <__fp_szero>
    12bc:	ca c0       	rjmp	.+404    	; 0x1452 <__fp_nan>

000012be <__divsf3x>:
    12be:	eb d0       	rcall	.+470    	; 0x1496 <__fp_split3>
    12c0:	98 f3       	brcs	.-26     	; 0x12a8 <__divsf3+0x4>

000012c2 <__divsf3_pse>:
    12c2:	99 23       	and	r25, r25
    12c4:	c9 f3       	breq	.-14     	; 0x12b8 <__divsf3+0x14>
    12c6:	55 23       	and	r21, r21
    12c8:	b1 f3       	breq	.-20     	; 0x12b6 <__divsf3+0x12>
    12ca:	95 1b       	sub	r25, r21
    12cc:	55 0b       	sbc	r21, r21
    12ce:	bb 27       	eor	r27, r27
    12d0:	aa 27       	eor	r26, r26
    12d2:	62 17       	cp	r22, r18
    12d4:	73 07       	cpc	r23, r19
    12d6:	84 07       	cpc	r24, r20
    12d8:	38 f0       	brcs	.+14     	; 0x12e8 <__divsf3_pse+0x26>
    12da:	9f 5f       	subi	r25, 0xFF	; 255
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	44 1f       	adc	r20, r20
    12e4:	aa 1f       	adc	r26, r26
    12e6:	a9 f3       	breq	.-22     	; 0x12d2 <__divsf3_pse+0x10>
    12e8:	33 d0       	rcall	.+102    	; 0x1350 <__divsf3_pse+0x8e>
    12ea:	0e 2e       	mov	r0, r30
    12ec:	3a f0       	brmi	.+14     	; 0x12fc <__divsf3_pse+0x3a>
    12ee:	e0 e8       	ldi	r30, 0x80	; 128
    12f0:	30 d0       	rcall	.+96     	; 0x1352 <__divsf3_pse+0x90>
    12f2:	91 50       	subi	r25, 0x01	; 1
    12f4:	50 40       	sbci	r21, 0x00	; 0
    12f6:	e6 95       	lsr	r30
    12f8:	00 1c       	adc	r0, r0
    12fa:	ca f7       	brpl	.-14     	; 0x12ee <__divsf3_pse+0x2c>
    12fc:	29 d0       	rcall	.+82     	; 0x1350 <__divsf3_pse+0x8e>
    12fe:	fe 2f       	mov	r31, r30
    1300:	27 d0       	rcall	.+78     	; 0x1350 <__divsf3_pse+0x8e>
    1302:	66 0f       	add	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	bb 1f       	adc	r27, r27
    130a:	26 17       	cp	r18, r22
    130c:	37 07       	cpc	r19, r23
    130e:	48 07       	cpc	r20, r24
    1310:	ab 07       	cpc	r26, r27
    1312:	b0 e8       	ldi	r27, 0x80	; 128
    1314:	09 f0       	breq	.+2      	; 0x1318 <__divsf3_pse+0x56>
    1316:	bb 0b       	sbc	r27, r27
    1318:	80 2d       	mov	r24, r0
    131a:	bf 01       	movw	r22, r30
    131c:	ff 27       	eor	r31, r31
    131e:	93 58       	subi	r25, 0x83	; 131
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	2a f0       	brmi	.+10     	; 0x132e <__divsf3_pse+0x6c>
    1324:	9e 3f       	cpi	r25, 0xFE	; 254
    1326:	51 05       	cpc	r21, r1
    1328:	68 f0       	brcs	.+26     	; 0x1344 <__divsf3_pse+0x82>
    132a:	8d c0       	rjmp	.+282    	; 0x1446 <__fp_inf>
    132c:	d7 c0       	rjmp	.+430    	; 0x14dc <__fp_szero>
    132e:	5f 3f       	cpi	r21, 0xFF	; 255
    1330:	ec f3       	brlt	.-6      	; 0x132c <__divsf3_pse+0x6a>
    1332:	98 3e       	cpi	r25, 0xE8	; 232
    1334:	dc f3       	brlt	.-10     	; 0x132c <__divsf3_pse+0x6a>
    1336:	86 95       	lsr	r24
    1338:	77 95       	ror	r23
    133a:	67 95       	ror	r22
    133c:	b7 95       	ror	r27
    133e:	f7 95       	ror	r31
    1340:	9f 5f       	subi	r25, 0xFF	; 255
    1342:	c9 f7       	brne	.-14     	; 0x1336 <__divsf3_pse+0x74>
    1344:	88 0f       	add	r24, r24
    1346:	91 1d       	adc	r25, r1
    1348:	96 95       	lsr	r25
    134a:	87 95       	ror	r24
    134c:	97 f9       	bld	r25, 7
    134e:	08 95       	ret
    1350:	e1 e0       	ldi	r30, 0x01	; 1
    1352:	66 0f       	add	r22, r22
    1354:	77 1f       	adc	r23, r23
    1356:	88 1f       	adc	r24, r24
    1358:	bb 1f       	adc	r27, r27
    135a:	62 17       	cp	r22, r18
    135c:	73 07       	cpc	r23, r19
    135e:	84 07       	cpc	r24, r20
    1360:	ba 07       	cpc	r27, r26
    1362:	20 f0       	brcs	.+8      	; 0x136c <__divsf3_pse+0xaa>
    1364:	62 1b       	sub	r22, r18
    1366:	73 0b       	sbc	r23, r19
    1368:	84 0b       	sbc	r24, r20
    136a:	ba 0b       	sbc	r27, r26
    136c:	ee 1f       	adc	r30, r30
    136e:	88 f7       	brcc	.-30     	; 0x1352 <__divsf3_pse+0x90>
    1370:	e0 95       	com	r30
    1372:	08 95       	ret

00001374 <__fixunssfsi>:
    1374:	98 d0       	rcall	.+304    	; 0x14a6 <__fp_splitA>
    1376:	88 f0       	brcs	.+34     	; 0x139a <__fixunssfsi+0x26>
    1378:	9f 57       	subi	r25, 0x7F	; 127
    137a:	90 f0       	brcs	.+36     	; 0x13a0 <__fixunssfsi+0x2c>
    137c:	b9 2f       	mov	r27, r25
    137e:	99 27       	eor	r25, r25
    1380:	b7 51       	subi	r27, 0x17	; 23
    1382:	a0 f0       	brcs	.+40     	; 0x13ac <__fixunssfsi+0x38>
    1384:	d1 f0       	breq	.+52     	; 0x13ba <__fixunssfsi+0x46>
    1386:	66 0f       	add	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	88 1f       	adc	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	1a f0       	brmi	.+6      	; 0x1396 <__fixunssfsi+0x22>
    1390:	ba 95       	dec	r27
    1392:	c9 f7       	brne	.-14     	; 0x1386 <__fixunssfsi+0x12>
    1394:	12 c0       	rjmp	.+36     	; 0x13ba <__fixunssfsi+0x46>
    1396:	b1 30       	cpi	r27, 0x01	; 1
    1398:	81 f0       	breq	.+32     	; 0x13ba <__fixunssfsi+0x46>
    139a:	9f d0       	rcall	.+318    	; 0x14da <__fp_zero>
    139c:	b1 e0       	ldi	r27, 0x01	; 1
    139e:	08 95       	ret
    13a0:	9c c0       	rjmp	.+312    	; 0x14da <__fp_zero>
    13a2:	67 2f       	mov	r22, r23
    13a4:	78 2f       	mov	r23, r24
    13a6:	88 27       	eor	r24, r24
    13a8:	b8 5f       	subi	r27, 0xF8	; 248
    13aa:	39 f0       	breq	.+14     	; 0x13ba <__fixunssfsi+0x46>
    13ac:	b9 3f       	cpi	r27, 0xF9	; 249
    13ae:	cc f3       	brlt	.-14     	; 0x13a2 <__fixunssfsi+0x2e>
    13b0:	86 95       	lsr	r24
    13b2:	77 95       	ror	r23
    13b4:	67 95       	ror	r22
    13b6:	b3 95       	inc	r27
    13b8:	d9 f7       	brne	.-10     	; 0x13b0 <__fixunssfsi+0x3c>
    13ba:	3e f4       	brtc	.+14     	; 0x13ca <__fixunssfsi+0x56>
    13bc:	90 95       	com	r25
    13be:	80 95       	com	r24
    13c0:	70 95       	com	r23
    13c2:	61 95       	neg	r22
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	8f 4f       	sbci	r24, 0xFF	; 255
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	08 95       	ret

000013cc <__floatunsisf>:
    13cc:	e8 94       	clt
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <__floatsisf+0x12>

000013d0 <__floatsisf>:
    13d0:	97 fb       	bst	r25, 7
    13d2:	3e f4       	brtc	.+14     	; 0x13e2 <__floatsisf+0x12>
    13d4:	90 95       	com	r25
    13d6:	80 95       	com	r24
    13d8:	70 95       	com	r23
    13da:	61 95       	neg	r22
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	8f 4f       	sbci	r24, 0xFF	; 255
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	99 23       	and	r25, r25
    13e4:	a9 f0       	breq	.+42     	; 0x1410 <__floatsisf+0x40>
    13e6:	f9 2f       	mov	r31, r25
    13e8:	96 e9       	ldi	r25, 0x96	; 150
    13ea:	bb 27       	eor	r27, r27
    13ec:	93 95       	inc	r25
    13ee:	f6 95       	lsr	r31
    13f0:	87 95       	ror	r24
    13f2:	77 95       	ror	r23
    13f4:	67 95       	ror	r22
    13f6:	b7 95       	ror	r27
    13f8:	f1 11       	cpse	r31, r1
    13fa:	f8 cf       	rjmp	.-16     	; 0x13ec <__floatsisf+0x1c>
    13fc:	fa f4       	brpl	.+62     	; 0x143c <__floatsisf+0x6c>
    13fe:	bb 0f       	add	r27, r27
    1400:	11 f4       	brne	.+4      	; 0x1406 <__floatsisf+0x36>
    1402:	60 ff       	sbrs	r22, 0
    1404:	1b c0       	rjmp	.+54     	; 0x143c <__floatsisf+0x6c>
    1406:	6f 5f       	subi	r22, 0xFF	; 255
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	16 c0       	rjmp	.+44     	; 0x143c <__floatsisf+0x6c>
    1410:	88 23       	and	r24, r24
    1412:	11 f0       	breq	.+4      	; 0x1418 <__floatsisf+0x48>
    1414:	96 e9       	ldi	r25, 0x96	; 150
    1416:	11 c0       	rjmp	.+34     	; 0x143a <__floatsisf+0x6a>
    1418:	77 23       	and	r23, r23
    141a:	21 f0       	breq	.+8      	; 0x1424 <__floatsisf+0x54>
    141c:	9e e8       	ldi	r25, 0x8E	; 142
    141e:	87 2f       	mov	r24, r23
    1420:	76 2f       	mov	r23, r22
    1422:	05 c0       	rjmp	.+10     	; 0x142e <__floatsisf+0x5e>
    1424:	66 23       	and	r22, r22
    1426:	71 f0       	breq	.+28     	; 0x1444 <__floatsisf+0x74>
    1428:	96 e8       	ldi	r25, 0x86	; 134
    142a:	86 2f       	mov	r24, r22
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	2a f0       	brmi	.+10     	; 0x143c <__floatsisf+0x6c>
    1432:	9a 95       	dec	r25
    1434:	66 0f       	add	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	88 1f       	adc	r24, r24
    143a:	da f7       	brpl	.-10     	; 0x1432 <__floatsisf+0x62>
    143c:	88 0f       	add	r24, r24
    143e:	96 95       	lsr	r25
    1440:	87 95       	ror	r24
    1442:	97 f9       	bld	r25, 7
    1444:	08 95       	ret

00001446 <__fp_inf>:
    1446:	97 f9       	bld	r25, 7
    1448:	9f 67       	ori	r25, 0x7F	; 127
    144a:	80 e8       	ldi	r24, 0x80	; 128
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	08 95       	ret

00001452 <__fp_nan>:
    1452:	9f ef       	ldi	r25, 0xFF	; 255
    1454:	80 ec       	ldi	r24, 0xC0	; 192
    1456:	08 95       	ret

00001458 <__fp_pscA>:
    1458:	00 24       	eor	r0, r0
    145a:	0a 94       	dec	r0
    145c:	16 16       	cp	r1, r22
    145e:	17 06       	cpc	r1, r23
    1460:	18 06       	cpc	r1, r24
    1462:	09 06       	cpc	r0, r25
    1464:	08 95       	ret

00001466 <__fp_pscB>:
    1466:	00 24       	eor	r0, r0
    1468:	0a 94       	dec	r0
    146a:	12 16       	cp	r1, r18
    146c:	13 06       	cpc	r1, r19
    146e:	14 06       	cpc	r1, r20
    1470:	05 06       	cpc	r0, r21
    1472:	08 95       	ret

00001474 <__fp_round>:
    1474:	09 2e       	mov	r0, r25
    1476:	03 94       	inc	r0
    1478:	00 0c       	add	r0, r0
    147a:	11 f4       	brne	.+4      	; 0x1480 <__fp_round+0xc>
    147c:	88 23       	and	r24, r24
    147e:	52 f0       	brmi	.+20     	; 0x1494 <__fp_round+0x20>
    1480:	bb 0f       	add	r27, r27
    1482:	40 f4       	brcc	.+16     	; 0x1494 <__fp_round+0x20>
    1484:	bf 2b       	or	r27, r31
    1486:	11 f4       	brne	.+4      	; 0x148c <__fp_round+0x18>
    1488:	60 ff       	sbrs	r22, 0
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <__fp_round+0x20>
    148c:	6f 5f       	subi	r22, 0xFF	; 255
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	8f 4f       	sbci	r24, 0xFF	; 255
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	08 95       	ret

00001496 <__fp_split3>:
    1496:	57 fd       	sbrc	r21, 7
    1498:	90 58       	subi	r25, 0x80	; 128
    149a:	44 0f       	add	r20, r20
    149c:	55 1f       	adc	r21, r21
    149e:	59 f0       	breq	.+22     	; 0x14b6 <__fp_splitA+0x10>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <__fp_splitA+0x1a>
    14a4:	47 95       	ror	r20

000014a6 <__fp_splitA>:
    14a6:	88 0f       	add	r24, r24
    14a8:	97 fb       	bst	r25, 7
    14aa:	99 1f       	adc	r25, r25
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <__fp_splitA+0x20>
    14ae:	9f 3f       	cpi	r25, 0xFF	; 255
    14b0:	79 f0       	breq	.+30     	; 0x14d0 <__fp_splitA+0x2a>
    14b2:	87 95       	ror	r24
    14b4:	08 95       	ret
    14b6:	12 16       	cp	r1, r18
    14b8:	13 06       	cpc	r1, r19
    14ba:	14 06       	cpc	r1, r20
    14bc:	55 1f       	adc	r21, r21
    14be:	f2 cf       	rjmp	.-28     	; 0x14a4 <__fp_split3+0xe>
    14c0:	46 95       	lsr	r20
    14c2:	f1 df       	rcall	.-30     	; 0x14a6 <__fp_splitA>
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <__fp_splitA+0x30>
    14c6:	16 16       	cp	r1, r22
    14c8:	17 06       	cpc	r1, r23
    14ca:	18 06       	cpc	r1, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	f1 cf       	rjmp	.-30     	; 0x14b2 <__fp_splitA+0xc>
    14d0:	86 95       	lsr	r24
    14d2:	71 05       	cpc	r23, r1
    14d4:	61 05       	cpc	r22, r1
    14d6:	08 94       	sec
    14d8:	08 95       	ret

000014da <__fp_zero>:
    14da:	e8 94       	clt

000014dc <__fp_szero>:
    14dc:	bb 27       	eor	r27, r27
    14de:	66 27       	eor	r22, r22
    14e0:	77 27       	eor	r23, r23
    14e2:	cb 01       	movw	r24, r22
    14e4:	97 f9       	bld	r25, 7
    14e6:	08 95       	ret

000014e8 <__mulsf3>:
    14e8:	0b d0       	rcall	.+22     	; 0x1500 <__mulsf3x>
    14ea:	c4 cf       	rjmp	.-120    	; 0x1474 <__fp_round>
    14ec:	b5 df       	rcall	.-150    	; 0x1458 <__fp_pscA>
    14ee:	28 f0       	brcs	.+10     	; 0x14fa <__mulsf3+0x12>
    14f0:	ba df       	rcall	.-140    	; 0x1466 <__fp_pscB>
    14f2:	18 f0       	brcs	.+6      	; 0x14fa <__mulsf3+0x12>
    14f4:	95 23       	and	r25, r21
    14f6:	09 f0       	breq	.+2      	; 0x14fa <__mulsf3+0x12>
    14f8:	a6 cf       	rjmp	.-180    	; 0x1446 <__fp_inf>
    14fa:	ab cf       	rjmp	.-170    	; 0x1452 <__fp_nan>
    14fc:	11 24       	eor	r1, r1
    14fe:	ee cf       	rjmp	.-36     	; 0x14dc <__fp_szero>

00001500 <__mulsf3x>:
    1500:	ca df       	rcall	.-108    	; 0x1496 <__fp_split3>
    1502:	a0 f3       	brcs	.-24     	; 0x14ec <__mulsf3+0x4>

00001504 <__mulsf3_pse>:
    1504:	95 9f       	mul	r25, r21
    1506:	d1 f3       	breq	.-12     	; 0x14fc <__mulsf3+0x14>
    1508:	95 0f       	add	r25, r21
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	55 1f       	adc	r21, r21
    150e:	62 9f       	mul	r22, r18
    1510:	f0 01       	movw	r30, r0
    1512:	72 9f       	mul	r23, r18
    1514:	bb 27       	eor	r27, r27
    1516:	f0 0d       	add	r31, r0
    1518:	b1 1d       	adc	r27, r1
    151a:	63 9f       	mul	r22, r19
    151c:	aa 27       	eor	r26, r26
    151e:	f0 0d       	add	r31, r0
    1520:	b1 1d       	adc	r27, r1
    1522:	aa 1f       	adc	r26, r26
    1524:	64 9f       	mul	r22, r20
    1526:	66 27       	eor	r22, r22
    1528:	b0 0d       	add	r27, r0
    152a:	a1 1d       	adc	r26, r1
    152c:	66 1f       	adc	r22, r22
    152e:	82 9f       	mul	r24, r18
    1530:	22 27       	eor	r18, r18
    1532:	b0 0d       	add	r27, r0
    1534:	a1 1d       	adc	r26, r1
    1536:	62 1f       	adc	r22, r18
    1538:	73 9f       	mul	r23, r19
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	62 1f       	adc	r22, r18
    1540:	83 9f       	mul	r24, r19
    1542:	a0 0d       	add	r26, r0
    1544:	61 1d       	adc	r22, r1
    1546:	22 1f       	adc	r18, r18
    1548:	74 9f       	mul	r23, r20
    154a:	33 27       	eor	r19, r19
    154c:	a0 0d       	add	r26, r0
    154e:	61 1d       	adc	r22, r1
    1550:	23 1f       	adc	r18, r19
    1552:	84 9f       	mul	r24, r20
    1554:	60 0d       	add	r22, r0
    1556:	21 1d       	adc	r18, r1
    1558:	82 2f       	mov	r24, r18
    155a:	76 2f       	mov	r23, r22
    155c:	6a 2f       	mov	r22, r26
    155e:	11 24       	eor	r1, r1
    1560:	9f 57       	subi	r25, 0x7F	; 127
    1562:	50 40       	sbci	r21, 0x00	; 0
    1564:	8a f0       	brmi	.+34     	; 0x1588 <__mulsf3_pse+0x84>
    1566:	e1 f0       	breq	.+56     	; 0x15a0 <__mulsf3_pse+0x9c>
    1568:	88 23       	and	r24, r24
    156a:	4a f0       	brmi	.+18     	; 0x157e <__mulsf3_pse+0x7a>
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	91 50       	subi	r25, 0x01	; 1
    157a:	50 40       	sbci	r21, 0x00	; 0
    157c:	a9 f7       	brne	.-22     	; 0x1568 <__mulsf3_pse+0x64>
    157e:	9e 3f       	cpi	r25, 0xFE	; 254
    1580:	51 05       	cpc	r21, r1
    1582:	70 f0       	brcs	.+28     	; 0x15a0 <__mulsf3_pse+0x9c>
    1584:	60 cf       	rjmp	.-320    	; 0x1446 <__fp_inf>
    1586:	aa cf       	rjmp	.-172    	; 0x14dc <__fp_szero>
    1588:	5f 3f       	cpi	r21, 0xFF	; 255
    158a:	ec f3       	brlt	.-6      	; 0x1586 <__mulsf3_pse+0x82>
    158c:	98 3e       	cpi	r25, 0xE8	; 232
    158e:	dc f3       	brlt	.-10     	; 0x1586 <__mulsf3_pse+0x82>
    1590:	86 95       	lsr	r24
    1592:	77 95       	ror	r23
    1594:	67 95       	ror	r22
    1596:	b7 95       	ror	r27
    1598:	f7 95       	ror	r31
    159a:	e7 95       	ror	r30
    159c:	9f 5f       	subi	r25, 0xFF	; 255
    159e:	c1 f7       	brne	.-16     	; 0x1590 <__mulsf3_pse+0x8c>
    15a0:	fe 2b       	or	r31, r30
    15a2:	88 0f       	add	r24, r24
    15a4:	91 1d       	adc	r25, r1
    15a6:	96 95       	lsr	r25
    15a8:	87 95       	ror	r24
    15aa:	97 f9       	bld	r25, 7
    15ac:	08 95       	ret

000015ae <vfprintf>:
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	62 97       	sbiw	r28, 0x12	; 18
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	7c 01       	movw	r14, r24
    15e4:	1b 01       	movw	r2, r22
    15e6:	6a 01       	movw	r12, r20
    15e8:	fc 01       	movw	r30, r24
    15ea:	17 82       	std	Z+7, r1	; 0x07
    15ec:	16 82       	std	Z+6, r1	; 0x06
    15ee:	83 81       	ldd	r24, Z+3	; 0x03
    15f0:	81 fd       	sbrc	r24, 1
    15f2:	03 c0       	rjmp	.+6      	; 0x15fa <vfprintf+0x4c>
    15f4:	4e c3       	rjmp	.+1692   	; 0x1c92 <vfprintf+0x6e4>
    15f6:	65 01       	movw	r12, r10
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <vfprintf+0x56>
    15fa:	88 24       	eor	r8, r8
    15fc:	83 94       	inc	r8
    15fe:	91 2c       	mov	r9, r1
    1600:	8c 0e       	add	r8, r28
    1602:	9d 1e       	adc	r9, r29
    1604:	f7 01       	movw	r30, r14
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	f1 01       	movw	r30, r2
    160a:	93 fd       	sbrc	r25, 3
    160c:	85 91       	lpm	r24, Z+
    160e:	93 ff       	sbrs	r25, 3
    1610:	81 91       	ld	r24, Z+
    1612:	1f 01       	movw	r2, r30
    1614:	88 23       	and	r24, r24
    1616:	09 f4       	brne	.+2      	; 0x161a <vfprintf+0x6c>
    1618:	38 c3       	rjmp	.+1648   	; 0x1c8a <vfprintf+0x6dc>
    161a:	85 32       	cpi	r24, 0x25	; 37
    161c:	39 f4       	brne	.+14     	; 0x162c <vfprintf+0x7e>
    161e:	93 fd       	sbrc	r25, 3
    1620:	85 91       	lpm	r24, Z+
    1622:	93 ff       	sbrs	r25, 3
    1624:	81 91       	ld	r24, Z+
    1626:	1f 01       	movw	r2, r30
    1628:	85 32       	cpi	r24, 0x25	; 37
    162a:	29 f4       	brne	.+10     	; 0x1636 <vfprintf+0x88>
    162c:	b7 01       	movw	r22, r14
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	da d5       	rcall	.+2996   	; 0x21e6 <fputc>
    1632:	56 01       	movw	r10, r12
    1634:	e0 cf       	rjmp	.-64     	; 0x15f6 <vfprintf+0x48>
    1636:	71 2c       	mov	r7, r1
    1638:	61 2c       	mov	r6, r1
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	20 32       	cpi	r18, 0x20	; 32
    163e:	a8 f4       	brcc	.+42     	; 0x166a <vfprintf+0xbc>
    1640:	8b 32       	cpi	r24, 0x2B	; 43
    1642:	61 f0       	breq	.+24     	; 0x165c <vfprintf+0xae>
    1644:	28 f4       	brcc	.+10     	; 0x1650 <vfprintf+0xa2>
    1646:	80 32       	cpi	r24, 0x20	; 32
    1648:	51 f0       	breq	.+20     	; 0x165e <vfprintf+0xb0>
    164a:	83 32       	cpi	r24, 0x23	; 35
    164c:	71 f4       	brne	.+28     	; 0x166a <vfprintf+0xbc>
    164e:	0b c0       	rjmp	.+22     	; 0x1666 <vfprintf+0xb8>
    1650:	8d 32       	cpi	r24, 0x2D	; 45
    1652:	39 f0       	breq	.+14     	; 0x1662 <vfprintf+0xb4>
    1654:	80 33       	cpi	r24, 0x30	; 48
    1656:	49 f4       	brne	.+18     	; 0x166a <vfprintf+0xbc>
    1658:	21 60       	ori	r18, 0x01	; 1
    165a:	28 c0       	rjmp	.+80     	; 0x16ac <vfprintf+0xfe>
    165c:	22 60       	ori	r18, 0x02	; 2
    165e:	24 60       	ori	r18, 0x04	; 4
    1660:	25 c0       	rjmp	.+74     	; 0x16ac <vfprintf+0xfe>
    1662:	28 60       	ori	r18, 0x08	; 8
    1664:	23 c0       	rjmp	.+70     	; 0x16ac <vfprintf+0xfe>
    1666:	20 61       	ori	r18, 0x10	; 16
    1668:	21 c0       	rjmp	.+66     	; 0x16ac <vfprintf+0xfe>
    166a:	27 fd       	sbrc	r18, 7
    166c:	27 c0       	rjmp	.+78     	; 0x16bc <vfprintf+0x10e>
    166e:	38 2f       	mov	r19, r24
    1670:	30 53       	subi	r19, 0x30	; 48
    1672:	3a 30       	cpi	r19, 0x0A	; 10
    1674:	78 f4       	brcc	.+30     	; 0x1694 <vfprintf+0xe6>
    1676:	26 ff       	sbrs	r18, 6
    1678:	06 c0       	rjmp	.+12     	; 0x1686 <vfprintf+0xd8>
    167a:	fa e0       	ldi	r31, 0x0A	; 10
    167c:	7f 9e       	mul	r7, r31
    167e:	30 0d       	add	r19, r0
    1680:	11 24       	eor	r1, r1
    1682:	73 2e       	mov	r7, r19
    1684:	13 c0       	rjmp	.+38     	; 0x16ac <vfprintf+0xfe>
    1686:	4a e0       	ldi	r20, 0x0A	; 10
    1688:	64 9e       	mul	r6, r20
    168a:	30 0d       	add	r19, r0
    168c:	11 24       	eor	r1, r1
    168e:	63 2e       	mov	r6, r19
    1690:	20 62       	ori	r18, 0x20	; 32
    1692:	0c c0       	rjmp	.+24     	; 0x16ac <vfprintf+0xfe>
    1694:	8e 32       	cpi	r24, 0x2E	; 46
    1696:	21 f4       	brne	.+8      	; 0x16a0 <vfprintf+0xf2>
    1698:	26 fd       	sbrc	r18, 6
    169a:	f7 c2       	rjmp	.+1518   	; 0x1c8a <vfprintf+0x6dc>
    169c:	20 64       	ori	r18, 0x40	; 64
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0xfe>
    16a0:	8c 36       	cpi	r24, 0x6C	; 108
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <vfprintf+0xfa>
    16a4:	20 68       	ori	r18, 0x80	; 128
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0xfe>
    16a8:	88 36       	cpi	r24, 0x68	; 104
    16aa:	41 f4       	brne	.+16     	; 0x16bc <vfprintf+0x10e>
    16ac:	f1 01       	movw	r30, r2
    16ae:	93 fd       	sbrc	r25, 3
    16b0:	85 91       	lpm	r24, Z+
    16b2:	93 ff       	sbrs	r25, 3
    16b4:	81 91       	ld	r24, Z+
    16b6:	1f 01       	movw	r2, r30
    16b8:	81 11       	cpse	r24, r1
    16ba:	c0 cf       	rjmp	.-128    	; 0x163c <vfprintf+0x8e>
    16bc:	98 2f       	mov	r25, r24
    16be:	95 54       	subi	r25, 0x45	; 69
    16c0:	93 30       	cpi	r25, 0x03	; 3
    16c2:	18 f4       	brcc	.+6      	; 0x16ca <vfprintf+0x11c>
    16c4:	20 61       	ori	r18, 0x10	; 16
    16c6:	80 5e       	subi	r24, 0xE0	; 224
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <vfprintf+0x128>
    16ca:	98 2f       	mov	r25, r24
    16cc:	95 56       	subi	r25, 0x65	; 101
    16ce:	93 30       	cpi	r25, 0x03	; 3
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <vfprintf+0x126>
    16d2:	94 c1       	rjmp	.+808    	; 0x19fc <vfprintf+0x44e>
    16d4:	2f 7e       	andi	r18, 0xEF	; 239
    16d6:	26 fd       	sbrc	r18, 6
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <vfprintf+0x130>
    16da:	16 e0       	ldi	r17, 0x06	; 6
    16dc:	71 2e       	mov	r7, r17
    16de:	bf e3       	ldi	r27, 0x3F	; 63
    16e0:	5b 2e       	mov	r5, r27
    16e2:	52 22       	and	r5, r18
    16e4:	85 36       	cpi	r24, 0x65	; 101
    16e6:	19 f4       	brne	.+6      	; 0x16ee <vfprintf+0x140>
    16e8:	f0 e4       	ldi	r31, 0x40	; 64
    16ea:	5f 2a       	or	r5, r31
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <vfprintf+0x14e>
    16ee:	86 36       	cpi	r24, 0x66	; 102
    16f0:	19 f4       	brne	.+6      	; 0x16f8 <vfprintf+0x14a>
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	54 2a       	or	r5, r20
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0x14e>
    16f8:	71 10       	cpse	r7, r1
    16fa:	7a 94       	dec	r7
    16fc:	57 fe       	sbrs	r5, 7
    16fe:	07 c0       	rjmp	.+14     	; 0x170e <vfprintf+0x160>
    1700:	5b e3       	ldi	r21, 0x3B	; 59
    1702:	57 15       	cp	r21, r7
    1704:	48 f0       	brcs	.+18     	; 0x1718 <vfprintf+0x16a>
    1706:	47 2c       	mov	r4, r7
    1708:	43 94       	inc	r4
    170a:	27 e0       	ldi	r18, 0x07	; 7
    170c:	0d c0       	rjmp	.+26     	; 0x1728 <vfprintf+0x17a>
    170e:	87 e0       	ldi	r24, 0x07	; 7
    1710:	87 15       	cp	r24, r7
    1712:	30 f0       	brcs	.+12     	; 0x1720 <vfprintf+0x172>
    1714:	27 2d       	mov	r18, r7
    1716:	07 c0       	rjmp	.+14     	; 0x1726 <vfprintf+0x178>
    1718:	27 e0       	ldi	r18, 0x07	; 7
    171a:	ac e3       	ldi	r26, 0x3C	; 60
    171c:	4a 2e       	mov	r4, r26
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <vfprintf+0x17a>
    1720:	27 e0       	ldi	r18, 0x07	; 7
    1722:	f7 e0       	ldi	r31, 0x07	; 7
    1724:	7f 2e       	mov	r7, r31
    1726:	41 2c       	mov	r4, r1
    1728:	56 01       	movw	r10, r12
    172a:	94 e0       	ldi	r25, 0x04	; 4
    172c:	a9 0e       	add	r10, r25
    172e:	b1 1c       	adc	r11, r1
    1730:	f6 01       	movw	r30, r12
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	04 2d       	mov	r16, r4
    173c:	a4 01       	movw	r20, r8
    173e:	4e d4       	rcall	.+2204   	; 0x1fdc <__ftoa_engine>
    1740:	8c 01       	movw	r16, r24
    1742:	49 81       	ldd	r20, Y+1	; 0x01
    1744:	4c 87       	std	Y+12, r20	; 0x0c
    1746:	40 ff       	sbrs	r20, 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0x1a0>
    174a:	43 ff       	sbrs	r20, 3
    174c:	07 c0       	rjmp	.+14     	; 0x175c <vfprintf+0x1ae>
    174e:	51 fc       	sbrc	r5, 1
    1750:	08 c0       	rjmp	.+16     	; 0x1762 <vfprintf+0x1b4>
    1752:	52 fe       	sbrs	r5, 2
    1754:	09 c0       	rjmp	.+18     	; 0x1768 <vfprintf+0x1ba>
    1756:	e0 e2       	ldi	r30, 0x20	; 32
    1758:	de 2e       	mov	r13, r30
    175a:	07 c0       	rjmp	.+14     	; 0x176a <vfprintf+0x1bc>
    175c:	7d e2       	ldi	r23, 0x2D	; 45
    175e:	d7 2e       	mov	r13, r23
    1760:	04 c0       	rjmp	.+8      	; 0x176a <vfprintf+0x1bc>
    1762:	6b e2       	ldi	r22, 0x2B	; 43
    1764:	d6 2e       	mov	r13, r22
    1766:	01 c0       	rjmp	.+2      	; 0x176a <vfprintf+0x1bc>
    1768:	d1 2c       	mov	r13, r1
    176a:	8c 85       	ldd	r24, Y+12	; 0x0c
    176c:	8c 70       	andi	r24, 0x0C	; 12
    176e:	89 f1       	breq	.+98     	; 0x17d2 <vfprintf+0x224>
    1770:	dd 20       	and	r13, r13
    1772:	11 f0       	breq	.+4      	; 0x1778 <vfprintf+0x1ca>
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	01 c0       	rjmp	.+2      	; 0x177a <vfprintf+0x1cc>
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	86 15       	cp	r24, r6
    177c:	10 f0       	brcs	.+4      	; 0x1782 <vfprintf+0x1d4>
    177e:	61 2c       	mov	r6, r1
    1780:	0a c0       	rjmp	.+20     	; 0x1796 <vfprintf+0x1e8>
    1782:	68 1a       	sub	r6, r24
    1784:	53 fc       	sbrc	r5, 3
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <vfprintf+0x1e8>
    1788:	b7 01       	movw	r22, r14
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	2b d5       	rcall	.+2646   	; 0x21e6 <fputc>
    1790:	6a 94       	dec	r6
    1792:	d1 f7       	brne	.-12     	; 0x1788 <vfprintf+0x1da>
    1794:	f4 cf       	rjmp	.-24     	; 0x177e <vfprintf+0x1d0>
    1796:	dd 20       	and	r13, r13
    1798:	21 f0       	breq	.+8      	; 0x17a2 <vfprintf+0x1f4>
    179a:	b7 01       	movw	r22, r14
    179c:	8d 2d       	mov	r24, r13
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	22 d5       	rcall	.+2628   	; 0x21e6 <fputc>
    17a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    17a4:	53 fd       	sbrc	r21, 3
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <vfprintf+0x200>
    17a8:	00 e9       	ldi	r16, 0x90	; 144
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <vfprintf+0x216>
    17ae:	0c e8       	ldi	r16, 0x8C	; 140
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <vfprintf+0x216>
    17b4:	51 10       	cpse	r5, r1
    17b6:	80 52       	subi	r24, 0x20	; 32
    17b8:	b7 01       	movw	r22, r14
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	14 d5       	rcall	.+2600   	; 0x21e6 <fputc>
    17be:	0f 5f       	subi	r16, 0xFF	; 255
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <vfprintf+0x21a>
    17c4:	80 e1       	ldi	r24, 0x10	; 16
    17c6:	58 22       	and	r5, r24
    17c8:	f8 01       	movw	r30, r16
    17ca:	84 91       	lpm	r24, Z
    17cc:	81 11       	cpse	r24, r1
    17ce:	f2 cf       	rjmp	.-28     	; 0x17b4 <vfprintf+0x206>
    17d0:	59 c2       	rjmp	.+1202   	; 0x1c84 <vfprintf+0x6d6>
    17d2:	57 fe       	sbrs	r5, 7
    17d4:	0e c0       	rjmp	.+28     	; 0x17f2 <vfprintf+0x244>
    17d6:	40 0e       	add	r4, r16
    17d8:	4c 85       	ldd	r20, Y+12	; 0x0c
    17da:	44 ff       	sbrs	r20, 4
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <vfprintf+0x238>
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	81 33       	cpi	r24, 0x31	; 49
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <vfprintf+0x238>
    17e4:	4a 94       	dec	r4
    17e6:	14 14       	cp	r1, r4
    17e8:	4c f5       	brge	.+82     	; 0x183c <vfprintf+0x28e>
    17ea:	58 e0       	ldi	r21, 0x08	; 8
    17ec:	54 15       	cp	r21, r4
    17ee:	48 f1       	brcs	.+82     	; 0x1842 <vfprintf+0x294>
    17f0:	2c c0       	rjmp	.+88     	; 0x184a <vfprintf+0x29c>
    17f2:	56 fc       	sbrc	r5, 6
    17f4:	2a c0       	rjmp	.+84     	; 0x184a <vfprintf+0x29c>
    17f6:	87 2d       	mov	r24, r7
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	80 17       	cp	r24, r16
    17fc:	91 07       	cpc	r25, r17
    17fe:	44 f0       	brlt	.+16     	; 0x1810 <vfprintf+0x262>
    1800:	0c 3f       	cpi	r16, 0xFC	; 252
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	18 07       	cpc	r17, r24
    1806:	24 f0       	brlt	.+8      	; 0x1810 <vfprintf+0x262>
    1808:	90 e8       	ldi	r25, 0x80	; 128
    180a:	59 2a       	or	r5, r25
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <vfprintf+0x262>
    180e:	7a 94       	dec	r7
    1810:	77 20       	and	r7, r7
    1812:	49 f0       	breq	.+18     	; 0x1826 <vfprintf+0x278>
    1814:	e2 e0       	ldi	r30, 0x02	; 2
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	ec 0f       	add	r30, r28
    181a:	fd 1f       	adc	r31, r29
    181c:	e7 0d       	add	r30, r7
    181e:	f1 1d       	adc	r31, r1
    1820:	80 81       	ld	r24, Z
    1822:	80 33       	cpi	r24, 0x30	; 48
    1824:	a1 f3       	breq	.-24     	; 0x180e <vfprintf+0x260>
    1826:	57 fe       	sbrs	r5, 7
    1828:	10 c0       	rjmp	.+32     	; 0x184a <vfprintf+0x29c>
    182a:	47 2c       	mov	r4, r7
    182c:	43 94       	inc	r4
    182e:	87 2d       	mov	r24, r7
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	08 17       	cp	r16, r24
    1834:	19 07       	cpc	r17, r25
    1836:	44 f4       	brge	.+16     	; 0x1848 <vfprintf+0x29a>
    1838:	70 1a       	sub	r7, r16
    183a:	07 c0       	rjmp	.+14     	; 0x184a <vfprintf+0x29c>
    183c:	44 24       	eor	r4, r4
    183e:	43 94       	inc	r4
    1840:	04 c0       	rjmp	.+8      	; 0x184a <vfprintf+0x29c>
    1842:	58 e0       	ldi	r21, 0x08	; 8
    1844:	45 2e       	mov	r4, r21
    1846:	01 c0       	rjmp	.+2      	; 0x184a <vfprintf+0x29c>
    1848:	71 2c       	mov	r7, r1
    184a:	57 fe       	sbrs	r5, 7
    184c:	07 c0       	rjmp	.+14     	; 0x185c <vfprintf+0x2ae>
    184e:	10 16       	cp	r1, r16
    1850:	11 06       	cpc	r1, r17
    1852:	3c f4       	brge	.+14     	; 0x1862 <vfprintf+0x2b4>
    1854:	98 01       	movw	r18, r16
    1856:	2f 5f       	subi	r18, 0xFF	; 255
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <vfprintf+0x2b8>
    185c:	25 e0       	ldi	r18, 0x05	; 5
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x2b8>
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	dd 20       	and	r13, r13
    1868:	11 f0       	breq	.+4      	; 0x186e <vfprintf+0x2c0>
    186a:	2f 5f       	subi	r18, 0xFF	; 255
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	77 20       	and	r7, r7
    1870:	31 f0       	breq	.+12     	; 0x187e <vfprintf+0x2d0>
    1872:	47 2d       	mov	r20, r7
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	4f 5f       	subi	r20, 0xFF	; 255
    1878:	5f 4f       	sbci	r21, 0xFF	; 255
    187a:	24 0f       	add	r18, r20
    187c:	35 1f       	adc	r19, r21
    187e:	46 2d       	mov	r20, r6
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	24 17       	cp	r18, r20
    1884:	35 07       	cpc	r19, r21
    1886:	14 f4       	brge	.+4      	; 0x188c <vfprintf+0x2de>
    1888:	62 1a       	sub	r6, r18
    188a:	01 c0       	rjmp	.+2      	; 0x188e <vfprintf+0x2e0>
    188c:	61 2c       	mov	r6, r1
    188e:	85 2d       	mov	r24, r5
    1890:	89 70       	andi	r24, 0x09	; 9
    1892:	41 f4       	brne	.+16     	; 0x18a4 <vfprintf+0x2f6>
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <vfprintf+0x2f2>
    1896:	b7 01       	movw	r22, r14
    1898:	80 e2       	ldi	r24, 0x20	; 32
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a4 d4       	rcall	.+2376   	; 0x21e6 <fputc>
    189e:	6a 94       	dec	r6
    18a0:	61 10       	cpse	r6, r1
    18a2:	f9 cf       	rjmp	.-14     	; 0x1896 <vfprintf+0x2e8>
    18a4:	dd 20       	and	r13, r13
    18a6:	21 f0       	breq	.+8      	; 0x18b0 <vfprintf+0x302>
    18a8:	b7 01       	movw	r22, r14
    18aa:	8d 2d       	mov	r24, r13
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9b d4       	rcall	.+2358   	; 0x21e6 <fputc>
    18b0:	53 fc       	sbrc	r5, 3
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <vfprintf+0x316>
    18b4:	05 c0       	rjmp	.+10     	; 0x18c0 <vfprintf+0x312>
    18b6:	b7 01       	movw	r22, r14
    18b8:	80 e3       	ldi	r24, 0x30	; 48
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	94 d4       	rcall	.+2344   	; 0x21e6 <fputc>
    18be:	6a 94       	dec	r6
    18c0:	61 10       	cpse	r6, r1
    18c2:	f9 cf       	rjmp	.-14     	; 0x18b6 <vfprintf+0x308>
    18c4:	57 fe       	sbrs	r5, 7
    18c6:	54 c0       	rjmp	.+168    	; 0x1970 <vfprintf+0x3c2>
    18c8:	68 01       	movw	r12, r16
    18ca:	17 ff       	sbrs	r17, 7
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x324>
    18ce:	c1 2c       	mov	r12, r1
    18d0:	d1 2c       	mov	r13, r1
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	a8 01       	movw	r20, r16
    18d8:	44 19       	sub	r20, r4
    18da:	51 09       	sbc	r21, r1
    18dc:	5e 87       	std	Y+14, r21	; 0x0e
    18de:	4d 87       	std	Y+13, r20	; 0x0d
    18e0:	28 01       	movw	r4, r16
    18e2:	4c 18       	sub	r4, r12
    18e4:	5d 08       	sbc	r5, r13
    18e6:	48 0c       	add	r4, r8
    18e8:	59 1c       	adc	r5, r9
    18ea:	87 2d       	mov	r24, r7
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	44 27       	eor	r20, r20
    18f0:	55 27       	eor	r21, r21
    18f2:	48 1b       	sub	r20, r24
    18f4:	59 0b       	sbc	r21, r25
    18f6:	58 8b       	std	Y+16, r21	; 0x10
    18f8:	4f 87       	std	Y+15, r20	; 0x0f
    18fa:	5f ef       	ldi	r21, 0xFF	; 255
    18fc:	c5 16       	cp	r12, r21
    18fe:	d5 06       	cpc	r13, r21
    1900:	41 f4       	brne	.+16     	; 0x1912 <vfprintf+0x364>
    1902:	b7 01       	movw	r22, r14
    1904:	8e e2       	ldi	r24, 0x2E	; 46
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	2a 8b       	std	Y+18, r18	; 0x12
    190a:	39 8b       	std	Y+17, r19	; 0x11
    190c:	6c d4       	rcall	.+2264   	; 0x21e6 <fputc>
    190e:	39 89       	ldd	r19, Y+17	; 0x11
    1910:	2a 89       	ldd	r18, Y+18	; 0x12
    1912:	0c 15       	cp	r16, r12
    1914:	1d 05       	cpc	r17, r13
    1916:	54 f0       	brlt	.+20     	; 0x192c <vfprintf+0x37e>
    1918:	4d 85       	ldd	r20, Y+13	; 0x0d
    191a:	5e 85       	ldd	r21, Y+14	; 0x0e
    191c:	4c 15       	cp	r20, r12
    191e:	5d 05       	cpc	r21, r13
    1920:	2c f4       	brge	.+10     	; 0x192c <vfprintf+0x37e>
    1922:	f2 01       	movw	r30, r4
    1924:	e2 0f       	add	r30, r18
    1926:	f3 1f       	adc	r31, r19
    1928:	81 81       	ldd	r24, Z+1	; 0x01
    192a:	01 c0       	rjmp	.+2      	; 0x192e <vfprintf+0x380>
    192c:	80 e3       	ldi	r24, 0x30	; 48
    192e:	51 e0       	ldi	r21, 0x01	; 1
    1930:	c5 1a       	sub	r12, r21
    1932:	d1 08       	sbc	r13, r1
    1934:	2f 5f       	subi	r18, 0xFF	; 255
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	4f 85       	ldd	r20, Y+15	; 0x0f
    193a:	58 89       	ldd	r21, Y+16	; 0x10
    193c:	c4 16       	cp	r12, r20
    193e:	d5 06       	cpc	r13, r21
    1940:	44 f0       	brlt	.+16     	; 0x1952 <vfprintf+0x3a4>
    1942:	b7 01       	movw	r22, r14
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	2a 8b       	std	Y+18, r18	; 0x12
    1948:	39 8b       	std	Y+17, r19	; 0x11
    194a:	4d d4       	rcall	.+2202   	; 0x21e6 <fputc>
    194c:	2a 89       	ldd	r18, Y+18	; 0x12
    194e:	39 89       	ldd	r19, Y+17	; 0x11
    1950:	d4 cf       	rjmp	.-88     	; 0x18fa <vfprintf+0x34c>
    1952:	c0 16       	cp	r12, r16
    1954:	d1 06       	cpc	r13, r17
    1956:	49 f4       	brne	.+18     	; 0x196a <vfprintf+0x3bc>
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
    195a:	96 33       	cpi	r25, 0x36	; 54
    195c:	28 f4       	brcc	.+10     	; 0x1968 <vfprintf+0x3ba>
    195e:	95 33       	cpi	r25, 0x35	; 53
    1960:	21 f4       	brne	.+8      	; 0x196a <vfprintf+0x3bc>
    1962:	5c 85       	ldd	r21, Y+12	; 0x0c
    1964:	54 fd       	sbrc	r21, 4
    1966:	01 c0       	rjmp	.+2      	; 0x196a <vfprintf+0x3bc>
    1968:	81 e3       	ldi	r24, 0x31	; 49
    196a:	b7 01       	movw	r22, r14
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	44 c0       	rjmp	.+136    	; 0x19f8 <vfprintf+0x44a>
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	81 33       	cpi	r24, 0x31	; 49
    1974:	19 f0       	breq	.+6      	; 0x197c <vfprintf+0x3ce>
    1976:	4c 85       	ldd	r20, Y+12	; 0x0c
    1978:	4f 7e       	andi	r20, 0xEF	; 239
    197a:	4c 87       	std	Y+12, r20	; 0x0c
    197c:	b7 01       	movw	r22, r14
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	32 d4       	rcall	.+2148   	; 0x21e6 <fputc>
    1982:	71 10       	cpse	r7, r1
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <vfprintf+0x3e2>
    1986:	54 fe       	sbrs	r5, 4
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <vfprintf+0x404>
    198a:	85 e4       	ldi	r24, 0x45	; 69
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <vfprintf+0x408>
    1990:	b7 01       	movw	r22, r14
    1992:	8e e2       	ldi	r24, 0x2E	; 46
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	27 d4       	rcall	.+2126   	; 0x21e6 <fputc>
    1998:	42 e0       	ldi	r20, 0x02	; 2
    199a:	d4 2e       	mov	r13, r20
    199c:	f4 01       	movw	r30, r8
    199e:	ed 0d       	add	r30, r13
    19a0:	f1 1d       	adc	r31, r1
    19a2:	d3 94       	inc	r13
    19a4:	b7 01       	movw	r22, r14
    19a6:	80 81       	ld	r24, Z
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	1d d4       	rcall	.+2106   	; 0x21e6 <fputc>
    19ac:	7a 94       	dec	r7
    19ae:	b1 f7       	brne	.-20     	; 0x199c <vfprintf+0x3ee>
    19b0:	ea cf       	rjmp	.-44     	; 0x1986 <vfprintf+0x3d8>
    19b2:	85 e6       	ldi	r24, 0x65	; 101
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	b7 01       	movw	r22, r14
    19b8:	16 d4       	rcall	.+2092   	; 0x21e6 <fputc>
    19ba:	17 fd       	sbrc	r17, 7
    19bc:	06 c0       	rjmp	.+12     	; 0x19ca <vfprintf+0x41c>
    19be:	01 15       	cp	r16, r1
    19c0:	11 05       	cpc	r17, r1
    19c2:	41 f4       	brne	.+16     	; 0x19d4 <vfprintf+0x426>
    19c4:	5c 85       	ldd	r21, Y+12	; 0x0c
    19c6:	54 ff       	sbrs	r21, 4
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <vfprintf+0x426>
    19ca:	11 95       	neg	r17
    19cc:	01 95       	neg	r16
    19ce:	11 09       	sbc	r17, r1
    19d0:	8d e2       	ldi	r24, 0x2D	; 45
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <vfprintf+0x428>
    19d4:	8b e2       	ldi	r24, 0x2B	; 43
    19d6:	b7 01       	movw	r22, r14
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	05 d4       	rcall	.+2058   	; 0x21e6 <fputc>
    19dc:	80 e3       	ldi	r24, 0x30	; 48
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <vfprintf+0x438>
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	0a 50       	subi	r16, 0x0A	; 10
    19e4:	11 09       	sbc	r17, r1
    19e6:	0a 30       	cpi	r16, 0x0A	; 10
    19e8:	11 05       	cpc	r17, r1
    19ea:	d4 f7       	brge	.-12     	; 0x19e0 <vfprintf+0x432>
    19ec:	b7 01       	movw	r22, r14
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	fa d3       	rcall	.+2036   	; 0x21e6 <fputc>
    19f2:	b7 01       	movw	r22, r14
    19f4:	c8 01       	movw	r24, r16
    19f6:	c0 96       	adiw	r24, 0x30	; 48
    19f8:	f6 d3       	rcall	.+2028   	; 0x21e6 <fputc>
    19fa:	44 c1       	rjmp	.+648    	; 0x1c84 <vfprintf+0x6d6>
    19fc:	83 36       	cpi	r24, 0x63	; 99
    19fe:	31 f0       	breq	.+12     	; 0x1a0c <vfprintf+0x45e>
    1a00:	83 37       	cpi	r24, 0x73	; 115
    1a02:	81 f0       	breq	.+32     	; 0x1a24 <vfprintf+0x476>
    1a04:	83 35       	cpi	r24, 0x53	; 83
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <vfprintf+0x45c>
    1a08:	5a c0       	rjmp	.+180    	; 0x1abe <vfprintf+0x510>
    1a0a:	23 c0       	rjmp	.+70     	; 0x1a52 <vfprintf+0x4a4>
    1a0c:	56 01       	movw	r10, r12
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	a8 0e       	add	r10, r24
    1a12:	b1 1c       	adc	r11, r1
    1a14:	f6 01       	movw	r30, r12
    1a16:	80 81       	ld	r24, Z
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	cc 24       	eor	r12, r12
    1a1c:	c3 94       	inc	r12
    1a1e:	d1 2c       	mov	r13, r1
    1a20:	84 01       	movw	r16, r8
    1a22:	13 c0       	rjmp	.+38     	; 0x1a4a <vfprintf+0x49c>
    1a24:	56 01       	movw	r10, r12
    1a26:	f2 e0       	ldi	r31, 0x02	; 2
    1a28:	af 0e       	add	r10, r31
    1a2a:	b1 1c       	adc	r11, r1
    1a2c:	f6 01       	movw	r30, r12
    1a2e:	00 81       	ld	r16, Z
    1a30:	11 81       	ldd	r17, Z+1	; 0x01
    1a32:	26 ff       	sbrs	r18, 6
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <vfprintf+0x48e>
    1a36:	67 2d       	mov	r22, r7
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <vfprintf+0x492>
    1a3c:	6f ef       	ldi	r22, 0xFF	; 255
    1a3e:	7f ef       	ldi	r23, 0xFF	; 255
    1a40:	c8 01       	movw	r24, r16
    1a42:	2a 8b       	std	Y+18, r18	; 0x12
    1a44:	c5 d3       	rcall	.+1930   	; 0x21d0 <strnlen>
    1a46:	6c 01       	movw	r12, r24
    1a48:	2a 89       	ldd	r18, Y+18	; 0x12
    1a4a:	9f e7       	ldi	r25, 0x7F	; 127
    1a4c:	59 2e       	mov	r5, r25
    1a4e:	52 22       	and	r5, r18
    1a50:	16 c0       	rjmp	.+44     	; 0x1a7e <vfprintf+0x4d0>
    1a52:	56 01       	movw	r10, r12
    1a54:	f2 e0       	ldi	r31, 0x02	; 2
    1a56:	af 0e       	add	r10, r31
    1a58:	b1 1c       	adc	r11, r1
    1a5a:	f6 01       	movw	r30, r12
    1a5c:	00 81       	ld	r16, Z
    1a5e:	11 81       	ldd	r17, Z+1	; 0x01
    1a60:	26 ff       	sbrs	r18, 6
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <vfprintf+0x4bc>
    1a64:	67 2d       	mov	r22, r7
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <vfprintf+0x4c0>
    1a6a:	6f ef       	ldi	r22, 0xFF	; 255
    1a6c:	7f ef       	ldi	r23, 0xFF	; 255
    1a6e:	c8 01       	movw	r24, r16
    1a70:	2a 8b       	std	Y+18, r18	; 0x12
    1a72:	8c d3       	rcall	.+1816   	; 0x218c <strnlen_P>
    1a74:	6c 01       	movw	r12, r24
    1a76:	2a 89       	ldd	r18, Y+18	; 0x12
    1a78:	80 e8       	ldi	r24, 0x80	; 128
    1a7a:	58 2e       	mov	r5, r24
    1a7c:	52 2a       	or	r5, r18
    1a7e:	53 fc       	sbrc	r5, 3
    1a80:	1a c0       	rjmp	.+52     	; 0x1ab6 <vfprintf+0x508>
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <vfprintf+0x4e0>
    1a84:	b7 01       	movw	r22, r14
    1a86:	80 e2       	ldi	r24, 0x20	; 32
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	ad d3       	rcall	.+1882   	; 0x21e6 <fputc>
    1a8c:	6a 94       	dec	r6
    1a8e:	86 2d       	mov	r24, r6
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	c8 16       	cp	r12, r24
    1a94:	d9 06       	cpc	r13, r25
    1a96:	b0 f3       	brcs	.-20     	; 0x1a84 <vfprintf+0x4d6>
    1a98:	0e c0       	rjmp	.+28     	; 0x1ab6 <vfprintf+0x508>
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	57 fc       	sbrc	r5, 7
    1a9e:	85 91       	lpm	r24, Z+
    1aa0:	57 fe       	sbrs	r5, 7
    1aa2:	81 91       	ld	r24, Z+
    1aa4:	8f 01       	movw	r16, r30
    1aa6:	b7 01       	movw	r22, r14
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9d d3       	rcall	.+1850   	; 0x21e6 <fputc>
    1aac:	61 10       	cpse	r6, r1
    1aae:	6a 94       	dec	r6
    1ab0:	f1 e0       	ldi	r31, 0x01	; 1
    1ab2:	cf 1a       	sub	r12, r31
    1ab4:	d1 08       	sbc	r13, r1
    1ab6:	c1 14       	cp	r12, r1
    1ab8:	d1 04       	cpc	r13, r1
    1aba:	79 f7       	brne	.-34     	; 0x1a9a <vfprintf+0x4ec>
    1abc:	e3 c0       	rjmp	.+454    	; 0x1c84 <vfprintf+0x6d6>
    1abe:	84 36       	cpi	r24, 0x64	; 100
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <vfprintf+0x518>
    1ac2:	89 36       	cpi	r24, 0x69	; 105
    1ac4:	49 f5       	brne	.+82     	; 0x1b18 <vfprintf+0x56a>
    1ac6:	56 01       	movw	r10, r12
    1ac8:	27 ff       	sbrs	r18, 7
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <vfprintf+0x530>
    1acc:	44 e0       	ldi	r20, 0x04	; 4
    1ace:	a4 0e       	add	r10, r20
    1ad0:	b1 1c       	adc	r11, r1
    1ad2:	f6 01       	movw	r30, r12
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	0a c0       	rjmp	.+20     	; 0x1af2 <vfprintf+0x544>
    1ade:	f2 e0       	ldi	r31, 0x02	; 2
    1ae0:	af 0e       	add	r10, r31
    1ae2:	b1 1c       	adc	r11, r1
    1ae4:	f6 01       	movw	r30, r12
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	88 27       	eor	r24, r24
    1aec:	77 fd       	sbrc	r23, 7
    1aee:	80 95       	com	r24
    1af0:	98 2f       	mov	r25, r24
    1af2:	12 2f       	mov	r17, r18
    1af4:	1f 76       	andi	r17, 0x6F	; 111
    1af6:	97 ff       	sbrs	r25, 7
    1af8:	08 c0       	rjmp	.+16     	; 0x1b0a <vfprintf+0x55c>
    1afa:	90 95       	com	r25
    1afc:	80 95       	com	r24
    1afe:	70 95       	com	r23
    1b00:	61 95       	neg	r22
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	8f 4f       	sbci	r24, 0xFF	; 255
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	10 68       	ori	r17, 0x80	; 128
    1b0a:	2a e0       	ldi	r18, 0x0A	; 10
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	a4 01       	movw	r20, r8
    1b10:	fc d3       	rcall	.+2040   	; 0x230a <__ultoa_invert>
    1b12:	d8 2e       	mov	r13, r24
    1b14:	d8 18       	sub	r13, r8
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <vfprintf+0x5e8>
    1b18:	12 2f       	mov	r17, r18
    1b1a:	85 37       	cpi	r24, 0x75	; 117
    1b1c:	21 f4       	brne	.+8      	; 0x1b26 <vfprintf+0x578>
    1b1e:	1f 7e       	andi	r17, 0xEF	; 239
    1b20:	2a e0       	ldi	r18, 0x0A	; 10
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	1f c0       	rjmp	.+62     	; 0x1b64 <vfprintf+0x5b6>
    1b26:	19 7f       	andi	r17, 0xF9	; 249
    1b28:	8f 36       	cpi	r24, 0x6F	; 111
    1b2a:	a1 f0       	breq	.+40     	; 0x1b54 <vfprintf+0x5a6>
    1b2c:	20 f4       	brcc	.+8      	; 0x1b36 <vfprintf+0x588>
    1b2e:	88 35       	cpi	r24, 0x58	; 88
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <vfprintf+0x586>
    1b32:	ab c0       	rjmp	.+342    	; 0x1c8a <vfprintf+0x6dc>
    1b34:	0b c0       	rjmp	.+22     	; 0x1b4c <vfprintf+0x59e>
    1b36:	80 37       	cpi	r24, 0x70	; 112
    1b38:	21 f0       	breq	.+8      	; 0x1b42 <vfprintf+0x594>
    1b3a:	88 37       	cpi	r24, 0x78	; 120
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <vfprintf+0x592>
    1b3e:	a5 c0       	rjmp	.+330    	; 0x1c8a <vfprintf+0x6dc>
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <vfprintf+0x596>
    1b42:	10 61       	ori	r17, 0x10	; 16
    1b44:	14 ff       	sbrs	r17, 4
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <vfprintf+0x5ac>
    1b48:	14 60       	ori	r17, 0x04	; 4
    1b4a:	07 c0       	rjmp	.+14     	; 0x1b5a <vfprintf+0x5ac>
    1b4c:	24 ff       	sbrs	r18, 4
    1b4e:	08 c0       	rjmp	.+16     	; 0x1b60 <vfprintf+0x5b2>
    1b50:	16 60       	ori	r17, 0x06	; 6
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <vfprintf+0x5b2>
    1b54:	28 e0       	ldi	r18, 0x08	; 8
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <vfprintf+0x5b6>
    1b5a:	20 e1       	ldi	r18, 0x10	; 16
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <vfprintf+0x5b6>
    1b60:	20 e1       	ldi	r18, 0x10	; 16
    1b62:	32 e0       	ldi	r19, 0x02	; 2
    1b64:	56 01       	movw	r10, r12
    1b66:	17 ff       	sbrs	r17, 7
    1b68:	09 c0       	rjmp	.+18     	; 0x1b7c <vfprintf+0x5ce>
    1b6a:	f4 e0       	ldi	r31, 0x04	; 4
    1b6c:	af 0e       	add	r10, r31
    1b6e:	b1 1c       	adc	r11, r1
    1b70:	f6 01       	movw	r30, r12
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <vfprintf+0x5de>
    1b7c:	f2 e0       	ldi	r31, 0x02	; 2
    1b7e:	af 0e       	add	r10, r31
    1b80:	b1 1c       	adc	r11, r1
    1b82:	f6 01       	movw	r30, r12
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a4 01       	movw	r20, r8
    1b8e:	bd d3       	rcall	.+1914   	; 0x230a <__ultoa_invert>
    1b90:	d8 2e       	mov	r13, r24
    1b92:	d8 18       	sub	r13, r8
    1b94:	1f 77       	andi	r17, 0x7F	; 127
    1b96:	16 ff       	sbrs	r17, 6
    1b98:	0b c0       	rjmp	.+22     	; 0x1bb0 <vfprintf+0x602>
    1b9a:	21 2f       	mov	r18, r17
    1b9c:	2e 7f       	andi	r18, 0xFE	; 254
    1b9e:	d7 14       	cp	r13, r7
    1ba0:	50 f4       	brcc	.+20     	; 0x1bb6 <vfprintf+0x608>
    1ba2:	14 ff       	sbrs	r17, 4
    1ba4:	0a c0       	rjmp	.+20     	; 0x1bba <vfprintf+0x60c>
    1ba6:	12 fd       	sbrc	r17, 2
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <vfprintf+0x60c>
    1baa:	21 2f       	mov	r18, r17
    1bac:	2e 7e       	andi	r18, 0xEE	; 238
    1bae:	05 c0       	rjmp	.+10     	; 0x1bba <vfprintf+0x60c>
    1bb0:	0d 2d       	mov	r16, r13
    1bb2:	21 2f       	mov	r18, r17
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <vfprintf+0x60e>
    1bb6:	0d 2d       	mov	r16, r13
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <vfprintf+0x60e>
    1bba:	07 2d       	mov	r16, r7
    1bbc:	24 ff       	sbrs	r18, 4
    1bbe:	0c c0       	rjmp	.+24     	; 0x1bd8 <vfprintf+0x62a>
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ed 0d       	add	r30, r13
    1bc4:	f1 1d       	adc	r31, r1
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 33       	cpi	r24, 0x30	; 48
    1bca:	11 f4       	brne	.+4      	; 0x1bd0 <vfprintf+0x622>
    1bcc:	29 7e       	andi	r18, 0xE9	; 233
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <vfprintf+0x632>
    1bd0:	22 ff       	sbrs	r18, 2
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <vfprintf+0x630>
    1bd4:	0e 5f       	subi	r16, 0xFE	; 254
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <vfprintf+0x632>
    1bd8:	82 2f       	mov	r24, r18
    1bda:	86 78       	andi	r24, 0x86	; 134
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <vfprintf+0x632>
    1bde:	0f 5f       	subi	r16, 0xFF	; 255
    1be0:	23 fd       	sbrc	r18, 3
    1be2:	13 c0       	rjmp	.+38     	; 0x1c0a <vfprintf+0x65c>
    1be4:	20 ff       	sbrs	r18, 0
    1be6:	0e c0       	rjmp	.+28     	; 0x1c04 <vfprintf+0x656>
    1be8:	7d 2c       	mov	r7, r13
    1bea:	06 15       	cp	r16, r6
    1bec:	58 f4       	brcc	.+22     	; 0x1c04 <vfprintf+0x656>
    1bee:	76 0c       	add	r7, r6
    1bf0:	70 1a       	sub	r7, r16
    1bf2:	06 2d       	mov	r16, r6
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <vfprintf+0x656>
    1bf6:	b7 01       	movw	r22, r14
    1bf8:	80 e2       	ldi	r24, 0x20	; 32
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	2a 8b       	std	Y+18, r18	; 0x12
    1bfe:	f3 d2       	rcall	.+1510   	; 0x21e6 <fputc>
    1c00:	0f 5f       	subi	r16, 0xFF	; 255
    1c02:	2a 89       	ldd	r18, Y+18	; 0x12
    1c04:	06 15       	cp	r16, r6
    1c06:	b8 f3       	brcs	.-18     	; 0x1bf6 <vfprintf+0x648>
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <vfprintf+0x664>
    1c0a:	06 15       	cp	r16, r6
    1c0c:	10 f4       	brcc	.+4      	; 0x1c12 <vfprintf+0x664>
    1c0e:	60 1a       	sub	r6, r16
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <vfprintf+0x666>
    1c12:	61 2c       	mov	r6, r1
    1c14:	24 ff       	sbrs	r18, 4
    1c16:	11 c0       	rjmp	.+34     	; 0x1c3a <vfprintf+0x68c>
    1c18:	b7 01       	movw	r22, r14
    1c1a:	80 e3       	ldi	r24, 0x30	; 48
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	2a 8b       	std	Y+18, r18	; 0x12
    1c20:	e2 d2       	rcall	.+1476   	; 0x21e6 <fputc>
    1c22:	2a 89       	ldd	r18, Y+18	; 0x12
    1c24:	22 ff       	sbrs	r18, 2
    1c26:	1c c0       	rjmp	.+56     	; 0x1c60 <vfprintf+0x6b2>
    1c28:	21 ff       	sbrs	r18, 1
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <vfprintf+0x684>
    1c2c:	88 e5       	ldi	r24, 0x58	; 88
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <vfprintf+0x688>
    1c32:	88 e7       	ldi	r24, 0x78	; 120
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	b7 01       	movw	r22, r14
    1c38:	0c c0       	rjmp	.+24     	; 0x1c52 <vfprintf+0x6a4>
    1c3a:	82 2f       	mov	r24, r18
    1c3c:	86 78       	andi	r24, 0x86	; 134
    1c3e:	81 f0       	breq	.+32     	; 0x1c60 <vfprintf+0x6b2>
    1c40:	21 fd       	sbrc	r18, 1
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <vfprintf+0x69a>
    1c44:	80 e2       	ldi	r24, 0x20	; 32
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <vfprintf+0x69c>
    1c48:	8b e2       	ldi	r24, 0x2B	; 43
    1c4a:	27 fd       	sbrc	r18, 7
    1c4c:	8d e2       	ldi	r24, 0x2D	; 45
    1c4e:	b7 01       	movw	r22, r14
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	c9 d2       	rcall	.+1426   	; 0x21e6 <fputc>
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <vfprintf+0x6b2>
    1c56:	b7 01       	movw	r22, r14
    1c58:	80 e3       	ldi	r24, 0x30	; 48
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	c4 d2       	rcall	.+1416   	; 0x21e6 <fputc>
    1c5e:	7a 94       	dec	r7
    1c60:	d7 14       	cp	r13, r7
    1c62:	c8 f3       	brcs	.-14     	; 0x1c56 <vfprintf+0x6a8>
    1c64:	da 94       	dec	r13
    1c66:	f4 01       	movw	r30, r8
    1c68:	ed 0d       	add	r30, r13
    1c6a:	f1 1d       	adc	r31, r1
    1c6c:	b7 01       	movw	r22, r14
    1c6e:	80 81       	ld	r24, Z
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	b9 d2       	rcall	.+1394   	; 0x21e6 <fputc>
    1c74:	d1 10       	cpse	r13, r1
    1c76:	f6 cf       	rjmp	.-20     	; 0x1c64 <vfprintf+0x6b6>
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <vfprintf+0x6d6>
    1c7a:	b7 01       	movw	r22, r14
    1c7c:	80 e2       	ldi	r24, 0x20	; 32
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	b2 d2       	rcall	.+1380   	; 0x21e6 <fputc>
    1c82:	6a 94       	dec	r6
    1c84:	61 10       	cpse	r6, r1
    1c86:	f9 cf       	rjmp	.-14     	; 0x1c7a <vfprintf+0x6cc>
    1c88:	b6 cc       	rjmp	.-1684   	; 0x15f6 <vfprintf+0x48>
    1c8a:	f7 01       	movw	r30, r14
    1c8c:	26 81       	ldd	r18, Z+6	; 0x06
    1c8e:	37 81       	ldd	r19, Z+7	; 0x07
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <vfprintf+0x6e8>
    1c92:	2f ef       	ldi	r18, 0xFF	; 255
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	c9 01       	movw	r24, r18
    1c98:	62 96       	adiw	r28, 0x12	; 18
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	bf 90       	pop	r11
    1cb6:	af 90       	pop	r10
    1cb8:	9f 90       	pop	r9
    1cba:	8f 90       	pop	r8
    1cbc:	7f 90       	pop	r7
    1cbe:	6f 90       	pop	r6
    1cc0:	5f 90       	pop	r5
    1cc2:	4f 90       	pop	r4
    1cc4:	3f 90       	pop	r3
    1cc6:	2f 90       	pop	r2
    1cc8:	08 95       	ret

00001cca <__divmodhi4>:
    1cca:	97 fb       	bst	r25, 7
    1ccc:	07 2e       	mov	r0, r23
    1cce:	16 f4       	brtc	.+4      	; 0x1cd4 <__divmodhi4+0xa>
    1cd0:	00 94       	com	r0
    1cd2:	06 d0       	rcall	.+12     	; 0x1ce0 <__divmodhi4_neg1>
    1cd4:	77 fd       	sbrc	r23, 7
    1cd6:	08 d0       	rcall	.+16     	; 0x1ce8 <__divmodhi4_neg2>
    1cd8:	17 d0       	rcall	.+46     	; 0x1d08 <__udivmodhi4>
    1cda:	07 fc       	sbrc	r0, 7
    1cdc:	05 d0       	rcall	.+10     	; 0x1ce8 <__divmodhi4_neg2>
    1cde:	3e f4       	brtc	.+14     	; 0x1cee <__divmodhi4_exit>

00001ce0 <__divmodhi4_neg1>:
    1ce0:	90 95       	com	r25
    1ce2:	81 95       	neg	r24
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	08 95       	ret

00001ce8 <__divmodhi4_neg2>:
    1ce8:	70 95       	com	r23
    1cea:	61 95       	neg	r22
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255

00001cee <__divmodhi4_exit>:
    1cee:	08 95       	ret

00001cf0 <__umulhisi3>:
    1cf0:	a2 9f       	mul	r26, r18
    1cf2:	b0 01       	movw	r22, r0
    1cf4:	b3 9f       	mul	r27, r19
    1cf6:	c0 01       	movw	r24, r0
    1cf8:	a3 9f       	mul	r26, r19
    1cfa:	01 d0       	rcall	.+2      	; 0x1cfe <__umulhisi3+0xe>
    1cfc:	b2 9f       	mul	r27, r18
    1cfe:	70 0d       	add	r23, r0
    1d00:	81 1d       	adc	r24, r1
    1d02:	11 24       	eor	r1, r1
    1d04:	91 1d       	adc	r25, r1
    1d06:	08 95       	ret

00001d08 <__udivmodhi4>:
    1d08:	aa 1b       	sub	r26, r26
    1d0a:	bb 1b       	sub	r27, r27
    1d0c:	51 e1       	ldi	r21, 0x11	; 17
    1d0e:	07 c0       	rjmp	.+14     	; 0x1d1e <__udivmodhi4_ep>

00001d10 <__udivmodhi4_loop>:
    1d10:	aa 1f       	adc	r26, r26
    1d12:	bb 1f       	adc	r27, r27
    1d14:	a6 17       	cp	r26, r22
    1d16:	b7 07       	cpc	r27, r23
    1d18:	10 f0       	brcs	.+4      	; 0x1d1e <__udivmodhi4_ep>
    1d1a:	a6 1b       	sub	r26, r22
    1d1c:	b7 0b       	sbc	r27, r23

00001d1e <__udivmodhi4_ep>:
    1d1e:	88 1f       	adc	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	5a 95       	dec	r21
    1d24:	a9 f7       	brne	.-22     	; 0x1d10 <__udivmodhi4_loop>
    1d26:	80 95       	com	r24
    1d28:	90 95       	com	r25
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	08 95       	ret

00001d30 <calloc>:
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	68 9f       	mul	r22, r24
    1d3a:	80 01       	movw	r16, r0
    1d3c:	69 9f       	mul	r22, r25
    1d3e:	10 0d       	add	r17, r0
    1d40:	78 9f       	mul	r23, r24
    1d42:	10 0d       	add	r17, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	c8 01       	movw	r24, r16
    1d48:	0f d0       	rcall	.+30     	; 0x1d68 <malloc>
    1d4a:	c8 2f       	mov	r28, r24
    1d4c:	d9 2f       	mov	r29, r25
    1d4e:	20 97       	sbiw	r28, 0x00	; 0
    1d50:	29 f0       	breq	.+10     	; 0x1d5c <calloc+0x2c>
    1d52:	a8 01       	movw	r20, r16
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	8c 2f       	mov	r24, r28
    1d5a:	23 d2       	rcall	.+1094   	; 0x21a2 <memset>
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	08 95       	ret

00001d68 <malloc>:
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	82 30       	cpi	r24, 0x02	; 2
    1d72:	91 05       	cpc	r25, r1
    1d74:	10 f4       	brcc	.+4      	; 0x1d7a <malloc+0x12>
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	e0 91 31 04 	lds	r30, 0x0431
    1d7e:	f0 91 32 04 	lds	r31, 0x0432
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	c0 e0       	ldi	r28, 0x00	; 0
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
    1d8a:	23 c0       	rjmp	.+70     	; 0x1dd2 <malloc+0x6a>
    1d8c:	40 81       	ld	r20, Z
    1d8e:	51 81       	ldd	r21, Z+1	; 0x01
    1d90:	48 17       	cp	r20, r24
    1d92:	59 07       	cpc	r21, r25
    1d94:	a8 f0       	brcs	.+42     	; 0x1dc0 <malloc+0x58>
    1d96:	48 17       	cp	r20, r24
    1d98:	59 07       	cpc	r21, r25
    1d9a:	61 f4       	brne	.+24     	; 0x1db4 <malloc+0x4c>
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 97       	sbiw	r28, 0x00	; 0
    1da2:	19 f0       	breq	.+6      	; 0x1daa <malloc+0x42>
    1da4:	9b 83       	std	Y+3, r25	; 0x03
    1da6:	8a 83       	std	Y+2, r24	; 0x02
    1da8:	2e c0       	rjmp	.+92     	; 0x1e06 <malloc+0x9e>
    1daa:	90 93 32 04 	sts	0x0432, r25
    1dae:	80 93 31 04 	sts	0x0431, r24
    1db2:	29 c0       	rjmp	.+82     	; 0x1e06 <malloc+0x9e>
    1db4:	21 15       	cp	r18, r1
    1db6:	31 05       	cpc	r19, r1
    1db8:	29 f0       	breq	.+10     	; 0x1dc4 <malloc+0x5c>
    1dba:	42 17       	cp	r20, r18
    1dbc:	53 07       	cpc	r21, r19
    1dbe:	10 f0       	brcs	.+4      	; 0x1dc4 <malloc+0x5c>
    1dc0:	a9 01       	movw	r20, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <malloc+0x60>
    1dc4:	be 01       	movw	r22, r28
    1dc6:	df 01       	movw	r26, r30
    1dc8:	02 81       	ldd	r16, Z+2	; 0x02
    1dca:	13 81       	ldd	r17, Z+3	; 0x03
    1dcc:	ef 01       	movw	r28, r30
    1dce:	9a 01       	movw	r18, r20
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	30 97       	sbiw	r30, 0x00	; 0
    1dd4:	d9 f6       	brne	.-74     	; 0x1d8c <malloc+0x24>
    1dd6:	21 15       	cp	r18, r1
    1dd8:	31 05       	cpc	r19, r1
    1dda:	09 f1       	breq	.+66     	; 0x1e1e <malloc+0xb6>
    1ddc:	28 1b       	sub	r18, r24
    1dde:	39 0b       	sbc	r19, r25
    1de0:	24 30       	cpi	r18, 0x04	; 4
    1de2:	31 05       	cpc	r19, r1
    1de4:	90 f4       	brcc	.+36     	; 0x1e0a <malloc+0xa2>
    1de6:	12 96       	adiw	r26, 0x02	; 2
    1de8:	8d 91       	ld	r24, X+
    1dea:	9c 91       	ld	r25, X
    1dec:	13 97       	sbiw	r26, 0x03	; 3
    1dee:	61 15       	cp	r22, r1
    1df0:	71 05       	cpc	r23, r1
    1df2:	21 f0       	breq	.+8      	; 0x1dfc <malloc+0x94>
    1df4:	fb 01       	movw	r30, r22
    1df6:	93 83       	std	Z+3, r25	; 0x03
    1df8:	82 83       	std	Z+2, r24	; 0x02
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <malloc+0x9c>
    1dfc:	90 93 32 04 	sts	0x0432, r25
    1e00:	80 93 31 04 	sts	0x0431, r24
    1e04:	fd 01       	movw	r30, r26
    1e06:	32 96       	adiw	r30, 0x02	; 2
    1e08:	44 c0       	rjmp	.+136    	; 0x1e92 <malloc+0x12a>
    1e0a:	fd 01       	movw	r30, r26
    1e0c:	e2 0f       	add	r30, r18
    1e0e:	f3 1f       	adc	r31, r19
    1e10:	81 93       	st	Z+, r24
    1e12:	91 93       	st	Z+, r25
    1e14:	22 50       	subi	r18, 0x02	; 2
    1e16:	31 09       	sbc	r19, r1
    1e18:	2d 93       	st	X+, r18
    1e1a:	3c 93       	st	X, r19
    1e1c:	3a c0       	rjmp	.+116    	; 0x1e92 <malloc+0x12a>
    1e1e:	20 91 2f 04 	lds	r18, 0x042F
    1e22:	30 91 30 04 	lds	r19, 0x0430
    1e26:	23 2b       	or	r18, r19
    1e28:	41 f4       	brne	.+16     	; 0x1e3a <malloc+0xd2>
    1e2a:	20 91 02 01 	lds	r18, 0x0102
    1e2e:	30 91 03 01 	lds	r19, 0x0103
    1e32:	30 93 30 04 	sts	0x0430, r19
    1e36:	20 93 2f 04 	sts	0x042F, r18
    1e3a:	20 91 00 01 	lds	r18, 0x0100
    1e3e:	30 91 01 01 	lds	r19, 0x0101
    1e42:	21 15       	cp	r18, r1
    1e44:	31 05       	cpc	r19, r1
    1e46:	41 f4       	brne	.+16     	; 0x1e58 <malloc+0xf0>
    1e48:	2d b7       	in	r18, 0x3d	; 61
    1e4a:	3e b7       	in	r19, 0x3e	; 62
    1e4c:	40 91 04 01 	lds	r20, 0x0104
    1e50:	50 91 05 01 	lds	r21, 0x0105
    1e54:	24 1b       	sub	r18, r20
    1e56:	35 0b       	sbc	r19, r21
    1e58:	e0 91 2f 04 	lds	r30, 0x042F
    1e5c:	f0 91 30 04 	lds	r31, 0x0430
    1e60:	e2 17       	cp	r30, r18
    1e62:	f3 07       	cpc	r31, r19
    1e64:	a0 f4       	brcc	.+40     	; 0x1e8e <malloc+0x126>
    1e66:	2e 1b       	sub	r18, r30
    1e68:	3f 0b       	sbc	r19, r31
    1e6a:	28 17       	cp	r18, r24
    1e6c:	39 07       	cpc	r19, r25
    1e6e:	78 f0       	brcs	.+30     	; 0x1e8e <malloc+0x126>
    1e70:	ac 01       	movw	r20, r24
    1e72:	4e 5f       	subi	r20, 0xFE	; 254
    1e74:	5f 4f       	sbci	r21, 0xFF	; 255
    1e76:	24 17       	cp	r18, r20
    1e78:	35 07       	cpc	r19, r21
    1e7a:	48 f0       	brcs	.+18     	; 0x1e8e <malloc+0x126>
    1e7c:	4e 0f       	add	r20, r30
    1e7e:	5f 1f       	adc	r21, r31
    1e80:	50 93 30 04 	sts	0x0430, r21
    1e84:	40 93 2f 04 	sts	0x042F, r20
    1e88:	81 93       	st	Z+, r24
    1e8a:	91 93       	st	Z+, r25
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <malloc+0x12a>
    1e8e:	e0 e0       	ldi	r30, 0x00	; 0
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	cf 01       	movw	r24, r30
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	08 95       	ret

00001e9e <free>:
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <free+0x12>
    1eae:	8f c0       	rjmp	.+286    	; 0x1fce <free+0x130>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	12 97       	sbiw	r26, 0x02	; 2
    1eb4:	13 96       	adiw	r26, 0x03	; 3
    1eb6:	1c 92       	st	X, r1
    1eb8:	1e 92       	st	-X, r1
    1eba:	12 97       	sbiw	r26, 0x02	; 2
    1ebc:	e0 90 31 04 	lds	r14, 0x0431
    1ec0:	f0 90 32 04 	lds	r15, 0x0432
    1ec4:	e1 14       	cp	r14, r1
    1ec6:	f1 04       	cpc	r15, r1
    1ec8:	89 f4       	brne	.+34     	; 0x1eec <free+0x4e>
    1eca:	2d 91       	ld	r18, X+
    1ecc:	3c 91       	ld	r19, X
    1ece:	11 97       	sbiw	r26, 0x01	; 1
    1ed0:	28 0f       	add	r18, r24
    1ed2:	39 1f       	adc	r19, r25
    1ed4:	80 91 2f 04 	lds	r24, 0x042F
    1ed8:	90 91 30 04 	lds	r25, 0x0430
    1edc:	82 17       	cp	r24, r18
    1ede:	93 07       	cpc	r25, r19
    1ee0:	89 f5       	brne	.+98     	; 0x1f44 <free+0xa6>
    1ee2:	b0 93 30 04 	sts	0x0430, r27
    1ee6:	a0 93 2f 04 	sts	0x042F, r26
    1eea:	71 c0       	rjmp	.+226    	; 0x1fce <free+0x130>
    1eec:	e7 01       	movw	r28, r14
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <free+0x58>
    1ef4:	ea 01       	movw	r28, r20
    1ef6:	ca 17       	cp	r28, r26
    1ef8:	db 07       	cpc	r29, r27
    1efa:	38 f4       	brcc	.+14     	; 0x1f0a <free+0x6c>
    1efc:	4a 81       	ldd	r20, Y+2	; 0x02
    1efe:	5b 81       	ldd	r21, Y+3	; 0x03
    1f00:	9e 01       	movw	r18, r28
    1f02:	41 15       	cp	r20, r1
    1f04:	51 05       	cpc	r21, r1
    1f06:	b1 f7       	brne	.-20     	; 0x1ef4 <free+0x56>
    1f08:	22 c0       	rjmp	.+68     	; 0x1f4e <free+0xb0>
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	62 50       	subi	r22, 0x02	; 2
    1f0e:	71 09       	sbc	r23, r1
    1f10:	fb 01       	movw	r30, r22
    1f12:	d3 83       	std	Z+3, r29	; 0x03
    1f14:	c2 83       	std	Z+2, r28	; 0x02
    1f16:	00 81       	ld	r16, Z
    1f18:	11 81       	ldd	r17, Z+1	; 0x01
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	40 0f       	add	r20, r16
    1f1e:	51 1f       	adc	r21, r17
    1f20:	4c 17       	cp	r20, r28
    1f22:	5d 07       	cpc	r21, r29
    1f24:	61 f4       	brne	.+24     	; 0x1f3e <free+0xa0>
    1f26:	48 81       	ld	r20, Y
    1f28:	59 81       	ldd	r21, Y+1	; 0x01
    1f2a:	40 0f       	add	r20, r16
    1f2c:	51 1f       	adc	r21, r17
    1f2e:	4e 5f       	subi	r20, 0xFE	; 254
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255
    1f32:	51 83       	std	Z+1, r21	; 0x01
    1f34:	40 83       	st	Z, r20
    1f36:	4a 81       	ldd	r20, Y+2	; 0x02
    1f38:	5b 81       	ldd	r21, Y+3	; 0x03
    1f3a:	53 83       	std	Z+3, r21	; 0x03
    1f3c:	42 83       	std	Z+2, r20	; 0x02
    1f3e:	21 15       	cp	r18, r1
    1f40:	31 05       	cpc	r19, r1
    1f42:	29 f4       	brne	.+10     	; 0x1f4e <free+0xb0>
    1f44:	b0 93 32 04 	sts	0x0432, r27
    1f48:	a0 93 31 04 	sts	0x0431, r26
    1f4c:	40 c0       	rjmp	.+128    	; 0x1fce <free+0x130>
    1f4e:	f9 01       	movw	r30, r18
    1f50:	b3 83       	std	Z+3, r27	; 0x03
    1f52:	a2 83       	std	Z+2, r26	; 0x02
    1f54:	e9 01       	movw	r28, r18
    1f56:	69 91       	ld	r22, Y+
    1f58:	79 91       	ld	r23, Y+
    1f5a:	c6 0f       	add	r28, r22
    1f5c:	d7 1f       	adc	r29, r23
    1f5e:	ac 17       	cp	r26, r28
    1f60:	bd 07       	cpc	r27, r29
    1f62:	79 f4       	brne	.+30     	; 0x1f82 <free+0xe4>
    1f64:	dc 01       	movw	r26, r24
    1f66:	5e 91       	ld	r21, -X
    1f68:	4e 91       	ld	r20, -X
    1f6a:	46 0f       	add	r20, r22
    1f6c:	57 1f       	adc	r21, r23
    1f6e:	4e 5f       	subi	r20, 0xFE	; 254
    1f70:	5f 4f       	sbci	r21, 0xFF	; 255
    1f72:	51 83       	std	Z+1, r21	; 0x01
    1f74:	40 83       	st	Z, r20
    1f76:	12 96       	adiw	r26, 0x02	; 2
    1f78:	8d 91       	ld	r24, X+
    1f7a:	9c 91       	ld	r25, X
    1f7c:	13 97       	sbiw	r26, 0x03	; 3
    1f7e:	93 83       	std	Z+3, r25	; 0x03
    1f80:	82 83       	std	Z+2, r24	; 0x02
    1f82:	a0 e0       	ldi	r26, 0x00	; 0
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <free+0xee>
    1f88:	d7 01       	movw	r26, r14
    1f8a:	7c 01       	movw	r14, r24
    1f8c:	f7 01       	movw	r30, r14
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	c9 f7       	brne	.-14     	; 0x1f88 <free+0xea>
    1f96:	c7 01       	movw	r24, r14
    1f98:	02 96       	adiw	r24, 0x02	; 2
    1f9a:	20 81       	ld	r18, Z
    1f9c:	31 81       	ldd	r19, Z+1	; 0x01
    1f9e:	82 0f       	add	r24, r18
    1fa0:	93 1f       	adc	r25, r19
    1fa2:	20 91 2f 04 	lds	r18, 0x042F
    1fa6:	30 91 30 04 	lds	r19, 0x0430
    1faa:	28 17       	cp	r18, r24
    1fac:	39 07       	cpc	r19, r25
    1fae:	79 f4       	brne	.+30     	; 0x1fce <free+0x130>
    1fb0:	10 97       	sbiw	r26, 0x00	; 0
    1fb2:	29 f4       	brne	.+10     	; 0x1fbe <free+0x120>
    1fb4:	10 92 32 04 	sts	0x0432, r1
    1fb8:	10 92 31 04 	sts	0x0431, r1
    1fbc:	04 c0       	rjmp	.+8      	; 0x1fc6 <free+0x128>
    1fbe:	13 96       	adiw	r26, 0x03	; 3
    1fc0:	1c 92       	st	X, r1
    1fc2:	1e 92       	st	-X, r1
    1fc4:	12 97       	sbiw	r26, 0x02	; 2
    1fc6:	f0 92 30 04 	sts	0x0430, r15
    1fca:	e0 92 2f 04 	sts	0x042F, r14
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	08 95       	ret

00001fdc <__ftoa_engine>:
    1fdc:	28 30       	cpi	r18, 0x08	; 8
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <__ftoa_engine+0x6>
    1fe0:	27 e0       	ldi	r18, 0x07	; 7
    1fe2:	33 27       	eor	r19, r19
    1fe4:	da 01       	movw	r26, r20
    1fe6:	99 0f       	add	r25, r25
    1fe8:	31 1d       	adc	r19, r1
    1fea:	87 fd       	sbrc	r24, 7
    1fec:	91 60       	ori	r25, 0x01	; 1
    1fee:	00 96       	adiw	r24, 0x00	; 0
    1ff0:	61 05       	cpc	r22, r1
    1ff2:	71 05       	cpc	r23, r1
    1ff4:	39 f4       	brne	.+14     	; 0x2004 <__ftoa_engine+0x28>
    1ff6:	32 60       	ori	r19, 0x02	; 2
    1ff8:	2e 5f       	subi	r18, 0xFE	; 254
    1ffa:	3d 93       	st	X+, r19
    1ffc:	30 e3       	ldi	r19, 0x30	; 48
    1ffe:	2a 95       	dec	r18
    2000:	e1 f7       	brne	.-8      	; 0x1ffa <__ftoa_engine+0x1e>
    2002:	08 95       	ret
    2004:	9f 3f       	cpi	r25, 0xFF	; 255
    2006:	30 f0       	brcs	.+12     	; 0x2014 <__ftoa_engine+0x38>
    2008:	80 38       	cpi	r24, 0x80	; 128
    200a:	71 05       	cpc	r23, r1
    200c:	61 05       	cpc	r22, r1
    200e:	09 f0       	breq	.+2      	; 0x2012 <__ftoa_engine+0x36>
    2010:	3c 5f       	subi	r19, 0xFC	; 252
    2012:	3c 5f       	subi	r19, 0xFC	; 252
    2014:	3d 93       	st	X+, r19
    2016:	91 30       	cpi	r25, 0x01	; 1
    2018:	08 f0       	brcs	.+2      	; 0x201c <__ftoa_engine+0x40>
    201a:	80 68       	ori	r24, 0x80	; 128
    201c:	91 1d       	adc	r25, r1
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	1f 93       	push	r17
    2024:	0f 93       	push	r16
    2026:	ff 92       	push	r15
    2028:	ef 92       	push	r14
    202a:	19 2f       	mov	r17, r25
    202c:	98 7f       	andi	r25, 0xF8	; 248
    202e:	96 95       	lsr	r25
    2030:	e9 2f       	mov	r30, r25
    2032:	96 95       	lsr	r25
    2034:	96 95       	lsr	r25
    2036:	e9 0f       	add	r30, r25
    2038:	ff 27       	eor	r31, r31
    203a:	e2 51       	subi	r30, 0x12	; 18
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	99 27       	eor	r25, r25
    2040:	33 27       	eor	r19, r19
    2042:	ee 24       	eor	r14, r14
    2044:	ff 24       	eor	r15, r15
    2046:	a7 01       	movw	r20, r14
    2048:	e7 01       	movw	r28, r14
    204a:	05 90       	lpm	r0, Z+
    204c:	08 94       	sec
    204e:	07 94       	ror	r0
    2050:	28 f4       	brcc	.+10     	; 0x205c <__ftoa_engine+0x80>
    2052:	36 0f       	add	r19, r22
    2054:	e7 1e       	adc	r14, r23
    2056:	f8 1e       	adc	r15, r24
    2058:	49 1f       	adc	r20, r25
    205a:	51 1d       	adc	r21, r1
    205c:	66 0f       	add	r22, r22
    205e:	77 1f       	adc	r23, r23
    2060:	88 1f       	adc	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	06 94       	lsr	r0
    2066:	a1 f7       	brne	.-24     	; 0x2050 <__ftoa_engine+0x74>
    2068:	05 90       	lpm	r0, Z+
    206a:	07 94       	ror	r0
    206c:	28 f4       	brcc	.+10     	; 0x2078 <__ftoa_engine+0x9c>
    206e:	e7 0e       	add	r14, r23
    2070:	f8 1e       	adc	r15, r24
    2072:	49 1f       	adc	r20, r25
    2074:	56 1f       	adc	r21, r22
    2076:	c1 1d       	adc	r28, r1
    2078:	77 0f       	add	r23, r23
    207a:	88 1f       	adc	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	66 1f       	adc	r22, r22
    2080:	06 94       	lsr	r0
    2082:	a1 f7       	brne	.-24     	; 0x206c <__ftoa_engine+0x90>
    2084:	05 90       	lpm	r0, Z+
    2086:	07 94       	ror	r0
    2088:	28 f4       	brcc	.+10     	; 0x2094 <__ftoa_engine+0xb8>
    208a:	f8 0e       	add	r15, r24
    208c:	49 1f       	adc	r20, r25
    208e:	56 1f       	adc	r21, r22
    2090:	c7 1f       	adc	r28, r23
    2092:	d1 1d       	adc	r29, r1
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	66 1f       	adc	r22, r22
    209a:	77 1f       	adc	r23, r23
    209c:	06 94       	lsr	r0
    209e:	a1 f7       	brne	.-24     	; 0x2088 <__ftoa_engine+0xac>
    20a0:	05 90       	lpm	r0, Z+
    20a2:	07 94       	ror	r0
    20a4:	20 f4       	brcc	.+8      	; 0x20ae <__ftoa_engine+0xd2>
    20a6:	49 0f       	add	r20, r25
    20a8:	56 1f       	adc	r21, r22
    20aa:	c7 1f       	adc	r28, r23
    20ac:	d8 1f       	adc	r29, r24
    20ae:	99 0f       	add	r25, r25
    20b0:	66 1f       	adc	r22, r22
    20b2:	77 1f       	adc	r23, r23
    20b4:	88 1f       	adc	r24, r24
    20b6:	06 94       	lsr	r0
    20b8:	a9 f7       	brne	.-22     	; 0x20a4 <__ftoa_engine+0xc8>
    20ba:	84 91       	lpm	r24, Z
    20bc:	10 95       	com	r17
    20be:	17 70       	andi	r17, 0x07	; 7
    20c0:	41 f0       	breq	.+16     	; 0x20d2 <__ftoa_engine+0xf6>
    20c2:	d6 95       	lsr	r29
    20c4:	c7 95       	ror	r28
    20c6:	57 95       	ror	r21
    20c8:	47 95       	ror	r20
    20ca:	f7 94       	ror	r15
    20cc:	e7 94       	ror	r14
    20ce:	1a 95       	dec	r17
    20d0:	c1 f7       	brne	.-16     	; 0x20c2 <__ftoa_engine+0xe6>
    20d2:	e4 e9       	ldi	r30, 0x94	; 148
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	68 94       	set
    20d8:	15 90       	lpm	r1, Z+
    20da:	15 91       	lpm	r17, Z+
    20dc:	35 91       	lpm	r19, Z+
    20de:	65 91       	lpm	r22, Z+
    20e0:	95 91       	lpm	r25, Z+
    20e2:	05 90       	lpm	r0, Z+
    20e4:	7f e2       	ldi	r23, 0x2F	; 47
    20e6:	73 95       	inc	r23
    20e8:	e1 18       	sub	r14, r1
    20ea:	f1 0a       	sbc	r15, r17
    20ec:	43 0b       	sbc	r20, r19
    20ee:	56 0b       	sbc	r21, r22
    20f0:	c9 0b       	sbc	r28, r25
    20f2:	d0 09       	sbc	r29, r0
    20f4:	c0 f7       	brcc	.-16     	; 0x20e6 <__ftoa_engine+0x10a>
    20f6:	e1 0c       	add	r14, r1
    20f8:	f1 1e       	adc	r15, r17
    20fa:	43 1f       	adc	r20, r19
    20fc:	56 1f       	adc	r21, r22
    20fe:	c9 1f       	adc	r28, r25
    2100:	d0 1d       	adc	r29, r0
    2102:	7e f4       	brtc	.+30     	; 0x2122 <__ftoa_engine+0x146>
    2104:	70 33       	cpi	r23, 0x30	; 48
    2106:	11 f4       	brne	.+4      	; 0x210c <__ftoa_engine+0x130>
    2108:	8a 95       	dec	r24
    210a:	e6 cf       	rjmp	.-52     	; 0x20d8 <__ftoa_engine+0xfc>
    210c:	e8 94       	clt
    210e:	01 50       	subi	r16, 0x01	; 1
    2110:	30 f0       	brcs	.+12     	; 0x211e <__ftoa_engine+0x142>
    2112:	08 0f       	add	r16, r24
    2114:	0a f4       	brpl	.+2      	; 0x2118 <__ftoa_engine+0x13c>
    2116:	00 27       	eor	r16, r16
    2118:	02 17       	cp	r16, r18
    211a:	08 f4       	brcc	.+2      	; 0x211e <__ftoa_engine+0x142>
    211c:	20 2f       	mov	r18, r16
    211e:	23 95       	inc	r18
    2120:	02 2f       	mov	r16, r18
    2122:	7a 33       	cpi	r23, 0x3A	; 58
    2124:	28 f0       	brcs	.+10     	; 0x2130 <__ftoa_engine+0x154>
    2126:	79 e3       	ldi	r23, 0x39	; 57
    2128:	7d 93       	st	X+, r23
    212a:	2a 95       	dec	r18
    212c:	e9 f7       	brne	.-6      	; 0x2128 <__ftoa_engine+0x14c>
    212e:	10 c0       	rjmp	.+32     	; 0x2150 <__ftoa_engine+0x174>
    2130:	7d 93       	st	X+, r23
    2132:	2a 95       	dec	r18
    2134:	89 f6       	brne	.-94     	; 0x20d8 <__ftoa_engine+0xfc>
    2136:	06 94       	lsr	r0
    2138:	97 95       	ror	r25
    213a:	67 95       	ror	r22
    213c:	37 95       	ror	r19
    213e:	17 95       	ror	r17
    2140:	17 94       	ror	r1
    2142:	e1 18       	sub	r14, r1
    2144:	f1 0a       	sbc	r15, r17
    2146:	43 0b       	sbc	r20, r19
    2148:	56 0b       	sbc	r21, r22
    214a:	c9 0b       	sbc	r28, r25
    214c:	d0 09       	sbc	r29, r0
    214e:	98 f0       	brcs	.+38     	; 0x2176 <__ftoa_engine+0x19a>
    2150:	23 95       	inc	r18
    2152:	7e 91       	ld	r23, -X
    2154:	73 95       	inc	r23
    2156:	7a 33       	cpi	r23, 0x3A	; 58
    2158:	08 f0       	brcs	.+2      	; 0x215c <__ftoa_engine+0x180>
    215a:	70 e3       	ldi	r23, 0x30	; 48
    215c:	7c 93       	st	X, r23
    215e:	20 13       	cpse	r18, r16
    2160:	b8 f7       	brcc	.-18     	; 0x2150 <__ftoa_engine+0x174>
    2162:	7e 91       	ld	r23, -X
    2164:	70 61       	ori	r23, 0x10	; 16
    2166:	7d 93       	st	X+, r23
    2168:	30 f0       	brcs	.+12     	; 0x2176 <__ftoa_engine+0x19a>
    216a:	83 95       	inc	r24
    216c:	71 e3       	ldi	r23, 0x31	; 49
    216e:	7d 93       	st	X+, r23
    2170:	70 e3       	ldi	r23, 0x30	; 48
    2172:	2a 95       	dec	r18
    2174:	e1 f7       	brne	.-8      	; 0x216e <__ftoa_engine+0x192>
    2176:	11 24       	eor	r1, r1
    2178:	ef 90       	pop	r14
    217a:	ff 90       	pop	r15
    217c:	0f 91       	pop	r16
    217e:	1f 91       	pop	r17
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	99 27       	eor	r25, r25
    2186:	87 fd       	sbrc	r24, 7
    2188:	90 95       	com	r25
    218a:	08 95       	ret

0000218c <strnlen_P>:
    218c:	fc 01       	movw	r30, r24
    218e:	05 90       	lpm	r0, Z+
    2190:	61 50       	subi	r22, 0x01	; 1
    2192:	70 40       	sbci	r23, 0x00	; 0
    2194:	01 10       	cpse	r0, r1
    2196:	d8 f7       	brcc	.-10     	; 0x218e <strnlen_P+0x2>
    2198:	80 95       	com	r24
    219a:	90 95       	com	r25
    219c:	8e 0f       	add	r24, r30
    219e:	9f 1f       	adc	r25, r31
    21a0:	08 95       	ret

000021a2 <memset>:
    21a2:	dc 01       	movw	r26, r24
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <memset+0x6>
    21a6:	6d 93       	st	X+, r22
    21a8:	41 50       	subi	r20, 0x01	; 1
    21aa:	50 40       	sbci	r21, 0x00	; 0
    21ac:	e0 f7       	brcc	.-8      	; 0x21a6 <memset+0x4>
    21ae:	08 95       	ret

000021b0 <strcmp>:
    21b0:	fb 01       	movw	r30, r22
    21b2:	dc 01       	movw	r26, r24
    21b4:	8d 91       	ld	r24, X+
    21b6:	01 90       	ld	r0, Z+
    21b8:	80 19       	sub	r24, r0
    21ba:	01 10       	cpse	r0, r1
    21bc:	d9 f3       	breq	.-10     	; 0x21b4 <strcmp+0x4>
    21be:	99 0b       	sbc	r25, r25
    21c0:	08 95       	ret

000021c2 <strcpy>:
    21c2:	fb 01       	movw	r30, r22
    21c4:	dc 01       	movw	r26, r24
    21c6:	01 90       	ld	r0, Z+
    21c8:	0d 92       	st	X+, r0
    21ca:	00 20       	and	r0, r0
    21cc:	e1 f7       	brne	.-8      	; 0x21c6 <strcpy+0x4>
    21ce:	08 95       	ret

000021d0 <strnlen>:
    21d0:	fc 01       	movw	r30, r24
    21d2:	61 50       	subi	r22, 0x01	; 1
    21d4:	70 40       	sbci	r23, 0x00	; 0
    21d6:	01 90       	ld	r0, Z+
    21d8:	01 10       	cpse	r0, r1
    21da:	d8 f7       	brcc	.-10     	; 0x21d2 <strnlen+0x2>
    21dc:	80 95       	com	r24
    21de:	90 95       	com	r25
    21e0:	8e 0f       	add	r24, r30
    21e2:	9f 1f       	adc	r25, r31
    21e4:	08 95       	ret

000021e6 <fputc>:
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	8c 01       	movw	r16, r24
    21f0:	eb 01       	movw	r28, r22
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	81 fd       	sbrc	r24, 1
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <fputc+0x18>
    21f8:	0f ef       	ldi	r16, 0xFF	; 255
    21fa:	1f ef       	ldi	r17, 0xFF	; 255
    21fc:	1a c0       	rjmp	.+52     	; 0x2232 <fputc+0x4c>
    21fe:	82 ff       	sbrs	r24, 2
    2200:	0d c0       	rjmp	.+26     	; 0x221c <fputc+0x36>
    2202:	2e 81       	ldd	r18, Y+6	; 0x06
    2204:	3f 81       	ldd	r19, Y+7	; 0x07
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	9d 81       	ldd	r25, Y+5	; 0x05
    220a:	28 17       	cp	r18, r24
    220c:	39 07       	cpc	r19, r25
    220e:	64 f4       	brge	.+24     	; 0x2228 <fputc+0x42>
    2210:	e8 81       	ld	r30, Y
    2212:	f9 81       	ldd	r31, Y+1	; 0x01
    2214:	01 93       	st	Z+, r16
    2216:	f9 83       	std	Y+1, r31	; 0x01
    2218:	e8 83       	st	Y, r30
    221a:	06 c0       	rjmp	.+12     	; 0x2228 <fputc+0x42>
    221c:	e8 85       	ldd	r30, Y+8	; 0x08
    221e:	f9 85       	ldd	r31, Y+9	; 0x09
    2220:	80 2f       	mov	r24, r16
    2222:	09 95       	icall
    2224:	89 2b       	or	r24, r25
    2226:	41 f7       	brne	.-48     	; 0x21f8 <fputc+0x12>
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	9f 83       	std	Y+7, r25	; 0x07
    2230:	8e 83       	std	Y+6, r24	; 0x06
    2232:	c8 01       	movw	r24, r16
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	08 95       	ret

0000223e <sprintf>:
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	2e 97       	sbiw	r28, 0x0e	; 14
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	0d 89       	ldd	r16, Y+21	; 0x15
    2258:	1e 89       	ldd	r17, Y+22	; 0x16
    225a:	86 e0       	ldi	r24, 0x06	; 6
    225c:	8c 83       	std	Y+4, r24	; 0x04
    225e:	1a 83       	std	Y+2, r17	; 0x02
    2260:	09 83       	std	Y+1, r16	; 0x01
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	9f e7       	ldi	r25, 0x7F	; 127
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	ce 01       	movw	r24, r28
    226c:	49 96       	adiw	r24, 0x19	; 25
    226e:	ac 01       	movw	r20, r24
    2270:	6f 89       	ldd	r22, Y+23	; 0x17
    2272:	78 8d       	ldd	r23, Y+24	; 0x18
    2274:	ce 01       	movw	r24, r28
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	9a d9       	rcall	.-3276   	; 0x15ae <vfprintf>
    227a:	ef 81       	ldd	r30, Y+7	; 0x07
    227c:	f8 85       	ldd	r31, Y+8	; 0x08
    227e:	e0 0f       	add	r30, r16
    2280:	f1 1f       	adc	r31, r17
    2282:	10 82       	st	Z, r1
    2284:	2e 96       	adiw	r28, 0x0e	; 14
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	08 95       	ret

0000229a <vsnprintf>:
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	2e 97       	sbiw	r28, 0x0e	; 14
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	8c 01       	movw	r16, r24
    22b4:	ca 01       	movw	r24, r20
    22b6:	46 e0       	ldi	r20, 0x06	; 6
    22b8:	4c 83       	std	Y+4, r20	; 0x04
    22ba:	1a 83       	std	Y+2, r17	; 0x02
    22bc:	09 83       	std	Y+1, r16	; 0x01
    22be:	77 ff       	sbrs	r23, 7
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <vsnprintf+0x2c>
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	70 e8       	ldi	r23, 0x80	; 128
    22c6:	61 50       	subi	r22, 0x01	; 1
    22c8:	71 09       	sbc	r23, r1
    22ca:	7e 83       	std	Y+6, r23	; 0x06
    22cc:	6d 83       	std	Y+5, r22	; 0x05
    22ce:	a9 01       	movw	r20, r18
    22d0:	bc 01       	movw	r22, r24
    22d2:	ce 01       	movw	r24, r28
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	6b d9       	rcall	.-3370   	; 0x15ae <vfprintf>
    22d8:	4d 81       	ldd	r20, Y+5	; 0x05
    22da:	5e 81       	ldd	r21, Y+6	; 0x06
    22dc:	57 fd       	sbrc	r21, 7
    22de:	0a c0       	rjmp	.+20     	; 0x22f4 <vsnprintf+0x5a>
    22e0:	2f 81       	ldd	r18, Y+7	; 0x07
    22e2:	38 85       	ldd	r19, Y+8	; 0x08
    22e4:	42 17       	cp	r20, r18
    22e6:	53 07       	cpc	r21, r19
    22e8:	0c f4       	brge	.+2      	; 0x22ec <vsnprintf+0x52>
    22ea:	9a 01       	movw	r18, r20
    22ec:	f8 01       	movw	r30, r16
    22ee:	e2 0f       	add	r30, r18
    22f0:	f3 1f       	adc	r31, r19
    22f2:	10 82       	st	Z, r1
    22f4:	2e 96       	adiw	r28, 0x0e	; 14
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <__ultoa_invert>:
    230a:	fa 01       	movw	r30, r20
    230c:	aa 27       	eor	r26, r26
    230e:	28 30       	cpi	r18, 0x08	; 8
    2310:	51 f1       	breq	.+84     	; 0x2366 <__ultoa_invert+0x5c>
    2312:	20 31       	cpi	r18, 0x10	; 16
    2314:	81 f1       	breq	.+96     	; 0x2376 <__ultoa_invert+0x6c>
    2316:	e8 94       	clt
    2318:	6f 93       	push	r22
    231a:	6e 7f       	andi	r22, 0xFE	; 254
    231c:	6e 5f       	subi	r22, 0xFE	; 254
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	af 4f       	sbci	r26, 0xFF	; 255
    2326:	b1 e0       	ldi	r27, 0x01	; 1
    2328:	3e d0       	rcall	.+124    	; 0x23a6 <__ultoa_invert+0x9c>
    232a:	b4 e0       	ldi	r27, 0x04	; 4
    232c:	3c d0       	rcall	.+120    	; 0x23a6 <__ultoa_invert+0x9c>
    232e:	67 0f       	add	r22, r23
    2330:	78 1f       	adc	r23, r24
    2332:	89 1f       	adc	r24, r25
    2334:	9a 1f       	adc	r25, r26
    2336:	a1 1d       	adc	r26, r1
    2338:	68 0f       	add	r22, r24
    233a:	79 1f       	adc	r23, r25
    233c:	8a 1f       	adc	r24, r26
    233e:	91 1d       	adc	r25, r1
    2340:	a1 1d       	adc	r26, r1
    2342:	6a 0f       	add	r22, r26
    2344:	71 1d       	adc	r23, r1
    2346:	81 1d       	adc	r24, r1
    2348:	91 1d       	adc	r25, r1
    234a:	a1 1d       	adc	r26, r1
    234c:	20 d0       	rcall	.+64     	; 0x238e <__ultoa_invert+0x84>
    234e:	09 f4       	brne	.+2      	; 0x2352 <__ultoa_invert+0x48>
    2350:	68 94       	set
    2352:	3f 91       	pop	r19
    2354:	2a e0       	ldi	r18, 0x0A	; 10
    2356:	26 9f       	mul	r18, r22
    2358:	11 24       	eor	r1, r1
    235a:	30 19       	sub	r19, r0
    235c:	30 5d       	subi	r19, 0xD0	; 208
    235e:	31 93       	st	Z+, r19
    2360:	de f6       	brtc	.-74     	; 0x2318 <__ultoa_invert+0xe>
    2362:	cf 01       	movw	r24, r30
    2364:	08 95       	ret
    2366:	46 2f       	mov	r20, r22
    2368:	47 70       	andi	r20, 0x07	; 7
    236a:	40 5d       	subi	r20, 0xD0	; 208
    236c:	41 93       	st	Z+, r20
    236e:	b3 e0       	ldi	r27, 0x03	; 3
    2370:	0f d0       	rcall	.+30     	; 0x2390 <__ultoa_invert+0x86>
    2372:	c9 f7       	brne	.-14     	; 0x2366 <__ultoa_invert+0x5c>
    2374:	f6 cf       	rjmp	.-20     	; 0x2362 <__ultoa_invert+0x58>
    2376:	46 2f       	mov	r20, r22
    2378:	4f 70       	andi	r20, 0x0F	; 15
    237a:	40 5d       	subi	r20, 0xD0	; 208
    237c:	4a 33       	cpi	r20, 0x3A	; 58
    237e:	18 f0       	brcs	.+6      	; 0x2386 <__ultoa_invert+0x7c>
    2380:	49 5d       	subi	r20, 0xD9	; 217
    2382:	31 fd       	sbrc	r19, 1
    2384:	40 52       	subi	r20, 0x20	; 32
    2386:	41 93       	st	Z+, r20
    2388:	02 d0       	rcall	.+4      	; 0x238e <__ultoa_invert+0x84>
    238a:	a9 f7       	brne	.-22     	; 0x2376 <__ultoa_invert+0x6c>
    238c:	ea cf       	rjmp	.-44     	; 0x2362 <__ultoa_invert+0x58>
    238e:	b4 e0       	ldi	r27, 0x04	; 4
    2390:	a6 95       	lsr	r26
    2392:	97 95       	ror	r25
    2394:	87 95       	ror	r24
    2396:	77 95       	ror	r23
    2398:	67 95       	ror	r22
    239a:	ba 95       	dec	r27
    239c:	c9 f7       	brne	.-14     	; 0x2390 <__ultoa_invert+0x86>
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	61 05       	cpc	r22, r1
    23a2:	71 05       	cpc	r23, r1
    23a4:	08 95       	ret
    23a6:	9b 01       	movw	r18, r22
    23a8:	ac 01       	movw	r20, r24
    23aa:	0a 2e       	mov	r0, r26
    23ac:	06 94       	lsr	r0
    23ae:	57 95       	ror	r21
    23b0:	47 95       	ror	r20
    23b2:	37 95       	ror	r19
    23b4:	27 95       	ror	r18
    23b6:	ba 95       	dec	r27
    23b8:	c9 f7       	brne	.-14     	; 0x23ac <__ultoa_invert+0xa2>
    23ba:	62 0f       	add	r22, r18
    23bc:	73 1f       	adc	r23, r19
    23be:	84 1f       	adc	r24, r20
    23c0:	95 1f       	adc	r25, r21
    23c2:	a0 1d       	adc	r26, r0
    23c4:	08 95       	ret

000023c6 <_exit>:
    23c6:	f8 94       	cli

000023c8 <__stop_program>:
    23c8:	ff cf       	rjmp	.-2      	; 0x23c8 <__stop_program>
