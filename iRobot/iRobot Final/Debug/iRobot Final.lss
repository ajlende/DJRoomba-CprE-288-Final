
iRobot Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003e6  00800100  000026a0  00002734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008004e6  008004e6  00002b1a  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00002b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa2  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000680a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00006839  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004730  00000000  00000000  00006b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010a0  00000000  00000000  0000b271  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002364  00000000  00000000  0000c311  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000820  00000000  00000000  0000e678  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c91  00000000  00000000  0000ee98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002842  00000000  00000000  0000fb29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000270  00000000  00000000  0001236b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	02 c5       	rjmp	.+2564   	; 0xa2a <__vector_9>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	21 c5       	rjmp	.+2626   	; 0xa70 <__vector_11>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c0       	rjmp	.+396    	; 0x1ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__c.2006>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.2004>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	14 e0       	ldi	r17, 0x04	; 4
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e0 ea       	ldi	r30, 0xA0	; 160
     1a2:	f6 e2       	ldi	r31, 0x26	; 38
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a6 3e       	cpi	r26, 0xE6	; 230
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	25 e0       	ldi	r18, 0x05	; 5
     1b6:	a6 ee       	ldi	r26, 0xE6	; 230
     1b8:	b4 e0       	ldi	r27, 0x04	; 4
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a1 34       	cpi	r26, 0x41	; 65
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	03 d0       	rcall	.+6      	; 0x1cc <main>
     1c6:	0c 94 4e 13 	jmp	0x269c	; 0x269c <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <main>:
	float distance;
	float width;
}object_t;

int main(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
     1d4:	c7 56       	subi	r28, 0x67	; 103
     1d6:	d1 09       	sbc	r29, r1
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	cd bf       	out	0x3d, r28	; 61
	
	serial_init(); // Initialize the Serial Communications
     1e2:	3c d3       	rcall	.+1656   	; 0x85c <serial_init>
	
	ADC_init(); // Initialize the IR sensor
     1e4:	61 d3       	rcall	.+1730   	; 0x8a8 <ADC_init>
	
	ping_init(); // Initialize the Ping))) sensor
     1e6:	3f d4       	rcall	.+2174   	; 0xa66 <ping_init>
	
	lcd_init(); // Initialize the LCD
     1e8:	5a d1       	rcall	.+692    	; 0x49e <lcd_init>
	
	init_push_buttons(); // Initialize the buttons
     1ea:	36 d4       	rcall	.+2156   	; 0xa58 <init_push_buttons>
	
	timer3_init(); // Initialize the servo motor
     1ec:	bb d4       	rcall	.+2422   	; 0xb64 <timer3_init>
	
	song_init();
     1ee:	85 d3       	rcall	.+1802   	; 0x8fa <song_init>
	
	oi_t *sensor_data = oi_alloc();
     1f0:	21 d2       	rcall	.+1090   	; 0x634 <oi_alloc>
     1f2:	a8 96       	adiw	r28, 0x28	; 40
     1f4:	9f af       	std	Y+63, r25	; 0x3f
     1f6:	8e af       	std	Y+62, r24	; 0x3e
     1f8:	a8 97       	sbiw	r28, 0x28	; 40
	oi_init(sensor_data); // should turn the iRobot Create's power LED yellow
     1fa:	04 d3       	rcall	.+1544   	; 0x804 <oi_init>
	char* numRecieved;
	// song_init();
	
	char echoString[20];
	
	servo_turn(degrees);
     1fc:	89 e5       	ldi	r24, 0x59	; 89
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	92 d4       	rcall	.+2340   	; 0xb26 <servo_turn>
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     202:	0f 2e       	mov	r0, r31
     204:	f9 e0       	ldi	r31, 0x09	; 9
     206:	8f 2e       	mov	r8, r31
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	9f 2e       	mov	r9, r31
     20c:	f0 2d       	mov	r31, r0
     20e:	aa 24       	eor	r10, r10
     210:	a3 94       	inc	r10
     212:	b1 2c       	mov	r11, r1
     214:	ac 0e       	add	r10, r28
     216:	bd 1e       	adc	r11, r29
	float distance;
	float width;
}object_t;

int main(void)
{
     218:	0f 2e       	mov	r0, r31
     21a:	f3 e0       	ldi	r31, 0x03	; 3
     21c:	6f 2e       	mov	r6, r31
     21e:	71 2c       	mov	r7, r1
     220:	f0 2d       	mov	r31, r0
     222:	51 2c       	mov	r5, r1
     224:	41 2c       	mov	r4, r1
				}

				IRDistance = calcCm(raw/3);
				PingDistance = ping_read();
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     226:	3a 2c       	mov	r3, r10
     228:	2b 2c       	mov	r2, r11
		lprintf("Left: %d\nRight: %d", sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal);
		*/
		//numRecieved = USART_RecieveString(count);
		//USART_SendString(numRecieved);
		
		serialInput = USART_Receive();
     22a:	28 d3       	rcall	.+1616   	; 0x87c <USART_Receive>
     22c:	a6 96       	adiw	r28, 0x26	; 38
     22e:	8f af       	std	Y+63, r24	; 0x3f
     230:	a6 97       	sbiw	r28, 0x26	; 38
		lprintf("%c", serialInput);
     232:	1f 92       	push	r1
     234:	8f 93       	push	r24
     236:	86 e0       	ldi	r24, 0x06	; 6
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	9f 93       	push	r25
     23c:	8f 93       	push	r24
     23e:	7c d1       	rcall	.+760    	; 0x538 <lprintf>
		//if (serialInput) {
		//	USART_SendString(serialInput);
		//}
		
		//Big Scan
		if(serialInput == 'S')
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	a6 96       	adiw	r28, 0x26	; 38
     24a:	8f ad       	ldd	r24, Y+63	; 0x3f
     24c:	a6 97       	sbiw	r28, 0x26	; 38
     24e:	83 35       	cpi	r24, 0x53	; 83
     250:	09 f0       	breq	.+2      	; 0x254 <main+0x88>
     252:	47 c0       	rjmp	.+142    	; 0x2e2 <main+0x116>
		{	degrees = 0;
			servo_turn(degrees);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	66 d4       	rcall	.+2252   	; 0xb26 <servo_turn>
		//	USART_SendString(serialInput);
		//}
		
		//Big Scan
		if(serialInput == 'S')
		{	degrees = 0;
     25a:	c1 2c       	mov	r12, r1
     25c:	d1 2c       	mov	r13, r1
     25e:	39 c0       	rjmp	.+114    	; 0x2d2 <main+0x106>
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     260:	82 e0       	ldi	r24, 0x02	; 2
     262:	2a d3       	rcall	.+1620   	; 0x8b8 <ADC_read>
     264:	08 0f       	add	r16, r24
     266:	19 1f       	adc	r17, r25
					wait_ms(20);
     268:	84 e1       	ldi	r24, 0x14	; 20
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	c8 d3       	rcall	.+1936   	; 0x9fe <wait_ms>
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	e9 1a       	sub	r14, r25
     272:	f1 08       	sbc	r15, r1
			servo_turn(degrees);
			while(degrees <= 180) {
		
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     274:	a9 f7       	brne	.-22     	; 0x260 <main+0x94>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     276:	98 01       	movw	r18, r16
     278:	ab ea       	ldi	r26, 0xAB	; 171
     27a:	ba ea       	ldi	r27, 0xAA	; 170
     27c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__umulhisi3>
     280:	96 95       	lsr	r25
     282:	87 95       	ror	r24
     284:	25 d3       	rcall	.+1610   	; 0x8d0 <calcCm>
     286:	16 2f       	mov	r17, r22
     288:	07 2f       	mov	r16, r23
     28a:	f8 2e       	mov	r15, r24
     28c:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     28e:	2c d4       	rcall	.+2136   	; 0xae8 <ping_read>
		
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     290:	9f 93       	push	r25
     292:	8f 93       	push	r24
     294:	7f 93       	push	r23
     296:	6f 93       	push	r22
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	df 92       	push	r13
     2a2:	cf 92       	push	r12
     2a4:	9f 92       	push	r9
     2a6:	8f 92       	push	r8
     2a8:	bf 92       	push	r11
     2aa:	af 92       	push	r10
     2ac:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
		
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
		
				USART_SendString(OutputString);
     2b0:	83 2d       	mov	r24, r3
     2b2:	92 2d       	mov	r25, r2
     2b4:	e9 d2       	rcall	.+1490   	; 0x888 <USART_SendString>
		
				degrees += 2;
     2b6:	22 e0       	ldi	r18, 0x02	; 2
     2b8:	c2 0e       	add	r12, r18
     2ba:	d1 1c       	adc	r13, r1
		
				servo_turn(degrees);
     2bc:	c6 01       	movw	r24, r12
     2be:	33 d4       	rcall	.+2150   	; 0xb26 <servo_turn>
		
		//Big Scan
		if(serialInput == 'S')
		{	degrees = 0;
			servo_turn(degrees);
			while(degrees <= 180) {
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	96 eb       	ldi	r25, 0xB6	; 182
     2cc:	c9 16       	cp	r12, r25
     2ce:	d1 04       	cpc	r13, r1
     2d0:	21 f0       	breq	.+8      	; 0x2da <main+0x10e>
	float distance;
	float width;
}object_t;

int main(void)
{
     2d2:	73 01       	movw	r14, r6
     2d4:	05 2d       	mov	r16, r5
     2d6:	14 2d       	mov	r17, r4
     2d8:	c3 cf       	rjmp	.-122    	; 0x260 <main+0x94>
		
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     2da:	8a e5       	ldi	r24, 0x5A	; 90
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	23 d4       	rcall	.+2118   	; 0xb26 <servo_turn>
     2e0:	6b c0       	rjmp	.+214    	; 0x3b8 <main+0x1ec>
		}
		
		//Small Scan
		if(serialInput == 's')
     2e2:	a6 96       	adiw	r28, 0x26	; 38
     2e4:	2f ad       	ldd	r18, Y+63	; 0x3f
     2e6:	a6 97       	sbiw	r28, 0x26	; 38
     2e8:	23 37       	cpi	r18, 0x73	; 115
     2ea:	09 f0       	breq	.+2      	; 0x2ee <main+0x122>
     2ec:	49 c0       	rjmp	.+146    	; 0x380 <main+0x1b4>
		{
			degrees = 45;
			servo_turn(degrees);
     2ee:	8d e2       	ldi	r24, 0x2D	; 45
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	19 d4       	rcall	.+2098   	; 0xb26 <servo_turn>
		}
		
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
     2f4:	0f 2e       	mov	r0, r31
     2f6:	fd e2       	ldi	r31, 0x2D	; 45
     2f8:	cf 2e       	mov	r12, r31
     2fa:	d1 2c       	mov	r13, r1
     2fc:	f0 2d       	mov	r31, r0
     2fe:	38 c0       	rjmp	.+112    	; 0x370 <main+0x1a4>
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
				{
					raw += ADC_read(2);
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	da d2       	rcall	.+1460   	; 0x8b8 <ADC_read>
     304:	e8 0e       	add	r14, r24
     306:	f9 1e       	adc	r15, r25
					wait_ms(20);
     308:	84 e1       	ldi	r24, 0x14	; 20
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	78 d3       	rcall	.+1776   	; 0x9fe <wait_ms>
     30e:	01 50       	subi	r16, 0x01	; 1
     310:	11 09       	sbc	r17, r1
			servo_turn(degrees);
			while(degrees <= 135) {
				
				// Average IR distances for a more stable measurement
				raw = 0;
				for(i = 0;i<3;i++)
     312:	b1 f7       	brne	.-20     	; 0x300 <main+0x134>
				{
					raw += ADC_read(2);
					wait_ms(20);
				}

				IRDistance = calcCm(raw/3);
     314:	97 01       	movw	r18, r14
     316:	ab ea       	ldi	r26, 0xAB	; 171
     318:	ba ea       	ldi	r27, 0xAA	; 170
     31a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__umulhisi3>
     31e:	96 95       	lsr	r25
     320:	87 95       	ror	r24
     322:	d6 d2       	rcall	.+1452   	; 0x8d0 <calcCm>
     324:	16 2f       	mov	r17, r22
     326:	07 2f       	mov	r16, r23
     328:	f8 2e       	mov	r15, r24
     32a:	e9 2e       	mov	r14, r25
				PingDistance = ping_read();
     32c:	dd d3       	rcall	.+1978   	; 0xae8 <ping_read>
				
				sprintf(OutputString, "%d %.2f %.2f", degrees, IRDistance, PingDistance);
     32e:	9f 93       	push	r25
     330:	8f 93       	push	r24
     332:	7f 93       	push	r23
     334:	6f 93       	push	r22
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	df 92       	push	r13
     340:	cf 92       	push	r12
     342:	9f 92       	push	r9
     344:	8f 92       	push	r8
     346:	bf 92       	push	r11
     348:	af 92       	push	r10
     34a:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
				//lprintf(OutputString);
				//wait_ms(200);
				
				// sprintf(OutputString, "%14.0f%20.2f\n", degrees, IRDistance);
				
				USART_SendString(OutputString);
     34e:	83 2d       	mov	r24, r3
     350:	92 2d       	mov	r25, r2
     352:	9a d2       	rcall	.+1332   	; 0x888 <USART_SendString>
				
				degrees += 2;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	c8 0e       	add	r12, r24
     358:	d1 1c       	adc	r13, r1
				
				servo_turn(degrees);
     35a:	c6 01       	movw	r24, r12
     35c:	e4 d3       	rcall	.+1992   	; 0xb26 <servo_turn>
		//Small Scan
		if(serialInput == 's')
		{
			degrees = 45;
			servo_turn(degrees);
			while(degrees <= 135) {
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	99 e8       	ldi	r25, 0x89	; 137
     36a:	c9 16       	cp	r12, r25
     36c:	d1 04       	cpc	r13, r1
     36e:	21 f0       	breq	.+8      	; 0x378 <main+0x1ac>
		//	USART_SendString(serialInput);
		//}
		
		//Big Scan
		if(serialInput == 'S')
		{	degrees = 0;
     370:	83 01       	movw	r16, r6
     372:	e5 2c       	mov	r14, r5
     374:	f4 2c       	mov	r15, r4
     376:	c4 cf       	rjmp	.-120    	; 0x300 <main+0x134>
				
				servo_turn(degrees);

			}
			degrees = 0;
			servo_turn(90);
     378:	8a e5       	ldi	r24, 0x5A	; 90
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	d4 d3       	rcall	.+1960   	; 0xb26 <servo_turn>
     37e:	38 c0       	rjmp	.+112    	; 0x3f0 <main+0x224>
		}
		
		if(serialInput == 'f')
     380:	a6 96       	adiw	r28, 0x26	; 38
     382:	2f ad       	ldd	r18, Y+63	; 0x3f
     384:	a6 97       	sbiw	r28, 0x26	; 38
     386:	26 36       	cpi	r18, 0x66	; 102
     388:	b9 f4       	brne	.+46     	; 0x3b8 <main+0x1ec>
		{
						
			//int tempDistance = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     38a:	78 d2       	rcall	.+1264   	; 0x87c <USART_Receive>
		if(serialInput == 'f')
		{
						
			//int tempDistance = atoi(numRecieved);
			char nextletter = 0;
			while(nextletter == 0)
     38c:	88 23       	and	r24, r24
     38e:	e9 f3       	breq	.-6      	; 0x38a <main+0x1be>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-48) * 10;
     390:	28 2f       	mov	r18, r24
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	22 0f       	add	r18, r18
     396:	33 1f       	adc	r19, r19
     398:	b9 01       	movw	r22, r18
     39a:	66 0f       	add	r22, r22
     39c:	77 1f       	adc	r23, r23
     39e:	66 0f       	add	r22, r22
     3a0:	77 1f       	adc	r23, r23
     3a2:	26 0f       	add	r18, r22
     3a4:	37 1f       	adc	r19, r23
     3a6:	b9 01       	movw	r22, r18
     3a8:	60 5e       	subi	r22, 0xE0	; 224
     3aa:	71 40       	sbci	r23, 0x01	; 1
			move_forward(sensor_data, actualnumber);
     3ac:	a8 96       	adiw	r28, 0x28	; 40
     3ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     3b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     3b2:	a8 97       	sbiw	r28, 0x28	; 40
     3b4:	fb d5       	rcall	.+3062   	; 0xfac <move_forward>
     3b6:	38 c0       	rjmp	.+112    	; 0x428 <main+0x25c>
		}
		
		if(serialInput == 'r')
     3b8:	a6 96       	adiw	r28, 0x26	; 38
     3ba:	8f ad       	ldd	r24, Y+63	; 0x3f
     3bc:	a6 97       	sbiw	r28, 0x26	; 38
     3be:	82 37       	cpi	r24, 0x72	; 114
     3c0:	b9 f4       	brne	.+46     	; 0x3f0 <main+0x224>
		{
			//int tempDegrees = atoi(numRecieved);
						
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     3c2:	5c d2       	rcall	.+1208   	; 0x87c <USART_Receive>
		if(serialInput == 'r')
		{
			//int tempDegrees = atoi(numRecieved);
						
			char nextletter = 0;
			while(nextletter == 0)
     3c4:	88 23       	and	r24, r24
     3c6:	e9 f3       	breq	.-6      	; 0x3c2 <main+0x1f6>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-47) * 10;
     3c8:	28 2f       	mov	r18, r24
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	b9 01       	movw	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	77 1f       	adc	r23, r23
     3d6:	66 0f       	add	r22, r22
     3d8:	77 1f       	adc	r23, r23
     3da:	26 0f       	add	r18, r22
     3dc:	37 1f       	adc	r19, r23
     3de:	b9 01       	movw	r22, r18
     3e0:	66 5d       	subi	r22, 0xD6	; 214
     3e2:	71 40       	sbci	r23, 0x01	; 1
			//lprintf("actual %d\n", actualnumber);
			turn_clockwise(sensor_data, actualnumber);
     3e4:	a8 96       	adiw	r28, 0x28	; 40
     3e6:	8e ad       	ldd	r24, Y+62	; 0x3e
     3e8:	9f ad       	ldd	r25, Y+63	; 0x3f
     3ea:	a8 97       	sbiw	r28, 0x28	; 40
     3ec:	03 d4       	rcall	.+2054   	; 0xbf4 <turn_clockwise>
     3ee:	29 c0       	rjmp	.+82     	; 0x442 <main+0x276>
			actualnumber -= 10;
			// sprintf(turnMessage,"Turned right %d degrees", actualnumber);
			// USART_SendString(turnMessage);
		}
		
		if(serialInput == 'l')
     3f0:	a6 96       	adiw	r28, 0x26	; 38
     3f2:	9f ad       	ldd	r25, Y+63	; 0x3f
     3f4:	a6 97       	sbiw	r28, 0x26	; 38
     3f6:	9c 36       	cpi	r25, 0x6C	; 108
     3f8:	b9 f4       	brne	.+46     	; 0x428 <main+0x25c>
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];	
			char nextletter = 0;
			while(nextletter == 0)
				nextletter = USART_Receive();
     3fa:	40 d2       	rcall	.+1152   	; 0x87c <USART_Receive>
		if(serialInput == 'l')
		{
			//int tempDegrees = atoi(numRecieved);
			char turnMessage[40];	
			char nextletter = 0;
			while(nextletter == 0)
     3fc:	88 23       	and	r24, r24
     3fe:	e9 f3       	breq	.-6      	; 0x3fa <main+0x22e>
				nextletter = USART_Receive();
			int actualnumber = (((int) nextletter)-47) * 10;
     400:	28 2f       	mov	r18, r24
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	b9 01       	movw	r22, r18
     40a:	66 0f       	add	r22, r22
     40c:	77 1f       	adc	r23, r23
     40e:	66 0f       	add	r22, r22
     410:	77 1f       	adc	r23, r23
     412:	26 0f       	add	r18, r22
     414:	37 1f       	adc	r19, r23
     416:	b9 01       	movw	r22, r18
     418:	66 5d       	subi	r22, 0xD6	; 214
     41a:	71 40       	sbci	r23, 0x01	; 1
			turn_counterclockwise(sensor_data, actualnumber);
     41c:	a8 96       	adiw	r28, 0x28	; 40
     41e:	8e ad       	ldd	r24, Y+62	; 0x3e
     420:	9f ad       	ldd	r25, Y+63	; 0x3f
     422:	a8 97       	sbiw	r28, 0x28	; 40
     424:	d5 d4       	rcall	.+2474   	; 0xdd0 <turn_counterclockwise>
     426:	01 cf       	rjmp	.-510    	; 0x22a <main+0x5e>
		if(serialInput == 'c' || serialInput == '!') {
			USART_Flush();
			lprintf("Flushed!\n");
		}
		*/
		if(serialInput == 'b')
     428:	a6 96       	adiw	r28, 0x26	; 38
     42a:	2f ad       	ldd	r18, Y+63	; 0x3f
     42c:	a6 97       	sbiw	r28, 0x26	; 38
     42e:	22 36       	cpi	r18, 0x62	; 98
     430:	41 f4       	brne	.+16     	; 0x442 <main+0x276>
		{
			move_backward(sensor_data, 5);
     432:	65 e0       	ldi	r22, 0x05	; 5
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	a8 96       	adiw	r28, 0x28	; 40
     438:	8e ad       	ldd	r24, Y+62	; 0x3e
     43a:	9f ad       	ldd	r25, Y+63	; 0x3f
     43c:	a8 97       	sbiw	r28, 0x28	; 40
     43e:	a6 d3       	rcall	.+1868   	; 0xb8c <move_backward>
     440:	f4 ce       	rjmp	.-536    	; 0x22a <main+0x5e>
		if(serialInput == 'd')
		{
			void reportData(sensor_data);
		}
		*/
		if(serialInput == 'Q')
     442:	a6 96       	adiw	r28, 0x26	; 38
     444:	8f ad       	ldd	r24, Y+63	; 0x3f
     446:	a6 97       	sbiw	r28, 0x26	; 38
     448:	81 35       	cpi	r24, 0x51	; 81
     44a:	09 f0       	breq	.+2      	; 0x44e <main+0x282>
     44c:	ee ce       	rjmp	.-548    	; 0x22a <main+0x5e>
		{
			//Play song cuz we're done
			oi_byte_tx(141);
     44e:	8d e8       	ldi	r24, 0x8D	; 141
     450:	f7 d0       	rcall	.+494    	; 0x640 <oi_byte_tx>
			oi_byte_tx(1);
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	f5 d0       	rcall	.+490    	; 0x640 <oi_byte_tx>
     456:	e9 ce       	rjmp	.-558    	; 0x22a <main+0x5e>

00000458 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     458:	de 9a       	sbi	0x1b, 6	; 27
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	d0 d2       	rcall	.+1440   	; 0x9fe <wait_ms>
     45e:	de 98       	cbi	0x1b, 6	; 27
     460:	8b b3       	in	r24, 0x1b	; 27
     462:	80 7f       	andi	r24, 0xF0	; 240
     464:	8b bb       	out	0x1b, r24	; 27
     466:	08 95       	ret

00000468 <lcd_command>:
     468:	cf 93       	push	r28
     46a:	c8 2f       	mov	r28, r24
     46c:	dc 98       	cbi	0x1b, 4	; 27
     46e:	8b b3       	in	r24, 0x1b	; 27
     470:	9c 2f       	mov	r25, r28
     472:	92 95       	swap	r25
     474:	9f 70       	andi	r25, 0x0F	; 15
     476:	89 2b       	or	r24, r25
     478:	8b bb       	out	0x1b, r24	; 27
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	ed df       	rcall	.-38     	; 0x458 <lcd_toggle_clear>
     47e:	8b b3       	in	r24, 0x1b	; 27
     480:	cf 70       	andi	r28, 0x0F	; 15
     482:	c8 2b       	or	r28, r24
     484:	cb bb       	out	0x1b, r28	; 27
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	e7 df       	rcall	.-50     	; 0x458 <lcd_toggle_clear>
     48a:	dc 9a       	sbi	0x1b, 4	; 27
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <lcd_clear>:
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	ea df       	rcall	.-44     	; 0x468 <lcd_command>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	b2 c2       	rjmp	.+1380   	; 0x9fe <wait_ms>

0000049a <lcd_home_line1>:
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	e5 cf       	rjmp	.-54     	; 0x468 <lcd_command>

0000049e <lcd_init>:
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	8a bb       	out	0x1a, r24	; 26
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	8b bb       	out	0x1b, r24	; 27
     4a6:	de 9a       	sbi	0x1b, 6	; 27
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	a8 d2       	rcall	.+1360   	; 0x9fe <wait_ms>
     4ae:	de 98       	cbi	0x1b, 6	; 27
     4b0:	85 e0       	ldi	r24, 0x05	; 5
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	a4 d2       	rcall	.+1352   	; 0x9fe <wait_ms>
     4b6:	de 9a       	sbi	0x1b, 6	; 27
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	a0 d2       	rcall	.+1344   	; 0x9fe <wait_ms>
     4be:	de 98       	cbi	0x1b, 6	; 27
     4c0:	de 9a       	sbi	0x1b, 6	; 27
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	9b d2       	rcall	.+1334   	; 0x9fe <wait_ms>
     4c8:	de 98       	cbi	0x1b, 6	; 27
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	8b bb       	out	0x1b, r24	; 27
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	c3 df       	rcall	.-122    	; 0x458 <lcd_toggle_clear>
     4d2:	8b b3       	in	r24, 0x1b	; 27
     4d4:	8b bb       	out	0x1b, r24	; 27
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	bf df       	rcall	.-130    	; 0x458 <lcd_toggle_clear>
     4da:	8b b3       	in	r24, 0x1b	; 27
     4dc:	8e 60       	ori	r24, 0x0E	; 14
     4de:	8b bb       	out	0x1b, r24	; 27
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	ba df       	rcall	.-140    	; 0x458 <lcd_toggle_clear>
     4e4:	8b b3       	in	r24, 0x1b	; 27
     4e6:	8b bb       	out	0x1b, r24	; 27
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	b6 df       	rcall	.-148    	; 0x458 <lcd_toggle_clear>
     4ec:	8b b3       	in	r24, 0x1b	; 27
     4ee:	86 60       	ori	r24, 0x06	; 6
     4f0:	8b bb       	out	0x1b, r24	; 27
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	b1 df       	rcall	.-158    	; 0x458 <lcd_toggle_clear>
     4f6:	8b b3       	in	r24, 0x1b	; 27
     4f8:	8b bb       	out	0x1b, r24	; 27
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	ad df       	rcall	.-166    	; 0x458 <lcd_toggle_clear>
     4fe:	d8 9a       	sbi	0x1b, 0	; 27
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	aa df       	rcall	.-172    	; 0x458 <lcd_toggle_clear>
     504:	dc 9a       	sbi	0x1b, 4	; 27
     506:	c9 cf       	rjmp	.-110    	; 0x49a <lcd_home_line1>

00000508 <lcd_home_line2>:
     508:	80 ec       	ldi	r24, 0xC0	; 192
     50a:	ae cf       	rjmp	.-164    	; 0x468 <lcd_command>

0000050c <lcd_home_line3>:
     50c:	84 e9       	ldi	r24, 0x94	; 148
     50e:	ac cf       	rjmp	.-168    	; 0x468 <lcd_command>

00000510 <lcd_home_line4>:
     510:	84 ed       	ldi	r24, 0xD4	; 212
     512:	aa cf       	rjmp	.-172    	; 0x468 <lcd_command>

00000514 <lcd_putc>:
     514:	cf 93       	push	r28
     516:	c8 2f       	mov	r28, r24
     518:	8b b3       	in	r24, 0x1b	; 27
     51a:	9c 2f       	mov	r25, r28
     51c:	92 95       	swap	r25
     51e:	9f 70       	andi	r25, 0x0F	; 15
     520:	89 2b       	or	r24, r25
     522:	8b bb       	out	0x1b, r24	; 27
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	98 df       	rcall	.-208    	; 0x458 <lcd_toggle_clear>
     528:	8b b3       	in	r24, 0x1b	; 27
     52a:	cf 70       	andi	r28, 0x0F	; 15
     52c:	c8 2b       	or	r28, r24
     52e:	cb bb       	out	0x1b, r28	; 27
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	92 df       	rcall	.-220    	; 0x458 <lcd_toggle_clear>
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	c1 55       	subi	r28, 0x51	; 81
     54e:	d1 09       	sbc	r29, r1
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	fe 01       	movw	r30, r28
     55c:	e4 5a       	subi	r30, 0xA4	; 164
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	41 91       	ld	r20, Z+
     562:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     564:	2e 2f       	mov	r18, r30
     566:	3f 2f       	mov	r19, r31
     568:	61 e5       	ldi	r22, 0x51	; 81
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	ce 01       	movw	r24, r28
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	0e 94 b8 12 	call	0x2570	; 0x2570 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     574:	be 01       	movw	r22, r28
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	86 ee       	ldi	r24, 0xE6	; 230
     57c:	94 e0       	ldi	r25, 0x04	; 4
     57e:	0e 94 43 12 	call	0x2486	; 0x2486 <strcmp>
     582:	28 2f       	mov	r18, r24
     584:	39 2f       	mov	r19, r25
     586:	23 2b       	or	r18, r19
     588:	09 f4       	brne	.+2      	; 0x58c <lprintf+0x54>
     58a:	44 c0       	rjmp	.+136    	; 0x614 <lprintf+0xdc>
		return;
	
	strcpy(lastbuffer, buffer);
     58c:	be 01       	movw	r22, r28
     58e:	6f 5f       	subi	r22, 0xFF	; 255
     590:	7f 4f       	sbci	r23, 0xFF	; 255
     592:	86 ee       	ldi	r24, 0xE6	; 230
     594:	94 e0       	ldi	r25, 0x04	; 4
     596:	0e 94 4c 12 	call	0x2498	; 0x2498 <strcpy>
	lcd_clear();
     59a:	7a df       	rcall	.-268    	; 0x490 <lcd_clear>
     59c:	cc 24       	eor	r12, r12
     59e:	c3 94       	inc	r12
     5a0:	d1 2c       	mov	r13, r1
     5a2:	cc 0e       	add	r12, r28
     5a4:	dd 1e       	adc	r13, r29
	char *str = buffer;
	int charnum = 0;
     5a6:	00 e0       	ldi	r16, 0x00	; 0
     5a8:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     5aa:	0f 2e       	mov	r0, r31
     5ac:	f4 e1       	ldi	r31, 0x14	; 20
     5ae:	ef 2e       	mov	r14, r31
     5b0:	f1 2c       	mov	r15, r1
     5b2:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     5b4:	27 c0       	rjmp	.+78     	; 0x604 <lprintf+0xcc>
		if (*str == '\n') {
     5b6:	8a 30       	cpi	r24, 0x0A	; 10
     5b8:	51 f4       	brne	.+20     	; 0x5ce <lprintf+0x96>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     5ba:	c8 01       	movw	r24, r16
     5bc:	b7 01       	movw	r22, r14
     5be:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__divmodhi4>
     5c2:	97 01       	movw	r18, r14
     5c4:	28 1b       	sub	r18, r24
     5c6:	39 0b       	sbc	r19, r25
     5c8:	02 0f       	add	r16, r18
     5ca:	13 1f       	adc	r17, r19
     5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <lprintf+0x9c>
		} else {
			lcd_putc(*str);
     5ce:	a2 df       	rcall	.-188    	; 0x514 <lcd_putc>
			charnum++;
     5d0:	0f 5f       	subi	r16, 0xFF	; 255
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     5d4:	c8 01       	movw	r24, r16
     5d6:	b7 01       	movw	r22, r14
     5d8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__divmodhi4>
     5dc:	89 2b       	or	r24, r25
     5de:	91 f4       	brne	.+36     	; 0x604 <lprintf+0xcc>
			switch (charnum / LCD_WIDTH) {
     5e0:	c8 01       	movw	r24, r16
     5e2:	b7 01       	movw	r22, r14
     5e4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__divmodhi4>
     5e8:	62 30       	cpi	r22, 0x02	; 2
     5ea:	71 05       	cpc	r23, r1
     5ec:	41 f0       	breq	.+16     	; 0x5fe <lprintf+0xc6>
     5ee:	63 30       	cpi	r22, 0x03	; 3
     5f0:	71 05       	cpc	r23, r1
     5f2:	39 f0       	breq	.+14     	; 0x602 <lprintf+0xca>
     5f4:	61 30       	cpi	r22, 0x01	; 1
     5f6:	71 05       	cpc	r23, r1
     5f8:	29 f4       	brne	.+10     	; 0x604 <lprintf+0xcc>
			case 1:
				lcd_home_line2();
     5fa:	86 df       	rcall	.-244    	; 0x508 <lcd_home_line2>
				break;
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <lprintf+0xcc>
			case 2:
				lcd_home_line3();
     5fe:	86 df       	rcall	.-244    	; 0x50c <lcd_home_line3>
				break;
     600:	01 c0       	rjmp	.+2      	; 0x604 <lprintf+0xcc>
			case 3:
				lcd_home_line4();
     602:	86 df       	rcall	.-244    	; 0x510 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     604:	f6 01       	movw	r30, r12
     606:	81 91       	ld	r24, Z+
     608:	6f 01       	movw	r12, r30
     60a:	88 23       	and	r24, r24
     60c:	19 f0       	breq	.+6      	; 0x614 <lprintf+0xdc>
     60e:	00 35       	cpi	r16, 0x50	; 80
     610:	11 05       	cpc	r17, r1
     612:	8c f2       	brlt	.-94     	; 0x5b6 <lprintf+0x7e>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     614:	cf 5a       	subi	r28, 0xAF	; 175
     616:	df 4f       	sbci	r29, 0xFF	; 255
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	df 90       	pop	r13
     630:	cf 90       	pop	r12
     632:	08 95       	ret

00000634 <oi_alloc>:
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
     634:	64 e3       	ldi	r22, 0x34	; 52
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0c 94 03 10 	jmp	0x2006	; 0x2006 <calloc>

00000640 <oi_byte_tx>:
     640:	eb e9       	ldi	r30, 0x9B	; 155
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	90 81       	ld	r25, Z
     646:	95 ff       	sbrs	r25, 5
     648:	fd cf       	rjmp	.-6      	; 0x644 <oi_byte_tx+0x4>
     64a:	80 93 9c 00 	sts	0x009C, r24
     64e:	08 95       	ret

00000650 <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	18 2f       	mov	r17, r24
     65a:	09 2f       	mov	r16, r25
     65c:	c6 2f       	mov	r28, r22
     65e:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
     660:	81 e9       	ldi	r24, 0x91	; 145
     662:	ee df       	rcall	.-36     	; 0x640 <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
     664:	80 2f       	mov	r24, r16
     666:	ec df       	rcall	.-40     	; 0x640 <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
     668:	81 2f       	mov	r24, r17
     66a:	ea df       	rcall	.-44     	; 0x640 <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
     66c:	8d 2f       	mov	r24, r29
     66e:	e8 df       	rcall	.-48     	; 0x640 <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
     670:	8c 2f       	mov	r24, r28
     672:	e6 df       	rcall	.-52     	; 0x640 <oi_byte_tx>
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	08 2f       	mov	r16, r24
     688:	16 2f       	mov	r17, r22
     68a:	d4 2f       	mov	r29, r20
     68c:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
     68e:	8b e8       	ldi	r24, 0x8B	; 139
     690:	d7 df       	rcall	.-82     	; 0x640 <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
     692:	11 23       	and	r17, r17
     694:	41 f0       	breq	.+16     	; 0x6a6 <oi_set_leds+0x28>
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	01 11       	cpse	r16, r1
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <oi_set_leds+0x24>
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	cb 01       	movw	r24, r22
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <oi_set_leds+0x2c>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	ca df       	rcall	.-108    	; 0x640 <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
     6ac:	8d 2f       	mov	r24, r29
     6ae:	c8 df       	rcall	.-112    	; 0x640 <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
     6b0:	8c 2f       	mov	r24, r28
     6b2:	c6 df       	rcall	.-116    	; 0x640 <oi_byte_tx>
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     6be:	eb e9       	ldi	r30, 0x9B	; 155
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	88 23       	and	r24, r24
     6c6:	ec f7       	brge	.-6      	; 0x6c2 <oi_byte_rx+0x4>

	return UDR1;
     6c8:	80 91 9c 00 	lds	r24, 0x009C
}
     6cc:	08 95       	ret

000006ce <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     6dc:	80 91 9b 00 	lds	r24, 0x009B
     6e0:	88 23       	and	r24, r24
     6e2:	44 f4       	brge	.+16     	; 0x6f4 <oi_update+0x26>
		i = UDR1;
     6e4:	ac e9       	ldi	r26, 0x9C	; 156
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     6e8:	eb e9       	ldi	r30, 0x9B	; 155
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     6ec:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     6ee:	80 81       	ld	r24, Z
     6f0:	88 23       	and	r24, r24
     6f2:	e4 f3       	brlt	.-8      	; 0x6ec <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     6f4:	8e e8       	ldi	r24, 0x8E	; 142
     6f6:	a4 df       	rcall	.-184    	; 0x640 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     6f8:	86 e0       	ldi	r24, 0x06	; 6
     6fa:	a2 df       	rcall	.-188    	; 0x640 <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     6fc:	87 01       	movw	r16, r14
     6fe:	0c 5c       	subi	r16, 0xCC	; 204
     700:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
     702:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     704:	dc df       	rcall	.-72     	; 0x6be <oi_byte_rx>
     706:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     708:	c0 17       	cp	r28, r16
     70a:	d1 07       	cpc	r29, r17
     70c:	d9 f7       	brne	.-10     	; 0x704 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     70e:	f7 01       	movw	r30, r14
     710:	94 85       	ldd	r25, Z+12	; 0x0c
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	25 85       	ldd	r18, Z+13	; 0x0d
     716:	82 0f       	add	r24, r18
     718:	91 1d       	adc	r25, r1
     71a:	95 87       	std	Z+13, r25	; 0x0d
     71c:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     71e:	96 85       	ldd	r25, Z+14	; 0x0e
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	27 85       	ldd	r18, Z+15	; 0x0f
     724:	82 0f       	add	r24, r18
     726:	91 1d       	adc	r25, r1
     728:	97 87       	std	Z+15, r25	; 0x0f
     72a:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     72c:	91 89       	ldd	r25, Z+17	; 0x11
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	22 89       	ldd	r18, Z+18	; 0x12
     732:	82 0f       	add	r24, r18
     734:	91 1d       	adc	r25, r1
     736:	92 8b       	std	Z+18, r25	; 0x12
     738:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     73a:	93 89       	ldd	r25, Z+19	; 0x13
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	24 89       	ldd	r18, Z+20	; 0x14
     740:	82 0f       	add	r24, r18
     742:	91 1d       	adc	r25, r1
     744:	94 8b       	std	Z+20, r25	; 0x14
     746:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     748:	96 89       	ldd	r25, Z+22	; 0x16
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	27 89       	ldd	r18, Z+23	; 0x17
     74e:	82 0f       	add	r24, r18
     750:	91 1d       	adc	r25, r1
     752:	97 8b       	std	Z+23, r25	; 0x17
     754:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     756:	90 8d       	ldd	r25, Z+24	; 0x18
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	21 8d       	ldd	r18, Z+25	; 0x19
     75c:	82 0f       	add	r24, r18
     75e:	91 1d       	adc	r25, r1
     760:	91 8f       	std	Z+25, r25	; 0x19
     762:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     764:	92 8d       	ldd	r25, Z+26	; 0x1a
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	23 8d       	ldd	r18, Z+27	; 0x1b
     76a:	82 0f       	add	r24, r18
     76c:	91 1d       	adc	r25, r1
     76e:	93 8f       	std	Z+27, r25	; 0x1b
     770:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     772:	94 8d       	ldd	r25, Z+28	; 0x1c
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	25 8d       	ldd	r18, Z+29	; 0x1d
     778:	82 0f       	add	r24, r18
     77a:	91 1d       	adc	r25, r1
     77c:	95 8f       	std	Z+29, r25	; 0x1d
     77e:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     780:	96 8d       	ldd	r25, Z+30	; 0x1e
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	27 8d       	ldd	r18, Z+31	; 0x1f
     786:	82 0f       	add	r24, r18
     788:	91 1d       	adc	r25, r1
     78a:	97 8f       	std	Z+31, r25	; 0x1f
     78c:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     78e:	90 a1       	ldd	r25, Z+32	; 0x20
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	21 a1       	ldd	r18, Z+33	; 0x21
     794:	82 0f       	add	r24, r18
     796:	91 1d       	adc	r25, r1
     798:	91 a3       	std	Z+33, r25	; 0x21
     79a:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     79c:	92 a1       	ldd	r25, Z+34	; 0x22
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	23 a1       	ldd	r18, Z+35	; 0x23
     7a2:	82 0f       	add	r24, r18
     7a4:	91 1d       	adc	r25, r1
     7a6:	93 a3       	std	Z+35, r25	; 0x23
     7a8:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     7aa:	42 a5       	ldd	r20, Z+42	; 0x2a
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	31 a5       	ldd	r19, Z+41	; 0x29
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	24 0f       	add	r18, r20
     7b4:	35 1f       	adc	r19, r21
     7b6:	36 a3       	std	Z+38, r19	; 0x26
     7b8:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     7ba:	90 a9       	ldd	r25, Z+48	; 0x30
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	84 0f       	add	r24, r20
     7c0:	95 1f       	adc	r25, r21
     7c2:	95 a7       	std	Z+45, r25	; 0x2d
     7c4:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     7c6:	92 a9       	ldd	r25, Z+50	; 0x32
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	23 a9       	ldd	r18, Z+51	; 0x33
     7cc:	82 0f       	add	r24, r18
     7ce:	91 1d       	adc	r25, r1
     7d0:	97 a7       	std	Z+47, r25	; 0x2f
     7d2:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     7d4:	94 a9       	ldd	r25, Z+52	; 0x34
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	25 a9       	ldd	r18, Z+53	; 0x35
     7da:	82 0f       	add	r24, r18
     7dc:	91 1d       	adc	r25, r1
     7de:	91 ab       	std	Z+49, r25	; 0x31
     7e0:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     7e2:	96 a9       	ldd	r25, Z+54	; 0x36
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	27 a9       	ldd	r18, Z+55	; 0x37
     7e8:	82 0f       	add	r24, r18
     7ea:	91 1d       	adc	r25, r1
     7ec:	93 ab       	std	Z+51, r25	; 0x33
     7ee:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     7f0:	83 e2       	ldi	r24, 0x23	; 35
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	04 d1       	rcall	.+520    	; 0x9fe <wait_ms>
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	08 95       	ret

00000804 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     80e:	09 e9       	ldi	r16, 0x99	; 153
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	80 e1       	ldi	r24, 0x10	; 16
     814:	f8 01       	movw	r30, r16
     816:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     818:	88 e1       	ldi	r24, 0x18	; 24
     81a:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     824:	80 e8       	ldi	r24, 0x80	; 128
     826:	0c df       	rcall	.-488    	; 0x640 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     828:	81 e8       	ldi	r24, 0x81	; 129
     82a:	0a df       	rcall	.-492    	; 0x640 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     82c:	88 e0       	ldi	r24, 0x08	; 8
     82e:	08 df       	rcall	.-496    	; 0x640 <oi_byte_tx>
	wait_ms(100);
     830:	84 e6       	ldi	r24, 0x64	; 100
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	e4 d0       	rcall	.+456    	; 0x9fe <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     836:	81 e2       	ldi	r24, 0x21	; 33
     838:	f8 01       	movw	r30, r16
     83a:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     83c:	84 e8       	ldi	r24, 0x84	; 132
     83e:	00 df       	rcall	.-512    	; 0x640 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     840:	2f ef       	ldi	r18, 0xFF	; 255
     842:	47 e0       	ldi	r20, 0x07	; 7
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	1a df       	rcall	.-460    	; 0x67e <oi_set_leds>
	
	oi_update(self);
     84a:	ce 01       	movw	r24, r28
     84c:	40 df       	rcall	.-384    	; 0x6ce <oi_update>
	oi_update(self); // call twice to clear distance/angle
     84e:	ce 01       	movw	r24, r28
     850:	3e df       	rcall	.-388    	; 0x6ce <oi_update>
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	08 95       	ret

0000085c <serial_init>:
	}
	
	//return string
	return receivedVars;
	
}
     85c:	10 92 90 00 	sts	0x0090, r1
     860:	83 e3       	ldi	r24, 0x33	; 51
     862:	89 b9       	out	0x09, r24	; 9
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	8b b9       	out	0x0b, r24	; 11
     868:	8e e0       	ldi	r24, 0x0E	; 14
     86a:	80 93 95 00 	sts	0x0095, r24
     86e:	88 e1       	ldi	r24, 0x18	; 24
     870:	8a b9       	out	0x0a, r24	; 10
     872:	08 95       	ret

00000874 <USART_Transmit>:
     874:	5d 9b       	sbis	0x0b, 5	; 11
     876:	fe cf       	rjmp	.-4      	; 0x874 <USART_Transmit>
     878:	8c b9       	out	0x0c, r24	; 12
     87a:	08 95       	ret

0000087c <USART_Receive>:
     87c:	5f 9b       	sbis	0x0b, 7	; 11
     87e:	02 c0       	rjmp	.+4      	; 0x884 <USART_Receive+0x8>
     880:	8c b1       	in	r24, 0x0c	; 12
     882:	08 95       	ret
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	08 95       	ret

00000888 <USART_SendString>:


void USART_SendString(char SentString[])
{
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	c8 2f       	mov	r28, r24
     88e:	d9 2f       	mov	r29, r25
	char flag = 1;
	int i = 0;
	while(flag)
	{
		if(SentString[i])
     890:	89 91       	ld	r24, Y+
     892:	88 23       	and	r24, r24
     894:	11 f0       	breq	.+4      	; 0x89a <USART_SendString+0x12>
		{
			USART_Transmit(SentString[i]);
     896:	ee df       	rcall	.-36     	; 0x874 <USART_Transmit>
     898:	fb cf       	rjmp	.-10     	; 0x890 <USART_SendString+0x8>
		}
		else
		{
			flag = 0;
			USART_Transmit(10);
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	eb df       	rcall	.-42     	; 0x874 <USART_Transmit>
			USART_Transmit(13);
     89e:	8d e0       	ldi	r24, 0x0D	; 13
     8a0:	e9 df       	rcall	.-46     	; 0x874 <USART_Transmit>
		}
		i++;
	}
	
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <ADC_init>:
			return n+1;
		}
	}
	
	return 0;
}
     8a8:	37 9a       	sbi	0x06, 7	; 6
     8aa:	86 b1       	in	r24, 0x06	; 6
     8ac:	87 60       	ori	r24, 0x07	; 7
     8ae:	86 b9       	out	0x06, r24	; 6
     8b0:	87 b1       	in	r24, 0x07	; 7
     8b2:	80 6c       	ori	r24, 0xC0	; 192
     8b4:	87 b9       	out	0x07, r24	; 7
     8b6:	08 95       	ret

000008b8 <ADC_read>:
     8b8:	97 b1       	in	r25, 0x07	; 7
     8ba:	8f 71       	andi	r24, 0x1F	; 31
     8bc:	98 2b       	or	r25, r24
     8be:	97 b9       	out	0x07, r25	; 7
     8c0:	36 9a       	sbi	0x06, 6	; 6
     8c2:	36 99       	sbic	0x06, 6	; 6
     8c4:	fe cf       	rjmp	.-4      	; 0x8c2 <ADC_read+0xa>
     8c6:	24 b1       	in	r18, 0x04	; 4
     8c8:	35 b1       	in	r19, 0x05	; 5
     8ca:	82 2f       	mov	r24, r18
     8cc:	93 2f       	mov	r25, r19
     8ce:	08 95       	ret

000008d0 <calcCm>:
     8d0:	bc 01       	movw	r22, r24
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	e5 d6       	rcall	.+3530   	; 0x16a2 <__floatunsisf>
     8d8:	2a e9       	ldi	r18, 0x9A	; 154
     8da:	39 e9       	ldi	r19, 0x99	; 153
     8dc:	49 e7       	ldi	r20, 0x79	; 121
     8de:	50 e4       	ldi	r21, 0x40	; 64
     8e0:	6e d7       	rcall	.+3804   	; 0x17be <__mulsf3>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 ea       	ldi	r20, 0xA0	; 160
     8e8:	50 e4       	ldi	r21, 0x40	; 64
     8ea:	e3 d5       	rcall	.+3014   	; 0x14b2 <__addsf3>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 eb       	ldi	r23, 0xB0	; 176
     8f4:	83 e3       	ldi	r24, 0x33	; 51
     8f6:	97 e4       	ldi	r25, 0x47	; 71
     8f8:	40 c6       	rjmp	.+3200   	; 0x157a <__divsf3>

000008fa <song_init>:
     8fa:	8c e8       	ldi	r24, 0x8C	; 140
     8fc:	a1 de       	rcall	.-702    	; 0x640 <oi_byte_tx>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	9f de       	rcall	.-706    	; 0x640 <oi_byte_tx>
     902:	88 e1       	ldi	r24, 0x18	; 24
     904:	9d de       	rcall	.-710    	; 0x640 <oi_byte_tx>
     906:	83 e4       	ldi	r24, 0x43	; 67
     908:	9b de       	rcall	.-714    	; 0x640 <oi_byte_tx>
     90a:	80 e1       	ldi	r24, 0x10	; 16
     90c:	99 de       	rcall	.-718    	; 0x640 <oi_byte_tx>
     90e:	83 e4       	ldi	r24, 0x43	; 67
     910:	97 de       	rcall	.-722    	; 0x640 <oi_byte_tx>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	95 de       	rcall	.-726    	; 0x640 <oi_byte_tx>
     916:	8f e3       	ldi	r24, 0x3F	; 63
     918:	93 de       	rcall	.-730    	; 0x640 <oi_byte_tx>
     91a:	80 e1       	ldi	r24, 0x10	; 16
     91c:	91 de       	rcall	.-734    	; 0x640 <oi_byte_tx>
     91e:	8c e3       	ldi	r24, 0x3C	; 60
     920:	8f de       	rcall	.-738    	; 0x640 <oi_byte_tx>
     922:	80 e2       	ldi	r24, 0x20	; 32
     924:	8d de       	rcall	.-742    	; 0x640 <oi_byte_tx>
     926:	8c e3       	ldi	r24, 0x3C	; 60
     928:	8b de       	rcall	.-746    	; 0x640 <oi_byte_tx>
     92a:	80 e2       	ldi	r24, 0x20	; 32
     92c:	89 de       	rcall	.-750    	; 0x640 <oi_byte_tx>
     92e:	81 e4       	ldi	r24, 0x41	; 65
     930:	87 de       	rcall	.-754    	; 0x640 <oi_byte_tx>
     932:	80 e2       	ldi	r24, 0x20	; 32
     934:	85 de       	rcall	.-758    	; 0x640 <oi_byte_tx>
     936:	81 e4       	ldi	r24, 0x41	; 65
     938:	83 de       	rcall	.-762    	; 0x640 <oi_byte_tx>
     93a:	80 e2       	ldi	r24, 0x20	; 32
     93c:	81 de       	rcall	.-766    	; 0x640 <oi_byte_tx>
     93e:	81 e4       	ldi	r24, 0x41	; 65
     940:	7f de       	rcall	.-770    	; 0x640 <oi_byte_tx>
     942:	80 e1       	ldi	r24, 0x10	; 16
     944:	7d de       	rcall	.-774    	; 0x640 <oi_byte_tx>
     946:	85 e4       	ldi	r24, 0x45	; 69
     948:	7b de       	rcall	.-778    	; 0x640 <oi_byte_tx>
     94a:	80 e1       	ldi	r24, 0x10	; 16
     94c:	79 de       	rcall	.-782    	; 0x640 <oi_byte_tx>
     94e:	85 e4       	ldi	r24, 0x45	; 69
     950:	77 de       	rcall	.-786    	; 0x640 <oi_byte_tx>
     952:	80 e1       	ldi	r24, 0x10	; 16
     954:	75 de       	rcall	.-790    	; 0x640 <oi_byte_tx>
     956:	86 e4       	ldi	r24, 0x46	; 70
     958:	73 de       	rcall	.-794    	; 0x640 <oi_byte_tx>
     95a:	80 e1       	ldi	r24, 0x10	; 16
     95c:	71 de       	rcall	.-798    	; 0x640 <oi_byte_tx>
     95e:	88 e4       	ldi	r24, 0x48	; 72
     960:	6f de       	rcall	.-802    	; 0x640 <oi_byte_tx>
     962:	80 e1       	ldi	r24, 0x10	; 16
     964:	6d de       	rcall	.-806    	; 0x640 <oi_byte_tx>
     966:	86 e4       	ldi	r24, 0x46	; 70
     968:	6b de       	rcall	.-810    	; 0x640 <oi_byte_tx>
     96a:	80 e1       	ldi	r24, 0x10	; 16
     96c:	69 de       	rcall	.-814    	; 0x640 <oi_byte_tx>
     96e:	86 e4       	ldi	r24, 0x46	; 70
     970:	67 de       	rcall	.-818    	; 0x640 <oi_byte_tx>
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	65 de       	rcall	.-822    	; 0x640 <oi_byte_tx>
     976:	81 e4       	ldi	r24, 0x41	; 65
     978:	63 de       	rcall	.-826    	; 0x640 <oi_byte_tx>
     97a:	80 e1       	ldi	r24, 0x10	; 16
     97c:	61 de       	rcall	.-830    	; 0x640 <oi_byte_tx>
     97e:	8e e3       	ldi	r24, 0x3E	; 62
     980:	5f de       	rcall	.-834    	; 0x640 <oi_byte_tx>
     982:	80 e2       	ldi	r24, 0x20	; 32
     984:	5d de       	rcall	.-838    	; 0x640 <oi_byte_tx>
     986:	8e e3       	ldi	r24, 0x3E	; 62
     988:	5b de       	rcall	.-842    	; 0x640 <oi_byte_tx>
     98a:	80 e2       	ldi	r24, 0x20	; 32
     98c:	59 de       	rcall	.-846    	; 0x640 <oi_byte_tx>
     98e:	83 e4       	ldi	r24, 0x43	; 67
     990:	57 de       	rcall	.-850    	; 0x640 <oi_byte_tx>
     992:	80 e2       	ldi	r24, 0x20	; 32
     994:	55 de       	rcall	.-854    	; 0x640 <oi_byte_tx>
     996:	83 e4       	ldi	r24, 0x43	; 67
     998:	53 de       	rcall	.-858    	; 0x640 <oi_byte_tx>
     99a:	80 e2       	ldi	r24, 0x20	; 32
     99c:	51 de       	rcall	.-862    	; 0x640 <oi_byte_tx>
     99e:	83 e4       	ldi	r24, 0x43	; 67
     9a0:	4f de       	rcall	.-866    	; 0x640 <oi_byte_tx>
     9a2:	80 e1       	ldi	r24, 0x10	; 16
     9a4:	4d de       	rcall	.-870    	; 0x640 <oi_byte_tx>
     9a6:	81 e4       	ldi	r24, 0x41	; 65
     9a8:	4b de       	rcall	.-874    	; 0x640 <oi_byte_tx>
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	49 de       	rcall	.-878    	; 0x640 <oi_byte_tx>
     9ae:	81 e4       	ldi	r24, 0x41	; 65
     9b0:	47 de       	rcall	.-882    	; 0x640 <oi_byte_tx>
     9b2:	80 e1       	ldi	r24, 0x10	; 16
     9b4:	45 de       	rcall	.-886    	; 0x640 <oi_byte_tx>
     9b6:	83 e4       	ldi	r24, 0x43	; 67
     9b8:	43 de       	rcall	.-890    	; 0x640 <oi_byte_tx>
     9ba:	80 e1       	ldi	r24, 0x10	; 16
     9bc:	41 de       	rcall	.-894    	; 0x640 <oi_byte_tx>
     9be:	81 e4       	ldi	r24, 0x41	; 65
     9c0:	3f de       	rcall	.-898    	; 0x640 <oi_byte_tx>
     9c2:	80 e1       	ldi	r24, 0x10	; 16
     9c4:	3d ce       	rjmp	.-902    	; 0x640 <oi_byte_tx>

000009c6 <timer2_start>:
     9c6:	10 92 3c 05 	sts	0x053C, r1
     9ca:	10 92 3b 05 	sts	0x053B, r1
     9ce:	81 11       	cpse	r24, r1
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <timer2_start+0x18>
     9d2:	8b e0       	ldi	r24, 0x0B	; 11
     9d4:	85 bd       	out	0x25, r24	; 37
     9d6:	87 b7       	in	r24, 0x37	; 55
     9d8:	80 68       	ori	r24, 0x80	; 128
     9da:	87 bf       	out	0x37, r24	; 55
     9dc:	07 c0       	rjmp	.+14     	; 0x9ec <timer2_start+0x26>
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	29 f4       	brne	.+10     	; 0x9ec <timer2_start+0x26>
     9e2:	89 e0       	ldi	r24, 0x09	; 9
     9e4:	85 bd       	out	0x25, r24	; 37
     9e6:	87 b7       	in	r24, 0x37	; 55
     9e8:	80 68       	ori	r24, 0x80	; 128
     9ea:	87 bf       	out	0x37, r24	; 55
     9ec:	78 94       	sei
     9ee:	08 95       	ret

000009f0 <timer2_stop>:
     9f0:	87 b7       	in	r24, 0x37	; 55
     9f2:	8f 77       	andi	r24, 0x7F	; 127
     9f4:	87 bf       	out	0x37, r24	; 55
     9f6:	85 b5       	in	r24, 0x25	; 37
     9f8:	8f 77       	andi	r24, 0x7F	; 127
     9fa:	85 bd       	out	0x25, r24	; 37
     9fc:	08 95       	ret

000009fe <wait_ms>:
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
     a04:	8a ef       	ldi	r24, 0xFA	; 250
     a06:	83 bd       	out	0x23, r24	; 35
     a08:	10 92 3c 05 	sts	0x053C, r1
     a0c:	10 92 3b 05 	sts	0x053B, r1
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	d9 df       	rcall	.-78     	; 0x9c6 <timer2_start>
     a14:	20 91 3b 05 	lds	r18, 0x053B
     a18:	30 91 3c 05 	lds	r19, 0x053C
     a1c:	2c 17       	cp	r18, r28
     a1e:	3d 07       	cpc	r19, r29
     a20:	c8 f3       	brcs	.-14     	; 0xa14 <wait_ms+0x16>
     a22:	e6 df       	rcall	.-52     	; 0x9f0 <timer2_stop>
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <__vector_9>:
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	80 91 3b 05 	lds	r24, 0x053B
     a3c:	90 91 3c 05 	lds	r25, 0x053C
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	90 93 3c 05 	sts	0x053C, r25
     a46:	80 93 3b 05 	sts	0x053B, r24
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <init_push_buttons>:
     a58:	84 b3       	in	r24, 0x14	; 20
     a5a:	80 7c       	andi	r24, 0xC0	; 192
     a5c:	84 bb       	out	0x14, r24	; 20
     a5e:	85 b3       	in	r24, 0x15	; 21
     a60:	8f 63       	ori	r24, 0x3F	; 63
     a62:	85 bb       	out	0x15, r24	; 21
     a64:	08 95       	ret

00000a66 <ping_init>:
     a66:	1f bc       	out	0x2f, r1	; 47
     a68:	84 ec       	ldi	r24, 0xC4	; 196
     a6a:	8e bd       	out	0x2e, r24	; 46
     a6c:	17 be       	out	0x37, r1	; 55
     a6e:	08 95       	ret

00000a70 <__vector_11>:
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	2f 93       	push	r18
     a7c:	3f 93       	push	r19
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	86 b5       	in	r24, 0x26	; 38
     a84:	97 b5       	in	r25, 0x27	; 39
     a86:	90 93 3a 05 	sts	0x053A, r25
     a8a:	80 93 39 05 	sts	0x0539, r24
     a8e:	20 91 37 05 	lds	r18, 0x0537
     a92:	30 91 38 05 	lds	r19, 0x0538
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	23 2b       	or	r18, r19
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <__vector_11+0x32>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 38 05 	sts	0x0538, r25
     aa6:	80 93 37 05 	sts	0x0537, r24
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <send_pulse>:
     abc:	8c 9a       	sbi	0x11, 4	; 17
     abe:	94 9a       	sbi	0x12, 4	; 18
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	9c df       	rcall	.-200    	; 0x9fe <wait_ms>
     ac6:	94 98       	cbi	0x12, 4	; 18
     ac8:	8c 98       	cbi	0x11, 4	; 17
     aca:	08 95       	ret

00000acc <time2dist>:
     acc:	bc 01       	movw	r22, r24
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	e7 d5       	rcall	.+3022   	; 0x16a2 <__floatunsisf>
     ad4:	22 ef       	ldi	r18, 0xF2	; 242
     ad6:	32 ed       	ldi	r19, 0xD2	; 210
     ad8:	4d e8       	ldi	r20, 0x8D	; 141
     ada:	5e e3       	ldi	r21, 0x3E	; 62
     adc:	70 d6       	rcall	.+3296   	; 0x17be <__mulsf3>
     ade:	20 e5       	ldi	r18, 0x50	; 80
     ae0:	3d e8       	ldi	r19, 0x8D	; 141
     ae2:	4f ef       	ldi	r20, 0xFF	; 255
     ae4:	51 e4       	ldi	r21, 0x41	; 65
     ae6:	e4 c4       	rjmp	.+2504   	; 0x14b0 <__subsf3>

00000ae8 <ping_read>:
     ae8:	e9 df       	rcall	.-46     	; 0xabc <send_pulse>
     aea:	80 e2       	ldi	r24, 0x20	; 32
     aec:	87 bf       	out	0x37, r24	; 55
     aee:	80 91 37 05 	lds	r24, 0x0537
     af2:	90 91 38 05 	lds	r25, 0x0538
     af6:	89 2b       	or	r24, r25
     af8:	d1 f7       	brne	.-12     	; 0xaee <ping_read+0x6>
     afa:	84 e8       	ldi	r24, 0x84	; 132
     afc:	8e bd       	out	0x2e, r24	; 46
     afe:	20 91 39 05 	lds	r18, 0x0539
     b02:	30 91 3a 05 	lds	r19, 0x053A
     b06:	80 91 37 05 	lds	r24, 0x0537
     b0a:	90 91 38 05 	lds	r25, 0x0538
     b0e:	89 2b       	or	r24, r25
     b10:	d1 f3       	breq	.-12     	; 0xb06 <ping_read+0x1e>
     b12:	84 ec       	ldi	r24, 0xC4	; 196
     b14:	8e bd       	out	0x2e, r24	; 46
     b16:	80 91 39 05 	lds	r24, 0x0539
     b1a:	90 91 3a 05 	lds	r25, 0x053A
     b1e:	17 be       	out	0x37, r1	; 55
     b20:	82 1b       	sub	r24, r18
     b22:	93 0b       	sbc	r25, r19
     b24:	d3 cf       	rjmp	.-90     	; 0xacc <time2dist>

00000b26 <servo_turn>:
     b26:	bc 01       	movw	r22, r24
     b28:	88 27       	eor	r24, r24
     b2a:	77 fd       	sbrc	r23, 7
     b2c:	80 95       	com	r24
     b2e:	98 2f       	mov	r25, r24
     b30:	ba d5       	rcall	.+2932   	; 0x16a6 <__floatsisf>
     b32:	2b e3       	ldi	r18, 0x3B	; 59
     b34:	3a ea       	ldi	r19, 0xAA	; 170
     b36:	4a e1       	ldi	r20, 0x1A	; 26
     b38:	5c e3       	ldi	r21, 0x3C	; 60
     b3a:	41 d6       	rcall	.+3202   	; 0x17be <__mulsf3>
     b3c:	28 e4       	ldi	r18, 0x48	; 72
     b3e:	31 ee       	ldi	r19, 0xE1	; 225
     b40:	4a ef       	ldi	r20, 0xFA	; 250
     b42:	5e e3       	ldi	r21, 0x3E	; 62
     b44:	b6 d4       	rcall	.+2412   	; 0x14b2 <__addsf3>
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	4a e7       	ldi	r20, 0x7A	; 122
     b4c:	53 e4       	ldi	r21, 0x43	; 67
     b4e:	37 d6       	rcall	.+3182   	; 0x17be <__mulsf3>
     b50:	7c d5       	rcall	.+2808   	; 0x164a <__fixunssfsi>
     b52:	61 50       	subi	r22, 0x01	; 1
     b54:	71 09       	sbc	r23, r1
     b56:	70 93 85 00 	sts	0x0085, r23
     b5a:	60 93 84 00 	sts	0x0084, r22
     b5e:	84 e1       	ldi	r24, 0x14	; 20
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	4d cf       	rjmp	.-358    	; 0x9fe <wait_ms>

00000b64 <timer3_init>:
     b64:	83 ec       	ldi	r24, 0xC3	; 195
     b66:	99 e0       	ldi	r25, 0x09	; 9
     b68:	90 93 87 00 	sts	0x0087, r25
     b6c:	80 93 86 00 	sts	0x0086, r24
     b70:	80 e5       	ldi	r24, 0x50	; 80
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	90 93 85 00 	sts	0x0085, r25
     b78:	80 93 84 00 	sts	0x0084, r24
     b7c:	83 e2       	ldi	r24, 0x23	; 35
     b7e:	80 93 8b 00 	sts	0x008B, r24
     b82:	8b e1       	ldi	r24, 0x1B	; 27
     b84:	80 93 8a 00 	sts	0x008A, r24
     b88:	14 9a       	sbi	0x02, 4	; 2
     b8a:	08 95       	ret

00000b8c <move_backward>:
	return 0;
}


void move_backward(oi_t *sensor, int centimeters)
{
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	8c 01       	movw	r16, r24
     b9a:	d6 2f       	mov	r29, r22
     b9c:	c7 2f       	mov	r28, r23
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
     b9e:	68 e3       	ldi	r22, 0x38	; 56
     ba0:	7f ef       	ldi	r23, 0xFF	; 255
     ba2:	88 e3       	ldi	r24, 0x38	; 56
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	54 dd       	rcall	.-1368   	; 0x650 <oi_set_wheels>
	while (sum < centimeters*10) {
     ba8:	ed 2e       	mov	r14, r29
     baa:	fc 2e       	mov	r15, r28
     bac:	ee 0c       	add	r14, r14
     bae:	ff 1c       	adc	r15, r15
     bb0:	c7 01       	movw	r24, r14
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	e8 0e       	add	r14, r24
     bbc:	f9 1e       	adc	r15, r25
     bbe:	1e 14       	cp	r1, r14
     bc0:	1f 04       	cpc	r1, r15
     bc2:	64 f4       	brge	.+24     	; 0xbdc <move_backward+0x50>
}


void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
		oi_update(sensor);
     bc8:	c8 01       	movw	r24, r16
     bca:	81 dd       	rcall	.-1278   	; 0x6ce <oi_update>
		sum -= sensor->distance;
     bcc:	f8 01       	movw	r30, r16
     bce:	84 85       	ldd	r24, Z+12	; 0x0c
     bd0:	95 85       	ldd	r25, Z+13	; 0x0d
     bd2:	c8 1b       	sub	r28, r24
     bd4:	d9 0b       	sbc	r29, r25

void move_backward(oi_t *sensor, int centimeters)
{
	int sum = 0;
	oi_set_wheels(-200, -200); // move backward
	while (sum < centimeters*10) {
     bd6:	ce 15       	cp	r28, r14
     bd8:	df 05       	cpc	r29, r15
     bda:	b4 f3       	brlt	.-20     	; 0xbc8 <move_backward+0x3c>
		oi_update(sensor);
		sum -= sensor->distance;
	}
	
	oi_set_wheels(0, 0); // stop	
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	35 dd       	rcall	.-1430   	; 0x650 <oi_set_wheels>
	//reportData(sensor);
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	08 95       	ret

00000bf4 <turn_clockwise>:

void turn_clockwise(oi_t *sensor, int degrees)
{
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	c4 56       	subi	r28, 0x64	; 100
     c0e:	d1 09       	sbc	r29, r1
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	8c 01       	movw	r16, r24
     c1c:	5b 01       	movw	r10, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-150, 150);
     c1e:	66 e9       	ldi	r22, 0x96	; 150
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	8a e6       	ldi	r24, 0x6A	; 106
     c24:	9f ef       	ldi	r25, 0xFF	; 255
     c26:	14 dd       	rcall	.-1496   	; 0x650 <oi_set_wheels>
	//reportData(sensor);
}

void turn_clockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     c28:	e1 2c       	mov	r14, r1
     c2a:	f1 2c       	mov	r15, r1
	char outputString[20];
	oi_set_wheels(-150, 150);
	
		while (sum < degrees-12) {
     c2c:	65 01       	movw	r12, r10
     c2e:	2c e0       	ldi	r18, 0x0C	; 12
     c30:	c2 1a       	sub	r12, r18
     c32:	d1 08       	sbc	r13, r1
     c34:	9a c0       	rjmp	.+308    	; 0xd6a <turn_clockwise+0x176>
			oi_update(sensor);
     c36:	c8 01       	movw	r24, r16
     c38:	4a dd       	rcall	.-1388   	; 0x6ce <oi_update>
			sum -= sensor->angle;
     c3a:	f8 01       	movw	r30, r16
     c3c:	86 85       	ldd	r24, Z+14	; 0x0e
     c3e:	97 85       	ldd	r25, Z+15	; 0x0f
     c40:	e8 1a       	sub	r14, r24
     c42:	f9 0a       	sbc	r15, r25
			
		if((sensor->cliff_frontleft_signal > 800))
     c44:	86 8d       	ldd	r24, Z+30	; 0x1e
     c46:	97 8d       	ldd	r25, Z+31	; 0x1f
     c48:	81 32       	cpi	r24, 0x21	; 33
     c4a:	93 40       	sbci	r25, 0x03	; 3
     c4c:	f8 f0       	brcs	.+62     	; 0xc8c <turn_clockwise+0x98>
		{
			char sensorData[60];
			lprintf("Line Detected");
     c4e:	86 e1       	ldi	r24, 0x16	; 22
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	70 dc       	rcall	.-1824   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	f7 dc       	rcall	.-1554   	; 0x650 <oi_set_wheels>
			sprintf(sensorData, "Front Left Sensor Line Detected | degrees moved: %d", sum);
     c62:	ff 92       	push	r15
     c64:	ef 92       	push	r14
     c66:	84 e2       	ldi	r24, 0x24	; 36
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	8e 01       	movw	r16, r28
     c70:	07 5d       	subi	r16, 0xD7	; 215
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	1f 93       	push	r17
     c76:	0f 93       	push	r16
     c78:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
     c7c:	c8 01       	movw	r24, r16
     c7e:	04 de       	rcall	.-1016   	; 0x888 <USART_SendString>
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	90 c0       	rjmp	.+288    	; 0xdac <turn_clockwise+0x1b8>
			return 3;
		}
		
		else if((sensor->cliff_frontright_signal > 800))
     c8c:	f8 01       	movw	r30, r16
     c8e:	80 a1       	ldd	r24, Z+32	; 0x20
     c90:	91 a1       	ldd	r25, Z+33	; 0x21
     c92:	81 32       	cpi	r24, 0x21	; 33
     c94:	93 40       	sbci	r25, 0x03	; 3
     c96:	f8 f0       	brcs	.+62     	; 0xcd6 <turn_clockwise+0xe2>
		{
			char sensorData[60];
			lprintf("Line Detected");
     c98:	86 e1       	ldi	r24, 0x16	; 22
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	4b dc       	rcall	.-1898   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	d2 dc       	rcall	.-1628   	; 0x650 <oi_set_wheels>
			sprintf(sensorData, "Front Right Sensor Line Detected | degrees moved: %d", sum);
     cac:	ff 92       	push	r15
     cae:	ef 92       	push	r14
     cb0:	88 e5       	ldi	r24, 0x58	; 88
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	8e 01       	movw	r16, r28
     cba:	07 5d       	subi	r16, 0xD7	; 215
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	1f 93       	push	r17
     cc0:	0f 93       	push	r16
     cc2:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
     cc6:	c8 01       	movw	r24, r16
     cc8:	df dd       	rcall	.-1090   	; 0x888 <USART_SendString>
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	6b c0       	rjmp	.+214    	; 0xdac <turn_clockwise+0x1b8>
			return 3;
		}

		else if((sensor->cliff_right_signal > 800))
     cd6:	f8 01       	movw	r30, r16
     cd8:	82 a1       	ldd	r24, Z+34	; 0x22
     cda:	93 a1       	ldd	r25, Z+35	; 0x23
     cdc:	81 32       	cpi	r24, 0x21	; 33
     cde:	93 40       	sbci	r25, 0x03	; 3
     ce0:	f8 f0       	brcs	.+62     	; 0xd20 <turn_clockwise+0x12c>
		{
			char sensorData[60];
			lprintf("Line Detected");
     ce2:	86 e1       	ldi	r24, 0x16	; 22
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	26 dc       	rcall	.-1972   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	ad dc       	rcall	.-1702   	; 0x650 <oi_set_wheels>
			sprintf(sensorData, "Right Sensor Line Detected | distance moved: %d", sum);
     cf6:	ff 92       	push	r15
     cf8:	ef 92       	push	r14
     cfa:	8d e8       	ldi	r24, 0x8D	; 141
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	8e 01       	movw	r16, r28
     d04:	07 5d       	subi	r16, 0xD7	; 215
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	1f 93       	push	r17
     d0a:	0f 93       	push	r16
     d0c:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
     d10:	c8 01       	movw	r24, r16
     d12:	ba dd       	rcall	.-1164   	; 0x888 <USART_SendString>
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	46 c0       	rjmp	.+140    	; 0xdac <turn_clockwise+0x1b8>
			return 3;
		}

		else if((sensor->cliff_left_signal > 800))
     d20:	f8 01       	movw	r30, r16
     d22:	84 8d       	ldd	r24, Z+28	; 0x1c
     d24:	95 8d       	ldd	r25, Z+29	; 0x1d
     d26:	81 32       	cpi	r24, 0x21	; 33
     d28:	93 40       	sbci	r25, 0x03	; 3
     d2a:	f8 f0       	brcs	.+62     	; 0xd6a <turn_clockwise+0x176>
		{
			char sensorData[60];
			lprintf("Line Detected");
     d2c:	86 e1       	ldi	r24, 0x16	; 22
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	9f 93       	push	r25
     d32:	8f 93       	push	r24
     d34:	01 dc       	rcall	.-2046   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	88 dc       	rcall	.-1776   	; 0x650 <oi_set_wheels>
			sprintf(sensorData, "Left Sensor Line Detected | distance moved: %d", sum);
     d40:	ff 92       	push	r15
     d42:	ef 92       	push	r14
     d44:	8d eb       	ldi	r24, 0xBD	; 189
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	9f 93       	push	r25
     d4a:	8f 93       	push	r24
     d4c:	8e 01       	movw	r16, r28
     d4e:	07 5d       	subi	r16, 0xD7	; 215
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	1f 93       	push	r17
     d54:	0f 93       	push	r16
     d56:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
     d5a:	c8 01       	movw	r24, r16
     d5c:	95 dd       	rcall	.-1238   	; 0x888 <USART_SendString>
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	21 c0       	rjmp	.+66     	; 0xdac <turn_clockwise+0x1b8>
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(-150, 150);
	
		while (sum < degrees-12) {
     d6a:	ec 14       	cp	r14, r12
     d6c:	fd 04       	cpc	r15, r13
     d6e:	0c f4       	brge	.+2      	; 0xd72 <turn_clockwise+0x17e>
     d70:	62 cf       	rjmp	.-316    	; 0xc36 <turn_clockwise+0x42>
	
	// sprintf(outputString, "Turned %d degrees clockwise", degrees);
	
	// USART_SendString(outputString);
	
	oi_set_wheels(0, 0); // stop
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	6a dc       	rcall	.-1836   	; 0x650 <oi_set_wheels>
	char turnMessage[40];
	degrees -= 10;
     d7c:	9a e0       	ldi	r25, 0x0A	; 10
     d7e:	a9 1a       	sub	r10, r25
     d80:	b1 08       	sbc	r11, r1
	sprintf(turnMessage,"Turned right %d degrees", degrees);
     d82:	bf 92       	push	r11
     d84:	af 92       	push	r10
     d86:	8c ee       	ldi	r24, 0xEC	; 236
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	9f 93       	push	r25
     d8c:	8f 93       	push	r24
     d8e:	8e 01       	movw	r16, r28
     d90:	0f 5f       	subi	r16, 0xFF	; 255
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	1f 93       	push	r17
     d96:	0f 93       	push	r16
     d98:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
	USART_SendString(turnMessage);
     d9c:	c8 01       	movw	r24, r16
     d9e:	74 dd       	rcall	.-1304   	; 0x888 <USART_SendString>
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
}
     dac:	cc 59       	subi	r28, 0x9C	; 156
     dae:	df 4f       	sbci	r29, 0xFF	; 255
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	bf 90       	pop	r11
     dcc:	af 90       	pop	r10
     dce:	08 95       	ret

00000dd0 <turn_counterclockwise>:

void turn_counterclockwise(oi_t *sensor, int degrees)
{
     dd0:	af 92       	push	r10
     dd2:	bf 92       	push	r11
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	c4 56       	subi	r28, 0x64	; 100
     dea:	d1 09       	sbc	r29, r1
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	8c 01       	movw	r16, r24
     df8:	5b 01       	movw	r10, r22
	int sum = 0;
	char outputString[20];
	oi_set_wheels(150, -150);
     dfa:	6a e6       	ldi	r22, 0x6A	; 106
     dfc:	7f ef       	ldi	r23, 0xFF	; 255
     dfe:	86 e9       	ldi	r24, 0x96	; 150
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	26 dc       	rcall	.-1972   	; 0x650 <oi_set_wheels>
	USART_SendString(turnMessage);
}

void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int sum = 0;
     e04:	e1 2c       	mov	r14, r1
     e06:	f1 2c       	mov	r15, r1
	char outputString[20];
	oi_set_wheels(150, -150);
	
	while (sum < degrees-12) 
     e08:	65 01       	movw	r12, r10
     e0a:	2c e0       	ldi	r18, 0x0C	; 12
     e0c:	c2 1a       	sub	r12, r18
     e0e:	d1 08       	sbc	r13, r1
     e10:	9a c0       	rjmp	.+308    	; 0xf46 <turn_counterclockwise+0x176>
	{
		oi_update(sensor);
     e12:	c8 01       	movw	r24, r16
     e14:	5c dc       	rcall	.-1864   	; 0x6ce <oi_update>
		sum += sensor->angle; 
     e16:	f8 01       	movw	r30, r16
     e18:	86 85       	ldd	r24, Z+14	; 0x0e
     e1a:	97 85       	ldd	r25, Z+15	; 0x0f
     e1c:	e8 0e       	add	r14, r24
     e1e:	f9 1e       	adc	r15, r25
		
		if((sensor->cliff_frontleft_signal > 800))
     e20:	86 8d       	ldd	r24, Z+30	; 0x1e
     e22:	97 8d       	ldd	r25, Z+31	; 0x1f
     e24:	81 32       	cpi	r24, 0x21	; 33
     e26:	93 40       	sbci	r25, 0x03	; 3
     e28:	f8 f0       	brcs	.+62     	; 0xe68 <turn_counterclockwise+0x98>
		{
			char sensorData[60];
			lprintf("Line Detected");
     e2a:	86 e1       	ldi	r24, 0x16	; 22
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	9f 93       	push	r25
     e30:	8f 93       	push	r24
     e32:	82 db       	rcall	.-2300   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	09 dc       	rcall	.-2030   	; 0x650 <oi_set_wheels>
			sprintf(sensorData, "Front Left Sensor Line Detected | degrees moved: %d", sum);
     e3e:	ff 92       	push	r15
     e40:	ef 92       	push	r14
     e42:	84 e2       	ldi	r24, 0x24	; 36
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	9f 93       	push	r25
     e48:	8f 93       	push	r24
     e4a:	8e 01       	movw	r16, r28
     e4c:	07 5d       	subi	r16, 0xD7	; 215
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	1f 93       	push	r17
     e52:	0f 93       	push	r16
     e54:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
     e58:	c8 01       	movw	r24, r16
     e5a:	16 dd       	rcall	.-1492   	; 0x888 <USART_SendString>
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	90 c0       	rjmp	.+288    	; 0xf88 <turn_counterclockwise+0x1b8>
			return 3;
		}
		
		else if((sensor->cliff_frontright_signal > 800))
     e68:	f8 01       	movw	r30, r16
     e6a:	80 a1       	ldd	r24, Z+32	; 0x20
     e6c:	91 a1       	ldd	r25, Z+33	; 0x21
     e6e:	81 32       	cpi	r24, 0x21	; 33
     e70:	93 40       	sbci	r25, 0x03	; 3
     e72:	f8 f0       	brcs	.+62     	; 0xeb2 <turn_counterclockwise+0xe2>
		{
			char sensorData[60];
			lprintf("Line Detected");
     e74:	86 e1       	ldi	r24, 0x16	; 22
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	9f 93       	push	r25
     e7a:	8f 93       	push	r24
     e7c:	5d db       	rcall	.-2374   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	e4 db       	rcall	.-2104   	; 0x650 <oi_set_wheels>
			sprintf(sensorData, "Front Right Sensor Line Detected | degrees moved: %d", sum);
     e88:	ff 92       	push	r15
     e8a:	ef 92       	push	r14
     e8c:	88 e5       	ldi	r24, 0x58	; 88
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	8e 01       	movw	r16, r28
     e96:	07 5d       	subi	r16, 0xD7	; 215
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	1f 93       	push	r17
     e9c:	0f 93       	push	r16
     e9e:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
     ea2:	c8 01       	movw	r24, r16
     ea4:	f1 dc       	rcall	.-1566   	; 0x888 <USART_SendString>
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	6b c0       	rjmp	.+214    	; 0xf88 <turn_counterclockwise+0x1b8>
			return 3;
		}

		else if((sensor->cliff_right_signal > 800))
     eb2:	f8 01       	movw	r30, r16
     eb4:	82 a1       	ldd	r24, Z+34	; 0x22
     eb6:	93 a1       	ldd	r25, Z+35	; 0x23
     eb8:	81 32       	cpi	r24, 0x21	; 33
     eba:	93 40       	sbci	r25, 0x03	; 3
     ebc:	f8 f0       	brcs	.+62     	; 0xefc <turn_counterclockwise+0x12c>
		{
			char sensorData[60];
			lprintf("Line Detected");
     ebe:	86 e1       	ldi	r24, 0x16	; 22
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	9f 93       	push	r25
     ec4:	8f 93       	push	r24
     ec6:	38 db       	rcall	.-2448   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	bf db       	rcall	.-2178   	; 0x650 <oi_set_wheels>
			sprintf(sensorData, "Right Sensor Line Detected | distance moved: %d", sum);
     ed2:	ff 92       	push	r15
     ed4:	ef 92       	push	r14
     ed6:	8d e8       	ldi	r24, 0x8D	; 141
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	8e 01       	movw	r16, r28
     ee0:	07 5d       	subi	r16, 0xD7	; 215
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
     ee4:	1f 93       	push	r17
     ee6:	0f 93       	push	r16
     ee8:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
     eec:	c8 01       	movw	r24, r16
     eee:	cc dc       	rcall	.-1640   	; 0x888 <USART_SendString>
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	46 c0       	rjmp	.+140    	; 0xf88 <turn_counterclockwise+0x1b8>
			return 3;
		}

		else if((sensor->cliff_left_signal > 800))
     efc:	f8 01       	movw	r30, r16
     efe:	84 8d       	ldd	r24, Z+28	; 0x1c
     f00:	95 8d       	ldd	r25, Z+29	; 0x1d
     f02:	81 32       	cpi	r24, 0x21	; 33
     f04:	93 40       	sbci	r25, 0x03	; 3
     f06:	f8 f0       	brcs	.+62     	; 0xf46 <turn_counterclockwise+0x176>
		{
			char sensorData[60];
			lprintf("Line Detected");
     f08:	86 e1       	ldi	r24, 0x16	; 22
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	13 db       	rcall	.-2522   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9a db       	rcall	.-2252   	; 0x650 <oi_set_wheels>
			sprintf(sensorData, "Left Sensor Line Detected | distance moved: %d", sum);
     f1c:	ff 92       	push	r15
     f1e:	ef 92       	push	r14
     f20:	8d eb       	ldi	r24, 0xBD	; 189
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	9f 93       	push	r25
     f26:	8f 93       	push	r24
     f28:	8e 01       	movw	r16, r28
     f2a:	07 5d       	subi	r16, 0xD7	; 215
     f2c:	1f 4f       	sbci	r17, 0xFF	; 255
     f2e:	1f 93       	push	r17
     f30:	0f 93       	push	r16
     f32:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
     f36:	c8 01       	movw	r24, r16
     f38:	a7 dc       	rcall	.-1714   	; 0x888 <USART_SendString>
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	21 c0       	rjmp	.+66     	; 0xf88 <turn_counterclockwise+0x1b8>
{
	int sum = 0;
	char outputString[20];
	oi_set_wheels(150, -150);
	
	while (sum < degrees-12) 
     f46:	ec 14       	cp	r14, r12
     f48:	fd 04       	cpc	r15, r13
     f4a:	0c f4       	brge	.+2      	; 0xf4e <turn_counterclockwise+0x17e>
     f4c:	62 cf       	rjmp	.-316    	; 0xe12 <turn_counterclockwise+0x42>
			USART_SendString(sensorData);
			return 3;*/
		//}
		//}
	
	oi_set_wheels(0, 0); // stop
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	7c db       	rcall	.-2312   	; 0x650 <oi_set_wheels>
	char turnMessage[40];
	degrees -= 10;
     f58:	9a e0       	ldi	r25, 0x0A	; 10
     f5a:	a9 1a       	sub	r10, r25
     f5c:	b1 08       	sbc	r11, r1
	sprintf(turnMessage,"Turned left %d degrees", degrees);
     f5e:	bf 92       	push	r11
     f60:	af 92       	push	r10
     f62:	84 e0       	ldi	r24, 0x04	; 4
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	8e 01       	movw	r16, r28
     f6c:	0f 5f       	subi	r16, 0xFF	; 255
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	1f 93       	push	r17
     f72:	0f 93       	push	r16
     f74:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
	USART_SendString(turnMessage);
     f78:	c8 01       	movw	r24, r16
     f7a:	86 dc       	rcall	.-1780   	; 0x888 <USART_SendString>
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
}
     f88:	cc 59       	subi	r28, 0x9C	; 156
     f8a:	df 4f       	sbci	r29, 0xFF	; 255
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	08 95       	ret

00000fac <move_forward>:
}

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
     fac:	6f 92       	push	r6
     fae:	7f 92       	push	r7
     fb0:	8f 92       	push	r8
     fb2:	9f 92       	push	r9
     fb4:	af 92       	push	r10
     fb6:	bf 92       	push	r11
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	c5 55       	subi	r28, 0x55	; 85
     fce:	d1 09       	sbc	r29, r1
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	8c 01       	movw	r16, r24
     fdc:	e6 2e       	mov	r14, r22
     fde:	f7 2e       	mov	r15, r23
	int sum = 0;
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
     fe0:	66 e9       	ldi	r22, 0x96	; 150
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	86 e9       	ldi	r24, 0x96	; 150
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	33 db       	rcall	.-2458   	; 0x650 <oi_set_wheels>
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
     fea:	8e 2c       	mov	r8, r14
     fec:	9f 2c       	mov	r9, r15
     fee:	88 0c       	add	r8, r8
     ff0:	99 1c       	adc	r9, r9
     ff2:	c4 01       	movw	r24, r8
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	88 0e       	add	r8, r24
     ffe:	99 1e       	adc	r9, r25

//Movement Functions
//Move forward contains all other functions, allows for error checking while moving
char move_forward(oi_t *sensor, int centimeters)
{
	int sum = 0;
    1000:	e1 2c       	mov	r14, r1
    1002:	f1 2c       	mov	r15, r1
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
	{
		oi_update(sensor);
		sum += sensor->distance;
		lprintf("%d\n", sum);
    1004:	0f 2e       	mov	r0, r31
    1006:	fb e1       	ldi	r31, 0x1B	; 27
    1008:	6f 2e       	mov	r6, r31
    100a:	f2 e0       	ldi	r31, 0x02	; 2
    100c:	7f 2e       	mov	r7, r31
    100e:	f0 2d       	mov	r31, r0
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
    1010:	0e c2       	rjmp	.+1052   	; 0x142e <__stack+0x32f>
	{
		oi_update(sensor);
    1012:	c8 01       	movw	r24, r16
    1014:	5c db       	rcall	.-2376   	; 0x6ce <oi_update>
		sum += sensor->distance;
    1016:	f8 01       	movw	r30, r16
    1018:	84 85       	ldd	r24, Z+12	; 0x0c
    101a:	95 85       	ldd	r25, Z+13	; 0x0d
    101c:	e8 0e       	add	r14, r24
    101e:	f9 1e       	adc	r15, r25
		lprintf("%d\n", sum);
    1020:	ff 92       	push	r15
    1022:	ef 92       	push	r14
    1024:	7f 92       	push	r7
    1026:	6f 92       	push	r6
    1028:	87 da       	rcall	.-2802   	; 0x538 <lprintf>
		if(sensor->bumper_left)
    102a:	f8 01       	movw	r30, r16
    102c:	40 81       	ld	r20, Z
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	41 ff       	sbrs	r20, 1
    1038:	12 c0       	rjmp	.+36     	; 0x105e <move_forward+0xb2>
		{
			oi_set_wheels(0, 0); // stop
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	06 db       	rcall	.-2548   	; 0x650 <oi_set_wheels>

			move_backward(sensor,10);
    1044:	6a e0       	ldi	r22, 0x0A	; 10
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	c8 01       	movw	r24, r16
    104a:	a0 dd       	rcall	.-1216   	; 0xb8c <move_backward>
			turn_clockwise(sensor,45);
    104c:	6d e2       	ldi	r22, 0x2D	; 45
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	c8 01       	movw	r24, r16
    1052:	d0 dd       	rcall	.-1120   	; 0xbf4 <turn_clockwise>

			USART_SendString("Left Bumper Triggered"); //
    1054:	8f e1       	ldi	r24, 0x1F	; 31
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	17 dc       	rcall	.-2002   	; 0x888 <USART_SendString>
			return 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	13 c2       	rjmp	.+1062   	; 0x1484 <__stack+0x385>
		}
		else if(sensor->bumper_right)
    105e:	40 ff       	sbrs	r20, 0
    1060:	30 c0       	rjmp	.+96     	; 0x10c2 <move_forward+0x116>
		{
			char sensorData[60];
			oi_set_wheels(0, 0); // stop
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	f2 da       	rcall	.-2588   	; 0x650 <oi_set_wheels>
			move_backward(sensor,10);
    106c:	6a e0       	ldi	r22, 0x0A	; 10
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	c8 01       	movw	r24, r16
    1072:	8c dd       	rcall	.-1256   	; 0xb8c <move_backward>
			turn_counterclockwise(sensor,45);
    1074:	6d e2       	ldi	r22, 0x2D	; 45
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	c8 01       	movw	r24, r16
    107a:	aa de       	rcall	.-684    	; 0xdd0 <turn_counterclockwise>
			float cent_moved = ((float) sum/10);
    107c:	b7 01       	movw	r22, r14
    107e:	88 27       	eor	r24, r24
    1080:	77 fd       	sbrc	r23, 7
    1082:	80 95       	com	r24
    1084:	98 2f       	mov	r25, r24
    1086:	0f d3       	rcall	.+1566   	; 0x16a6 <__floatsisf>
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	51 e4       	ldi	r21, 0x41	; 65
    1090:	74 d2       	rcall	.+1256   	; 0x157a <__divsf3>
			sprintf(sensorData, "Right Bumper Triggered | distance moved: %.1f centimeters", cent_moved);
    1092:	9f 93       	push	r25
    1094:	8f 93       	push	r24
    1096:	7f 93       	push	r23
    1098:	6f 93       	push	r22
    109a:	85 e3       	ldi	r24, 0x35	; 53
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	9f 93       	push	r25
    10a0:	8f 93       	push	r24
    10a2:	8e 01       	movw	r16, r28
    10a4:	06 5e       	subi	r16, 0xE6	; 230
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	1f 93       	push	r17
    10aa:	0f 93       	push	r16
    10ac:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
    10b0:	c8 01       	movw	r24, r16
    10b2:	ea db       	rcall	.-2092   	; 0x888 <USART_SendString>
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
			return 2;
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	e1 c1       	rjmp	.+962    	; 0x1484 <__stack+0x385>
		}
		
		else if((sensor->cliff_frontleft_signal > 800))
    10c2:	f8 01       	movw	r30, r16
    10c4:	c6 8c       	ldd	r12, Z+30	; 0x1e
    10c6:	d7 8c       	ldd	r13, Z+31	; 0x1f
    10c8:	f1 e2       	ldi	r31, 0x21	; 33
    10ca:	cf 16       	cp	r12, r31
    10cc:	f3 e0       	ldi	r31, 0x03	; 3
    10ce:	df 06       	cpc	r13, r31
    10d0:	68 f1       	brcs	.+90     	; 0x112c <__stack+0x2d>
		{
			char sensorData[60];
			lprintf("Line Detected");
    10d2:	86 e1       	ldi	r24, 0x16	; 22
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	9f 93       	push	r25
    10d8:	8f 93       	push	r24
    10da:	2e da       	rcall	.-2980   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	b5 da       	rcall	.-2710   	; 0x650 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
    10e6:	b7 01       	movw	r22, r14
    10e8:	88 27       	eor	r24, r24
    10ea:	77 fd       	sbrc	r23, 7
    10ec:	80 95       	com	r24
    10ee:	98 2f       	mov	r25, r24
    10f0:	da d2       	rcall	.+1460   	; 0x16a6 <__floatsisf>
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e2       	ldi	r20, 0x20	; 32
    10f8:	51 e4       	ldi	r21, 0x41	; 65
    10fa:	3f d2       	rcall	.+1150   	; 0x157a <__divsf3>
			sprintf(sensorData, "Front Left Sensor Line Detected | distance moved: %.1f cm", cent_moved);
    10fc:	9f 93       	push	r25
    10fe:	8f 93       	push	r24
    1100:	7f 93       	push	r23
    1102:	6f 93       	push	r22
    1104:	8f e6       	ldi	r24, 0x6F	; 111
    1106:	92 e0       	ldi	r25, 0x02	; 2
    1108:	9f 93       	push	r25
    110a:	8f 93       	push	r24
    110c:	8e 01       	movw	r16, r28
    110e:	06 5e       	subi	r16, 0xE6	; 230
    1110:	1f 4f       	sbci	r17, 0xFF	; 255
    1112:	1f 93       	push	r17
    1114:	0f 93       	push	r16
    1116:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
    111a:	c8 01       	movw	r24, r16
    111c:	b5 db       	rcall	.-2198   	; 0x888 <USART_SendString>
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
			return 3;
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	ac c1       	rjmp	.+856    	; 0x1484 <__stack+0x385>
		}
		
		else if((sensor->cliff_frontright_signal > 800))
    112c:	f8 01       	movw	r30, r16
    112e:	a0 a0       	ldd	r10, Z+32	; 0x20
    1130:	b1 a0       	ldd	r11, Z+33	; 0x21
    1132:	f1 e2       	ldi	r31, 0x21	; 33
    1134:	af 16       	cp	r10, r31
    1136:	f3 e0       	ldi	r31, 0x03	; 3
    1138:	bf 06       	cpc	r11, r31
    113a:	68 f1       	brcs	.+90     	; 0x1196 <__stack+0x97>
		{
			char sensorData[60];
			lprintf("Line Detected");
    113c:	86 e1       	ldi	r24, 0x16	; 22
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	9f 93       	push	r25
    1142:	8f 93       	push	r24
    1144:	f9 d9       	rcall	.-3086   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	80 da       	rcall	.-2816   	; 0x650 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
    1150:	b7 01       	movw	r22, r14
    1152:	88 27       	eor	r24, r24
    1154:	77 fd       	sbrc	r23, 7
    1156:	80 95       	com	r24
    1158:	98 2f       	mov	r25, r24
    115a:	a5 d2       	rcall	.+1354   	; 0x16a6 <__floatsisf>
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0a d2       	rcall	.+1044   	; 0x157a <__divsf3>
			sprintf(sensorData, "Front Right Sensor Line Detected | distance moved: %.1f cm", cent_moved);
    1166:	9f 93       	push	r25
    1168:	8f 93       	push	r24
    116a:	7f 93       	push	r23
    116c:	6f 93       	push	r22
    116e:	89 ea       	ldi	r24, 0xA9	; 169
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	9f 93       	push	r25
    1174:	8f 93       	push	r24
    1176:	8e 01       	movw	r16, r28
    1178:	06 5e       	subi	r16, 0xE6	; 230
    117a:	1f 4f       	sbci	r17, 0xFF	; 255
    117c:	1f 93       	push	r17
    117e:	0f 93       	push	r16
    1180:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
    1184:	c8 01       	movw	r24, r16
    1186:	80 db       	rcall	.-2304   	; 0x888 <USART_SendString>
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
			return 3;
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	77 c1       	rjmp	.+750    	; 0x1484 <__stack+0x385>
		}

		else if((sensor->cliff_right_signal > 800))
    1196:	f8 01       	movw	r30, r16
    1198:	82 a1       	ldd	r24, Z+34	; 0x22
    119a:	93 a1       	ldd	r25, Z+35	; 0x23
    119c:	81 32       	cpi	r24, 0x21	; 33
    119e:	f3 e0       	ldi	r31, 0x03	; 3
    11a0:	9f 07       	cpc	r25, r31
    11a2:	68 f1       	brcs	.+90     	; 0x11fe <__stack+0xff>
		{
			char sensorData[60];
			lprintf("Line Detected");
    11a4:	86 e1       	ldi	r24, 0x16	; 22
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	9f 93       	push	r25
    11aa:	8f 93       	push	r24
    11ac:	c5 d9       	rcall	.-3190   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	4c da       	rcall	.-2920   	; 0x650 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
    11b8:	b7 01       	movw	r22, r14
    11ba:	88 27       	eor	r24, r24
    11bc:	77 fd       	sbrc	r23, 7
    11be:	80 95       	com	r24
    11c0:	98 2f       	mov	r25, r24
    11c2:	71 d2       	rcall	.+1250   	; 0x16a6 <__floatsisf>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	d6 d1       	rcall	.+940    	; 0x157a <__divsf3>
			sprintf(sensorData, "Right Sensor Line Detected | distance moved: %.1f cm", cent_moved);
    11ce:	9f 93       	push	r25
    11d0:	8f 93       	push	r24
    11d2:	7f 93       	push	r23
    11d4:	6f 93       	push	r22
    11d6:	8f ea       	ldi	r24, 0xAF	; 175
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	9f 93       	push	r25
    11dc:	8f 93       	push	r24
    11de:	8e 01       	movw	r16, r28
    11e0:	06 5e       	subi	r16, 0xE6	; 230
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
    11e4:	1f 93       	push	r17
    11e6:	0f 93       	push	r16
    11e8:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
    11ec:	c8 01       	movw	r24, r16
    11ee:	4c db       	rcall	.-2408   	; 0x888 <USART_SendString>
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
			return 3;
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	43 c1       	rjmp	.+646    	; 0x1484 <__stack+0x385>
		}

		else if((sensor->cliff_left_signal > 800))
    11fe:	f8 01       	movw	r30, r16
    1200:	24 8d       	ldd	r18, Z+28	; 0x1c
    1202:	35 8d       	ldd	r19, Z+29	; 0x1d
    1204:	21 32       	cpi	r18, 0x21	; 33
    1206:	f3 e0       	ldi	r31, 0x03	; 3
    1208:	3f 07       	cpc	r19, r31
    120a:	68 f1       	brcs	.+90     	; 0x1266 <__stack+0x167>
		{
			char sensorData[60];
			lprintf("Line Detected");
    120c:	86 e1       	ldi	r24, 0x16	; 22
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	91 d9       	rcall	.-3294   	; 0x538 <lprintf>
			oi_set_wheels(0,0);
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	18 da       	rcall	.-3024   	; 0x650 <oi_set_wheels>
			float cent_moved = ((float) sum/10);
    1220:	b7 01       	movw	r22, r14
    1222:	88 27       	eor	r24, r24
    1224:	77 fd       	sbrc	r23, 7
    1226:	80 95       	com	r24
    1228:	98 2f       	mov	r25, r24
    122a:	3d d2       	rcall	.+1146   	; 0x16a6 <__floatsisf>
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	a2 d1       	rcall	.+836    	; 0x157a <__divsf3>
			sprintf(sensorData, "Left Sensor Line Detected | distance moved: %.1f cm", cent_moved);
    1236:	9f 93       	push	r25
    1238:	8f 93       	push	r24
    123a:	7f 93       	push	r23
    123c:	6f 93       	push	r22
    123e:	85 e7       	ldi	r24, 0x75	; 117
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	9f 93       	push	r25
    1244:	8f 93       	push	r24
    1246:	8e 01       	movw	r16, r28
    1248:	06 5e       	subi	r16, 0xE6	; 230
    124a:	1f 4f       	sbci	r17, 0xFF	; 255
    124c:	1f 93       	push	r17
    124e:	0f 93       	push	r16
    1250:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
    1254:	c8 01       	movw	r24, r16
    1256:	18 db       	rcall	.-2512   	; 0x888 <USART_SendString>
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
			return 3;
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	0f c1       	rjmp	.+542    	; 0x1484 <__stack+0x385>
		}
								
		else if((sensor->wheeldrop_caster == 1) || (sensor->wheeldrop_left == 1) || (sensor->wheeldrop_right == 1))
    1266:	4c 71       	andi	r20, 0x1C	; 28
    1268:	a9 f1       	breq	.+106    	; 0x12d4 <__stack+0x1d5>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    126a:	b7 01       	movw	r22, r14
    126c:	88 27       	eor	r24, r24
    126e:	77 fd       	sbrc	r23, 7
    1270:	80 95       	com	r24
    1272:	98 2f       	mov	r25, r24
    1274:	18 d2       	rcall	.+1072   	; 0x16a6 <__floatsisf>
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	51 e4       	ldi	r21, 0x41	; 65
    127e:	7d d1       	rcall	.+762    	; 0x157a <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Right Sensor: %d Front Right: %d Front Left%d Left: %d | distance moved: %.1f cm", (int) sensor->cliff_frontright_signal, (int) sensor->cliff_frontright_signal, (int) sensor->cliff_frontleft_signal, (int) sensor->cliff_frontleft_signal, cent_moved);
    1280:	9f 93       	push	r25
    1282:	8f 93       	push	r24
    1284:	7f 93       	push	r23
    1286:	6f 93       	push	r22
    1288:	df 92       	push	r13
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	cf 92       	push	r12
    1290:	bf 92       	push	r11
    1292:	af 92       	push	r10
    1294:	bf 92       	push	r11
    1296:	af 92       	push	r10
    1298:	84 ee       	ldi	r24, 0xE4	; 228
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	9f 93       	push	r25
    129e:	8f 93       	push	r24
    12a0:	8e 01       	movw	r16, r28
    12a2:	06 5e       	subi	r16, 0xE6	; 230
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	1f 93       	push	r17
    12a8:	0f 93       	push	r16
    12aa:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
    12ae:	c8 01       	movw	r24, r16
    12b0:	eb da       	rcall	.-2602   	; 0x888 <USART_SendString>
			lprintf("Cliff Edge Detected");
    12b2:	8a e4       	ldi	r24, 0x4A	; 74
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	9f 93       	push	r25
    12b8:	8f 93       	push	r24
    12ba:	3e d9       	rcall	.-3460   	; 0x538 <lprintf>
			// move_backward(sensor,10);
			oi_set_wheels(0,0);
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	c5 d9       	rcall	.-3190   	; 0x650 <oi_set_wheels>
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
			return 4;
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	d8 c0       	rjmp	.+432    	; 0x1484 <__stack+0x385>
		}
		
		else if (sensor->cliff_frontleft_signal < 10) 
    12d4:	ea e0       	ldi	r30, 0x0A	; 10
    12d6:	ce 16       	cp	r12, r30
    12d8:	d1 04       	cpc	r13, r1
    12da:	40 f5       	brcc	.+80     	; 0x132c <__stack+0x22d>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    12dc:	b7 01       	movw	r22, r14
    12de:	88 27       	eor	r24, r24
    12e0:	77 fd       	sbrc	r23, 7
    12e2:	80 95       	com	r24
    12e4:	98 2f       	mov	r25, r24
    12e6:	df d1       	rcall	.+958    	; 0x16a6 <__floatsisf>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	44 d1       	rcall	.+648    	; 0x157a <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Front Left | distance moved: %.1f cm", cent_moved);
    12f2:	9f 93       	push	r25
    12f4:	8f 93       	push	r24
    12f6:	7f 93       	push	r23
    12f8:	6f 93       	push	r22
    12fa:	8e e5       	ldi	r24, 0x5E	; 94
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	9f 93       	push	r25
    1300:	8f 93       	push	r24
    1302:	8e 01       	movw	r16, r28
    1304:	06 5e       	subi	r16, 0xE6	; 230
    1306:	1f 4f       	sbci	r17, 0xFF	; 255
    1308:	1f 93       	push	r17
    130a:	0f 93       	push	r16
    130c:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
    1310:	c8 01       	movw	r24, r16
    1312:	ba da       	rcall	.-2700   	; 0x888 <USART_SendString>
			oi_set_wheels(0,0);
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	99 d9       	rcall	.-3278   	; 0x650 <oi_set_wheels>
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
			return 5;
    1328:	85 e0       	ldi	r24, 0x05	; 5
    132a:	ac c0       	rjmp	.+344    	; 0x1484 <__stack+0x385>
		}
		else if (sensor->cliff_frontright_signal < 10)
    132c:	5a e0       	ldi	r21, 0x0A	; 10
    132e:	a5 16       	cp	r10, r21
    1330:	b1 04       	cpc	r11, r1
    1332:	40 f5       	brcc	.+80     	; 0x1384 <__stack+0x285>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    1334:	b7 01       	movw	r22, r14
    1336:	88 27       	eor	r24, r24
    1338:	77 fd       	sbrc	r23, 7
    133a:	80 95       	com	r24
    133c:	98 2f       	mov	r25, r24
    133e:	b3 d1       	rcall	.+870    	; 0x16a6 <__floatsisf>
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	18 d1       	rcall	.+560    	; 0x157a <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Front Right | distance moved: %.1f cm", cent_moved);
    134a:	9f 93       	push	r25
    134c:	8f 93       	push	r24
    134e:	7f 93       	push	r23
    1350:	6f 93       	push	r22
    1352:	88 e9       	ldi	r24, 0x98	; 152
    1354:	93 e0       	ldi	r25, 0x03	; 3
    1356:	9f 93       	push	r25
    1358:	8f 93       	push	r24
    135a:	8e 01       	movw	r16, r28
    135c:	06 5e       	subi	r16, 0xE6	; 230
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	1f 93       	push	r17
    1362:	0f 93       	push	r16
    1364:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);
    1368:	c8 01       	movw	r24, r16
    136a:	8e da       	rcall	.-2788   	; 0x888 <USART_SendString>
			oi_set_wheels(0,0);
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	6d d9       	rcall	.-3366   	; 0x650 <oi_set_wheels>
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
			return 6;
    1380:	86 e0       	ldi	r24, 0x06	; 6
    1382:	80 c0       	rjmp	.+256    	; 0x1484 <__stack+0x385>
		}
		else if (sensor->cliff_left_signal < 10) 
    1384:	2a 30       	cpi	r18, 0x0A	; 10
    1386:	31 05       	cpc	r19, r1
    1388:	40 f5       	brcc	.+80     	; 0x13da <__stack+0x2db>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    138a:	b7 01       	movw	r22, r14
    138c:	88 27       	eor	r24, r24
    138e:	77 fd       	sbrc	r23, 7
    1390:	80 95       	com	r24
    1392:	98 2f       	mov	r25, r24
    1394:	88 d1       	rcall	.+784    	; 0x16a6 <__floatsisf>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e2       	ldi	r20, 0x20	; 32
    139c:	51 e4       	ldi	r21, 0x41	; 65
    139e:	ed d0       	rcall	.+474    	; 0x157a <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Left | distance moved: %.1f cm", cent_moved);		
    13a0:	9f 93       	push	r25
    13a2:	8f 93       	push	r24
    13a4:	7f 93       	push	r23
    13a6:	6f 93       	push	r22
    13a8:	83 ed       	ldi	r24, 0xD3	; 211
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	9f 93       	push	r25
    13ae:	8f 93       	push	r24
    13b0:	8e 01       	movw	r16, r28
    13b2:	06 5e       	subi	r16, 0xE6	; 230
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	1f 93       	push	r17
    13b8:	0f 93       	push	r16
    13ba:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);	
    13be:	c8 01       	movw	r24, r16
    13c0:	63 da       	rcall	.-2874   	; 0x888 <USART_SendString>
			oi_set_wheels(0,0);
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	42 d9       	rcall	.-3452   	; 0x650 <oi_set_wheels>
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
			return 7;
    13d6:	87 e0       	ldi	r24, 0x07	; 7
    13d8:	55 c0       	rjmp	.+170    	; 0x1484 <__stack+0x385>
		}
		else if (sensor->cliff_right_signal < 10)
    13da:	0a 97       	sbiw	r24, 0x0a	; 10
    13dc:	40 f5       	brcc	.+80     	; 0x142e <__stack+0x32f>
		{
			char sensorData[60];
			float cent_moved = ((float) sum/10);
    13de:	b7 01       	movw	r22, r14
    13e0:	88 27       	eor	r24, r24
    13e2:	77 fd       	sbrc	r23, 7
    13e4:	80 95       	com	r24
    13e6:	98 2f       	mov	r25, r24
    13e8:	5e d1       	rcall	.+700    	; 0x16a6 <__floatsisf>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e2       	ldi	r20, 0x20	; 32
    13f0:	51 e4       	ldi	r21, 0x41	; 65
    13f2:	c3 d0       	rcall	.+390    	; 0x157a <__divsf3>
			sprintf(sensorData, "Cliff Edge Detected: Right | distance moved: %.1f cm", cent_moved);
    13f4:	9f 93       	push	r25
    13f6:	8f 93       	push	r24
    13f8:	7f 93       	push	r23
    13fa:	6f 93       	push	r22
    13fc:	87 e0       	ldi	r24, 0x07	; 7
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	9f 93       	push	r25
    1402:	8f 93       	push	r24
    1404:	8e 01       	movw	r16, r28
    1406:	06 5e       	subi	r16, 0xE6	; 230
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	1f 93       	push	r17
    140c:	0f 93       	push	r16
    140e:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
			USART_SendString(sensorData);		
    1412:	c8 01       	movw	r24, r16
    1414:	39 da       	rcall	.-2958   	; 0x888 <USART_SendString>
			oi_set_wheels(0,0);	
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	18 d9       	rcall	.-3536   	; 0x650 <oi_set_wheels>
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
			return 8;
    142a:	88 e0       	ldi	r24, 0x08	; 8
    142c:	2b c0       	rjmp	.+86     	; 0x1484 <__stack+0x385>
	int dist = 0;
	char outputString[25];
	//lprintf("Debug 1\n");
	oi_set_wheels(150, 150); // move forward
	//lprintf("Debug 2\n");
	while (sum < centimeters*10)
    142e:	e8 14       	cp	r14, r8
    1430:	f9 04       	cpc	r15, r9
    1432:	0c f4       	brge	.+2      	; 0x1436 <__stack+0x337>
    1434:	ee cd       	rjmp	.-1060   	; 0x1012 <move_forward+0x66>
			oi_set_wheels(0,0);	
			return 8;
		}
	}

	oi_set_wheels(0, 0); // stop
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	08 d9       	rcall	.-3568   	; 0x650 <oi_set_wheels>
	float cent_moved = ((float) sum/10);
    1440:	b7 01       	movw	r22, r14
    1442:	88 27       	eor	r24, r24
    1444:	77 fd       	sbrc	r23, 7
    1446:	80 95       	com	r24
    1448:	98 2f       	mov	r25, r24
    144a:	2d d1       	rcall	.+602    	; 0x16a6 <__floatsisf>
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e2       	ldi	r20, 0x20	; 32
    1452:	51 e4       	ldi	r21, 0x41	; 65
    1454:	92 d0       	rcall	.+292    	; 0x157a <__divsf3>
	sprintf(outputString, "Moved %.1f centimeters", cent_moved);
    1456:	9f 93       	push	r25
    1458:	8f 93       	push	r24
    145a:	7f 93       	push	r23
    145c:	6f 93       	push	r22
    145e:	8c e3       	ldi	r24, 0x3C	; 60
    1460:	94 e0       	ldi	r25, 0x04	; 4
    1462:	9f 93       	push	r25
    1464:	8f 93       	push	r24
    1466:	8e 01       	movw	r16, r28
    1468:	0f 5f       	subi	r16, 0xFF	; 255
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	1f 93       	push	r17
    146e:	0f 93       	push	r16
    1470:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
	
	USART_SendString(outputString);
    1474:	c8 01       	movw	r24, r16
    1476:	08 da       	rcall	.-3056   	; 0x888 <USART_SendString>
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61

	return 0;
    1482:	80 e0       	ldi	r24, 0x00	; 0
}
    1484:	cb 5a       	subi	r28, 0xAB	; 171
    1486:	df 4f       	sbci	r29, 0xFF	; 255
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	df 90       	pop	r13
    14a0:	cf 90       	pop	r12
    14a2:	bf 90       	pop	r11
    14a4:	af 90       	pop	r10
    14a6:	9f 90       	pop	r9
    14a8:	8f 90       	pop	r8
    14aa:	7f 90       	pop	r7
    14ac:	6f 90       	pop	r6
    14ae:	08 95       	ret

000014b0 <__subsf3>:
    14b0:	50 58       	subi	r21, 0x80	; 128

000014b2 <__addsf3>:
    14b2:	bb 27       	eor	r27, r27
    14b4:	aa 27       	eor	r26, r26
    14b6:	0e d0       	rcall	.+28     	; 0x14d4 <__addsf3x>
    14b8:	48 c1       	rjmp	.+656    	; 0x174a <__fp_round>
    14ba:	39 d1       	rcall	.+626    	; 0x172e <__fp_pscA>
    14bc:	30 f0       	brcs	.+12     	; 0x14ca <__addsf3+0x18>
    14be:	3e d1       	rcall	.+636    	; 0x173c <__fp_pscB>
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <__addsf3+0x18>
    14c2:	31 f4       	brne	.+12     	; 0x14d0 <__addsf3+0x1e>
    14c4:	9f 3f       	cpi	r25, 0xFF	; 255
    14c6:	11 f4       	brne	.+4      	; 0x14cc <__addsf3+0x1a>
    14c8:	1e f4       	brtc	.+6      	; 0x14d0 <__addsf3+0x1e>
    14ca:	2e c1       	rjmp	.+604    	; 0x1728 <__fp_nan>
    14cc:	0e f4       	brtc	.+2      	; 0x14d0 <__addsf3+0x1e>
    14ce:	e0 95       	com	r30
    14d0:	e7 fb       	bst	r30, 7
    14d2:	24 c1       	rjmp	.+584    	; 0x171c <__fp_inf>

000014d4 <__addsf3x>:
    14d4:	e9 2f       	mov	r30, r25
    14d6:	4a d1       	rcall	.+660    	; 0x176c <__fp_split3>
    14d8:	80 f3       	brcs	.-32     	; 0x14ba <__addsf3+0x8>
    14da:	ba 17       	cp	r27, r26
    14dc:	62 07       	cpc	r22, r18
    14de:	73 07       	cpc	r23, r19
    14e0:	84 07       	cpc	r24, r20
    14e2:	95 07       	cpc	r25, r21
    14e4:	18 f0       	brcs	.+6      	; 0x14ec <__addsf3x+0x18>
    14e6:	71 f4       	brne	.+28     	; 0x1504 <__addsf3x+0x30>
    14e8:	9e f5       	brtc	.+102    	; 0x1550 <__addsf3x+0x7c>
    14ea:	62 c1       	rjmp	.+708    	; 0x17b0 <__fp_zero>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3x+0x1c>
    14ee:	e0 95       	com	r30
    14f0:	0b 2e       	mov	r0, r27
    14f2:	ba 2f       	mov	r27, r26
    14f4:	a0 2d       	mov	r26, r0
    14f6:	0b 01       	movw	r0, r22
    14f8:	b9 01       	movw	r22, r18
    14fa:	90 01       	movw	r18, r0
    14fc:	0c 01       	movw	r0, r24
    14fe:	ca 01       	movw	r24, r20
    1500:	a0 01       	movw	r20, r0
    1502:	11 24       	eor	r1, r1
    1504:	ff 27       	eor	r31, r31
    1506:	59 1b       	sub	r21, r25
    1508:	99 f0       	breq	.+38     	; 0x1530 <__addsf3x+0x5c>
    150a:	59 3f       	cpi	r21, 0xF9	; 249
    150c:	50 f4       	brcc	.+20     	; 0x1522 <__addsf3x+0x4e>
    150e:	50 3e       	cpi	r21, 0xE0	; 224
    1510:	68 f1       	brcs	.+90     	; 0x156c <__addsf3x+0x98>
    1512:	1a 16       	cp	r1, r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	a2 2f       	mov	r26, r18
    1518:	23 2f       	mov	r18, r19
    151a:	34 2f       	mov	r19, r20
    151c:	44 27       	eor	r20, r20
    151e:	58 5f       	subi	r21, 0xF8	; 248
    1520:	f3 cf       	rjmp	.-26     	; 0x1508 <__addsf3x+0x34>
    1522:	46 95       	lsr	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	a7 95       	ror	r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	53 95       	inc	r21
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__addsf3x+0x4e>
    1530:	7e f4       	brtc	.+30     	; 0x1550 <__addsf3x+0x7c>
    1532:	1f 16       	cp	r1, r31
    1534:	ba 0b       	sbc	r27, r26
    1536:	62 0b       	sbc	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	ba f0       	brmi	.+46     	; 0x156c <__addsf3x+0x98>
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	a1 f0       	breq	.+40     	; 0x156a <__addsf3x+0x96>
    1542:	ff 0f       	add	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	c2 f7       	brpl	.-16     	; 0x153e <__addsf3x+0x6a>
    154e:	0e c0       	rjmp	.+28     	; 0x156c <__addsf3x+0x98>
    1550:	ba 0f       	add	r27, r26
    1552:	62 1f       	adc	r22, r18
    1554:	73 1f       	adc	r23, r19
    1556:	84 1f       	adc	r24, r20
    1558:	48 f4       	brcc	.+18     	; 0x156c <__addsf3x+0x98>
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f7 95       	ror	r31
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	08 f0       	brcs	.+2      	; 0x156a <__addsf3x+0x96>
    1568:	b3 cf       	rjmp	.-154    	; 0x14d0 <__addsf3+0x1e>
    156a:	93 95       	inc	r25
    156c:	88 0f       	add	r24, r24
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__addsf3x+0x9e>
    1570:	99 27       	eor	r25, r25
    1572:	ee 0f       	add	r30, r30
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	08 95       	ret

0000157a <__divsf3>:
    157a:	0c d0       	rcall	.+24     	; 0x1594 <__divsf3x>
    157c:	e6 c0       	rjmp	.+460    	; 0x174a <__fp_round>
    157e:	de d0       	rcall	.+444    	; 0x173c <__fp_pscB>
    1580:	40 f0       	brcs	.+16     	; 0x1592 <__divsf3+0x18>
    1582:	d5 d0       	rcall	.+426    	; 0x172e <__fp_pscA>
    1584:	30 f0       	brcs	.+12     	; 0x1592 <__divsf3+0x18>
    1586:	21 f4       	brne	.+8      	; 0x1590 <__divsf3+0x16>
    1588:	5f 3f       	cpi	r21, 0xFF	; 255
    158a:	19 f0       	breq	.+6      	; 0x1592 <__divsf3+0x18>
    158c:	c7 c0       	rjmp	.+398    	; 0x171c <__fp_inf>
    158e:	51 11       	cpse	r21, r1
    1590:	10 c1       	rjmp	.+544    	; 0x17b2 <__fp_szero>
    1592:	ca c0       	rjmp	.+404    	; 0x1728 <__fp_nan>

00001594 <__divsf3x>:
    1594:	eb d0       	rcall	.+470    	; 0x176c <__fp_split3>
    1596:	98 f3       	brcs	.-26     	; 0x157e <__divsf3+0x4>

00001598 <__divsf3_pse>:
    1598:	99 23       	and	r25, r25
    159a:	c9 f3       	breq	.-14     	; 0x158e <__divsf3+0x14>
    159c:	55 23       	and	r21, r21
    159e:	b1 f3       	breq	.-20     	; 0x158c <__divsf3+0x12>
    15a0:	95 1b       	sub	r25, r21
    15a2:	55 0b       	sbc	r21, r21
    15a4:	bb 27       	eor	r27, r27
    15a6:	aa 27       	eor	r26, r26
    15a8:	62 17       	cp	r22, r18
    15aa:	73 07       	cpc	r23, r19
    15ac:	84 07       	cpc	r24, r20
    15ae:	38 f0       	brcs	.+14     	; 0x15be <__divsf3_pse+0x26>
    15b0:	9f 5f       	subi	r25, 0xFF	; 255
    15b2:	5f 4f       	sbci	r21, 0xFF	; 255
    15b4:	22 0f       	add	r18, r18
    15b6:	33 1f       	adc	r19, r19
    15b8:	44 1f       	adc	r20, r20
    15ba:	aa 1f       	adc	r26, r26
    15bc:	a9 f3       	breq	.-22     	; 0x15a8 <__divsf3_pse+0x10>
    15be:	33 d0       	rcall	.+102    	; 0x1626 <__divsf3_pse+0x8e>
    15c0:	0e 2e       	mov	r0, r30
    15c2:	3a f0       	brmi	.+14     	; 0x15d2 <__divsf3_pse+0x3a>
    15c4:	e0 e8       	ldi	r30, 0x80	; 128
    15c6:	30 d0       	rcall	.+96     	; 0x1628 <__divsf3_pse+0x90>
    15c8:	91 50       	subi	r25, 0x01	; 1
    15ca:	50 40       	sbci	r21, 0x00	; 0
    15cc:	e6 95       	lsr	r30
    15ce:	00 1c       	adc	r0, r0
    15d0:	ca f7       	brpl	.-14     	; 0x15c4 <__divsf3_pse+0x2c>
    15d2:	29 d0       	rcall	.+82     	; 0x1626 <__divsf3_pse+0x8e>
    15d4:	fe 2f       	mov	r31, r30
    15d6:	27 d0       	rcall	.+78     	; 0x1626 <__divsf3_pse+0x8e>
    15d8:	66 0f       	add	r22, r22
    15da:	77 1f       	adc	r23, r23
    15dc:	88 1f       	adc	r24, r24
    15de:	bb 1f       	adc	r27, r27
    15e0:	26 17       	cp	r18, r22
    15e2:	37 07       	cpc	r19, r23
    15e4:	48 07       	cpc	r20, r24
    15e6:	ab 07       	cpc	r26, r27
    15e8:	b0 e8       	ldi	r27, 0x80	; 128
    15ea:	09 f0       	breq	.+2      	; 0x15ee <__divsf3_pse+0x56>
    15ec:	bb 0b       	sbc	r27, r27
    15ee:	80 2d       	mov	r24, r0
    15f0:	bf 01       	movw	r22, r30
    15f2:	ff 27       	eor	r31, r31
    15f4:	93 58       	subi	r25, 0x83	; 131
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	2a f0       	brmi	.+10     	; 0x1604 <__divsf3_pse+0x6c>
    15fa:	9e 3f       	cpi	r25, 0xFE	; 254
    15fc:	51 05       	cpc	r21, r1
    15fe:	68 f0       	brcs	.+26     	; 0x161a <__divsf3_pse+0x82>
    1600:	8d c0       	rjmp	.+282    	; 0x171c <__fp_inf>
    1602:	d7 c0       	rjmp	.+430    	; 0x17b2 <__fp_szero>
    1604:	5f 3f       	cpi	r21, 0xFF	; 255
    1606:	ec f3       	brlt	.-6      	; 0x1602 <__divsf3_pse+0x6a>
    1608:	98 3e       	cpi	r25, 0xE8	; 232
    160a:	dc f3       	brlt	.-10     	; 0x1602 <__divsf3_pse+0x6a>
    160c:	86 95       	lsr	r24
    160e:	77 95       	ror	r23
    1610:	67 95       	ror	r22
    1612:	b7 95       	ror	r27
    1614:	f7 95       	ror	r31
    1616:	9f 5f       	subi	r25, 0xFF	; 255
    1618:	c9 f7       	brne	.-14     	; 0x160c <__divsf3_pse+0x74>
    161a:	88 0f       	add	r24, r24
    161c:	91 1d       	adc	r25, r1
    161e:	96 95       	lsr	r25
    1620:	87 95       	ror	r24
    1622:	97 f9       	bld	r25, 7
    1624:	08 95       	ret
    1626:	e1 e0       	ldi	r30, 0x01	; 1
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	88 1f       	adc	r24, r24
    162e:	bb 1f       	adc	r27, r27
    1630:	62 17       	cp	r22, r18
    1632:	73 07       	cpc	r23, r19
    1634:	84 07       	cpc	r24, r20
    1636:	ba 07       	cpc	r27, r26
    1638:	20 f0       	brcs	.+8      	; 0x1642 <__divsf3_pse+0xaa>
    163a:	62 1b       	sub	r22, r18
    163c:	73 0b       	sbc	r23, r19
    163e:	84 0b       	sbc	r24, r20
    1640:	ba 0b       	sbc	r27, r26
    1642:	ee 1f       	adc	r30, r30
    1644:	88 f7       	brcc	.-30     	; 0x1628 <__divsf3_pse+0x90>
    1646:	e0 95       	com	r30
    1648:	08 95       	ret

0000164a <__fixunssfsi>:
    164a:	98 d0       	rcall	.+304    	; 0x177c <__fp_splitA>
    164c:	88 f0       	brcs	.+34     	; 0x1670 <__fixunssfsi+0x26>
    164e:	9f 57       	subi	r25, 0x7F	; 127
    1650:	90 f0       	brcs	.+36     	; 0x1676 <__fixunssfsi+0x2c>
    1652:	b9 2f       	mov	r27, r25
    1654:	99 27       	eor	r25, r25
    1656:	b7 51       	subi	r27, 0x17	; 23
    1658:	a0 f0       	brcs	.+40     	; 0x1682 <__fixunssfsi+0x38>
    165a:	d1 f0       	breq	.+52     	; 0x1690 <__fixunssfsi+0x46>
    165c:	66 0f       	add	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	1a f0       	brmi	.+6      	; 0x166c <__fixunssfsi+0x22>
    1666:	ba 95       	dec	r27
    1668:	c9 f7       	brne	.-14     	; 0x165c <__fixunssfsi+0x12>
    166a:	12 c0       	rjmp	.+36     	; 0x1690 <__fixunssfsi+0x46>
    166c:	b1 30       	cpi	r27, 0x01	; 1
    166e:	81 f0       	breq	.+32     	; 0x1690 <__fixunssfsi+0x46>
    1670:	9f d0       	rcall	.+318    	; 0x17b0 <__fp_zero>
    1672:	b1 e0       	ldi	r27, 0x01	; 1
    1674:	08 95       	ret
    1676:	9c c0       	rjmp	.+312    	; 0x17b0 <__fp_zero>
    1678:	67 2f       	mov	r22, r23
    167a:	78 2f       	mov	r23, r24
    167c:	88 27       	eor	r24, r24
    167e:	b8 5f       	subi	r27, 0xF8	; 248
    1680:	39 f0       	breq	.+14     	; 0x1690 <__fixunssfsi+0x46>
    1682:	b9 3f       	cpi	r27, 0xF9	; 249
    1684:	cc f3       	brlt	.-14     	; 0x1678 <__fixunssfsi+0x2e>
    1686:	86 95       	lsr	r24
    1688:	77 95       	ror	r23
    168a:	67 95       	ror	r22
    168c:	b3 95       	inc	r27
    168e:	d9 f7       	brne	.-10     	; 0x1686 <__fixunssfsi+0x3c>
    1690:	3e f4       	brtc	.+14     	; 0x16a0 <__fixunssfsi+0x56>
    1692:	90 95       	com	r25
    1694:	80 95       	com	r24
    1696:	70 95       	com	r23
    1698:	61 95       	neg	r22
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	8f 4f       	sbci	r24, 0xFF	; 255
    169e:	9f 4f       	sbci	r25, 0xFF	; 255
    16a0:	08 95       	ret

000016a2 <__floatunsisf>:
    16a2:	e8 94       	clt
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <__floatsisf+0x12>

000016a6 <__floatsisf>:
    16a6:	97 fb       	bst	r25, 7
    16a8:	3e f4       	brtc	.+14     	; 0x16b8 <__floatsisf+0x12>
    16aa:	90 95       	com	r25
    16ac:	80 95       	com	r24
    16ae:	70 95       	com	r23
    16b0:	61 95       	neg	r22
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	8f 4f       	sbci	r24, 0xFF	; 255
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	99 23       	and	r25, r25
    16ba:	a9 f0       	breq	.+42     	; 0x16e6 <__floatsisf+0x40>
    16bc:	f9 2f       	mov	r31, r25
    16be:	96 e9       	ldi	r25, 0x96	; 150
    16c0:	bb 27       	eor	r27, r27
    16c2:	93 95       	inc	r25
    16c4:	f6 95       	lsr	r31
    16c6:	87 95       	ror	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b7 95       	ror	r27
    16ce:	f1 11       	cpse	r31, r1
    16d0:	f8 cf       	rjmp	.-16     	; 0x16c2 <__floatsisf+0x1c>
    16d2:	fa f4       	brpl	.+62     	; 0x1712 <__floatsisf+0x6c>
    16d4:	bb 0f       	add	r27, r27
    16d6:	11 f4       	brne	.+4      	; 0x16dc <__floatsisf+0x36>
    16d8:	60 ff       	sbrs	r22, 0
    16da:	1b c0       	rjmp	.+54     	; 0x1712 <__floatsisf+0x6c>
    16dc:	6f 5f       	subi	r22, 0xFF	; 255
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	8f 4f       	sbci	r24, 0xFF	; 255
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	16 c0       	rjmp	.+44     	; 0x1712 <__floatsisf+0x6c>
    16e6:	88 23       	and	r24, r24
    16e8:	11 f0       	breq	.+4      	; 0x16ee <__floatsisf+0x48>
    16ea:	96 e9       	ldi	r25, 0x96	; 150
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <__floatsisf+0x6a>
    16ee:	77 23       	and	r23, r23
    16f0:	21 f0       	breq	.+8      	; 0x16fa <__floatsisf+0x54>
    16f2:	9e e8       	ldi	r25, 0x8E	; 142
    16f4:	87 2f       	mov	r24, r23
    16f6:	76 2f       	mov	r23, r22
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <__floatsisf+0x5e>
    16fa:	66 23       	and	r22, r22
    16fc:	71 f0       	breq	.+28     	; 0x171a <__floatsisf+0x74>
    16fe:	96 e8       	ldi	r25, 0x86	; 134
    1700:	86 2f       	mov	r24, r22
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	2a f0       	brmi	.+10     	; 0x1712 <__floatsisf+0x6c>
    1708:	9a 95       	dec	r25
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	da f7       	brpl	.-10     	; 0x1708 <__floatsisf+0x62>
    1712:	88 0f       	add	r24, r24
    1714:	96 95       	lsr	r25
    1716:	87 95       	ror	r24
    1718:	97 f9       	bld	r25, 7
    171a:	08 95       	ret

0000171c <__fp_inf>:
    171c:	97 f9       	bld	r25, 7
    171e:	9f 67       	ori	r25, 0x7F	; 127
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	08 95       	ret

00001728 <__fp_nan>:
    1728:	9f ef       	ldi	r25, 0xFF	; 255
    172a:	80 ec       	ldi	r24, 0xC0	; 192
    172c:	08 95       	ret

0000172e <__fp_pscA>:
    172e:	00 24       	eor	r0, r0
    1730:	0a 94       	dec	r0
    1732:	16 16       	cp	r1, r22
    1734:	17 06       	cpc	r1, r23
    1736:	18 06       	cpc	r1, r24
    1738:	09 06       	cpc	r0, r25
    173a:	08 95       	ret

0000173c <__fp_pscB>:
    173c:	00 24       	eor	r0, r0
    173e:	0a 94       	dec	r0
    1740:	12 16       	cp	r1, r18
    1742:	13 06       	cpc	r1, r19
    1744:	14 06       	cpc	r1, r20
    1746:	05 06       	cpc	r0, r21
    1748:	08 95       	ret

0000174a <__fp_round>:
    174a:	09 2e       	mov	r0, r25
    174c:	03 94       	inc	r0
    174e:	00 0c       	add	r0, r0
    1750:	11 f4       	brne	.+4      	; 0x1756 <__fp_round+0xc>
    1752:	88 23       	and	r24, r24
    1754:	52 f0       	brmi	.+20     	; 0x176a <__fp_round+0x20>
    1756:	bb 0f       	add	r27, r27
    1758:	40 f4       	brcc	.+16     	; 0x176a <__fp_round+0x20>
    175a:	bf 2b       	or	r27, r31
    175c:	11 f4       	brne	.+4      	; 0x1762 <__fp_round+0x18>
    175e:	60 ff       	sbrs	r22, 0
    1760:	04 c0       	rjmp	.+8      	; 0x176a <__fp_round+0x20>
    1762:	6f 5f       	subi	r22, 0xFF	; 255
    1764:	7f 4f       	sbci	r23, 0xFF	; 255
    1766:	8f 4f       	sbci	r24, 0xFF	; 255
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	08 95       	ret

0000176c <__fp_split3>:
    176c:	57 fd       	sbrc	r21, 7
    176e:	90 58       	subi	r25, 0x80	; 128
    1770:	44 0f       	add	r20, r20
    1772:	55 1f       	adc	r21, r21
    1774:	59 f0       	breq	.+22     	; 0x178c <__fp_splitA+0x10>
    1776:	5f 3f       	cpi	r21, 0xFF	; 255
    1778:	71 f0       	breq	.+28     	; 0x1796 <__fp_splitA+0x1a>
    177a:	47 95       	ror	r20

0000177c <__fp_splitA>:
    177c:	88 0f       	add	r24, r24
    177e:	97 fb       	bst	r25, 7
    1780:	99 1f       	adc	r25, r25
    1782:	61 f0       	breq	.+24     	; 0x179c <__fp_splitA+0x20>
    1784:	9f 3f       	cpi	r25, 0xFF	; 255
    1786:	79 f0       	breq	.+30     	; 0x17a6 <__fp_splitA+0x2a>
    1788:	87 95       	ror	r24
    178a:	08 95       	ret
    178c:	12 16       	cp	r1, r18
    178e:	13 06       	cpc	r1, r19
    1790:	14 06       	cpc	r1, r20
    1792:	55 1f       	adc	r21, r21
    1794:	f2 cf       	rjmp	.-28     	; 0x177a <__fp_split3+0xe>
    1796:	46 95       	lsr	r20
    1798:	f1 df       	rcall	.-30     	; 0x177c <__fp_splitA>
    179a:	08 c0       	rjmp	.+16     	; 0x17ac <__fp_splitA+0x30>
    179c:	16 16       	cp	r1, r22
    179e:	17 06       	cpc	r1, r23
    17a0:	18 06       	cpc	r1, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	f1 cf       	rjmp	.-30     	; 0x1788 <__fp_splitA+0xc>
    17a6:	86 95       	lsr	r24
    17a8:	71 05       	cpc	r23, r1
    17aa:	61 05       	cpc	r22, r1
    17ac:	08 94       	sec
    17ae:	08 95       	ret

000017b0 <__fp_zero>:
    17b0:	e8 94       	clt

000017b2 <__fp_szero>:
    17b2:	bb 27       	eor	r27, r27
    17b4:	66 27       	eor	r22, r22
    17b6:	77 27       	eor	r23, r23
    17b8:	cb 01       	movw	r24, r22
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret

000017be <__mulsf3>:
    17be:	0b d0       	rcall	.+22     	; 0x17d6 <__mulsf3x>
    17c0:	c4 cf       	rjmp	.-120    	; 0x174a <__fp_round>
    17c2:	b5 df       	rcall	.-150    	; 0x172e <__fp_pscA>
    17c4:	28 f0       	brcs	.+10     	; 0x17d0 <__mulsf3+0x12>
    17c6:	ba df       	rcall	.-140    	; 0x173c <__fp_pscB>
    17c8:	18 f0       	brcs	.+6      	; 0x17d0 <__mulsf3+0x12>
    17ca:	95 23       	and	r25, r21
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <__mulsf3+0x12>
    17ce:	a6 cf       	rjmp	.-180    	; 0x171c <__fp_inf>
    17d0:	ab cf       	rjmp	.-170    	; 0x1728 <__fp_nan>
    17d2:	11 24       	eor	r1, r1
    17d4:	ee cf       	rjmp	.-36     	; 0x17b2 <__fp_szero>

000017d6 <__mulsf3x>:
    17d6:	ca df       	rcall	.-108    	; 0x176c <__fp_split3>
    17d8:	a0 f3       	brcs	.-24     	; 0x17c2 <__mulsf3+0x4>

000017da <__mulsf3_pse>:
    17da:	95 9f       	mul	r25, r21
    17dc:	d1 f3       	breq	.-12     	; 0x17d2 <__mulsf3+0x14>
    17de:	95 0f       	add	r25, r21
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	55 1f       	adc	r21, r21
    17e4:	62 9f       	mul	r22, r18
    17e6:	f0 01       	movw	r30, r0
    17e8:	72 9f       	mul	r23, r18
    17ea:	bb 27       	eor	r27, r27
    17ec:	f0 0d       	add	r31, r0
    17ee:	b1 1d       	adc	r27, r1
    17f0:	63 9f       	mul	r22, r19
    17f2:	aa 27       	eor	r26, r26
    17f4:	f0 0d       	add	r31, r0
    17f6:	b1 1d       	adc	r27, r1
    17f8:	aa 1f       	adc	r26, r26
    17fa:	64 9f       	mul	r22, r20
    17fc:	66 27       	eor	r22, r22
    17fe:	b0 0d       	add	r27, r0
    1800:	a1 1d       	adc	r26, r1
    1802:	66 1f       	adc	r22, r22
    1804:	82 9f       	mul	r24, r18
    1806:	22 27       	eor	r18, r18
    1808:	b0 0d       	add	r27, r0
    180a:	a1 1d       	adc	r26, r1
    180c:	62 1f       	adc	r22, r18
    180e:	73 9f       	mul	r23, r19
    1810:	b0 0d       	add	r27, r0
    1812:	a1 1d       	adc	r26, r1
    1814:	62 1f       	adc	r22, r18
    1816:	83 9f       	mul	r24, r19
    1818:	a0 0d       	add	r26, r0
    181a:	61 1d       	adc	r22, r1
    181c:	22 1f       	adc	r18, r18
    181e:	74 9f       	mul	r23, r20
    1820:	33 27       	eor	r19, r19
    1822:	a0 0d       	add	r26, r0
    1824:	61 1d       	adc	r22, r1
    1826:	23 1f       	adc	r18, r19
    1828:	84 9f       	mul	r24, r20
    182a:	60 0d       	add	r22, r0
    182c:	21 1d       	adc	r18, r1
    182e:	82 2f       	mov	r24, r18
    1830:	76 2f       	mov	r23, r22
    1832:	6a 2f       	mov	r22, r26
    1834:	11 24       	eor	r1, r1
    1836:	9f 57       	subi	r25, 0x7F	; 127
    1838:	50 40       	sbci	r21, 0x00	; 0
    183a:	8a f0       	brmi	.+34     	; 0x185e <__mulsf3_pse+0x84>
    183c:	e1 f0       	breq	.+56     	; 0x1876 <__mulsf3_pse+0x9c>
    183e:	88 23       	and	r24, r24
    1840:	4a f0       	brmi	.+18     	; 0x1854 <__mulsf3_pse+0x7a>
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	bb 1f       	adc	r27, r27
    1848:	66 1f       	adc	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	91 50       	subi	r25, 0x01	; 1
    1850:	50 40       	sbci	r21, 0x00	; 0
    1852:	a9 f7       	brne	.-22     	; 0x183e <__mulsf3_pse+0x64>
    1854:	9e 3f       	cpi	r25, 0xFE	; 254
    1856:	51 05       	cpc	r21, r1
    1858:	70 f0       	brcs	.+28     	; 0x1876 <__mulsf3_pse+0x9c>
    185a:	60 cf       	rjmp	.-320    	; 0x171c <__fp_inf>
    185c:	aa cf       	rjmp	.-172    	; 0x17b2 <__fp_szero>
    185e:	5f 3f       	cpi	r21, 0xFF	; 255
    1860:	ec f3       	brlt	.-6      	; 0x185c <__mulsf3_pse+0x82>
    1862:	98 3e       	cpi	r25, 0xE8	; 232
    1864:	dc f3       	brlt	.-10     	; 0x185c <__mulsf3_pse+0x82>
    1866:	86 95       	lsr	r24
    1868:	77 95       	ror	r23
    186a:	67 95       	ror	r22
    186c:	b7 95       	ror	r27
    186e:	f7 95       	ror	r31
    1870:	e7 95       	ror	r30
    1872:	9f 5f       	subi	r25, 0xFF	; 255
    1874:	c1 f7       	brne	.-16     	; 0x1866 <__mulsf3_pse+0x8c>
    1876:	fe 2b       	or	r31, r30
    1878:	88 0f       	add	r24, r24
    187a:	91 1d       	adc	r25, r1
    187c:	96 95       	lsr	r25
    187e:	87 95       	ror	r24
    1880:	97 f9       	bld	r25, 7
    1882:	08 95       	ret

00001884 <vfprintf>:
    1884:	2f 92       	push	r2
    1886:	3f 92       	push	r3
    1888:	4f 92       	push	r4
    188a:	5f 92       	push	r5
    188c:	6f 92       	push	r6
    188e:	7f 92       	push	r7
    1890:	8f 92       	push	r8
    1892:	9f 92       	push	r9
    1894:	af 92       	push	r10
    1896:	bf 92       	push	r11
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	62 97       	sbiw	r28, 0x12	; 18
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	7c 01       	movw	r14, r24
    18ba:	1b 01       	movw	r2, r22
    18bc:	6a 01       	movw	r12, r20
    18be:	fc 01       	movw	r30, r24
    18c0:	17 82       	std	Z+7, r1	; 0x07
    18c2:	16 82       	std	Z+6, r1	; 0x06
    18c4:	83 81       	ldd	r24, Z+3	; 0x03
    18c6:	81 fd       	sbrc	r24, 1
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <vfprintf+0x4c>
    18ca:	4e c3       	rjmp	.+1692   	; 0x1f68 <vfprintf+0x6e4>
    18cc:	65 01       	movw	r12, r10
    18ce:	05 c0       	rjmp	.+10     	; 0x18da <vfprintf+0x56>
    18d0:	88 24       	eor	r8, r8
    18d2:	83 94       	inc	r8
    18d4:	91 2c       	mov	r9, r1
    18d6:	8c 0e       	add	r8, r28
    18d8:	9d 1e       	adc	r9, r29
    18da:	f7 01       	movw	r30, r14
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	f1 01       	movw	r30, r2
    18e0:	93 fd       	sbrc	r25, 3
    18e2:	85 91       	lpm	r24, Z+
    18e4:	93 ff       	sbrs	r25, 3
    18e6:	81 91       	ld	r24, Z+
    18e8:	1f 01       	movw	r2, r30
    18ea:	88 23       	and	r24, r24
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <vfprintf+0x6c>
    18ee:	38 c3       	rjmp	.+1648   	; 0x1f60 <vfprintf+0x6dc>
    18f0:	85 32       	cpi	r24, 0x25	; 37
    18f2:	39 f4       	brne	.+14     	; 0x1902 <vfprintf+0x7e>
    18f4:	93 fd       	sbrc	r25, 3
    18f6:	85 91       	lpm	r24, Z+
    18f8:	93 ff       	sbrs	r25, 3
    18fa:	81 91       	ld	r24, Z+
    18fc:	1f 01       	movw	r2, r30
    18fe:	85 32       	cpi	r24, 0x25	; 37
    1900:	29 f4       	brne	.+10     	; 0x190c <vfprintf+0x88>
    1902:	b7 01       	movw	r22, r14
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	da d5       	rcall	.+2996   	; 0x24bc <fputc>
    1908:	56 01       	movw	r10, r12
    190a:	e0 cf       	rjmp	.-64     	; 0x18cc <vfprintf+0x48>
    190c:	71 2c       	mov	r7, r1
    190e:	61 2c       	mov	r6, r1
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	20 32       	cpi	r18, 0x20	; 32
    1914:	a8 f4       	brcc	.+42     	; 0x1940 <vfprintf+0xbc>
    1916:	8b 32       	cpi	r24, 0x2B	; 43
    1918:	61 f0       	breq	.+24     	; 0x1932 <vfprintf+0xae>
    191a:	28 f4       	brcc	.+10     	; 0x1926 <vfprintf+0xa2>
    191c:	80 32       	cpi	r24, 0x20	; 32
    191e:	51 f0       	breq	.+20     	; 0x1934 <vfprintf+0xb0>
    1920:	83 32       	cpi	r24, 0x23	; 35
    1922:	71 f4       	brne	.+28     	; 0x1940 <vfprintf+0xbc>
    1924:	0b c0       	rjmp	.+22     	; 0x193c <vfprintf+0xb8>
    1926:	8d 32       	cpi	r24, 0x2D	; 45
    1928:	39 f0       	breq	.+14     	; 0x1938 <vfprintf+0xb4>
    192a:	80 33       	cpi	r24, 0x30	; 48
    192c:	49 f4       	brne	.+18     	; 0x1940 <vfprintf+0xbc>
    192e:	21 60       	ori	r18, 0x01	; 1
    1930:	28 c0       	rjmp	.+80     	; 0x1982 <vfprintf+0xfe>
    1932:	22 60       	ori	r18, 0x02	; 2
    1934:	24 60       	ori	r18, 0x04	; 4
    1936:	25 c0       	rjmp	.+74     	; 0x1982 <vfprintf+0xfe>
    1938:	28 60       	ori	r18, 0x08	; 8
    193a:	23 c0       	rjmp	.+70     	; 0x1982 <vfprintf+0xfe>
    193c:	20 61       	ori	r18, 0x10	; 16
    193e:	21 c0       	rjmp	.+66     	; 0x1982 <vfprintf+0xfe>
    1940:	27 fd       	sbrc	r18, 7
    1942:	27 c0       	rjmp	.+78     	; 0x1992 <vfprintf+0x10e>
    1944:	38 2f       	mov	r19, r24
    1946:	30 53       	subi	r19, 0x30	; 48
    1948:	3a 30       	cpi	r19, 0x0A	; 10
    194a:	78 f4       	brcc	.+30     	; 0x196a <vfprintf+0xe6>
    194c:	26 ff       	sbrs	r18, 6
    194e:	06 c0       	rjmp	.+12     	; 0x195c <vfprintf+0xd8>
    1950:	fa e0       	ldi	r31, 0x0A	; 10
    1952:	7f 9e       	mul	r7, r31
    1954:	30 0d       	add	r19, r0
    1956:	11 24       	eor	r1, r1
    1958:	73 2e       	mov	r7, r19
    195a:	13 c0       	rjmp	.+38     	; 0x1982 <vfprintf+0xfe>
    195c:	4a e0       	ldi	r20, 0x0A	; 10
    195e:	64 9e       	mul	r6, r20
    1960:	30 0d       	add	r19, r0
    1962:	11 24       	eor	r1, r1
    1964:	63 2e       	mov	r6, r19
    1966:	20 62       	ori	r18, 0x20	; 32
    1968:	0c c0       	rjmp	.+24     	; 0x1982 <vfprintf+0xfe>
    196a:	8e 32       	cpi	r24, 0x2E	; 46
    196c:	21 f4       	brne	.+8      	; 0x1976 <vfprintf+0xf2>
    196e:	26 fd       	sbrc	r18, 6
    1970:	f7 c2       	rjmp	.+1518   	; 0x1f60 <vfprintf+0x6dc>
    1972:	20 64       	ori	r18, 0x40	; 64
    1974:	06 c0       	rjmp	.+12     	; 0x1982 <vfprintf+0xfe>
    1976:	8c 36       	cpi	r24, 0x6C	; 108
    1978:	11 f4       	brne	.+4      	; 0x197e <vfprintf+0xfa>
    197a:	20 68       	ori	r18, 0x80	; 128
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <vfprintf+0xfe>
    197e:	88 36       	cpi	r24, 0x68	; 104
    1980:	41 f4       	brne	.+16     	; 0x1992 <vfprintf+0x10e>
    1982:	f1 01       	movw	r30, r2
    1984:	93 fd       	sbrc	r25, 3
    1986:	85 91       	lpm	r24, Z+
    1988:	93 ff       	sbrs	r25, 3
    198a:	81 91       	ld	r24, Z+
    198c:	1f 01       	movw	r2, r30
    198e:	81 11       	cpse	r24, r1
    1990:	c0 cf       	rjmp	.-128    	; 0x1912 <vfprintf+0x8e>
    1992:	98 2f       	mov	r25, r24
    1994:	95 54       	subi	r25, 0x45	; 69
    1996:	93 30       	cpi	r25, 0x03	; 3
    1998:	18 f4       	brcc	.+6      	; 0x19a0 <vfprintf+0x11c>
    199a:	20 61       	ori	r18, 0x10	; 16
    199c:	80 5e       	subi	r24, 0xE0	; 224
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <vfprintf+0x128>
    19a0:	98 2f       	mov	r25, r24
    19a2:	95 56       	subi	r25, 0x65	; 101
    19a4:	93 30       	cpi	r25, 0x03	; 3
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <vfprintf+0x126>
    19a8:	94 c1       	rjmp	.+808    	; 0x1cd2 <vfprintf+0x44e>
    19aa:	2f 7e       	andi	r18, 0xEF	; 239
    19ac:	26 fd       	sbrc	r18, 6
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <vfprintf+0x130>
    19b0:	16 e0       	ldi	r17, 0x06	; 6
    19b2:	71 2e       	mov	r7, r17
    19b4:	bf e3       	ldi	r27, 0x3F	; 63
    19b6:	5b 2e       	mov	r5, r27
    19b8:	52 22       	and	r5, r18
    19ba:	85 36       	cpi	r24, 0x65	; 101
    19bc:	19 f4       	brne	.+6      	; 0x19c4 <vfprintf+0x140>
    19be:	f0 e4       	ldi	r31, 0x40	; 64
    19c0:	5f 2a       	or	r5, r31
    19c2:	07 c0       	rjmp	.+14     	; 0x19d2 <vfprintf+0x14e>
    19c4:	86 36       	cpi	r24, 0x66	; 102
    19c6:	19 f4       	brne	.+6      	; 0x19ce <vfprintf+0x14a>
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	54 2a       	or	r5, r20
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <vfprintf+0x14e>
    19ce:	71 10       	cpse	r7, r1
    19d0:	7a 94       	dec	r7
    19d2:	57 fe       	sbrs	r5, 7
    19d4:	07 c0       	rjmp	.+14     	; 0x19e4 <vfprintf+0x160>
    19d6:	5b e3       	ldi	r21, 0x3B	; 59
    19d8:	57 15       	cp	r21, r7
    19da:	48 f0       	brcs	.+18     	; 0x19ee <vfprintf+0x16a>
    19dc:	47 2c       	mov	r4, r7
    19de:	43 94       	inc	r4
    19e0:	27 e0       	ldi	r18, 0x07	; 7
    19e2:	0d c0       	rjmp	.+26     	; 0x19fe <vfprintf+0x17a>
    19e4:	87 e0       	ldi	r24, 0x07	; 7
    19e6:	87 15       	cp	r24, r7
    19e8:	30 f0       	brcs	.+12     	; 0x19f6 <vfprintf+0x172>
    19ea:	27 2d       	mov	r18, r7
    19ec:	07 c0       	rjmp	.+14     	; 0x19fc <vfprintf+0x178>
    19ee:	27 e0       	ldi	r18, 0x07	; 7
    19f0:	ac e3       	ldi	r26, 0x3C	; 60
    19f2:	4a 2e       	mov	r4, r26
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <vfprintf+0x17a>
    19f6:	27 e0       	ldi	r18, 0x07	; 7
    19f8:	f7 e0       	ldi	r31, 0x07	; 7
    19fa:	7f 2e       	mov	r7, r31
    19fc:	41 2c       	mov	r4, r1
    19fe:	56 01       	movw	r10, r12
    1a00:	94 e0       	ldi	r25, 0x04	; 4
    1a02:	a9 0e       	add	r10, r25
    1a04:	b1 1c       	adc	r11, r1
    1a06:	f6 01       	movw	r30, r12
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	04 2d       	mov	r16, r4
    1a12:	a4 01       	movw	r20, r8
    1a14:	4e d4       	rcall	.+2204   	; 0x22b2 <__ftoa_engine>
    1a16:	8c 01       	movw	r16, r24
    1a18:	49 81       	ldd	r20, Y+1	; 0x01
    1a1a:	4c 87       	std	Y+12, r20	; 0x0c
    1a1c:	40 ff       	sbrs	r20, 0
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <vfprintf+0x1a0>
    1a20:	43 ff       	sbrs	r20, 3
    1a22:	07 c0       	rjmp	.+14     	; 0x1a32 <vfprintf+0x1ae>
    1a24:	51 fc       	sbrc	r5, 1
    1a26:	08 c0       	rjmp	.+16     	; 0x1a38 <vfprintf+0x1b4>
    1a28:	52 fe       	sbrs	r5, 2
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <vfprintf+0x1ba>
    1a2c:	e0 e2       	ldi	r30, 0x20	; 32
    1a2e:	de 2e       	mov	r13, r30
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <vfprintf+0x1bc>
    1a32:	7d e2       	ldi	r23, 0x2D	; 45
    1a34:	d7 2e       	mov	r13, r23
    1a36:	04 c0       	rjmp	.+8      	; 0x1a40 <vfprintf+0x1bc>
    1a38:	6b e2       	ldi	r22, 0x2B	; 43
    1a3a:	d6 2e       	mov	r13, r22
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <vfprintf+0x1bc>
    1a3e:	d1 2c       	mov	r13, r1
    1a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a42:	8c 70       	andi	r24, 0x0C	; 12
    1a44:	89 f1       	breq	.+98     	; 0x1aa8 <vfprintf+0x224>
    1a46:	dd 20       	and	r13, r13
    1a48:	11 f0       	breq	.+4      	; 0x1a4e <vfprintf+0x1ca>
    1a4a:	84 e0       	ldi	r24, 0x04	; 4
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <vfprintf+0x1cc>
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	86 15       	cp	r24, r6
    1a52:	10 f0       	brcs	.+4      	; 0x1a58 <vfprintf+0x1d4>
    1a54:	61 2c       	mov	r6, r1
    1a56:	0a c0       	rjmp	.+20     	; 0x1a6c <vfprintf+0x1e8>
    1a58:	68 1a       	sub	r6, r24
    1a5a:	53 fc       	sbrc	r5, 3
    1a5c:	07 c0       	rjmp	.+14     	; 0x1a6c <vfprintf+0x1e8>
    1a5e:	b7 01       	movw	r22, r14
    1a60:	80 e2       	ldi	r24, 0x20	; 32
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	2b d5       	rcall	.+2646   	; 0x24bc <fputc>
    1a66:	6a 94       	dec	r6
    1a68:	d1 f7       	brne	.-12     	; 0x1a5e <vfprintf+0x1da>
    1a6a:	f4 cf       	rjmp	.-24     	; 0x1a54 <vfprintf+0x1d0>
    1a6c:	dd 20       	and	r13, r13
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <vfprintf+0x1f4>
    1a70:	b7 01       	movw	r22, r14
    1a72:	8d 2d       	mov	r24, r13
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	22 d5       	rcall	.+2628   	; 0x24bc <fputc>
    1a78:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a7a:	53 fd       	sbrc	r21, 3
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <vfprintf+0x200>
    1a7e:	00 e9       	ldi	r16, 0x90	; 144
    1a80:	10 e0       	ldi	r17, 0x00	; 0
    1a82:	0b c0       	rjmp	.+22     	; 0x1a9a <vfprintf+0x216>
    1a84:	0c e8       	ldi	r16, 0x8C	; 140
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	08 c0       	rjmp	.+16     	; 0x1a9a <vfprintf+0x216>
    1a8a:	51 10       	cpse	r5, r1
    1a8c:	80 52       	subi	r24, 0x20	; 32
    1a8e:	b7 01       	movw	r22, r14
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	14 d5       	rcall	.+2600   	; 0x24bc <fputc>
    1a94:	0f 5f       	subi	r16, 0xFF	; 255
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <vfprintf+0x21a>
    1a9a:	80 e1       	ldi	r24, 0x10	; 16
    1a9c:	58 22       	and	r5, r24
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	84 91       	lpm	r24, Z
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	f2 cf       	rjmp	.-28     	; 0x1a8a <vfprintf+0x206>
    1aa6:	59 c2       	rjmp	.+1202   	; 0x1f5a <vfprintf+0x6d6>
    1aa8:	57 fe       	sbrs	r5, 7
    1aaa:	0e c0       	rjmp	.+28     	; 0x1ac8 <vfprintf+0x244>
    1aac:	40 0e       	add	r4, r16
    1aae:	4c 85       	ldd	r20, Y+12	; 0x0c
    1ab0:	44 ff       	sbrs	r20, 4
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <vfprintf+0x238>
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	81 33       	cpi	r24, 0x31	; 49
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <vfprintf+0x238>
    1aba:	4a 94       	dec	r4
    1abc:	14 14       	cp	r1, r4
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <vfprintf+0x28e>
    1ac0:	58 e0       	ldi	r21, 0x08	; 8
    1ac2:	54 15       	cp	r21, r4
    1ac4:	48 f1       	brcs	.+82     	; 0x1b18 <vfprintf+0x294>
    1ac6:	2c c0       	rjmp	.+88     	; 0x1b20 <vfprintf+0x29c>
    1ac8:	56 fc       	sbrc	r5, 6
    1aca:	2a c0       	rjmp	.+84     	; 0x1b20 <vfprintf+0x29c>
    1acc:	87 2d       	mov	r24, r7
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	80 17       	cp	r24, r16
    1ad2:	91 07       	cpc	r25, r17
    1ad4:	44 f0       	brlt	.+16     	; 0x1ae6 <vfprintf+0x262>
    1ad6:	0c 3f       	cpi	r16, 0xFC	; 252
    1ad8:	8f ef       	ldi	r24, 0xFF	; 255
    1ada:	18 07       	cpc	r17, r24
    1adc:	24 f0       	brlt	.+8      	; 0x1ae6 <vfprintf+0x262>
    1ade:	90 e8       	ldi	r25, 0x80	; 128
    1ae0:	59 2a       	or	r5, r25
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <vfprintf+0x262>
    1ae4:	7a 94       	dec	r7
    1ae6:	77 20       	and	r7, r7
    1ae8:	49 f0       	breq	.+18     	; 0x1afc <vfprintf+0x278>
    1aea:	e2 e0       	ldi	r30, 0x02	; 2
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	ec 0f       	add	r30, r28
    1af0:	fd 1f       	adc	r31, r29
    1af2:	e7 0d       	add	r30, r7
    1af4:	f1 1d       	adc	r31, r1
    1af6:	80 81       	ld	r24, Z
    1af8:	80 33       	cpi	r24, 0x30	; 48
    1afa:	a1 f3       	breq	.-24     	; 0x1ae4 <vfprintf+0x260>
    1afc:	57 fe       	sbrs	r5, 7
    1afe:	10 c0       	rjmp	.+32     	; 0x1b20 <vfprintf+0x29c>
    1b00:	47 2c       	mov	r4, r7
    1b02:	43 94       	inc	r4
    1b04:	87 2d       	mov	r24, r7
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	08 17       	cp	r16, r24
    1b0a:	19 07       	cpc	r17, r25
    1b0c:	44 f4       	brge	.+16     	; 0x1b1e <vfprintf+0x29a>
    1b0e:	70 1a       	sub	r7, r16
    1b10:	07 c0       	rjmp	.+14     	; 0x1b20 <vfprintf+0x29c>
    1b12:	44 24       	eor	r4, r4
    1b14:	43 94       	inc	r4
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <vfprintf+0x29c>
    1b18:	58 e0       	ldi	r21, 0x08	; 8
    1b1a:	45 2e       	mov	r4, r21
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <vfprintf+0x29c>
    1b1e:	71 2c       	mov	r7, r1
    1b20:	57 fe       	sbrs	r5, 7
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <vfprintf+0x2ae>
    1b24:	10 16       	cp	r1, r16
    1b26:	11 06       	cpc	r1, r17
    1b28:	3c f4       	brge	.+14     	; 0x1b38 <vfprintf+0x2b4>
    1b2a:	98 01       	movw	r18, r16
    1b2c:	2f 5f       	subi	r18, 0xFF	; 255
    1b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <vfprintf+0x2b8>
    1b32:	25 e0       	ldi	r18, 0x05	; 5
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <vfprintf+0x2b8>
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	dd 20       	and	r13, r13
    1b3e:	11 f0       	breq	.+4      	; 0x1b44 <vfprintf+0x2c0>
    1b40:	2f 5f       	subi	r18, 0xFF	; 255
    1b42:	3f 4f       	sbci	r19, 0xFF	; 255
    1b44:	77 20       	and	r7, r7
    1b46:	31 f0       	breq	.+12     	; 0x1b54 <vfprintf+0x2d0>
    1b48:	47 2d       	mov	r20, r7
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	4f 5f       	subi	r20, 0xFF	; 255
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	24 0f       	add	r18, r20
    1b52:	35 1f       	adc	r19, r21
    1b54:	46 2d       	mov	r20, r6
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	24 17       	cp	r18, r20
    1b5a:	35 07       	cpc	r19, r21
    1b5c:	14 f4       	brge	.+4      	; 0x1b62 <vfprintf+0x2de>
    1b5e:	62 1a       	sub	r6, r18
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <vfprintf+0x2e0>
    1b62:	61 2c       	mov	r6, r1
    1b64:	85 2d       	mov	r24, r5
    1b66:	89 70       	andi	r24, 0x09	; 9
    1b68:	41 f4       	brne	.+16     	; 0x1b7a <vfprintf+0x2f6>
    1b6a:	05 c0       	rjmp	.+10     	; 0x1b76 <vfprintf+0x2f2>
    1b6c:	b7 01       	movw	r22, r14
    1b6e:	80 e2       	ldi	r24, 0x20	; 32
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a4 d4       	rcall	.+2376   	; 0x24bc <fputc>
    1b74:	6a 94       	dec	r6
    1b76:	61 10       	cpse	r6, r1
    1b78:	f9 cf       	rjmp	.-14     	; 0x1b6c <vfprintf+0x2e8>
    1b7a:	dd 20       	and	r13, r13
    1b7c:	21 f0       	breq	.+8      	; 0x1b86 <vfprintf+0x302>
    1b7e:	b7 01       	movw	r22, r14
    1b80:	8d 2d       	mov	r24, r13
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9b d4       	rcall	.+2358   	; 0x24bc <fputc>
    1b86:	53 fc       	sbrc	r5, 3
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <vfprintf+0x316>
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <vfprintf+0x312>
    1b8c:	b7 01       	movw	r22, r14
    1b8e:	80 e3       	ldi	r24, 0x30	; 48
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	94 d4       	rcall	.+2344   	; 0x24bc <fputc>
    1b94:	6a 94       	dec	r6
    1b96:	61 10       	cpse	r6, r1
    1b98:	f9 cf       	rjmp	.-14     	; 0x1b8c <vfprintf+0x308>
    1b9a:	57 fe       	sbrs	r5, 7
    1b9c:	54 c0       	rjmp	.+168    	; 0x1c46 <vfprintf+0x3c2>
    1b9e:	68 01       	movw	r12, r16
    1ba0:	17 ff       	sbrs	r17, 7
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <vfprintf+0x324>
    1ba4:	c1 2c       	mov	r12, r1
    1ba6:	d1 2c       	mov	r13, r1
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	a8 01       	movw	r20, r16
    1bae:	44 19       	sub	r20, r4
    1bb0:	51 09       	sbc	r21, r1
    1bb2:	5e 87       	std	Y+14, r21	; 0x0e
    1bb4:	4d 87       	std	Y+13, r20	; 0x0d
    1bb6:	28 01       	movw	r4, r16
    1bb8:	4c 18       	sub	r4, r12
    1bba:	5d 08       	sbc	r5, r13
    1bbc:	48 0c       	add	r4, r8
    1bbe:	59 1c       	adc	r5, r9
    1bc0:	87 2d       	mov	r24, r7
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	44 27       	eor	r20, r20
    1bc6:	55 27       	eor	r21, r21
    1bc8:	48 1b       	sub	r20, r24
    1bca:	59 0b       	sbc	r21, r25
    1bcc:	58 8b       	std	Y+16, r21	; 0x10
    1bce:	4f 87       	std	Y+15, r20	; 0x0f
    1bd0:	5f ef       	ldi	r21, 0xFF	; 255
    1bd2:	c5 16       	cp	r12, r21
    1bd4:	d5 06       	cpc	r13, r21
    1bd6:	41 f4       	brne	.+16     	; 0x1be8 <vfprintf+0x364>
    1bd8:	b7 01       	movw	r22, r14
    1bda:	8e e2       	ldi	r24, 0x2E	; 46
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	2a 8b       	std	Y+18, r18	; 0x12
    1be0:	39 8b       	std	Y+17, r19	; 0x11
    1be2:	6c d4       	rcall	.+2264   	; 0x24bc <fputc>
    1be4:	39 89       	ldd	r19, Y+17	; 0x11
    1be6:	2a 89       	ldd	r18, Y+18	; 0x12
    1be8:	0c 15       	cp	r16, r12
    1bea:	1d 05       	cpc	r17, r13
    1bec:	54 f0       	brlt	.+20     	; 0x1c02 <vfprintf+0x37e>
    1bee:	4d 85       	ldd	r20, Y+13	; 0x0d
    1bf0:	5e 85       	ldd	r21, Y+14	; 0x0e
    1bf2:	4c 15       	cp	r20, r12
    1bf4:	5d 05       	cpc	r21, r13
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <vfprintf+0x37e>
    1bf8:	f2 01       	movw	r30, r4
    1bfa:	e2 0f       	add	r30, r18
    1bfc:	f3 1f       	adc	r31, r19
    1bfe:	81 81       	ldd	r24, Z+1	; 0x01
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <vfprintf+0x380>
    1c02:	80 e3       	ldi	r24, 0x30	; 48
    1c04:	51 e0       	ldi	r21, 0x01	; 1
    1c06:	c5 1a       	sub	r12, r21
    1c08:	d1 08       	sbc	r13, r1
    1c0a:	2f 5f       	subi	r18, 0xFF	; 255
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c10:	58 89       	ldd	r21, Y+16	; 0x10
    1c12:	c4 16       	cp	r12, r20
    1c14:	d5 06       	cpc	r13, r21
    1c16:	44 f0       	brlt	.+16     	; 0x1c28 <vfprintf+0x3a4>
    1c18:	b7 01       	movw	r22, r14
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	2a 8b       	std	Y+18, r18	; 0x12
    1c1e:	39 8b       	std	Y+17, r19	; 0x11
    1c20:	4d d4       	rcall	.+2202   	; 0x24bc <fputc>
    1c22:	2a 89       	ldd	r18, Y+18	; 0x12
    1c24:	39 89       	ldd	r19, Y+17	; 0x11
    1c26:	d4 cf       	rjmp	.-88     	; 0x1bd0 <vfprintf+0x34c>
    1c28:	c0 16       	cp	r12, r16
    1c2a:	d1 06       	cpc	r13, r17
    1c2c:	49 f4       	brne	.+18     	; 0x1c40 <vfprintf+0x3bc>
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	96 33       	cpi	r25, 0x36	; 54
    1c32:	28 f4       	brcc	.+10     	; 0x1c3e <vfprintf+0x3ba>
    1c34:	95 33       	cpi	r25, 0x35	; 53
    1c36:	21 f4       	brne	.+8      	; 0x1c40 <vfprintf+0x3bc>
    1c38:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c3a:	54 fd       	sbrc	r21, 4
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <vfprintf+0x3bc>
    1c3e:	81 e3       	ldi	r24, 0x31	; 49
    1c40:	b7 01       	movw	r22, r14
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	44 c0       	rjmp	.+136    	; 0x1cce <vfprintf+0x44a>
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	81 33       	cpi	r24, 0x31	; 49
    1c4a:	19 f0       	breq	.+6      	; 0x1c52 <vfprintf+0x3ce>
    1c4c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c4e:	4f 7e       	andi	r20, 0xEF	; 239
    1c50:	4c 87       	std	Y+12, r20	; 0x0c
    1c52:	b7 01       	movw	r22, r14
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	32 d4       	rcall	.+2148   	; 0x24bc <fputc>
    1c58:	71 10       	cpse	r7, r1
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <vfprintf+0x3e2>
    1c5c:	54 fe       	sbrs	r5, 4
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <vfprintf+0x404>
    1c60:	85 e4       	ldi	r24, 0x45	; 69
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	13 c0       	rjmp	.+38     	; 0x1c8c <vfprintf+0x408>
    1c66:	b7 01       	movw	r22, r14
    1c68:	8e e2       	ldi	r24, 0x2E	; 46
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	27 d4       	rcall	.+2126   	; 0x24bc <fputc>
    1c6e:	42 e0       	ldi	r20, 0x02	; 2
    1c70:	d4 2e       	mov	r13, r20
    1c72:	f4 01       	movw	r30, r8
    1c74:	ed 0d       	add	r30, r13
    1c76:	f1 1d       	adc	r31, r1
    1c78:	d3 94       	inc	r13
    1c7a:	b7 01       	movw	r22, r14
    1c7c:	80 81       	ld	r24, Z
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	1d d4       	rcall	.+2106   	; 0x24bc <fputc>
    1c82:	7a 94       	dec	r7
    1c84:	b1 f7       	brne	.-20     	; 0x1c72 <vfprintf+0x3ee>
    1c86:	ea cf       	rjmp	.-44     	; 0x1c5c <vfprintf+0x3d8>
    1c88:	85 e6       	ldi	r24, 0x65	; 101
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	b7 01       	movw	r22, r14
    1c8e:	16 d4       	rcall	.+2092   	; 0x24bc <fputc>
    1c90:	17 fd       	sbrc	r17, 7
    1c92:	06 c0       	rjmp	.+12     	; 0x1ca0 <vfprintf+0x41c>
    1c94:	01 15       	cp	r16, r1
    1c96:	11 05       	cpc	r17, r1
    1c98:	41 f4       	brne	.+16     	; 0x1caa <vfprintf+0x426>
    1c9a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c9c:	54 ff       	sbrs	r21, 4
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <vfprintf+0x426>
    1ca0:	11 95       	neg	r17
    1ca2:	01 95       	neg	r16
    1ca4:	11 09       	sbc	r17, r1
    1ca6:	8d e2       	ldi	r24, 0x2D	; 45
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <vfprintf+0x428>
    1caa:	8b e2       	ldi	r24, 0x2B	; 43
    1cac:	b7 01       	movw	r22, r14
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	05 d4       	rcall	.+2058   	; 0x24bc <fputc>
    1cb2:	80 e3       	ldi	r24, 0x30	; 48
    1cb4:	03 c0       	rjmp	.+6      	; 0x1cbc <vfprintf+0x438>
    1cb6:	8f 5f       	subi	r24, 0xFF	; 255
    1cb8:	0a 50       	subi	r16, 0x0A	; 10
    1cba:	11 09       	sbc	r17, r1
    1cbc:	0a 30       	cpi	r16, 0x0A	; 10
    1cbe:	11 05       	cpc	r17, r1
    1cc0:	d4 f7       	brge	.-12     	; 0x1cb6 <vfprintf+0x432>
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	fa d3       	rcall	.+2036   	; 0x24bc <fputc>
    1cc8:	b7 01       	movw	r22, r14
    1cca:	c8 01       	movw	r24, r16
    1ccc:	c0 96       	adiw	r24, 0x30	; 48
    1cce:	f6 d3       	rcall	.+2028   	; 0x24bc <fputc>
    1cd0:	44 c1       	rjmp	.+648    	; 0x1f5a <vfprintf+0x6d6>
    1cd2:	83 36       	cpi	r24, 0x63	; 99
    1cd4:	31 f0       	breq	.+12     	; 0x1ce2 <vfprintf+0x45e>
    1cd6:	83 37       	cpi	r24, 0x73	; 115
    1cd8:	81 f0       	breq	.+32     	; 0x1cfa <vfprintf+0x476>
    1cda:	83 35       	cpi	r24, 0x53	; 83
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <vfprintf+0x45c>
    1cde:	5a c0       	rjmp	.+180    	; 0x1d94 <vfprintf+0x510>
    1ce0:	23 c0       	rjmp	.+70     	; 0x1d28 <vfprintf+0x4a4>
    1ce2:	56 01       	movw	r10, r12
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	a8 0e       	add	r10, r24
    1ce8:	b1 1c       	adc	r11, r1
    1cea:	f6 01       	movw	r30, r12
    1cec:	80 81       	ld	r24, Z
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	cc 24       	eor	r12, r12
    1cf2:	c3 94       	inc	r12
    1cf4:	d1 2c       	mov	r13, r1
    1cf6:	84 01       	movw	r16, r8
    1cf8:	13 c0       	rjmp	.+38     	; 0x1d20 <vfprintf+0x49c>
    1cfa:	56 01       	movw	r10, r12
    1cfc:	f2 e0       	ldi	r31, 0x02	; 2
    1cfe:	af 0e       	add	r10, r31
    1d00:	b1 1c       	adc	r11, r1
    1d02:	f6 01       	movw	r30, r12
    1d04:	00 81       	ld	r16, Z
    1d06:	11 81       	ldd	r17, Z+1	; 0x01
    1d08:	26 ff       	sbrs	r18, 6
    1d0a:	03 c0       	rjmp	.+6      	; 0x1d12 <vfprintf+0x48e>
    1d0c:	67 2d       	mov	r22, r7
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <vfprintf+0x492>
    1d12:	6f ef       	ldi	r22, 0xFF	; 255
    1d14:	7f ef       	ldi	r23, 0xFF	; 255
    1d16:	c8 01       	movw	r24, r16
    1d18:	2a 8b       	std	Y+18, r18	; 0x12
    1d1a:	c5 d3       	rcall	.+1930   	; 0x24a6 <strnlen>
    1d1c:	6c 01       	movw	r12, r24
    1d1e:	2a 89       	ldd	r18, Y+18	; 0x12
    1d20:	9f e7       	ldi	r25, 0x7F	; 127
    1d22:	59 2e       	mov	r5, r25
    1d24:	52 22       	and	r5, r18
    1d26:	16 c0       	rjmp	.+44     	; 0x1d54 <vfprintf+0x4d0>
    1d28:	56 01       	movw	r10, r12
    1d2a:	f2 e0       	ldi	r31, 0x02	; 2
    1d2c:	af 0e       	add	r10, r31
    1d2e:	b1 1c       	adc	r11, r1
    1d30:	f6 01       	movw	r30, r12
    1d32:	00 81       	ld	r16, Z
    1d34:	11 81       	ldd	r17, Z+1	; 0x01
    1d36:	26 ff       	sbrs	r18, 6
    1d38:	03 c0       	rjmp	.+6      	; 0x1d40 <vfprintf+0x4bc>
    1d3a:	67 2d       	mov	r22, r7
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <vfprintf+0x4c0>
    1d40:	6f ef       	ldi	r22, 0xFF	; 255
    1d42:	7f ef       	ldi	r23, 0xFF	; 255
    1d44:	c8 01       	movw	r24, r16
    1d46:	2a 8b       	std	Y+18, r18	; 0x12
    1d48:	8c d3       	rcall	.+1816   	; 0x2462 <strnlen_P>
    1d4a:	6c 01       	movw	r12, r24
    1d4c:	2a 89       	ldd	r18, Y+18	; 0x12
    1d4e:	80 e8       	ldi	r24, 0x80	; 128
    1d50:	58 2e       	mov	r5, r24
    1d52:	52 2a       	or	r5, r18
    1d54:	53 fc       	sbrc	r5, 3
    1d56:	1a c0       	rjmp	.+52     	; 0x1d8c <vfprintf+0x508>
    1d58:	05 c0       	rjmp	.+10     	; 0x1d64 <vfprintf+0x4e0>
    1d5a:	b7 01       	movw	r22, r14
    1d5c:	80 e2       	ldi	r24, 0x20	; 32
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	ad d3       	rcall	.+1882   	; 0x24bc <fputc>
    1d62:	6a 94       	dec	r6
    1d64:	86 2d       	mov	r24, r6
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	c8 16       	cp	r12, r24
    1d6a:	d9 06       	cpc	r13, r25
    1d6c:	b0 f3       	brcs	.-20     	; 0x1d5a <vfprintf+0x4d6>
    1d6e:	0e c0       	rjmp	.+28     	; 0x1d8c <vfprintf+0x508>
    1d70:	f8 01       	movw	r30, r16
    1d72:	57 fc       	sbrc	r5, 7
    1d74:	85 91       	lpm	r24, Z+
    1d76:	57 fe       	sbrs	r5, 7
    1d78:	81 91       	ld	r24, Z+
    1d7a:	8f 01       	movw	r16, r30
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9d d3       	rcall	.+1850   	; 0x24bc <fputc>
    1d82:	61 10       	cpse	r6, r1
    1d84:	6a 94       	dec	r6
    1d86:	f1 e0       	ldi	r31, 0x01	; 1
    1d88:	cf 1a       	sub	r12, r31
    1d8a:	d1 08       	sbc	r13, r1
    1d8c:	c1 14       	cp	r12, r1
    1d8e:	d1 04       	cpc	r13, r1
    1d90:	79 f7       	brne	.-34     	; 0x1d70 <vfprintf+0x4ec>
    1d92:	e3 c0       	rjmp	.+454    	; 0x1f5a <vfprintf+0x6d6>
    1d94:	84 36       	cpi	r24, 0x64	; 100
    1d96:	11 f0       	breq	.+4      	; 0x1d9c <vfprintf+0x518>
    1d98:	89 36       	cpi	r24, 0x69	; 105
    1d9a:	49 f5       	brne	.+82     	; 0x1dee <vfprintf+0x56a>
    1d9c:	56 01       	movw	r10, r12
    1d9e:	27 ff       	sbrs	r18, 7
    1da0:	09 c0       	rjmp	.+18     	; 0x1db4 <vfprintf+0x530>
    1da2:	44 e0       	ldi	r20, 0x04	; 4
    1da4:	a4 0e       	add	r10, r20
    1da6:	b1 1c       	adc	r11, r1
    1da8:	f6 01       	movw	r30, r12
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	0a c0       	rjmp	.+20     	; 0x1dc8 <vfprintf+0x544>
    1db4:	f2 e0       	ldi	r31, 0x02	; 2
    1db6:	af 0e       	add	r10, r31
    1db8:	b1 1c       	adc	r11, r1
    1dba:	f6 01       	movw	r30, r12
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	88 27       	eor	r24, r24
    1dc2:	77 fd       	sbrc	r23, 7
    1dc4:	80 95       	com	r24
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	12 2f       	mov	r17, r18
    1dca:	1f 76       	andi	r17, 0x6F	; 111
    1dcc:	97 ff       	sbrs	r25, 7
    1dce:	08 c0       	rjmp	.+16     	; 0x1de0 <vfprintf+0x55c>
    1dd0:	90 95       	com	r25
    1dd2:	80 95       	com	r24
    1dd4:	70 95       	com	r23
    1dd6:	61 95       	neg	r22
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	8f 4f       	sbci	r24, 0xFF	; 255
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	10 68       	ori	r17, 0x80	; 128
    1de0:	2a e0       	ldi	r18, 0x0A	; 10
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	a4 01       	movw	r20, r8
    1de6:	fc d3       	rcall	.+2040   	; 0x25e0 <__ultoa_invert>
    1de8:	d8 2e       	mov	r13, r24
    1dea:	d8 18       	sub	r13, r8
    1dec:	3f c0       	rjmp	.+126    	; 0x1e6c <vfprintf+0x5e8>
    1dee:	12 2f       	mov	r17, r18
    1df0:	85 37       	cpi	r24, 0x75	; 117
    1df2:	21 f4       	brne	.+8      	; 0x1dfc <vfprintf+0x578>
    1df4:	1f 7e       	andi	r17, 0xEF	; 239
    1df6:	2a e0       	ldi	r18, 0x0A	; 10
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	1f c0       	rjmp	.+62     	; 0x1e3a <vfprintf+0x5b6>
    1dfc:	19 7f       	andi	r17, 0xF9	; 249
    1dfe:	8f 36       	cpi	r24, 0x6F	; 111
    1e00:	a1 f0       	breq	.+40     	; 0x1e2a <vfprintf+0x5a6>
    1e02:	20 f4       	brcc	.+8      	; 0x1e0c <vfprintf+0x588>
    1e04:	88 35       	cpi	r24, 0x58	; 88
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <vfprintf+0x586>
    1e08:	ab c0       	rjmp	.+342    	; 0x1f60 <vfprintf+0x6dc>
    1e0a:	0b c0       	rjmp	.+22     	; 0x1e22 <vfprintf+0x59e>
    1e0c:	80 37       	cpi	r24, 0x70	; 112
    1e0e:	21 f0       	breq	.+8      	; 0x1e18 <vfprintf+0x594>
    1e10:	88 37       	cpi	r24, 0x78	; 120
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <vfprintf+0x592>
    1e14:	a5 c0       	rjmp	.+330    	; 0x1f60 <vfprintf+0x6dc>
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <vfprintf+0x596>
    1e18:	10 61       	ori	r17, 0x10	; 16
    1e1a:	14 ff       	sbrs	r17, 4
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <vfprintf+0x5ac>
    1e1e:	14 60       	ori	r17, 0x04	; 4
    1e20:	07 c0       	rjmp	.+14     	; 0x1e30 <vfprintf+0x5ac>
    1e22:	24 ff       	sbrs	r18, 4
    1e24:	08 c0       	rjmp	.+16     	; 0x1e36 <vfprintf+0x5b2>
    1e26:	16 60       	ori	r17, 0x06	; 6
    1e28:	06 c0       	rjmp	.+12     	; 0x1e36 <vfprintf+0x5b2>
    1e2a:	28 e0       	ldi	r18, 0x08	; 8
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <vfprintf+0x5b6>
    1e30:	20 e1       	ldi	r18, 0x10	; 16
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <vfprintf+0x5b6>
    1e36:	20 e1       	ldi	r18, 0x10	; 16
    1e38:	32 e0       	ldi	r19, 0x02	; 2
    1e3a:	56 01       	movw	r10, r12
    1e3c:	17 ff       	sbrs	r17, 7
    1e3e:	09 c0       	rjmp	.+18     	; 0x1e52 <vfprintf+0x5ce>
    1e40:	f4 e0       	ldi	r31, 0x04	; 4
    1e42:	af 0e       	add	r10, r31
    1e44:	b1 1c       	adc	r11, r1
    1e46:	f6 01       	movw	r30, r12
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	08 c0       	rjmp	.+16     	; 0x1e62 <vfprintf+0x5de>
    1e52:	f2 e0       	ldi	r31, 0x02	; 2
    1e54:	af 0e       	add	r10, r31
    1e56:	b1 1c       	adc	r11, r1
    1e58:	f6 01       	movw	r30, r12
    1e5a:	60 81       	ld	r22, Z
    1e5c:	71 81       	ldd	r23, Z+1	; 0x01
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a4 01       	movw	r20, r8
    1e64:	bd d3       	rcall	.+1914   	; 0x25e0 <__ultoa_invert>
    1e66:	d8 2e       	mov	r13, r24
    1e68:	d8 18       	sub	r13, r8
    1e6a:	1f 77       	andi	r17, 0x7F	; 127
    1e6c:	16 ff       	sbrs	r17, 6
    1e6e:	0b c0       	rjmp	.+22     	; 0x1e86 <vfprintf+0x602>
    1e70:	21 2f       	mov	r18, r17
    1e72:	2e 7f       	andi	r18, 0xFE	; 254
    1e74:	d7 14       	cp	r13, r7
    1e76:	50 f4       	brcc	.+20     	; 0x1e8c <vfprintf+0x608>
    1e78:	14 ff       	sbrs	r17, 4
    1e7a:	0a c0       	rjmp	.+20     	; 0x1e90 <vfprintf+0x60c>
    1e7c:	12 fd       	sbrc	r17, 2
    1e7e:	08 c0       	rjmp	.+16     	; 0x1e90 <vfprintf+0x60c>
    1e80:	21 2f       	mov	r18, r17
    1e82:	2e 7e       	andi	r18, 0xEE	; 238
    1e84:	05 c0       	rjmp	.+10     	; 0x1e90 <vfprintf+0x60c>
    1e86:	0d 2d       	mov	r16, r13
    1e88:	21 2f       	mov	r18, r17
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <vfprintf+0x60e>
    1e8c:	0d 2d       	mov	r16, r13
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <vfprintf+0x60e>
    1e90:	07 2d       	mov	r16, r7
    1e92:	24 ff       	sbrs	r18, 4
    1e94:	0c c0       	rjmp	.+24     	; 0x1eae <vfprintf+0x62a>
    1e96:	fe 01       	movw	r30, r28
    1e98:	ed 0d       	add	r30, r13
    1e9a:	f1 1d       	adc	r31, r1
    1e9c:	80 81       	ld	r24, Z
    1e9e:	80 33       	cpi	r24, 0x30	; 48
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <vfprintf+0x622>
    1ea2:	29 7e       	andi	r18, 0xE9	; 233
    1ea4:	08 c0       	rjmp	.+16     	; 0x1eb6 <vfprintf+0x632>
    1ea6:	22 ff       	sbrs	r18, 2
    1ea8:	05 c0       	rjmp	.+10     	; 0x1eb4 <vfprintf+0x630>
    1eaa:	0e 5f       	subi	r16, 0xFE	; 254
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <vfprintf+0x632>
    1eae:	82 2f       	mov	r24, r18
    1eb0:	86 78       	andi	r24, 0x86	; 134
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <vfprintf+0x632>
    1eb4:	0f 5f       	subi	r16, 0xFF	; 255
    1eb6:	23 fd       	sbrc	r18, 3
    1eb8:	13 c0       	rjmp	.+38     	; 0x1ee0 <vfprintf+0x65c>
    1eba:	20 ff       	sbrs	r18, 0
    1ebc:	0e c0       	rjmp	.+28     	; 0x1eda <vfprintf+0x656>
    1ebe:	7d 2c       	mov	r7, r13
    1ec0:	06 15       	cp	r16, r6
    1ec2:	58 f4       	brcc	.+22     	; 0x1eda <vfprintf+0x656>
    1ec4:	76 0c       	add	r7, r6
    1ec6:	70 1a       	sub	r7, r16
    1ec8:	06 2d       	mov	r16, r6
    1eca:	07 c0       	rjmp	.+14     	; 0x1eda <vfprintf+0x656>
    1ecc:	b7 01       	movw	r22, r14
    1ece:	80 e2       	ldi	r24, 0x20	; 32
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	2a 8b       	std	Y+18, r18	; 0x12
    1ed4:	f3 d2       	rcall	.+1510   	; 0x24bc <fputc>
    1ed6:	0f 5f       	subi	r16, 0xFF	; 255
    1ed8:	2a 89       	ldd	r18, Y+18	; 0x12
    1eda:	06 15       	cp	r16, r6
    1edc:	b8 f3       	brcs	.-18     	; 0x1ecc <vfprintf+0x648>
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <vfprintf+0x664>
    1ee0:	06 15       	cp	r16, r6
    1ee2:	10 f4       	brcc	.+4      	; 0x1ee8 <vfprintf+0x664>
    1ee4:	60 1a       	sub	r6, r16
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <vfprintf+0x666>
    1ee8:	61 2c       	mov	r6, r1
    1eea:	24 ff       	sbrs	r18, 4
    1eec:	11 c0       	rjmp	.+34     	; 0x1f10 <vfprintf+0x68c>
    1eee:	b7 01       	movw	r22, r14
    1ef0:	80 e3       	ldi	r24, 0x30	; 48
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	2a 8b       	std	Y+18, r18	; 0x12
    1ef6:	e2 d2       	rcall	.+1476   	; 0x24bc <fputc>
    1ef8:	2a 89       	ldd	r18, Y+18	; 0x12
    1efa:	22 ff       	sbrs	r18, 2
    1efc:	1c c0       	rjmp	.+56     	; 0x1f36 <vfprintf+0x6b2>
    1efe:	21 ff       	sbrs	r18, 1
    1f00:	03 c0       	rjmp	.+6      	; 0x1f08 <vfprintf+0x684>
    1f02:	88 e5       	ldi	r24, 0x58	; 88
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <vfprintf+0x688>
    1f08:	88 e7       	ldi	r24, 0x78	; 120
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	b7 01       	movw	r22, r14
    1f0e:	0c c0       	rjmp	.+24     	; 0x1f28 <vfprintf+0x6a4>
    1f10:	82 2f       	mov	r24, r18
    1f12:	86 78       	andi	r24, 0x86	; 134
    1f14:	81 f0       	breq	.+32     	; 0x1f36 <vfprintf+0x6b2>
    1f16:	21 fd       	sbrc	r18, 1
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <vfprintf+0x69a>
    1f1a:	80 e2       	ldi	r24, 0x20	; 32
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <vfprintf+0x69c>
    1f1e:	8b e2       	ldi	r24, 0x2B	; 43
    1f20:	27 fd       	sbrc	r18, 7
    1f22:	8d e2       	ldi	r24, 0x2D	; 45
    1f24:	b7 01       	movw	r22, r14
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	c9 d2       	rcall	.+1426   	; 0x24bc <fputc>
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <vfprintf+0x6b2>
    1f2c:	b7 01       	movw	r22, r14
    1f2e:	80 e3       	ldi	r24, 0x30	; 48
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	c4 d2       	rcall	.+1416   	; 0x24bc <fputc>
    1f34:	7a 94       	dec	r7
    1f36:	d7 14       	cp	r13, r7
    1f38:	c8 f3       	brcs	.-14     	; 0x1f2c <vfprintf+0x6a8>
    1f3a:	da 94       	dec	r13
    1f3c:	f4 01       	movw	r30, r8
    1f3e:	ed 0d       	add	r30, r13
    1f40:	f1 1d       	adc	r31, r1
    1f42:	b7 01       	movw	r22, r14
    1f44:	80 81       	ld	r24, Z
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	b9 d2       	rcall	.+1394   	; 0x24bc <fputc>
    1f4a:	d1 10       	cpse	r13, r1
    1f4c:	f6 cf       	rjmp	.-20     	; 0x1f3a <vfprintf+0x6b6>
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <vfprintf+0x6d6>
    1f50:	b7 01       	movw	r22, r14
    1f52:	80 e2       	ldi	r24, 0x20	; 32
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	b2 d2       	rcall	.+1380   	; 0x24bc <fputc>
    1f58:	6a 94       	dec	r6
    1f5a:	61 10       	cpse	r6, r1
    1f5c:	f9 cf       	rjmp	.-14     	; 0x1f50 <vfprintf+0x6cc>
    1f5e:	b6 cc       	rjmp	.-1684   	; 0x18cc <vfprintf+0x48>
    1f60:	f7 01       	movw	r30, r14
    1f62:	26 81       	ldd	r18, Z+6	; 0x06
    1f64:	37 81       	ldd	r19, Z+7	; 0x07
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <vfprintf+0x6e8>
    1f68:	2f ef       	ldi	r18, 0xFF	; 255
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	62 96       	adiw	r28, 0x12	; 18
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	bf 90       	pop	r11
    1f8c:	af 90       	pop	r10
    1f8e:	9f 90       	pop	r9
    1f90:	8f 90       	pop	r8
    1f92:	7f 90       	pop	r7
    1f94:	6f 90       	pop	r6
    1f96:	5f 90       	pop	r5
    1f98:	4f 90       	pop	r4
    1f9a:	3f 90       	pop	r3
    1f9c:	2f 90       	pop	r2
    1f9e:	08 95       	ret

00001fa0 <__divmodhi4>:
    1fa0:	97 fb       	bst	r25, 7
    1fa2:	07 2e       	mov	r0, r23
    1fa4:	16 f4       	brtc	.+4      	; 0x1faa <__divmodhi4+0xa>
    1fa6:	00 94       	com	r0
    1fa8:	06 d0       	rcall	.+12     	; 0x1fb6 <__divmodhi4_neg1>
    1faa:	77 fd       	sbrc	r23, 7
    1fac:	08 d0       	rcall	.+16     	; 0x1fbe <__divmodhi4_neg2>
    1fae:	17 d0       	rcall	.+46     	; 0x1fde <__udivmodhi4>
    1fb0:	07 fc       	sbrc	r0, 7
    1fb2:	05 d0       	rcall	.+10     	; 0x1fbe <__divmodhi4_neg2>
    1fb4:	3e f4       	brtc	.+14     	; 0x1fc4 <__divmodhi4_exit>

00001fb6 <__divmodhi4_neg1>:
    1fb6:	90 95       	com	r25
    1fb8:	81 95       	neg	r24
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	08 95       	ret

00001fbe <__divmodhi4_neg2>:
    1fbe:	70 95       	com	r23
    1fc0:	61 95       	neg	r22
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255

00001fc4 <__divmodhi4_exit>:
    1fc4:	08 95       	ret

00001fc6 <__umulhisi3>:
    1fc6:	a2 9f       	mul	r26, r18
    1fc8:	b0 01       	movw	r22, r0
    1fca:	b3 9f       	mul	r27, r19
    1fcc:	c0 01       	movw	r24, r0
    1fce:	a3 9f       	mul	r26, r19
    1fd0:	01 d0       	rcall	.+2      	; 0x1fd4 <__umulhisi3+0xe>
    1fd2:	b2 9f       	mul	r27, r18
    1fd4:	70 0d       	add	r23, r0
    1fd6:	81 1d       	adc	r24, r1
    1fd8:	11 24       	eor	r1, r1
    1fda:	91 1d       	adc	r25, r1
    1fdc:	08 95       	ret

00001fde <__udivmodhi4>:
    1fde:	aa 1b       	sub	r26, r26
    1fe0:	bb 1b       	sub	r27, r27
    1fe2:	51 e1       	ldi	r21, 0x11	; 17
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <__udivmodhi4_ep>

00001fe6 <__udivmodhi4_loop>:
    1fe6:	aa 1f       	adc	r26, r26
    1fe8:	bb 1f       	adc	r27, r27
    1fea:	a6 17       	cp	r26, r22
    1fec:	b7 07       	cpc	r27, r23
    1fee:	10 f0       	brcs	.+4      	; 0x1ff4 <__udivmodhi4_ep>
    1ff0:	a6 1b       	sub	r26, r22
    1ff2:	b7 0b       	sbc	r27, r23

00001ff4 <__udivmodhi4_ep>:
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	5a 95       	dec	r21
    1ffa:	a9 f7       	brne	.-22     	; 0x1fe6 <__udivmodhi4_loop>
    1ffc:	80 95       	com	r24
    1ffe:	90 95       	com	r25
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	08 95       	ret

00002006 <calloc>:
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	68 9f       	mul	r22, r24
    2010:	80 01       	movw	r16, r0
    2012:	69 9f       	mul	r22, r25
    2014:	10 0d       	add	r17, r0
    2016:	78 9f       	mul	r23, r24
    2018:	10 0d       	add	r17, r0
    201a:	11 24       	eor	r1, r1
    201c:	c8 01       	movw	r24, r16
    201e:	0f d0       	rcall	.+30     	; 0x203e <malloc>
    2020:	c8 2f       	mov	r28, r24
    2022:	d9 2f       	mov	r29, r25
    2024:	20 97       	sbiw	r28, 0x00	; 0
    2026:	29 f0       	breq	.+10     	; 0x2032 <calloc+0x2c>
    2028:	a8 01       	movw	r20, r16
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	8c 2f       	mov	r24, r28
    2030:	23 d2       	rcall	.+1094   	; 0x2478 <memset>
    2032:	ce 01       	movw	r24, r28
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	08 95       	ret

0000203e <malloc>:
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	91 05       	cpc	r25, r1
    204a:	10 f4       	brcc	.+4      	; 0x2050 <malloc+0x12>
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	e0 91 3f 05 	lds	r30, 0x053F
    2054:	f0 91 40 05 	lds	r31, 0x0540
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	c0 e0       	ldi	r28, 0x00	; 0
    205e:	d0 e0       	ldi	r29, 0x00	; 0
    2060:	23 c0       	rjmp	.+70     	; 0x20a8 <malloc+0x6a>
    2062:	40 81       	ld	r20, Z
    2064:	51 81       	ldd	r21, Z+1	; 0x01
    2066:	48 17       	cp	r20, r24
    2068:	59 07       	cpc	r21, r25
    206a:	a8 f0       	brcs	.+42     	; 0x2096 <malloc+0x58>
    206c:	48 17       	cp	r20, r24
    206e:	59 07       	cpc	r21, r25
    2070:	61 f4       	brne	.+24     	; 0x208a <malloc+0x4c>
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	20 97       	sbiw	r28, 0x00	; 0
    2078:	19 f0       	breq	.+6      	; 0x2080 <malloc+0x42>
    207a:	9b 83       	std	Y+3, r25	; 0x03
    207c:	8a 83       	std	Y+2, r24	; 0x02
    207e:	2e c0       	rjmp	.+92     	; 0x20dc <malloc+0x9e>
    2080:	90 93 40 05 	sts	0x0540, r25
    2084:	80 93 3f 05 	sts	0x053F, r24
    2088:	29 c0       	rjmp	.+82     	; 0x20dc <malloc+0x9e>
    208a:	21 15       	cp	r18, r1
    208c:	31 05       	cpc	r19, r1
    208e:	29 f0       	breq	.+10     	; 0x209a <malloc+0x5c>
    2090:	42 17       	cp	r20, r18
    2092:	53 07       	cpc	r21, r19
    2094:	10 f0       	brcs	.+4      	; 0x209a <malloc+0x5c>
    2096:	a9 01       	movw	r20, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <malloc+0x60>
    209a:	be 01       	movw	r22, r28
    209c:	df 01       	movw	r26, r30
    209e:	02 81       	ldd	r16, Z+2	; 0x02
    20a0:	13 81       	ldd	r17, Z+3	; 0x03
    20a2:	ef 01       	movw	r28, r30
    20a4:	9a 01       	movw	r18, r20
    20a6:	f8 01       	movw	r30, r16
    20a8:	30 97       	sbiw	r30, 0x00	; 0
    20aa:	d9 f6       	brne	.-74     	; 0x2062 <malloc+0x24>
    20ac:	21 15       	cp	r18, r1
    20ae:	31 05       	cpc	r19, r1
    20b0:	09 f1       	breq	.+66     	; 0x20f4 <malloc+0xb6>
    20b2:	28 1b       	sub	r18, r24
    20b4:	39 0b       	sbc	r19, r25
    20b6:	24 30       	cpi	r18, 0x04	; 4
    20b8:	31 05       	cpc	r19, r1
    20ba:	90 f4       	brcc	.+36     	; 0x20e0 <malloc+0xa2>
    20bc:	12 96       	adiw	r26, 0x02	; 2
    20be:	8d 91       	ld	r24, X+
    20c0:	9c 91       	ld	r25, X
    20c2:	13 97       	sbiw	r26, 0x03	; 3
    20c4:	61 15       	cp	r22, r1
    20c6:	71 05       	cpc	r23, r1
    20c8:	21 f0       	breq	.+8      	; 0x20d2 <malloc+0x94>
    20ca:	fb 01       	movw	r30, r22
    20cc:	93 83       	std	Z+3, r25	; 0x03
    20ce:	82 83       	std	Z+2, r24	; 0x02
    20d0:	04 c0       	rjmp	.+8      	; 0x20da <malloc+0x9c>
    20d2:	90 93 40 05 	sts	0x0540, r25
    20d6:	80 93 3f 05 	sts	0x053F, r24
    20da:	fd 01       	movw	r30, r26
    20dc:	32 96       	adiw	r30, 0x02	; 2
    20de:	44 c0       	rjmp	.+136    	; 0x2168 <malloc+0x12a>
    20e0:	fd 01       	movw	r30, r26
    20e2:	e2 0f       	add	r30, r18
    20e4:	f3 1f       	adc	r31, r19
    20e6:	81 93       	st	Z+, r24
    20e8:	91 93       	st	Z+, r25
    20ea:	22 50       	subi	r18, 0x02	; 2
    20ec:	31 09       	sbc	r19, r1
    20ee:	2d 93       	st	X+, r18
    20f0:	3c 93       	st	X, r19
    20f2:	3a c0       	rjmp	.+116    	; 0x2168 <malloc+0x12a>
    20f4:	20 91 3d 05 	lds	r18, 0x053D
    20f8:	30 91 3e 05 	lds	r19, 0x053E
    20fc:	23 2b       	or	r18, r19
    20fe:	41 f4       	brne	.+16     	; 0x2110 <malloc+0xd2>
    2100:	20 91 02 01 	lds	r18, 0x0102
    2104:	30 91 03 01 	lds	r19, 0x0103
    2108:	30 93 3e 05 	sts	0x053E, r19
    210c:	20 93 3d 05 	sts	0x053D, r18
    2110:	20 91 00 01 	lds	r18, 0x0100
    2114:	30 91 01 01 	lds	r19, 0x0101
    2118:	21 15       	cp	r18, r1
    211a:	31 05       	cpc	r19, r1
    211c:	41 f4       	brne	.+16     	; 0x212e <malloc+0xf0>
    211e:	2d b7       	in	r18, 0x3d	; 61
    2120:	3e b7       	in	r19, 0x3e	; 62
    2122:	40 91 04 01 	lds	r20, 0x0104
    2126:	50 91 05 01 	lds	r21, 0x0105
    212a:	24 1b       	sub	r18, r20
    212c:	35 0b       	sbc	r19, r21
    212e:	e0 91 3d 05 	lds	r30, 0x053D
    2132:	f0 91 3e 05 	lds	r31, 0x053E
    2136:	e2 17       	cp	r30, r18
    2138:	f3 07       	cpc	r31, r19
    213a:	a0 f4       	brcc	.+40     	; 0x2164 <malloc+0x126>
    213c:	2e 1b       	sub	r18, r30
    213e:	3f 0b       	sbc	r19, r31
    2140:	28 17       	cp	r18, r24
    2142:	39 07       	cpc	r19, r25
    2144:	78 f0       	brcs	.+30     	; 0x2164 <malloc+0x126>
    2146:	ac 01       	movw	r20, r24
    2148:	4e 5f       	subi	r20, 0xFE	; 254
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
    214c:	24 17       	cp	r18, r20
    214e:	35 07       	cpc	r19, r21
    2150:	48 f0       	brcs	.+18     	; 0x2164 <malloc+0x126>
    2152:	4e 0f       	add	r20, r30
    2154:	5f 1f       	adc	r21, r31
    2156:	50 93 3e 05 	sts	0x053E, r21
    215a:	40 93 3d 05 	sts	0x053D, r20
    215e:	81 93       	st	Z+, r24
    2160:	91 93       	st	Z+, r25
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <malloc+0x12a>
    2164:	e0 e0       	ldi	r30, 0x00	; 0
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	cf 01       	movw	r24, r30
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <free>:
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	09 f4       	brne	.+2      	; 0x2186 <free+0x12>
    2184:	8f c0       	rjmp	.+286    	; 0x22a4 <free+0x130>
    2186:	dc 01       	movw	r26, r24
    2188:	12 97       	sbiw	r26, 0x02	; 2
    218a:	13 96       	adiw	r26, 0x03	; 3
    218c:	1c 92       	st	X, r1
    218e:	1e 92       	st	-X, r1
    2190:	12 97       	sbiw	r26, 0x02	; 2
    2192:	e0 90 3f 05 	lds	r14, 0x053F
    2196:	f0 90 40 05 	lds	r15, 0x0540
    219a:	e1 14       	cp	r14, r1
    219c:	f1 04       	cpc	r15, r1
    219e:	89 f4       	brne	.+34     	; 0x21c2 <free+0x4e>
    21a0:	2d 91       	ld	r18, X+
    21a2:	3c 91       	ld	r19, X
    21a4:	11 97       	sbiw	r26, 0x01	; 1
    21a6:	28 0f       	add	r18, r24
    21a8:	39 1f       	adc	r19, r25
    21aa:	80 91 3d 05 	lds	r24, 0x053D
    21ae:	90 91 3e 05 	lds	r25, 0x053E
    21b2:	82 17       	cp	r24, r18
    21b4:	93 07       	cpc	r25, r19
    21b6:	89 f5       	brne	.+98     	; 0x221a <free+0xa6>
    21b8:	b0 93 3e 05 	sts	0x053E, r27
    21bc:	a0 93 3d 05 	sts	0x053D, r26
    21c0:	71 c0       	rjmp	.+226    	; 0x22a4 <free+0x130>
    21c2:	e7 01       	movw	r28, r14
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <free+0x58>
    21ca:	ea 01       	movw	r28, r20
    21cc:	ca 17       	cp	r28, r26
    21ce:	db 07       	cpc	r29, r27
    21d0:	38 f4       	brcc	.+14     	; 0x21e0 <free+0x6c>
    21d2:	4a 81       	ldd	r20, Y+2	; 0x02
    21d4:	5b 81       	ldd	r21, Y+3	; 0x03
    21d6:	9e 01       	movw	r18, r28
    21d8:	41 15       	cp	r20, r1
    21da:	51 05       	cpc	r21, r1
    21dc:	b1 f7       	brne	.-20     	; 0x21ca <free+0x56>
    21de:	22 c0       	rjmp	.+68     	; 0x2224 <free+0xb0>
    21e0:	bc 01       	movw	r22, r24
    21e2:	62 50       	subi	r22, 0x02	; 2
    21e4:	71 09       	sbc	r23, r1
    21e6:	fb 01       	movw	r30, r22
    21e8:	d3 83       	std	Z+3, r29	; 0x03
    21ea:	c2 83       	std	Z+2, r28	; 0x02
    21ec:	00 81       	ld	r16, Z
    21ee:	11 81       	ldd	r17, Z+1	; 0x01
    21f0:	ac 01       	movw	r20, r24
    21f2:	40 0f       	add	r20, r16
    21f4:	51 1f       	adc	r21, r17
    21f6:	4c 17       	cp	r20, r28
    21f8:	5d 07       	cpc	r21, r29
    21fa:	61 f4       	brne	.+24     	; 0x2214 <free+0xa0>
    21fc:	48 81       	ld	r20, Y
    21fe:	59 81       	ldd	r21, Y+1	; 0x01
    2200:	40 0f       	add	r20, r16
    2202:	51 1f       	adc	r21, r17
    2204:	4e 5f       	subi	r20, 0xFE	; 254
    2206:	5f 4f       	sbci	r21, 0xFF	; 255
    2208:	51 83       	std	Z+1, r21	; 0x01
    220a:	40 83       	st	Z, r20
    220c:	4a 81       	ldd	r20, Y+2	; 0x02
    220e:	5b 81       	ldd	r21, Y+3	; 0x03
    2210:	53 83       	std	Z+3, r21	; 0x03
    2212:	42 83       	std	Z+2, r20	; 0x02
    2214:	21 15       	cp	r18, r1
    2216:	31 05       	cpc	r19, r1
    2218:	29 f4       	brne	.+10     	; 0x2224 <free+0xb0>
    221a:	b0 93 40 05 	sts	0x0540, r27
    221e:	a0 93 3f 05 	sts	0x053F, r26
    2222:	40 c0       	rjmp	.+128    	; 0x22a4 <free+0x130>
    2224:	f9 01       	movw	r30, r18
    2226:	b3 83       	std	Z+3, r27	; 0x03
    2228:	a2 83       	std	Z+2, r26	; 0x02
    222a:	e9 01       	movw	r28, r18
    222c:	69 91       	ld	r22, Y+
    222e:	79 91       	ld	r23, Y+
    2230:	c6 0f       	add	r28, r22
    2232:	d7 1f       	adc	r29, r23
    2234:	ac 17       	cp	r26, r28
    2236:	bd 07       	cpc	r27, r29
    2238:	79 f4       	brne	.+30     	; 0x2258 <free+0xe4>
    223a:	dc 01       	movw	r26, r24
    223c:	5e 91       	ld	r21, -X
    223e:	4e 91       	ld	r20, -X
    2240:	46 0f       	add	r20, r22
    2242:	57 1f       	adc	r21, r23
    2244:	4e 5f       	subi	r20, 0xFE	; 254
    2246:	5f 4f       	sbci	r21, 0xFF	; 255
    2248:	51 83       	std	Z+1, r21	; 0x01
    224a:	40 83       	st	Z, r20
    224c:	12 96       	adiw	r26, 0x02	; 2
    224e:	8d 91       	ld	r24, X+
    2250:	9c 91       	ld	r25, X
    2252:	13 97       	sbiw	r26, 0x03	; 3
    2254:	93 83       	std	Z+3, r25	; 0x03
    2256:	82 83       	std	Z+2, r24	; 0x02
    2258:	a0 e0       	ldi	r26, 0x00	; 0
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <free+0xee>
    225e:	d7 01       	movw	r26, r14
    2260:	7c 01       	movw	r14, r24
    2262:	f7 01       	movw	r30, r14
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	c9 f7       	brne	.-14     	; 0x225e <free+0xea>
    226c:	c7 01       	movw	r24, r14
    226e:	02 96       	adiw	r24, 0x02	; 2
    2270:	20 81       	ld	r18, Z
    2272:	31 81       	ldd	r19, Z+1	; 0x01
    2274:	82 0f       	add	r24, r18
    2276:	93 1f       	adc	r25, r19
    2278:	20 91 3d 05 	lds	r18, 0x053D
    227c:	30 91 3e 05 	lds	r19, 0x053E
    2280:	28 17       	cp	r18, r24
    2282:	39 07       	cpc	r19, r25
    2284:	79 f4       	brne	.+30     	; 0x22a4 <free+0x130>
    2286:	10 97       	sbiw	r26, 0x00	; 0
    2288:	29 f4       	brne	.+10     	; 0x2294 <free+0x120>
    228a:	10 92 40 05 	sts	0x0540, r1
    228e:	10 92 3f 05 	sts	0x053F, r1
    2292:	04 c0       	rjmp	.+8      	; 0x229c <free+0x128>
    2294:	13 96       	adiw	r26, 0x03	; 3
    2296:	1c 92       	st	X, r1
    2298:	1e 92       	st	-X, r1
    229a:	12 97       	sbiw	r26, 0x02	; 2
    229c:	f0 92 3e 05 	sts	0x053E, r15
    22a0:	e0 92 3d 05 	sts	0x053D, r14
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	08 95       	ret

000022b2 <__ftoa_engine>:
    22b2:	28 30       	cpi	r18, 0x08	; 8
    22b4:	08 f0       	brcs	.+2      	; 0x22b8 <__ftoa_engine+0x6>
    22b6:	27 e0       	ldi	r18, 0x07	; 7
    22b8:	33 27       	eor	r19, r19
    22ba:	da 01       	movw	r26, r20
    22bc:	99 0f       	add	r25, r25
    22be:	31 1d       	adc	r19, r1
    22c0:	87 fd       	sbrc	r24, 7
    22c2:	91 60       	ori	r25, 0x01	; 1
    22c4:	00 96       	adiw	r24, 0x00	; 0
    22c6:	61 05       	cpc	r22, r1
    22c8:	71 05       	cpc	r23, r1
    22ca:	39 f4       	brne	.+14     	; 0x22da <__ftoa_engine+0x28>
    22cc:	32 60       	ori	r19, 0x02	; 2
    22ce:	2e 5f       	subi	r18, 0xFE	; 254
    22d0:	3d 93       	st	X+, r19
    22d2:	30 e3       	ldi	r19, 0x30	; 48
    22d4:	2a 95       	dec	r18
    22d6:	e1 f7       	brne	.-8      	; 0x22d0 <__ftoa_engine+0x1e>
    22d8:	08 95       	ret
    22da:	9f 3f       	cpi	r25, 0xFF	; 255
    22dc:	30 f0       	brcs	.+12     	; 0x22ea <__ftoa_engine+0x38>
    22de:	80 38       	cpi	r24, 0x80	; 128
    22e0:	71 05       	cpc	r23, r1
    22e2:	61 05       	cpc	r22, r1
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <__ftoa_engine+0x36>
    22e6:	3c 5f       	subi	r19, 0xFC	; 252
    22e8:	3c 5f       	subi	r19, 0xFC	; 252
    22ea:	3d 93       	st	X+, r19
    22ec:	91 30       	cpi	r25, 0x01	; 1
    22ee:	08 f0       	brcs	.+2      	; 0x22f2 <__ftoa_engine+0x40>
    22f0:	80 68       	ori	r24, 0x80	; 128
    22f2:	91 1d       	adc	r25, r1
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	1f 93       	push	r17
    22fa:	0f 93       	push	r16
    22fc:	ff 92       	push	r15
    22fe:	ef 92       	push	r14
    2300:	19 2f       	mov	r17, r25
    2302:	98 7f       	andi	r25, 0xF8	; 248
    2304:	96 95       	lsr	r25
    2306:	e9 2f       	mov	r30, r25
    2308:	96 95       	lsr	r25
    230a:	96 95       	lsr	r25
    230c:	e9 0f       	add	r30, r25
    230e:	ff 27       	eor	r31, r31
    2310:	e2 51       	subi	r30, 0x12	; 18
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	99 27       	eor	r25, r25
    2316:	33 27       	eor	r19, r19
    2318:	ee 24       	eor	r14, r14
    231a:	ff 24       	eor	r15, r15
    231c:	a7 01       	movw	r20, r14
    231e:	e7 01       	movw	r28, r14
    2320:	05 90       	lpm	r0, Z+
    2322:	08 94       	sec
    2324:	07 94       	ror	r0
    2326:	28 f4       	brcc	.+10     	; 0x2332 <__ftoa_engine+0x80>
    2328:	36 0f       	add	r19, r22
    232a:	e7 1e       	adc	r14, r23
    232c:	f8 1e       	adc	r15, r24
    232e:	49 1f       	adc	r20, r25
    2330:	51 1d       	adc	r21, r1
    2332:	66 0f       	add	r22, r22
    2334:	77 1f       	adc	r23, r23
    2336:	88 1f       	adc	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	06 94       	lsr	r0
    233c:	a1 f7       	brne	.-24     	; 0x2326 <__ftoa_engine+0x74>
    233e:	05 90       	lpm	r0, Z+
    2340:	07 94       	ror	r0
    2342:	28 f4       	brcc	.+10     	; 0x234e <__ftoa_engine+0x9c>
    2344:	e7 0e       	add	r14, r23
    2346:	f8 1e       	adc	r15, r24
    2348:	49 1f       	adc	r20, r25
    234a:	56 1f       	adc	r21, r22
    234c:	c1 1d       	adc	r28, r1
    234e:	77 0f       	add	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	66 1f       	adc	r22, r22
    2356:	06 94       	lsr	r0
    2358:	a1 f7       	brne	.-24     	; 0x2342 <__ftoa_engine+0x90>
    235a:	05 90       	lpm	r0, Z+
    235c:	07 94       	ror	r0
    235e:	28 f4       	brcc	.+10     	; 0x236a <__ftoa_engine+0xb8>
    2360:	f8 0e       	add	r15, r24
    2362:	49 1f       	adc	r20, r25
    2364:	56 1f       	adc	r21, r22
    2366:	c7 1f       	adc	r28, r23
    2368:	d1 1d       	adc	r29, r1
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	66 1f       	adc	r22, r22
    2370:	77 1f       	adc	r23, r23
    2372:	06 94       	lsr	r0
    2374:	a1 f7       	brne	.-24     	; 0x235e <__ftoa_engine+0xac>
    2376:	05 90       	lpm	r0, Z+
    2378:	07 94       	ror	r0
    237a:	20 f4       	brcc	.+8      	; 0x2384 <__ftoa_engine+0xd2>
    237c:	49 0f       	add	r20, r25
    237e:	56 1f       	adc	r21, r22
    2380:	c7 1f       	adc	r28, r23
    2382:	d8 1f       	adc	r29, r24
    2384:	99 0f       	add	r25, r25
    2386:	66 1f       	adc	r22, r22
    2388:	77 1f       	adc	r23, r23
    238a:	88 1f       	adc	r24, r24
    238c:	06 94       	lsr	r0
    238e:	a9 f7       	brne	.-22     	; 0x237a <__ftoa_engine+0xc8>
    2390:	84 91       	lpm	r24, Z
    2392:	10 95       	com	r17
    2394:	17 70       	andi	r17, 0x07	; 7
    2396:	41 f0       	breq	.+16     	; 0x23a8 <__ftoa_engine+0xf6>
    2398:	d6 95       	lsr	r29
    239a:	c7 95       	ror	r28
    239c:	57 95       	ror	r21
    239e:	47 95       	ror	r20
    23a0:	f7 94       	ror	r15
    23a2:	e7 94       	ror	r14
    23a4:	1a 95       	dec	r17
    23a6:	c1 f7       	brne	.-16     	; 0x2398 <__ftoa_engine+0xe6>
    23a8:	e4 e9       	ldi	r30, 0x94	; 148
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	68 94       	set
    23ae:	15 90       	lpm	r1, Z+
    23b0:	15 91       	lpm	r17, Z+
    23b2:	35 91       	lpm	r19, Z+
    23b4:	65 91       	lpm	r22, Z+
    23b6:	95 91       	lpm	r25, Z+
    23b8:	05 90       	lpm	r0, Z+
    23ba:	7f e2       	ldi	r23, 0x2F	; 47
    23bc:	73 95       	inc	r23
    23be:	e1 18       	sub	r14, r1
    23c0:	f1 0a       	sbc	r15, r17
    23c2:	43 0b       	sbc	r20, r19
    23c4:	56 0b       	sbc	r21, r22
    23c6:	c9 0b       	sbc	r28, r25
    23c8:	d0 09       	sbc	r29, r0
    23ca:	c0 f7       	brcc	.-16     	; 0x23bc <__ftoa_engine+0x10a>
    23cc:	e1 0c       	add	r14, r1
    23ce:	f1 1e       	adc	r15, r17
    23d0:	43 1f       	adc	r20, r19
    23d2:	56 1f       	adc	r21, r22
    23d4:	c9 1f       	adc	r28, r25
    23d6:	d0 1d       	adc	r29, r0
    23d8:	7e f4       	brtc	.+30     	; 0x23f8 <__ftoa_engine+0x146>
    23da:	70 33       	cpi	r23, 0x30	; 48
    23dc:	11 f4       	brne	.+4      	; 0x23e2 <__ftoa_engine+0x130>
    23de:	8a 95       	dec	r24
    23e0:	e6 cf       	rjmp	.-52     	; 0x23ae <__ftoa_engine+0xfc>
    23e2:	e8 94       	clt
    23e4:	01 50       	subi	r16, 0x01	; 1
    23e6:	30 f0       	brcs	.+12     	; 0x23f4 <__ftoa_engine+0x142>
    23e8:	08 0f       	add	r16, r24
    23ea:	0a f4       	brpl	.+2      	; 0x23ee <__ftoa_engine+0x13c>
    23ec:	00 27       	eor	r16, r16
    23ee:	02 17       	cp	r16, r18
    23f0:	08 f4       	brcc	.+2      	; 0x23f4 <__ftoa_engine+0x142>
    23f2:	20 2f       	mov	r18, r16
    23f4:	23 95       	inc	r18
    23f6:	02 2f       	mov	r16, r18
    23f8:	7a 33       	cpi	r23, 0x3A	; 58
    23fa:	28 f0       	brcs	.+10     	; 0x2406 <__ftoa_engine+0x154>
    23fc:	79 e3       	ldi	r23, 0x39	; 57
    23fe:	7d 93       	st	X+, r23
    2400:	2a 95       	dec	r18
    2402:	e9 f7       	brne	.-6      	; 0x23fe <__ftoa_engine+0x14c>
    2404:	10 c0       	rjmp	.+32     	; 0x2426 <__ftoa_engine+0x174>
    2406:	7d 93       	st	X+, r23
    2408:	2a 95       	dec	r18
    240a:	89 f6       	brne	.-94     	; 0x23ae <__ftoa_engine+0xfc>
    240c:	06 94       	lsr	r0
    240e:	97 95       	ror	r25
    2410:	67 95       	ror	r22
    2412:	37 95       	ror	r19
    2414:	17 95       	ror	r17
    2416:	17 94       	ror	r1
    2418:	e1 18       	sub	r14, r1
    241a:	f1 0a       	sbc	r15, r17
    241c:	43 0b       	sbc	r20, r19
    241e:	56 0b       	sbc	r21, r22
    2420:	c9 0b       	sbc	r28, r25
    2422:	d0 09       	sbc	r29, r0
    2424:	98 f0       	brcs	.+38     	; 0x244c <__ftoa_engine+0x19a>
    2426:	23 95       	inc	r18
    2428:	7e 91       	ld	r23, -X
    242a:	73 95       	inc	r23
    242c:	7a 33       	cpi	r23, 0x3A	; 58
    242e:	08 f0       	brcs	.+2      	; 0x2432 <__ftoa_engine+0x180>
    2430:	70 e3       	ldi	r23, 0x30	; 48
    2432:	7c 93       	st	X, r23
    2434:	20 13       	cpse	r18, r16
    2436:	b8 f7       	brcc	.-18     	; 0x2426 <__ftoa_engine+0x174>
    2438:	7e 91       	ld	r23, -X
    243a:	70 61       	ori	r23, 0x10	; 16
    243c:	7d 93       	st	X+, r23
    243e:	30 f0       	brcs	.+12     	; 0x244c <__ftoa_engine+0x19a>
    2440:	83 95       	inc	r24
    2442:	71 e3       	ldi	r23, 0x31	; 49
    2444:	7d 93       	st	X+, r23
    2446:	70 e3       	ldi	r23, 0x30	; 48
    2448:	2a 95       	dec	r18
    244a:	e1 f7       	brne	.-8      	; 0x2444 <__ftoa_engine+0x192>
    244c:	11 24       	eor	r1, r1
    244e:	ef 90       	pop	r14
    2450:	ff 90       	pop	r15
    2452:	0f 91       	pop	r16
    2454:	1f 91       	pop	r17
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	99 27       	eor	r25, r25
    245c:	87 fd       	sbrc	r24, 7
    245e:	90 95       	com	r25
    2460:	08 95       	ret

00002462 <strnlen_P>:
    2462:	fc 01       	movw	r30, r24
    2464:	05 90       	lpm	r0, Z+
    2466:	61 50       	subi	r22, 0x01	; 1
    2468:	70 40       	sbci	r23, 0x00	; 0
    246a:	01 10       	cpse	r0, r1
    246c:	d8 f7       	brcc	.-10     	; 0x2464 <strnlen_P+0x2>
    246e:	80 95       	com	r24
    2470:	90 95       	com	r25
    2472:	8e 0f       	add	r24, r30
    2474:	9f 1f       	adc	r25, r31
    2476:	08 95       	ret

00002478 <memset>:
    2478:	dc 01       	movw	r26, r24
    247a:	01 c0       	rjmp	.+2      	; 0x247e <memset+0x6>
    247c:	6d 93       	st	X+, r22
    247e:	41 50       	subi	r20, 0x01	; 1
    2480:	50 40       	sbci	r21, 0x00	; 0
    2482:	e0 f7       	brcc	.-8      	; 0x247c <memset+0x4>
    2484:	08 95       	ret

00002486 <strcmp>:
    2486:	fb 01       	movw	r30, r22
    2488:	dc 01       	movw	r26, r24
    248a:	8d 91       	ld	r24, X+
    248c:	01 90       	ld	r0, Z+
    248e:	80 19       	sub	r24, r0
    2490:	01 10       	cpse	r0, r1
    2492:	d9 f3       	breq	.-10     	; 0x248a <strcmp+0x4>
    2494:	99 0b       	sbc	r25, r25
    2496:	08 95       	ret

00002498 <strcpy>:
    2498:	fb 01       	movw	r30, r22
    249a:	dc 01       	movw	r26, r24
    249c:	01 90       	ld	r0, Z+
    249e:	0d 92       	st	X+, r0
    24a0:	00 20       	and	r0, r0
    24a2:	e1 f7       	brne	.-8      	; 0x249c <strcpy+0x4>
    24a4:	08 95       	ret

000024a6 <strnlen>:
    24a6:	fc 01       	movw	r30, r24
    24a8:	61 50       	subi	r22, 0x01	; 1
    24aa:	70 40       	sbci	r23, 0x00	; 0
    24ac:	01 90       	ld	r0, Z+
    24ae:	01 10       	cpse	r0, r1
    24b0:	d8 f7       	brcc	.-10     	; 0x24a8 <strnlen+0x2>
    24b2:	80 95       	com	r24
    24b4:	90 95       	com	r25
    24b6:	8e 0f       	add	r24, r30
    24b8:	9f 1f       	adc	r25, r31
    24ba:	08 95       	ret

000024bc <fputc>:
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	8c 01       	movw	r16, r24
    24c6:	eb 01       	movw	r28, r22
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	81 fd       	sbrc	r24, 1
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <fputc+0x18>
    24ce:	0f ef       	ldi	r16, 0xFF	; 255
    24d0:	1f ef       	ldi	r17, 0xFF	; 255
    24d2:	1a c0       	rjmp	.+52     	; 0x2508 <fputc+0x4c>
    24d4:	82 ff       	sbrs	r24, 2
    24d6:	0d c0       	rjmp	.+26     	; 0x24f2 <fputc+0x36>
    24d8:	2e 81       	ldd	r18, Y+6	; 0x06
    24da:	3f 81       	ldd	r19, Y+7	; 0x07
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	28 17       	cp	r18, r24
    24e2:	39 07       	cpc	r19, r25
    24e4:	64 f4       	brge	.+24     	; 0x24fe <fputc+0x42>
    24e6:	e8 81       	ld	r30, Y
    24e8:	f9 81       	ldd	r31, Y+1	; 0x01
    24ea:	01 93       	st	Z+, r16
    24ec:	f9 83       	std	Y+1, r31	; 0x01
    24ee:	e8 83       	st	Y, r30
    24f0:	06 c0       	rjmp	.+12     	; 0x24fe <fputc+0x42>
    24f2:	e8 85       	ldd	r30, Y+8	; 0x08
    24f4:	f9 85       	ldd	r31, Y+9	; 0x09
    24f6:	80 2f       	mov	r24, r16
    24f8:	09 95       	icall
    24fa:	89 2b       	or	r24, r25
    24fc:	41 f7       	brne	.-48     	; 0x24ce <fputc+0x12>
    24fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2500:	9f 81       	ldd	r25, Y+7	; 0x07
    2502:	01 96       	adiw	r24, 0x01	; 1
    2504:	9f 83       	std	Y+7, r25	; 0x07
    2506:	8e 83       	std	Y+6, r24	; 0x06
    2508:	c8 01       	movw	r24, r16
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	08 95       	ret

00002514 <sprintf>:
    2514:	0f 93       	push	r16
    2516:	1f 93       	push	r17
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	2e 97       	sbiw	r28, 0x0e	; 14
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	0d 89       	ldd	r16, Y+21	; 0x15
    252e:	1e 89       	ldd	r17, Y+22	; 0x16
    2530:	86 e0       	ldi	r24, 0x06	; 6
    2532:	8c 83       	std	Y+4, r24	; 0x04
    2534:	1a 83       	std	Y+2, r17	; 0x02
    2536:	09 83       	std	Y+1, r16	; 0x01
    2538:	8f ef       	ldi	r24, 0xFF	; 255
    253a:	9f e7       	ldi	r25, 0x7F	; 127
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
    2540:	ce 01       	movw	r24, r28
    2542:	49 96       	adiw	r24, 0x19	; 25
    2544:	ac 01       	movw	r20, r24
    2546:	6f 89       	ldd	r22, Y+23	; 0x17
    2548:	78 8d       	ldd	r23, Y+24	; 0x18
    254a:	ce 01       	movw	r24, r28
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	9a d9       	rcall	.-3276   	; 0x1884 <vfprintf>
    2550:	ef 81       	ldd	r30, Y+7	; 0x07
    2552:	f8 85       	ldd	r31, Y+8	; 0x08
    2554:	e0 0f       	add	r30, r16
    2556:	f1 1f       	adc	r31, r17
    2558:	10 82       	st	Z, r1
    255a:	2e 96       	adiw	r28, 0x0e	; 14
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	1f 91       	pop	r17
    256c:	0f 91       	pop	r16
    256e:	08 95       	ret

00002570 <vsnprintf>:
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	2e 97       	sbiw	r28, 0x0e	; 14
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	8c 01       	movw	r16, r24
    258a:	ca 01       	movw	r24, r20
    258c:	46 e0       	ldi	r20, 0x06	; 6
    258e:	4c 83       	std	Y+4, r20	; 0x04
    2590:	1a 83       	std	Y+2, r17	; 0x02
    2592:	09 83       	std	Y+1, r16	; 0x01
    2594:	77 ff       	sbrs	r23, 7
    2596:	02 c0       	rjmp	.+4      	; 0x259c <vsnprintf+0x2c>
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e8       	ldi	r23, 0x80	; 128
    259c:	61 50       	subi	r22, 0x01	; 1
    259e:	71 09       	sbc	r23, r1
    25a0:	7e 83       	std	Y+6, r23	; 0x06
    25a2:	6d 83       	std	Y+5, r22	; 0x05
    25a4:	a9 01       	movw	r20, r18
    25a6:	bc 01       	movw	r22, r24
    25a8:	ce 01       	movw	r24, r28
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	6b d9       	rcall	.-3370   	; 0x1884 <vfprintf>
    25ae:	4d 81       	ldd	r20, Y+5	; 0x05
    25b0:	5e 81       	ldd	r21, Y+6	; 0x06
    25b2:	57 fd       	sbrc	r21, 7
    25b4:	0a c0       	rjmp	.+20     	; 0x25ca <vsnprintf+0x5a>
    25b6:	2f 81       	ldd	r18, Y+7	; 0x07
    25b8:	38 85       	ldd	r19, Y+8	; 0x08
    25ba:	42 17       	cp	r20, r18
    25bc:	53 07       	cpc	r21, r19
    25be:	0c f4       	brge	.+2      	; 0x25c2 <vsnprintf+0x52>
    25c0:	9a 01       	movw	r18, r20
    25c2:	f8 01       	movw	r30, r16
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	10 82       	st	Z, r1
    25ca:	2e 96       	adiw	r28, 0x0e	; 14
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	08 95       	ret

000025e0 <__ultoa_invert>:
    25e0:	fa 01       	movw	r30, r20
    25e2:	aa 27       	eor	r26, r26
    25e4:	28 30       	cpi	r18, 0x08	; 8
    25e6:	51 f1       	breq	.+84     	; 0x263c <__ultoa_invert+0x5c>
    25e8:	20 31       	cpi	r18, 0x10	; 16
    25ea:	81 f1       	breq	.+96     	; 0x264c <__ultoa_invert+0x6c>
    25ec:	e8 94       	clt
    25ee:	6f 93       	push	r22
    25f0:	6e 7f       	andi	r22, 0xFE	; 254
    25f2:	6e 5f       	subi	r22, 0xFE	; 254
    25f4:	7f 4f       	sbci	r23, 0xFF	; 255
    25f6:	8f 4f       	sbci	r24, 0xFF	; 255
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	af 4f       	sbci	r26, 0xFF	; 255
    25fc:	b1 e0       	ldi	r27, 0x01	; 1
    25fe:	3e d0       	rcall	.+124    	; 0x267c <__ultoa_invert+0x9c>
    2600:	b4 e0       	ldi	r27, 0x04	; 4
    2602:	3c d0       	rcall	.+120    	; 0x267c <__ultoa_invert+0x9c>
    2604:	67 0f       	add	r22, r23
    2606:	78 1f       	adc	r23, r24
    2608:	89 1f       	adc	r24, r25
    260a:	9a 1f       	adc	r25, r26
    260c:	a1 1d       	adc	r26, r1
    260e:	68 0f       	add	r22, r24
    2610:	79 1f       	adc	r23, r25
    2612:	8a 1f       	adc	r24, r26
    2614:	91 1d       	adc	r25, r1
    2616:	a1 1d       	adc	r26, r1
    2618:	6a 0f       	add	r22, r26
    261a:	71 1d       	adc	r23, r1
    261c:	81 1d       	adc	r24, r1
    261e:	91 1d       	adc	r25, r1
    2620:	a1 1d       	adc	r26, r1
    2622:	20 d0       	rcall	.+64     	; 0x2664 <__ultoa_invert+0x84>
    2624:	09 f4       	brne	.+2      	; 0x2628 <__ultoa_invert+0x48>
    2626:	68 94       	set
    2628:	3f 91       	pop	r19
    262a:	2a e0       	ldi	r18, 0x0A	; 10
    262c:	26 9f       	mul	r18, r22
    262e:	11 24       	eor	r1, r1
    2630:	30 19       	sub	r19, r0
    2632:	30 5d       	subi	r19, 0xD0	; 208
    2634:	31 93       	st	Z+, r19
    2636:	de f6       	brtc	.-74     	; 0x25ee <__ultoa_invert+0xe>
    2638:	cf 01       	movw	r24, r30
    263a:	08 95       	ret
    263c:	46 2f       	mov	r20, r22
    263e:	47 70       	andi	r20, 0x07	; 7
    2640:	40 5d       	subi	r20, 0xD0	; 208
    2642:	41 93       	st	Z+, r20
    2644:	b3 e0       	ldi	r27, 0x03	; 3
    2646:	0f d0       	rcall	.+30     	; 0x2666 <__ultoa_invert+0x86>
    2648:	c9 f7       	brne	.-14     	; 0x263c <__ultoa_invert+0x5c>
    264a:	f6 cf       	rjmp	.-20     	; 0x2638 <__ultoa_invert+0x58>
    264c:	46 2f       	mov	r20, r22
    264e:	4f 70       	andi	r20, 0x0F	; 15
    2650:	40 5d       	subi	r20, 0xD0	; 208
    2652:	4a 33       	cpi	r20, 0x3A	; 58
    2654:	18 f0       	brcs	.+6      	; 0x265c <__ultoa_invert+0x7c>
    2656:	49 5d       	subi	r20, 0xD9	; 217
    2658:	31 fd       	sbrc	r19, 1
    265a:	40 52       	subi	r20, 0x20	; 32
    265c:	41 93       	st	Z+, r20
    265e:	02 d0       	rcall	.+4      	; 0x2664 <__ultoa_invert+0x84>
    2660:	a9 f7       	brne	.-22     	; 0x264c <__ultoa_invert+0x6c>
    2662:	ea cf       	rjmp	.-44     	; 0x2638 <__ultoa_invert+0x58>
    2664:	b4 e0       	ldi	r27, 0x04	; 4
    2666:	a6 95       	lsr	r26
    2668:	97 95       	ror	r25
    266a:	87 95       	ror	r24
    266c:	77 95       	ror	r23
    266e:	67 95       	ror	r22
    2670:	ba 95       	dec	r27
    2672:	c9 f7       	brne	.-14     	; 0x2666 <__ultoa_invert+0x86>
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	61 05       	cpc	r22, r1
    2678:	71 05       	cpc	r23, r1
    267a:	08 95       	ret
    267c:	9b 01       	movw	r18, r22
    267e:	ac 01       	movw	r20, r24
    2680:	0a 2e       	mov	r0, r26
    2682:	06 94       	lsr	r0
    2684:	57 95       	ror	r21
    2686:	47 95       	ror	r20
    2688:	37 95       	ror	r19
    268a:	27 95       	ror	r18
    268c:	ba 95       	dec	r27
    268e:	c9 f7       	brne	.-14     	; 0x2682 <__ultoa_invert+0xa2>
    2690:	62 0f       	add	r22, r18
    2692:	73 1f       	adc	r23, r19
    2694:	84 1f       	adc	r24, r20
    2696:	95 1f       	adc	r25, r21
    2698:	a0 1d       	adc	r26, r0
    269a:	08 95       	ret

0000269c <_exit>:
    269c:	f8 94       	cli

0000269e <__stop_program>:
    269e:	ff cf       	rjmp	.-2      	; 0x269e <__stop_program>
